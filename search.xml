<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>215. Kth Largest Element in an Array</title>
    <url>/2020/08/02/215.%20Kth%20Largest%20Element%20in%20an%20Array/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: [3,2,1,5,6,4] and k &#x3D; 2</span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>Example 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,2,3,1,2,4,5,5,6] and k &#x3D; 4</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p>Note:<br>You may assume k is always valid, 1 ≤ k ≤ array’s length.</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>排序后，第k-1个元素即是目标元素。</p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @param &#123;number[]&#125; nums</span><br><span class="line"> * @param &#123;number&#125; k</span><br><span class="line"> * @return &#123;number&#125;</span><br><span class="line"> *&#x2F;</span><br><span class="line">var findKthLargest &#x3D; function(nums, k) &#123;</span><br><span class="line">    nums.sort((a, b) &#x3D;&gt; &#123;return b-a&#125;);</span><br><span class="line">    console.log(nums)</span><br><span class="line">    return nums[k-1]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>时间复杂度：//<br>空间复杂度：O(1)</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>653. Two Sum IV - Input is a BST</title>
    <url>/2020/08/02/653.%20Two%20Sum%20IV%20-%20Input%20is%20a%20BST/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that their sum is equal to the given target.</p>
<p>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">    5</span><br><span class="line">   &#x2F; \</span><br><span class="line">  3   6</span><br><span class="line"> &#x2F; \   \</span><br><span class="line">2   4   7</span><br><span class="line"></span><br><span class="line">Target &#x3D; 9</span><br><span class="line"></span><br><span class="line">Output: True</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>Example 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">    5</span><br><span class="line">   &#x2F; \</span><br><span class="line">  3   6</span><br><span class="line"> &#x2F; \   \</span><br><span class="line">2   4   7</span><br><span class="line"></span><br><span class="line">Target &#x3D; 28</span><br><span class="line"></span><br><span class="line">Output: False</span><br></pre></td></tr></table></figure>

<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>对二叉搜索树进行深度遍历，题中要求为，2个元素相加为target，所以新建一个<code>set</code>，保存遍历的每一个数据，同时在遍历过程中，用<code>target-root.val</code>，若set中存在<code>target-root.val</code>，则满足题目条件，最后，分别到左右子树继续进行遍历。</p>
<p>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findTarget = <span class="function"><span class="keyword">function</span>(<span class="params">root, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">set</span> = new Set();</span><br><span class="line">    return dfs(root);</span><br><span class="line">    </span><br><span class="line">    function dfs(root) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">set</span>.has(k - root.val)) </span><br><span class="line">            return true;</span><br><span class="line">        <span class="keyword">set</span>.add(root.val);</span><br><span class="line">        return dfs(root.left) || dfs(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：O(n)</p>
<p>空间复杂度：O(n)</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>1395. Count Number of Teams</title>
    <url>/2020/07/31/1395.%20Count%20Number%20of%20Teams%20/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>There are n soldiers standing in a line. Each soldier is assigned a unique rating value.</p>
<p>You have to form a team of 3 soldiers amongst them under the following rules:</p>
<p>Choose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).<br>A team is valid if:  (rating[i] &lt; rating[j] &lt; rating[k]) or (rating[i] &gt; rating[j] &gt; rating[k]) where (0 &lt;= i &lt; j &lt; k &lt; n).<br>Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).</p>
<p>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: rating &#x3D; [2,5,3,4,1]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1).</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>Example 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: rating &#x3D; [2,1,3]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: We can&#39;t form any team given the conditions.</span><br></pre></td></tr></table></figure>

<p>Example 3:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: rating &#x3D; [1,2,3,4]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>
<p>Constraints:</p>
<ul>
<li>n == rating.length</li>
<li>1 &lt;= n &lt;= 200</li>
<li>1 &lt;= rating[i] &lt;= 10^5</li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>暴力解法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numTeams = <span class="function"><span class="keyword">function</span>(<span class="params">rating</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = rating.length;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> k = j + <span class="number">1</span>; k &lt; n; ++k) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rating[i] &lt; rating[j] &amp;&amp; rating[j] &lt; rating[k] || rating[i] &gt; rating[j] &amp;&amp; rating[j] &gt; rating[k]) &#123;</span><br><span class="line">                    result++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：O(n3)<br>空间复杂度：O(1)</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>287. Find the Duplicate Number</title>
    <url>/2020/07/30/287.%20Find%20the%20Duplicate%20Number/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.</p>
<p>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,3,4,2,2]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Example 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,1,3,4,2]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>Note:</p>
<ul>
<li>You must not modify the array (assume the array is read only).</li>
<li>You must use only constant, O(1) extra space.</li>
<li>Your runtime complexity should be less than O(n2).</li>
<li>There is only one duplicate number in the array, but it could be repeated more than once.</li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>二分法</p>
<ul>
<li>数组中的数范围是确定的，并且，给定一个数k，如果小于等于k的数的个数是大于k的，那么说明重复的数一定在[left,k]中。</li>
<li>对于一个数k而言，如果[left,k]中没有重复元素的话，小于等于该元素的个数最多有k个，如果多余k个说明一定存在重复元素。</li>
<li>即定义一个中位数，值为选定nums集合内最大值和最小值的平均值。如果：小于等于 4 的个数如果严格大于 4 个，此时重复元素一定出现在 [1, 4] 区间里。</li>
</ul>
<p>代码入戏：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> findDuplicate = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> low = <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> high = nums.length - <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (low &lt; high)&#123;</span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">const</span> mid = low + (high-low) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> nums)&#123;</span><br><span class="line">            <span class="keyword">if</span> (num&lt;=mid)&#123;</span><br><span class="line">                count++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= mid)&#123;</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            high = mid</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(low)</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：O(nlg(n));<br>空间复杂度：O(1)</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>53. Maximum Subarray</title>
    <url>/2020/07/30/53-Maximum-Subarray/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p>
<p>Example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [-2,1,-3,4,-1,2,1,-5,4],</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: [4,-1,2,1] has the largest sum &#x3D; 6.</span><br><span class="line">Follow up:</span><br><span class="line"></span><br><span class="line">If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>目标是获取连续子数组的最大和；</li>
<li>进行累加的过程中，选择维护两个变量，累加和sum以及最大值max；</li>
<li>解题过程中，需要保持sum最大，max最大；</li>
<li>当前索引idx处，进行累加运算，此操作可能使sum变小，或者变大；</li>
<li>sum变小情况下，需进行维护sum最大操作，sum最大值在sum与nums[idx]中产生；</li>
<li>即将sum与数组nums[i]值进行比较，使得sum总能保持累加的过程中最大，且可保证连续；</li>
<li>将sum与最大值max比较，取最大者，最后得到target值。</li>
</ul>
<p>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> max = -<span class="built_in">Number</span>.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        sum = sum + nums[i];</span><br><span class="line">        sum = <span class="built_in">Math</span>.max(sum, nums[i]);</span><br><span class="line">        max = <span class="built_in">Math</span>.max(sum, max);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：O(n)<br>空间复杂度：O(1)</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>55. Jump Game</title>
    <url>/2020/07/28/55.%20Jump%20Game/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>
<p>Each element in the array represents your maximum jump length at that position.</p>
<p>Determine if you are able to reach the last index.</p>
<p>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [2,3,1,1,4]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</span><br></pre></td></tr></table></figure>

<p>Example 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [3,2,1,0,4]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>Constraints:</p>
<ul>
<li>1 &lt;= nums.length &lt;= 3 * 10^4</li>
<li>0 &lt;= nums[i][j] &lt;= 10^5</li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> canJump = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length === <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (nums[<span class="number">0</span>] == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> jump(nums,<span class="number">0</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jump = <span class="function"><span class="keyword">function</span>(<span class="params">nums, start</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> index = nums.length - <span class="number">1</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=nums[start];i++) &#123;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span> (i+start&gt;=index) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (jump(nums,i+start)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>时间复杂度：O(n!)</strong><br><strong>空间复杂度: O(1)</strong></p>
<h3 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h3><p>每在一个位置，都有可以到达的最远的距离，在最远距离的范围内进行循环，判断是否可以到达最后，如果最远距离大于等于最后位置的索引，表示可以到达末尾，并且不断更新最远的距离。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> canJump = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> max_pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> current_idx = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(current_idx &lt;= max_pos) &#123;</span><br><span class="line">        max_pos = <span class="built_in">Math</span>.max(nums[current_idx]+current_idx, max_pos);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (max_pos &gt;= len) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        current_idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>时间复杂度：O(n)</strong><br><strong>空间复杂度：O(1)</strong></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>73. Set Matrix Zeroes</title>
    <url>/2020/07/28/73.%20Set%20Matrix%20Zeroes%20/</url>
    <content><![CDATA[<hr>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in-place.</p>
<p>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">[</span><br><span class="line">  [1,1,1],</span><br><span class="line">  [1,0,1],</span><br><span class="line">  [1,1,1]</span><br><span class="line">]</span><br><span class="line">Output: </span><br><span class="line">[</span><br><span class="line">  [1,0,1],</span><br><span class="line">  [0,0,0],</span><br><span class="line">  [1,0,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>Example 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">[</span><br><span class="line">  [0,1,2,0],</span><br><span class="line">  [3,4,5,2],</span><br><span class="line">  [1,3,1,5]</span><br><span class="line">]</span><br><span class="line">Output: </span><br><span class="line">[</span><br><span class="line">  [0,0,0,0],</span><br><span class="line">  [0,4,5,0],</span><br><span class="line">  [0,3,1,0]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Follow up:</p>
</blockquote>
<p>A straight forward solution using O(mn) space is probably a bad idea.<br>A simple improvement uses O(m + n) space, but still not the best solution.<br>Could you devise a constant space solution?</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>通过两个数组记录matrix中0出现为止的行列索引，之后进行二次遍历，所在行/列出现过0，即设为0，可得到目标matrix。</p>
<p>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> setZeroes = <span class="function"><span class="keyword">function</span>(<span class="params">matrix</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix.length === <span class="number">0</span>) <span class="keyword">return</span> [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> line = [];</span><br><span class="line">    <span class="keyword">var</span> row = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;matrix.length;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;matrix[i].length;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                row.push(i);</span><br><span class="line">                line.push(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;matrix.length;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;matrix[i].length;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (line.indexOf(j) !=<span class="number">-1</span> || row.indexOf(i) !=<span class="number">-1</span>) matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：O(n2)</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>29. Divide Two Integers</title>
    <url>/2020/07/25/29.%20Divide%20Two%20Integers/</url>
    <content><![CDATA[<hr>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given two integers dividend and divisor, divide two integers without using multiplication, division and mod operator.</p>
<p>Return the quotient after dividing dividend by divisor.</p>
<p>The integer division should truncate toward zero, which means losing its fractional part. For example, truncate(8.345) = 8 and truncate(-2.7335) = -2.</p>
<p>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: dividend &#x3D; 10, divisor &#x3D; 3</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: 10&#x2F;3 &#x3D; truncate(3.33333..) &#x3D; 3.</span><br><span class="line">Example 2:</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: dividend &#x3D; 7, divisor &#x3D; -3</span><br><span class="line">Output: -2</span><br><span class="line">Explanation: 7&#x2F;-3 &#x3D; truncate(-2.33333..) &#x3D; -2.</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>Note:</p>
<ul>
<li>Both dividend and divisor will be 32-bit signed integers.</li>
<li>The divisor will never be 0.</li>
<li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 231 − 1 when the division result overflows.</li>
</ul>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>二分法<br>时间复杂度：O(lg(n))</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var divide &#x3D; function(dividend, divisor) &#123;</span><br><span class="line"></span><br><span class="line">    if (dividend&#x3D;&#x3D;&#x3D;2147483647 &amp;&amp; divisor&#x3D;&#x3D;1) return 2147483647;</span><br><span class="line">    if (dividend&#x3D;&#x3D;&#x3D;-2147483648 &amp;&amp; divisor&#x3D;&#x3D;1) return -2147483648;</span><br><span class="line">    if (dividend&#x3D;&#x3D;0) return 0;</span><br><span class="line">    if (Math.abs(dividend) &lt; Math.abs(divisor)) return 0;</span><br><span class="line">    if (dividend*divisor&gt;0) &#123;</span><br><span class="line">        var isPositive &#x3D; 1;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        var isPositive &#x3D; -1;</span><br><span class="line">    &#125;</span><br><span class="line">    var result &#x3D; 1;</span><br><span class="line">    var left &#x3D; 0;</span><br><span class="line">    var right &#x3D; Math.abs(dividend);</span><br><span class="line">    dividend &#x3D; Math.abs(dividend);</span><br><span class="line">    divisor &#x3D; Math.abs(divisor);</span><br><span class="line">    var middle &#x3D; Math.floor((left+right)&#x2F;2);</span><br><span class="line"></span><br><span class="line">    while(left+1&lt;right) &#123;</span><br><span class="line">        if (divisor*middle &#x3D;&#x3D; dividend) return isPositive*middle;</span><br><span class="line">        if(divisor*middle &lt; dividend) &#123;</span><br><span class="line">            left &#x3D; middle;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            right &#x3D; middle;</span><br><span class="line">        &#125;</span><br><span class="line">        result &#x3D; middle;</span><br><span class="line">        if(right-left &lt;&#x3D; 1) &#123;</span><br><span class="line">            result &#x3D; left;</span><br><span class="line">        &#125;</span><br><span class="line">        middle &#x3D; Math.floor((left+right)&#x2F;2);</span><br><span class="line">    &#125;</span><br><span class="line">    return isPositive*result;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>31. Next Permutation</title>
    <url>/2020/07/25/31.%20Next%20Permutation/</url>
    <content><![CDATA[<hr>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.</p>
<p>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).</p>
<p>The replacement must be in-place and use only constant extra memory.</p>
<p>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1,2,3 → 1,3,2</span><br><span class="line">3,2,1 → 1,2,3</span><br><span class="line">1,1,5 → 1,5,1</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>以[1，2，7，4，3，1]为例：</p>
<p>我们要找下一个更大的数字，通过观察问题描述中的例子，可以简单的发现，解题步骤中会发生数字的交换，那么怎样找到两个要交换的数字呢？交换后，数组是否需要进行一些处理呢？</p>
<p>下面以[1，2，7，4，3，1]为例：</p>
<p>下一个排列为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1　　3　　1　　2　　4　　7</span><br></pre></td></tr></table></figure>

<p>通过结果反向推演可以看到过程如下；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1　　2　　7　　4　　3　　1</span><br><span class="line"></span><br><span class="line">1　　2　　7　　4　　3　　1</span><br><span class="line"></span><br><span class="line">1　　3　　7　　4　　2　　1</span><br><span class="line"></span><br><span class="line">1　　3　　1　　2　　4　　7</span><br></pre></td></tr></table></figure>

<p>可以发现，如果从末尾往前看，数字逐渐变大，到了2时才减小的，然后再从后往前找第一个比2大的数字，是3，那么我们交换2和3，再把此时3后面的所有数字转置一下即可。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>JavaScript</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @param &#123;number[]&#125; nums</span><br><span class="line"> * @return &#123;void&#125; Do not return anything, modify nums in-place instead.</span><br><span class="line"> *&#x2F;</span><br><span class="line">var nextPermutation &#x3D; function(nums) &#123;</span><br><span class="line">    var index &#x3D; nums.length - 2;</span><br><span class="line">    while(index&gt;&#x3D;0 &amp;&amp; nums[index+1] &lt;&#x3D; nums[index]) --index;</span><br><span class="line">    if (index&gt;&#x3D;0) &#123;</span><br><span class="line">        var key &#x3D; nums.length - 1;</span><br><span class="line">        while(key&lt; nums.length &amp;&amp; nums[key] &lt;&#x3D; nums[index]) key--;</span><br><span class="line">        swap(key, index);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    reverse(index+1);</span><br><span class="line">    </span><br><span class="line">    function swap(i, j) &#123;</span><br><span class="line">        let temp &#x3D; nums[i];</span><br><span class="line">        nums[i] &#x3D; nums[j];</span><br><span class="line">        nums[j] &#x3D; temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function reverse(start) &#123;</span><br><span class="line">        let end &#x3D; nums.length - 1;</span><br><span class="line">        while (start &lt; end) &#123;</span><br><span class="line">            swap(start, end);</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>异步I/O</title>
    <url>/2020/07/25/%E5%BC%82%E6%AD%A5IO/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在众多高级编程语言或运行平台中，将异步作为主要编程方式和设计理念的Node是首个。</p>
<p><strong>伴随着异步I/O的还有事件驱动和单线程，他们构成Node的基调。</strong></p>
<p>Node是全方位的，既可以作为服务器端去处理客户端带来的大量并发请求，也能作为客户端向网络中的各个应用进行并发请求。</p>
<h2 id="异步I-O的原因"><a href="#异步I-O的原因" class="headerlink" title="异步I/O的原因"></a>异步I/O的原因</h2><p>这与Node面向网络设计有关。</p>
<h3 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h3><p>在浏览器中，JavaScript在单线程上执行，而且它还与UI渲染共用一个线程。这意味着，JavaScript在执行的时候UI渲染和响应是处于停滞状态的。</p>
<p>通过异步可以消除UI阻塞的现象，但是前端获取资源的速度也取决于后端响应的速度。</p>
<p>只有后端能够快速响应资源，才能让前端的体验更好。</p>
<h3 id="资源分配"><a href="#资源分配" class="headerlink" title="资源分配"></a>资源分配</h3><p>假设业务场景中有一组互不相关的任务需要完成，现行的主流方法有以下两种。</p>
<ul>
<li>单线程串行依次执行</li>
<li>多线程并行完成</li>
</ul>
<p>多线程的代价在于，创建线程和执行期线程上下文的切换开销较大。此外，在复杂的业务中，多线程编程经常面临死锁、状态同步等问题，但是多线程在多核CPU上能够有效提升CPU的利用率。</p>
<p>单线程同步编程模型会因阻塞I/O导致硬件资源得不到更优的使用。</p>
<p>添加硬件资源是一种提升服务质量的方式，但它不是唯一的方式。</p>
<p><strong>Node在两者之间给出了它的方案：利用单线程，远离多线程死锁、状态同步等问题；利用异步I/O，让单线程远离阻塞，以更好的使用CPU。</strong></p>
<p>为了弥补单线程无法利用多核cpu的缺点，Node提供了类似前端浏览器中Web Workers的子进程，该子进程可以通过工作进程高效的利用CPU和I/O。</p>
<h2 id="异步I-O实现"><a href="#异步I-O实现" class="headerlink" title="异步I/O实现"></a>异步I/O实现</h2><h3 id="异步I-O与非阻塞I-O"><a href="#异步I-O与非阻塞I-O" class="headerlink" title="异步I/O与非阻塞I/O"></a>异步I/O与非阻塞I/O</h3><p>从计算机内核I/O而言，异步/同步和阻塞/非阻塞实际上是两回事。</p>
<p>操作系统内核对于I/O只有两种方式：阻塞与非阻塞。在调用阻塞I/O时，应用程序需要等待I/O完成才返回结果。<strong>非阻塞I/O和阻塞I/O的差别为调用后会立即返回。</strong></p>
<p><em>操作系统对计算机进行了抽象，将所有输入输出设备抽象为文件。内核在进行文件I/O操作时，通过文件描述符进行管理，而文件描述符类似于应用程序与系统内核之间的凭证。应用程序如果需要进行I/O调用，需要先打开文件描述符，然后再根据文件描述符去实现文件的数据读写。*</em>此处非阻塞I/O与阻塞I/O的区别在于阻塞I/O完成整个获取数据的过程，而非阻塞I/O则不带数据直接返回，要获取数据，还需要通过文件描述符再次读取。***</p>
<p>非阻塞I/O返回后，CPU的时间片可以用来处理其他事物，此时的性能提升是明显的。</p>
<p><img src="https://github.com/highsea/diveintonode_figures/blob/master/03/async_io.png?raw=true" alt="非阻塞"></p>
<p>由于完成的I/O并没有完成，立即返回的并不是业务层期望的数据，而仅仅是当前调用的状态。<strong>为了获取完整的数据，应用程序需要重复调用I/O操作来确认是否完成。</strong></p>
<p>这种重复调用判断操作是否完成的技术叫做<strong>轮询</strong>。</p>
<p><strong>非阻塞带来的麻烦却是需要轮询去确认是否完全完成数据获取，它会让CPU处理状态判断，是对CPU资源的浪费</strong>。</p>
<p>现存的轮询技术主要有以下这些：</p>
<ul>
<li>read</li>
</ul>
<p>它是最原始，性能最低的一种，通过反复调用来检查I/O的状态来完成数据饿读取。在得到最终数据前，CPU一直耗用在等待上。</p>
<ul>
<li>select</li>
</ul>
<p>它是在read基础上改进的一种方案，通过对文件描述符上的事件状态来进行判断。</p>
<ul>
<li>poll</li>
</ul>
<p>该方案较select有所改进，采用链表的方式避免数组长度的限制，其次他能避免不必要的检查。</p>
<ul>
<li><strong>epoll</strong></li>
</ul>
<p><strong>该方案是Linux下效率最高的I/O事件通知机制，在进入轮询的时候如果没有检查到I/O事件，将会进行休眠，直到事件发生将它唤醒。它是真实利用了事件通知、执行回调的方式，而不是遍历查询，所以不会浪费CPU，执行效率较高。</strong></p>
<p><img src="https://github.com/highsea/diveintonode_figures/blob/master/03/epoll_io.png?raw=true" alt="epoll"></p>
<p>轮询技术满足了非阻塞I/O确保获取完整数据的需求，但是对于应用程序来说，它仍然只能算是一种同步，因为应用程序仍然需要等待I/O完全返回。</p>
<h3 id="理想的非阻塞异步I-O"><a href="#理想的非阻塞异步I-O" class="headerlink" title="理想的非阻塞异步I/O"></a>理想的非阻塞异步I/O</h3><h3 id="现实的非阻塞异步I-O"><a href="#现实的非阻塞异步I-O" class="headerlink" title="现实的非阻塞异步I/O"></a>现实的非阻塞异步I/O</h3><p><strong>通过让部分线程进行阻塞I/O或者非阻塞I/O加轮询技术来完成数据获取，让一个线程进行计算处理，通过线程之间的通信将I/O得到的数据进行传递，这就轻松实现了异步I/O。</strong></p>
<p><img src="https://github.com/highsea/diveintonode_figures/blob/master/03/simulate_async_io.png?raw=true" alt=""></p>
<p>glibc的AIO是典型的线程池模拟异步I/O，但是它存在一些难以忍受的缺陷和bug。</p>
<p>Windows下的<strong>IOCP</strong>，也是一种异步I/O解决方案，它在某种程度上提供了理想的异步I/O：调用异步方法，等待I/O完成之后的通知，执行回调，用户无需考虑轮询。它的内部依旧是线程池原理。</p>
<p>由于Windows和<em>nix平台的差异，*</em>node提供了libuv作为抽象封装层**，使得所有平台兼容性的判断都由这一层来完成，并保证上层的node与下层的自定义线程池及IOCP之间各自独立。</p>
<p><img src="https://github.com/highsea/diveintonode_figures/blob/master/03/async_io_arch.png?raw=true" alt="基于libuv的架构示意图"></p>
<blockquote>
<p>注意⚠️：</p>
</blockquote>
<p><strong>我们时常提到Node是单线程的，这里的单线程指的仅仅只是JavaScript执行在单线程中，在Node中，无论是Windows还是*nix，内部完成I/O任务的另有线程池。</strong></p>
<h2 id="Node的异步I-O"><a href="#Node的异步I-O" class="headerlink" title="Node的异步I/O"></a>Node的异步I/O</h2><h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3><p><strong>Node自身的执行模型——事件循环</strong>，正是它使得回调函数十分普遍。</p>
<p><strong>在进程启动时，Node便会创建一个类似于while(true)的循环，每执行一次循环体的过程成为Tick。每个Tick的过程就是查看是否有事件待处理，如果有，就取出事件及其相关的回调函数。。如果存在关联的回调函数，就执行它们。然后进入下个循环，如果不再有事件处理，就退出进程。</strong></p>
<p><img src="https://github.com/highsea/diveintonode_figures/blob/master/03/loop.png?raw=true" alt="Tick流程图"></p>
<h3 id="观察者"><a href="#观察者" class="headerlink" title="观察者"></a>观察者</h3><blockquote>
<p>引入一个概念：观察者</p>
</blockquote>
<p>每个事件循环中有一个或者多个观察者，而判断是否有事件要处理的过程就是向这些观察者询问是否有要处理的事件。</p>
<p>浏览器采用了类似的机制。事件可能来自用户的点击或家在某些文件时产生，这些事件都由对应的观察者。</p>
<p>在Node中，事件主要来源于网络请求、文件I/O等，这些事件对应的观察者有文件I/O观察者、网络I/O观察者等。</p>
<p>观察者将事件进行了分类。</p>
<h3 id="请求对象"><a href="#请求对象" class="headerlink" title="请求对象"></a>请求对象</h3><p>JavaScript代码到系统内核之间发生了什么。</p>
<p>对于一般的回调函数，函数由我们自行调用，对于Node的异步I/O来说，回调函数却不由开发者来调用。<strong>从Javascipt发起调用到内核执行完I/O操作的过渡过程中，存在一种中间产物，它叫做请求对象。</strong></p>
<p><strong>JavaScript层面的代码通过调用C++核心模块进行下层的操作。</strong></p>
<p><strong>从JavaScript调用Node的核心模块，核心模块调用C++内建模块，内建模块通过libuv进行系统调用，这是Node里经典的调用方式。</strong></p>
<p>至此，JavaScript调用立即返回，由JavaScript层面发起的异步调用的第一阶段就此结束。JavaScript线程可以继续执行当前任务的后续操作。当前I/O操作在线程池中等待执行，不管是否阻塞I/O，都不会影响到JavaScript的后续执行，如此就达到了异步的目的。</p>
<p><strong>请求对象是异步I/O过程中的重要产物，所有的状态都保存在这个对象中，包括送入线程池等待执行以及I/O操作完毕后的回调处理。</strong></p>
<h3 id="执行回调"><a href="#执行回调" class="headerlink" title="执行回调"></a>执行回调</h3><p>组装好请求对象、送入I/O线程池等待执行，实际上完成了异步I/O的第一部分，回调通知是第二部分。</p>
<p><strong>线程池中的I/O操作调用完毕后</strong>，会将获取的结果储存在<code>req-&gt;result</code>属性上，然后调用<code>PostQueuedCompletionStatus()</code>通知IOCP，告知当前对象操作以已经完成。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PostQueuedCompletionStatus((loop) -&gt; iocp, 0, 0, &amp;((req)-&gt;overlapped))</span><br></pre></td></tr></table></figure>

<p><code>PostQueuedCompletionStatus()</code>方法的作用是向IOCP提交执行状态，并将线程归还线程池，可以通过<code>GetQueuedCompletionStatus()</code>获取提交的状态。</p>
<p>此过程中，还动用了事件循环的I/O观察者。<strong>在每次Tick的执行中，它会调用IOCP相关的<code>GetQueuedCompletionStatus()</code>方法检查线程池中是否有执行完的请求，若有，会将请求对象加入到I/O观察者的队列中，然后将其当作事件处理。</strong></p>
<p><strong>I/O观察者回调函数的行为</strong>就是取出请求对象的<code>result</code>属性作为参数，取出<code>oncomplete_sym</code>属性作为方法，然后调用执行，以此达到调用JavaScript中传入的回调函数的目的。</p>
<p><img src="https://github.com/highsea/diveintonode_figures/blob/master/03/io_model.png?raw=true" alt="整个异步I/O 的流程"></p>
<p><strong>事件循环、观察者、请求对象、I/O线程池这四者构成了Node异步I/O模型的基本要素。</strong></p>
<h2 id="非I-O的异步API"><a href="#非I-O的异步API" class="headerlink" title="非I/O的异步API"></a>非I/O的异步API</h2><p><code>setTimeout()</code>、<code>setInterval()</code>、<code>setImmediate()</code>、<code>process.nextTick()</code></p>
<h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p><code>setTimeout()</code>和<code>setInterval()</code>的实现原理与异步I/O的实现比较类似，但是没有线程池的参与。</p>
<p><code>setTimeout()</code>和<code>setInterval()</code>创建的定时器会被插入到定时器观察者内部的一个<strong>红黑树</strong>中。每次Tick执行时，会从该红黑树中迭代取出定时器对象，检查超过是否超过定时时间，如果超过，就形成一个事件，它的回调函数立即执行。</p>
<p>定时器的问题在于，它并非精确的（在容忍范围内）。</p>
<p><img src="https://github.com/highsea/diveintonode_figures/blob/master/03/timer.png?raw=true" alt="setTimeout的行为"></p>
<h3 id="process-nextTick"><a href="#process-nextTick" class="headerlink" title="process.nextTick()"></a>process.nextTick()</h3><p><code>process.nextTick()</code>的操作相比<code>setTimeout()</code>较为轻量。</p>
<p>具体代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">process.nextTick &#x3D; function(callback) &#123;</span><br><span class="line">    if(process._exiting) return;</span><br><span class="line"></span><br><span class="line">    if(tickDepth &gt;&#x3D; process.maxTickDepth) maxTickWarn();</span><br><span class="line"></span><br><span class="line">    var tock &#x3D; &#123;callback: callback&#125;;</span><br><span class="line">    if(process.domain) rock.domain &#x3D; process.domain;</span><br><span class="line"></span><br><span class="line">    nextTickQueue.push(tock);</span><br><span class="line">    if(nextTickQueue.length) &#123;</span><br><span class="line">        process._needTickCallback();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每次调用<code>process.nextTick()</code>方法，只会将回调函数放入队列中，在下一轮Tick中取出执行。定时器中采用红黑树时间复杂度为O(lg(n))，<code>process.nextTick()</code>的是O(1)，更高效。</p>
<h3 id="setImmediate"><a href="#setImmediate" class="headerlink" title="setImmediate()"></a>setImmediate()</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">process.nextTick(function() &#123;</span><br><span class="line">    console.log(&#39;nextTick延迟执行&#39;)</span><br><span class="line">&#125;);</span><br><span class="line">setImmediate(function() &#123;</span><br><span class="line">    console.log(&#39;setImmediate延迟执行&#39;)</span><br><span class="line">&#125;);</span><br><span class="line">console.log(&#39;正常执行&#39;)</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">正常执行</span><br><span class="line">nextTick延迟执行</span><br><span class="line">setImmediate延迟执行</span><br></pre></td></tr></table></figure>

<p>从执行结果来看，<code>process.nextTick()</code>的回调函数执行优先级高于<code>setImmediate()</code>，这是因为，<strong>事件循环对于观察者的检查是有先后顺序的</strong>，<code>process.nextTick()</code>属于idle观察者，<code>setImmediate()</code>属于check观察者。在每一个轮循环检查中idle观察者先于I/O观察者，I/O观察者先于check观察者。</p>
<p>在具体实现上，<code>process.nextTick()</code>的回调函数保存在一个数组中，<code>setImmediate()</code>的结果保存在链表中。在行为上，<code>process.nextTick()</code>在每轮循环中会将数组中的回调函数全部执行，<code>setImmediate()</code>在每轮循环中执行链表中的一个回调函数。</p>
<h2 id="事件驱动和高性能服务器"><a href="#事件驱动和高性能服务器" class="headerlink" title="事件驱动和高性能服务器"></a>事件驱动和高性能服务器</h2><p><strong>事件驱动的本质，通过祝循环加事件触发的方式来运行程序。</strong></p>
<p>对于网络套接字的处理，Node也用到了异步I/O，网络套接字侦听到的请求都会形成事件交给I/O观察者。事件循环会不停的处理这些网络I/O事件。如果JavaScript有传入回调函数，这些事件将会最终传递到业务逻辑层进行处理。利用Node构建Web服务器，正是在这一个基础上实现的。</p>
<p><img src="https://github.com/highsea/diveintonode_figures/blob/master/03/server.png?raw=true" alt="利用Node构建Web服务器流程图"></p>
<p>经典的服务器模型：</p>
<ul>
<li>同步式</li>
<li>每进程/每请求</li>
<li>每线程/每请求</li>
</ul>
<p>Node通过事件驱动的方式处理请求，无需为每一个请求创建额外的对应线程，可以省掉创建线程和销毁线程的开销，同时操作系统在调度任务时，因为线程较少，上下文切换的代价很低。<strong>这是Node高性能的一个原因</strong>。</p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>JSX简介</title>
    <url>/2020/05/24/02-JSX%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const element &#x3D; &lt;h1&gt;Hello, world!&lt;&#x2F;h1&gt;;</span><br></pre></td></tr></table></figure>
<p>这个标签语法既不是字符串也不是 HTML。它被称为 JSX，是一个 JavaScript 的语法扩展。<strong>我们建议在 React 中配合使用 JSX</strong>，JSX 可以很好地描述 UI 应该呈现出它应有交互的本质形式。JSX 可能会使人联想到模版语言，但它具有 JavaScript 的全部功能。</p>
<a id="more"></a>
<h2 id="在-JSX-中嵌入表达式"><a href="#在-JSX-中嵌入表达式" class="headerlink" title="在 JSX 中嵌入表达式"></a>在 JSX 中嵌入表达式</h2><p>在下面的例子中，我们声明了一个名为 name 的变量，然后在 JSX 中使用它，并将它包裹在大括号中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const name &#x3D; &#39;Josh Perez&#39;;</span><br><span class="line">const element &#x3D; &lt;h1&gt;Hello, &#123;name&#125;&lt;&#x2F;h1&gt;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  element,</span><br><span class="line">  document.getElementById(&#39;root&#39;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>在 JSX 语法中，你<strong>可以在大括号内放置任何有效的 JavaScript 表达式</strong>。例如，2 + 2，user.firstName 或 formatName(user) 都是有效的 JavaScript 表达式。</p>
<p>在下面的示例中，我们将调用 JavaScript 函数 <code>formatName(user)</code> 的结果，并将结果嵌入到 <code>&lt;h1&gt;</code> 元素中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function formatName(user) &#123;</span><br><span class="line">  return user.firstName + &#39; &#39; + user.lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const user &#x3D; &#123;</span><br><span class="line">  firstName: &#39;Harper&#39;,</span><br><span class="line">  lastName: &#39;Perez&#39;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const element &#x3D; (</span><br><span class="line">  &lt;h1&gt;</span><br><span class="line">    Hello, &#123;formatName(user)&#125;!</span><br><span class="line">  &lt;&#x2F;h1&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  element,</span><br><span class="line">  document.getElementById(&#39;root&#39;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="JSX-也是一个表达式"><a href="#JSX-也是一个表达式" class="headerlink" title="JSX 也是一个表达式"></a>JSX 也是一个表达式</h2><p>在编译之后，JSX 表达式会被转为普通 JavaScript 函数调用，并且对其取值后得到 JavaScript 对象。</p>
<p>也就是说，<strong>你可以在 if 语句和 for 循环的代码块中使用 JSX，将 JSX 赋值给变量，把 JSX 当作参数传入，以及从函数中返回 JSX</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getGreeting(user) &#123;</span><br><span class="line">  if (user) &#123;</span><br><span class="line">    return &lt;h1&gt;Hello, &#123;formatName(user)&#125;!&lt;&#x2F;h1&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">  return &lt;h1&gt;Hello, Stranger.&lt;&#x2F;h1&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JSX-特定属性"><a href="#JSX-特定属性" class="headerlink" title="JSX 特定属性"></a>JSX 特定属性</h2><p>你可以通过使用引号，来将属性值指定为字符串字面量：</p>
<p><code>const element = &lt;div tabIndex=&quot;0&quot;&gt;&lt;/div&gt;;</code></p>
<p>也可以使用大括号，来在属性值中插入一个 JavaScript 表达式：</p>
<p><code>const element = &lt;img src={user.avatarUrl}&gt;&lt;/img&gt;;</code></p>
<p>在属性中嵌入 JavaScript 表达式时，不要在大括号外面加上引号。你应该仅使用引号（对于字符串值）或大括号（对于表达式）中的一个，对于同一属性不能同时使用这两种符号。</p>
<blockquote>
<p>因为 JSX 语法上更接近 JavaScript 而不是 HTML，所以 React DOM 使用 camelCase（小驼峰命名）来定义属性的名称，而不使用 HTML 属性名称的命名约定。</p>
</blockquote>
<blockquote>
<p>例如，JSX 里的 class 变成了 className，而 tabindex 则变为 tabIndex。</p>
</blockquote>
<h2 id="使用-JSX-指定子元素"><a href="#使用-JSX-指定子元素" class="headerlink" title="使用 JSX 指定子元素"></a>使用 JSX 指定子元素</h2><p>假如一个标签里面没有内容，你可以使用<code>/&gt;</code>来闭合标签，就像 XML 语法一样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const element &#x3D; &lt;img src&#x3D;&#123;user.avatarUrl&#125; &#x2F;&gt;;</span><br></pre></td></tr></table></figure>

<p>JSX 标签里能够包含很多子元素:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const element &#x3D; (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Hello!&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h2&gt;Good to see you here.&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="JSX-防止注入攻击"><a href="#JSX-防止注入攻击" class="headerlink" title="JSX 防止注入攻击"></a>JSX 防止注入攻击</h2><p>你可以安全地在 JSX 当中插入用户输入内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const title &#x3D; response.potentiallyMaliciousInput;</span><br><span class="line">&#x2F;&#x2F; 直接使用是安全的：</span><br><span class="line">const element &#x3D; &lt;h1&gt;&#123;title&#125;&lt;&#x2F;h1&gt;;</span><br></pre></td></tr></table></figure>

<p><strong>React DOM 在渲染所有输入内容之前，默认会进行转义</strong>。它可以确保在你的应用中，永远不会注入那些并非自己明确编写的内容。所有的内容在渲染之前都被转换成了字符串。这样可以有效地防止 XSS（cross-site-scripting, 跨站脚本）攻击。</p>
<h2 id="JSX-表示对象"><a href="#JSX-表示对象" class="headerlink" title="JSX 表示对象"></a>JSX 表示对象</h2><p>Babel 会把 JSX 转译成一个名为 <code>React.createElement()</code> 函数调用。</p>
<p>以下两种示例代码完全等效：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const element &#x3D; (</span><br><span class="line">  &lt;h1 className&#x3D;&quot;greeting&quot;&gt;</span><br><span class="line">    Hello, world!</span><br><span class="line">  &lt;&#x2F;h1&gt;</span><br><span class="line">);</span><br><span class="line">const element &#x3D; React.createElement(</span><br><span class="line">  &#39;h1&#39;,</span><br><span class="line">  &#123;className: &#39;greeting&#39;&#125;,</span><br><span class="line">  &#39;Hello, world!&#39;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><code>React.createElement()</code>会预先执行一些检查，以帮助你编写无错代码，但实际上它创建了一个这样的对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 注意：这是简化过的结构</span><br><span class="line">const element &#x3D; &#123;</span><br><span class="line">  type: &#39;h1&#39;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    className: &#39;greeting&#39;,</span><br><span class="line">    children: &#39;Hello, world!&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这些对象被称为 “React 元素”。它们描述了你希望在屏幕上看到的内容。React 通过读取这些对象，然后使用它们来构建 DOM 以及保持随时更新。</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>元素渲染&amp;组件&amp;props</title>
    <url>/2020/05/24/03-%E5%85%83%E7%B4%A0%E6%B8%B2%E6%9F%93&amp;%E7%BB%84%E4%BB%B6&amp;props/</url>
    <content><![CDATA[<hr>
<h2 id="元素渲染"><a href="#元素渲染" class="headerlink" title="元素渲染"></a>元素渲染</h2><ul>
<li><p>元素是构成 React 应用的最小砖块。</p>
</li>
<li><p>元素描述了你在屏幕上想看到的内容。</p>
</li>
<li><p>与浏览器的 DOM 元素不同，React 元素是创建开销极小的普通对象。React DOM 会负责更新 DOM 来与 React 元素保持一致。</p>
<a id="more"></a>
<h3 id="元素渲染为DOM"><a href="#元素渲染为DOM" class="headerlink" title="元素渲染为DOM"></a>元素渲染为DOM</h3></li>
</ul>
<p>假设你的 HTML 文件某处有一个 <code>&lt;div&gt;</code>：</p>
<p><code>&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</code></p>
<p>我们将其称为“根” DOM 节点，因为该节点内的所有内容都将由 React DOM 管理。</p>
<p><strong>仅使用 React 构建的应用通常只有单一的根 DOM 节点</strong>。如果你在将 React 集成进一个已有应用，那么你可以在应用中包含任意多的独立根 DOM 节点。</p>
<p>想要将一个 React 元素渲染到根 DOM 节点中，只需把它们一起传入 <code>ReactDOM.render()</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const element &#x3D; &lt;h1&gt;Hello, world&lt;&#x2F;h1&gt;;</span><br><span class="line">ReactDOM.render(element, document.getElementById(&#39;root&#39;));</span><br></pre></td></tr></table></figure>
<p>页面上会展示出 “Hello, world”。</p>
<h3 id="更新已渲染的元素"><a href="#更新已渲染的元素" class="headerlink" title="更新已渲染的元素"></a>更新已渲染的元素</h3><p><strong>React 元素是不可变对象</strong>。一旦被创建，你就无法更改它的子元素或者属性。一个元素就像电影的单帧：它代表了某个特定时刻的 UI。</p>
<p>根据我们已有的知识，更新 UI 唯一的方式是创建一个全新的元素，并将其传入 <code>ReactDOM.render()</code>。</p>
<p>考虑一个计时器的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function tick() &#123;</span><br><span class="line">  const element &#x3D; (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Hello, world!&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;h2&gt;It is &#123;new Date().toLocaleTimeString()&#125;.&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">  ReactDOM.render(element, document.getElementById(&#39;root&#39;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setInterval(tick, 1000);</span><br></pre></td></tr></table></figure>

<p>这个例子会在 setInterval() 回调函数，每秒都调用 ReactDOM.render()。</p>
<h3 id="React-只更新它需要更新的部分"><a href="#React-只更新它需要更新的部分" class="headerlink" title="React 只更新它需要更新的部分"></a>React 只更新它需要更新的部分</h3><p>React DOM 会<strong>将元素和它的子元素与它们之前的状态进行比较</strong>，并只会进行必要的更新来使 DOM 达到预期的状态。</p>
<h2 id="组件-amp-props"><a href="#组件-amp-props" class="headerlink" title="组件&amp;props"></a>组件&amp;props</h2><p>组件允许你将UI拆分为独立可复用的代码片段，并对每个片段进行独立构思。</p>
<p>组件，从概念上类似于JavaScript的函数，它接受任意的入参(即props)，并返回用于描述页面展示内容的React元素。</p>
<h3 id="函数组件与class组件"><a href="#函数组件与class组件" class="headerlink" title="函数组件与class组件"></a>函数组件与class组件</h3><p>定义组件最简单的方式就是编写 JavaScript 函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Welcome(props) &#123;</span><br><span class="line">  return &lt;h1&gt;Hello, &#123;props.name&#125;&lt;&#x2F;h1&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该函数是一个有效的 React 组件，因为它接收唯一带有数据的 “props”（代表属性）对象与并返回一个 React 元素。这类组件被称为<strong>函数组件</strong>，因为它本质上就是 JavaScript 函数。</p>
<p>你同时还可以使用 ES6 的 class 来定义组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Welcome extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;&#x2F;h1&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述两个组件在 React 里是等效的。</p>
<h3 id="组件渲染"><a href="#组件渲染" class="headerlink" title="组件渲染"></a>组件渲染</h3><p>之前，我们遇到的 React 元素都只是 DOM 标签：</p>
<p><code>const element = &lt;div /&gt;;</code></p>
<p>不过，React 元素也可以是用户自定义的组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const element &#x3D; &lt;Welcome name&#x3D;&quot;Sara&quot; &#x2F;&gt;;</span><br></pre></td></tr></table></figure>

<p><strong>当 React 元素为用户自定义组件时，它会将 JSX 所接收的属性（attributes）以及子组件（children）转换为单个对象传递给组件，这个对象被称之为 <code>“props”</code>。</strong></p>
<p>例如，这段代码会在页面上渲染 <code>“Hello, Sara”</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Welcome(props) &#123;</span><br><span class="line">  return &lt;h1&gt;Hello, &#123;props.name&#125;&lt;&#x2F;h1&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const element &#x3D; &lt;Welcome name&#x3D;&quot;Sara&quot; &#x2F;&gt;;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  element,</span><br><span class="line">  document.getElementById(&#39;root&#39;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>


<p>让我们来回顾一下这个例子中发生了什么：</p>
<p>我们调用 <code>ReactDOM.render()</code> 函数，并传入 <code>&lt;Welcome name=&quot;Sara&quot; /&gt;</code>作为参数。React 调用<code>Welcome</code>组件，并将 <code>{name: &#39;Sara&#39;}</code>作为 <code>props</code> 传入。<br>Welcome 组件将 <code>&lt;h1&gt;Hello, Sara&lt;/h1&gt;</code>元素作为返回值。<br>React DOM 将 DOM 高效地更新为 <code>&lt;h1&gt;Hello, Sara&lt;/h1&gt;</code>。</p>
<blockquote>
<p>注意： 组件名称必须以大写字母开头。React 会将以小写字母开头的组件视为原生 DOM 标签。</p>
</blockquote>
<h3 id="组合组件"><a href="#组合组件" class="headerlink" title="组合组件"></a>组合组件</h3><p><strong>组件可以在其输出中引用其他组件</strong>。这就可以让我们用同一组件来抽象出任意层次的细节。按钮，表单，对话框，甚至整个屏幕的内容：在 React 应用程序中，这些通常都会以组件的形式表示。</p>
<p>例如，我们可以创建一个可以多次渲染 Welcome 组件的 App 组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Welcome(props) &#123;</span><br><span class="line">  return &lt;h1&gt;Hello, &#123;props.name&#125;&lt;&#x2F;h1&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Welcome name&#x3D;&quot;Sara&quot; &#x2F;&gt;</span><br><span class="line">      &lt;Welcome name&#x3D;&quot;Cahal&quot; &#x2F;&gt;</span><br><span class="line">      &lt;Welcome name&#x3D;&quot;Edite&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;App &#x2F;&gt;,</span><br><span class="line">  document.getElementById(&#39;root&#39;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>通常来说，每个新的 React 应用程序的顶层组件都是 App 组件。但是，如果你将 React 集成到现有的应用程序中，你可能需要使用像 Button 这样的小组件，并自下而上地将这类组件逐步应用到视图层的每一处。</p>
<h3 id="提取组件"><a href="#提取组件" class="headerlink" title="提取组件"></a>提取组件</h3><p><strong>将组件拆分为更小的组件。</strong></p>
<p>例如，参考如下 Comment 组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Comment(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className&#x3D;&quot;Comment&quot;&gt;</span><br><span class="line">      &lt;div className&#x3D;&quot;UserInfo&quot;&gt;</span><br><span class="line">        &lt;img className&#x3D;&quot;Avatar&quot;</span><br><span class="line">          src&#x3D;&#123;props.author.avatarUrl&#125;</span><br><span class="line">          alt&#x3D;&#123;props.author.name&#125;</span><br><span class="line">        &#x2F;&gt;</span><br><span class="line">        &lt;div className&#x3D;&quot;UserInfo-name&quot;&gt;</span><br><span class="line">          &#123;props.author.name&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div className&#x3D;&quot;Comment-text&quot;&gt;</span><br><span class="line">        &#123;props.text&#125;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div className&#x3D;&quot;Comment-date&quot;&gt;</span><br><span class="line">        &#123;formatDate(props.date)&#125;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>该组件用于描述一个社交媒体网站上的评论功能，它接收 <code>author（对象）</code>，<code>text （字符串）</code>以及 <code>date（日期）</code>作为 props。</p>
<p>该组件由于嵌套的关系，变得难以维护，且很难复用它的各个部分。因此，让我们从中提取一些组件出来。</p>
<p>首先，我们将提取 Avatar 组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Avatar(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;img className&#x3D;&quot;Avatar&quot;</span><br><span class="line">      src&#x3D;&#123;props.user.avatarUrl&#125;</span><br><span class="line">      alt&#x3D;&#123;props.user.name&#125;</span><br><span class="line">    &#x2F;&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Avatar 不需知道它在 Comment 组件内部是如何渲染的。因此，我们给它的 <code>props</code> 起了一个更通用的名字：user，而不是 author。</p>
<p>我们建议从组件自身的角度命名 <code>props</code>，而不是依赖于调用组件的上下文命名。</p>
<p>我们现在针对 Comment 做些微小调整：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Comment(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className&#x3D;&quot;Comment&quot;&gt;</span><br><span class="line">      &lt;div className&#x3D;&quot;UserInfo&quot;&gt;</span><br><span class="line">        &lt;Avatar user&#x3D;&#123;props.author&#125; &#x2F;&gt;</span><br><span class="line">        &lt;div className&#x3D;&quot;UserInfo-name&quot;&gt;</span><br><span class="line">          &#123;props.author.name&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div className&#x3D;&quot;Comment-text&quot;&gt;</span><br><span class="line">        &#123;props.text&#125;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div className&#x3D;&quot;Comment-date&quot;&gt;</span><br><span class="line">        &#123;formatDate(props.date)&#125;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来，我们将提取 UserInfo 组件，该组件在用户名旁渲染 Avatar 组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function UserInfo(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className&#x3D;&quot;UserInfo&quot;&gt;</span><br><span class="line">      &lt;Avatar user&#x3D;&#123;props.user&#125; &#x2F;&gt;</span><br><span class="line">      &lt;div className&#x3D;&quot;UserInfo-name&quot;&gt;</span><br><span class="line">        &#123;props.user.name&#125;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进一步简化 Comment 组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Comment(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className&#x3D;&quot;Comment&quot;&gt;</span><br><span class="line">      &lt;UserInfo user&#x3D;&#123;props.author&#125; &#x2F;&gt;</span><br><span class="line">      &lt;div className&#x3D;&quot;Comment-text&quot;&gt;</span><br><span class="line">        &#123;props.text&#125;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div className&#x3D;&quot;Comment-date&quot;&gt;</span><br><span class="line">        &#123;formatDate(props.date)&#125;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>最初看上去，提取组件可能是一件繁重的工作，但是，在大型应用中，构建可复用组件库是完全值得的。根据经验来看，如果 UI 中有一部分被多次使用（Button，Panel，Avatar），或者组件本身就足够复杂（App，FeedStory，Comment），那么它就是一个可复用组件的候选项。</p>
<h3 id="Props-的只读性"><a href="#Props-的只读性" class="headerlink" title="Props 的只读性"></a>Props 的只读性</h3><p><strong>组件无论是使用函数声明还是通过 class 声明，都决不能修改自身的 <code>props</code>。</strong>来看下这个 sum 函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function sum(a, b) &#123;</span><br><span class="line">  return a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样的函数被称为“纯函数”，因为该函数不会尝试更改入参，且多次调用下相同的入参始终返回相同的结果。</p>
<p>相反，下面这个函数则不是纯函数，因为它更改了自己的入参：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function withdraw(account, amount) &#123;</span><br><span class="line">  account.total -&#x3D; amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>React 非常灵活，但它也有一个严格的规则：</p>
<p><strong>所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。</strong></p>
<p>当然，应用程序的 UI 是动态的，并会伴随着时间的推移而变化。在不违反上述规则的情况下，state 允许 React 组件随用户操作、网络响应或者其他变化而动态更改输出内容。</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>State&amp;生命周期</title>
    <url>/2020/05/24/04-State&amp;%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文介绍了 React 组件中 state 和生命周期的概念。</p>
<p>在元素渲染章节中，我们只了解了一种更新 UI 界面的方法。通过调用 <code>ReactDOM.render()</code> 来修改我们想要渲染的元素：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function tick() &#123;</span><br><span class="line">  const element &#x3D; (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Hello, world!&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;h2&gt;It is &#123;new Date().toLocaleTimeString()&#125;.&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    element,</span><br><span class="line">    document.getElementById(&#39;root&#39;)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setInterval(tick, 1000);</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>在本章节中，我们将学习如何封装真正可复用的 Clock 组件。它将设置自己的计时器并每秒更新一次。</p>
<p>我们可以从封装时钟的外观开始：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Clock(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Hello, world!&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;h2&gt;It is &#123;props.date.toLocaleTimeString()&#125;.&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function tick() &#123;</span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    &lt;Clock date&#x3D;&#123;new Date()&#125; &#x2F;&gt;,</span><br><span class="line">    document.getElementById(&#39;root&#39;)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setInterval(tick, 1000);</span><br></pre></td></tr></table></figure>

<p>然而，它忽略了一个关键的技术细节：Clock 组件需要设置一个计时器，并且需要每秒更新 UI。</p>
<p>理想情况下，我们希望只编写一次代码，便可以让 Clock 组件自我更新：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Clock &#x2F;&gt;,</span><br><span class="line">  document.getElementById(&#39;root&#39;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>我们需要在 Clock 组件中添加 “state” 来实现这个功能。</p>
<p><strong>State 与 props 类似，但是 state 是私有的，并且完全受控于当前组件。</strong></p>
<h2 id="将函数组件转换成-class-组件"><a href="#将函数组件转换成-class-组件" class="headerlink" title="将函数组件转换成 class 组件"></a>将函数组件转换成 class 组件</h2><p>通过以下五步将 Clock 的函数组件转成 class 组件：</p>
<ul>
<li><p>创建一个同名的 ES6 class，并且继承于 React.Component。</p>
</li>
<li><p>添加一个空的 <code>render()</code> 方法。</p>
</li>
<li><p>将函数体移动到 <code>render()</code> 方法之中。</p>
</li>
<li><p><strong>在 <code>render()</code> 方法中使用 <code>this.props</code> 替换 <code>props</code>。</strong></p>
</li>
<li><p>删除剩余的空函数声明。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Clock extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Hello, world!&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;h2&gt;It is &#123;this.props.date.toLocaleTimeString()&#125;.&lt;&#x2F;h2&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在 Clock 组件被定义为 class，而不是函数。</p>
<p>每次组件更新时 render 方法都会被调用，但只要在相同的 DOM 节点中渲染 <code>&lt;Clock /&gt;</code>，就仅有一个 Clock 组件的 class 实例被创建使用。这就使得我们可以使用如 state 或生命周期方法等很多其他特性。</p>
<h2 id="向-class-组件中添加局部的-state"><a href="#向-class-组件中添加局部的-state" class="headerlink" title="向 class 组件中添加局部的 state"></a>向 class 组件中添加局部的 state</h2><p>我们通过以下三步将 date 从 <code>props</code> 移动到 <code>state</code> 中：</p>
<ul>
<li><p>把 <code>render()</code> 方法中的 <code>this.props.date</code> 替换成 <code>this.state.date</code> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Clock extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Hello, world!&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;h2&gt;It is &#123;this.state.date.toLocaleTimeString()&#125;.&lt;&#x2F;h2&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加一个 class <strong>构造函数</strong>，然后在该函数中为 <code>this.state</code> 赋初值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Clock extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state &#x3D; &#123;date: new Date()&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Hello, world!&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;h2&gt;It is &#123;this.state.date.toLocaleTimeString()&#125;.&lt;&#x2F;h2&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>通过以下方式将 props 传递到父类的构造函数中：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">constructor(props) &#123;</span><br><span class="line">  super(props);</span><br><span class="line">  this.state &#x3D; &#123;date: new Date()&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Class 组件应该始终使用 props 参数来调用父类的构造函数</strong>。</p>
<ul>
<li>移除 <code>&lt;Clock /&gt;</code> 元素中的 date 属性：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Clock &#x2F;&gt;,</span><br><span class="line">  document.getElementById(&#39;root&#39;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>我们之后会将计时器相关的代码添加到组件中。</p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Clock extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state &#x3D; &#123;date: new Date()&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Hello, world!&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;h2&gt;It is &#123;this.state.date.toLocaleTimeString()&#125;.&lt;&#x2F;h2&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Clock &#x2F;&gt;,</span><br><span class="line">  document.getElementById(&#39;root&#39;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>接下来，我们会设置 Clock 的计时器并每秒更新它。</p>
<h2 id="将生命周期方法添加到-Class-中"><a href="#将生命周期方法添加到-Class-中" class="headerlink" title="将生命周期方法添加到 Class 中"></a>将生命周期方法添加到 Class 中</h2><p>在具有许多组件的应用程序中，当组件被销毁时释放所占用的资源是非常重要的。</p>
<p>当 Clock 组件第一次被渲染到 DOM 中的时候，就为其设置一个计时器。这在 React 中被称为<strong>挂载（mount）</strong>。</p>
<p>同时，当 DOM 中 Clock 组件被删除的时候，应该清除计时器。这在 React 中被称为“<strong>卸载（unmount）</strong>”。</p>
<p>我们可以为 class 组件声明一些特殊的方法，当组件挂载或卸载时就会去执行这些方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Clock extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state &#x3D; &#123;date: new Date()&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Hello, world!&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;h2&gt;It is &#123;this.state.date.toLocaleTimeString()&#125;.&lt;&#x2F;h2&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这些方法叫做“<strong>生命周期方法</strong>”。</p>
<p><code>componentDidMount()</code> 方法会在组件已经被渲染到 DOM 中后运行，所以，最好在这里设置计时器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">  this.timerID &#x3D; setInterval(</span><br><span class="line">    () &#x3D;&gt; this.tick(),</span><br><span class="line">    1000</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来把计时器的 ID 保存在 this 之中（this.timerID）。</p>
<p>尽管 <code>this.props</code> 和 <code>this.state</code> 是 React 本身设置的，且都拥有特殊的含义，但是其实你可以向 class 中随意添加不参与数据流（比如计时器 ID）的额外字段。</p>
<p>我们会在 <code>componentWillUnmount()</code> 生命周期方法中清除计时器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">componentWillUnmount() &#123;</span><br><span class="line">  clearInterval(this.timerID);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，我们会实现一个叫 <code>tick()</code> 的方法，Clock 组件每秒都会调用它。</p>
<p>使用 <code>this.setState()</code> 来时刻更新组件 state：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Clock extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state &#x3D; &#123;date: new Date()&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    this.timerID &#x3D; setInterval(</span><br><span class="line">      () &#x3D;&gt; this.tick(),</span><br><span class="line">      1000</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    clearInterval(this.timerID);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tick() &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      date: new Date()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Hello, world!&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;h2&gt;It is &#123;this.state.date.toLocaleTimeString()&#125;.&lt;&#x2F;h2&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Clock &#x2F;&gt;,</span><br><span class="line">  document.getElementById(&#39;root&#39;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>


<p>现在时钟每秒都会刷新。</p>
<h2 id="正确地使用-State"><a href="#正确地使用-State" class="headerlink" title="正确地使用 State"></a>正确地使用 State</h2><p>关于 <code>setState()</code> 你应该了解三件事：</p>
<ul>
<li><strong>不要直接修改 State</strong></li>
</ul>
<p>例如，此代码不会重新渲染组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Wrong</span><br><span class="line">this.state.comment &#x3D; &#39;Hello&#39;;</span><br><span class="line">而是应该使用 setState():</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Correct</span><br><span class="line">this.setState(&#123;comment: &#39;Hello&#39;&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>构造函数是唯一可以给 this.state 赋值的地方：</strong></p>
</li>
<li><p><strong>State 的更新可能是异步的</strong></p>
</li>
</ul>
<p>出于性能考虑，React 可能会把多个<code>setState()</code>调用合并成一个调用。</p>
<p>因为 this.props 和 this.state 可能会异步更新，所以你不要依赖他们的值来更新下一个状态。</p>
<p>例如，此代码可能会无法更新计数器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Wrong</span><br><span class="line">this.setState(&#123;</span><br><span class="line">  counter: this.state.counter + this.props.increment,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>要解决这个问题，可以让 setState() 接收一个函数而不是一个对象</strong>。这个函数用上一个 state 作为第一个参数，将此次更新被应用时的 props 做为第二个参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Correct</span><br><span class="line">this.setState((state, props) &#x3D;&gt; (&#123;</span><br><span class="line">  counter: state.counter + props.increment</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<p>上面使用了箭头函数，不过使用普通的函数也同样可以：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Correct</span><br><span class="line">this.setState(function(state, props) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    counter: state.counter + props.increment</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>State 的更新会被合并</strong></li>
</ul>
<p>当你调用 <code>setState()</code> 的时候，React 会把你提供的对象合并到当前的 state。</p>
<p>例如，你的 state 包含几个独立的变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">constructor(props) &#123;</span><br><span class="line">  super(props);</span><br><span class="line">  this.state &#x3D; &#123;</span><br><span class="line">    posts: [],</span><br><span class="line">    comments: []</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后你可以分别调用 <code>setState()</code> 来单独地更新它们：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">  fetchPosts().then(response &#x3D;&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      posts: response.posts</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  fetchComments().then(response &#x3D;&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      comments: response.comments</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的合并是浅合并，所以 <code>this.setState({comments})</code>完整保留了 <code>this.state.posts</code>， 但是完全替换了 <code>this.state.comments。</code></p>
<h2 id="数据是向下流动的"><a href="#数据是向下流动的" class="headerlink" title="数据是向下流动的"></a>数据是向下流动的</h2><p>不管是父组件或是子组件都无法知道某个组件是有状态的还是无状态的，并且它们也并不关心它是函数组件还是 class 组件。</p>
<p>这就是为什么称 state 为局部的或是封装的的原因。<strong>除了拥有并设置了它的组件，其他组件都无法访问</strong>。</p>
<p><strong>组件可以选择把它的 state 作为 props 向下传递到它的子组件中：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h2&gt;It is &#123;this.state.date.toLocaleTimeString()&#125;.&lt;&#x2F;h2&gt;</span><br></pre></td></tr></table></figure>

<p>这对于自定义组件同样适用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;FormattedDate date&#x3D;&#123;this.state.date&#125; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>FormattedDate 组件会在其 props 中接收参数 date，但是组件本身无法知道它是来自于 Clock 的 state，或是 Clock 的 props，还是手动输入的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function FormattedDate(props) &#123;</span><br><span class="line">  return &lt;h2&gt;It is &#123;props.date.toLocaleTimeString()&#125;.&lt;&#x2F;h2&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>这通常会被叫做“自上而下”或是“单向”的数据流。<strong>任何的 state 总是所属于特定的组件，而且从该 state 派生的任何数据或 UI 只能影响树中“低于”它们的组件。</strong></p>
<p>如果你把一个以组件构成的树想象成一个 props 的数据瀑布的话，那么每一个组件的 state 就像是在任意一点上给瀑布增加额外的水源，但是它只能向下流动。</p>
<p>为了证明每个组件都是真正独立的，我们可以创建一个渲染三个 Clock 的 App 组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Clock &#x2F;&gt;</span><br><span class="line">      &lt;Clock &#x2F;&gt;</span><br><span class="line">      &lt;Clock &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;App &#x2F;&gt;,</span><br><span class="line">  document.getElementById(&#39;root&#39;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>每个 Clock 组件都会单独设置它自己的计时器并且更新它。</p>
<p>在 React 应用中，组件是有状态组件还是无状态组件属于组件实现的细节，它可能会随着时间的推移而改变。你可以在有状态的组件中使用无状态的组件，反之亦然。</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP1.0和HTTP1.1的一些区别</title>
    <url>/2020/05/21/02-http1.0%E5%92%8Chttp2.0%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<hr>
<h2 id="HTTP1-0和HTTP1-1的一些区别"><a href="#HTTP1-0和HTTP1-1的一些区别" class="headerlink" title="HTTP1.0和HTTP1.1的一些区别"></a>HTTP1.0和HTTP1.1的一些区别</h2><p>HTTP1.1也是当前使用最为广泛的HTTP协议。 主要区别主要体现在：</p>
<ul>
<li><p>缓存处理</p>
<p>在HTTP1.0中主要使用header里的If-Modified-Since,Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略。</p>
<a id="more"></a></li>
<li><p>带宽优化及网络连接的使用</p>
<p>HTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</p>
</li>
<li><p>错误通知的管理</p>
<p>在HTTP1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。</p>
</li>
<li><p>Host头处理</p>
<p>在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个IP地址。HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。</p>
</li>
<li><p>长连接</p>
<p>HTTP 1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，<strong>在HTTP1.1中默认开启Connection： keep-alive</strong>，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点。</p>
</li>
</ul>
<h2 id="HTTP1-1与HTTP2-0的区别"><a href="#HTTP1-1与HTTP2-0的区别" class="headerlink" title="HTTP1.1与HTTP2.0的区别"></a>HTTP1.1与HTTP2.0的区别</h2><ul>
<li><strong>多路复用</strong></li>
</ul>
<p>HTTP2.0使用了多路复用的技术，做到<strong>同一个连接并发处理多个请求</strong>，而且并发请求的数量比HTTP1.1大了好几个数量级。</p>
<p>当然HTTP1.1也可以多建立几个TCP连接，来支持处理更多并发的请求，但是创建TCP连接本身也是有开销的。</p>
<p><strong>TCP连接有一个预热和保护的过程，先检查数据是否传送成功，一旦成功过，则慢慢加大传输速度</strong>。因此对应瞬时并发的连接，服务器的响应就会变慢。所以最好能使用一个建立好的连接，并且这个连接可以支持瞬时并发的请求。</p>
<ul>
<li><strong>数据压缩</strong></li>
</ul>
<p>我们知道，http请求和响应都是由【状态行、请求/响应头部、消息主题】三部分组成的。 一般而言，消息主体都会经过gzip压缩，或者本身传输的就是压缩过后的二进制文件（如图片、音频等），但是状态行和头部多是没有经过任何压缩，而是直接以纯文本的方式进行传输的。</p>
<p>然而，随着web功能越来越复杂，请求数量越来越多，随之而来的就是头部的流量越来越多，并且在建立初次链接之后的链接也要发送user-agent等信息，是在是一种浪费。</p>
<p>因此，http2提出了<strong>对请求和响应的头部进行压缩</strong>，即不再只是压缩主题部分，这种压缩方式就是HAPCK 。</p>
<p>通过压缩，头部大小可以减少一半之多，如果后面重复发送请求，那么可能压缩后的头部大小只有原始大小的 1/10。</p>
<p>HTTP1.1不支持header数据的压缩，HTTP2.0使用HPACK算法对header的数据进行压缩，这样数据体积小了，在网络上传输就会更快。</p>
<ul>
<li><strong>服务器推送</strong></li>
</ul>
<p>当代网页使用了许多资源:HTML、样式表、脚本、图片等等。在HTTP/1.x中这些资源每一个都必须明确地请求。这可能是一个很慢的过程。浏览器从获取HTML开始，然后在它解析和评估页面的时候，增量地获取更多的资源。因为服务器必须等待浏览器做每一个请求，网络经常是空闲的和未充分使用的。</p>
<p><strong>为了改善延迟，HTTP/2引入了server push，它允许服务端推送资源给浏览器</strong>，在浏览器明确地请求之前。一个服务器经常知道一个页面需要很多附加资源，在它响应浏览器第一个请求的时候，可以开始推送这些资源。这允许服务端去完全充分地利用一个可能空闲的网络，改善页面加载时间。</p>
<p>服务器端推送的这些资源其实存在客户端的某处地方，客户端直接从本地加载这些资源就可以了，不用走网络，速度自然是快很多的。</p>
<p>链接：<a href="https://www.jianshu.com/p/7bfec28236c3" target="_blank" rel="noopener">https://www.jianshu.com/p/7bfec28236c3</a></p>
]]></content>
      <categories>
        <category>面试题目</category>
      </categories>
      <tags>
        <tag>计算机网络面试题目</tag>
      </tags>
  </entry>
  <entry>
    <title>水平垂直居中</title>
    <url>/2020/05/21/19-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/</url>
    <content><![CDATA[<hr>
<h1 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h1><h2 id="行内元素水平居中"><a href="#行内元素水平居中" class="headerlink" title="行内元素水平居中"></a>行内元素水平居中</h2><p>这里行内元素是指文本text、图像img、按钮超链接等，只需给父元素设置<code>text-align:center</code>即可实现。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.center&#123;</span><br><span class="line">        text-align:center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;center&quot;&gt;水平居中&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="块级元素水平居中"><a href="#块级元素水平居中" class="headerlink" title="块级元素水平居中"></a>块级元素水平居中</h2><h3 id="定宽块级元素水平居中"><a href="#定宽块级元素水平居中" class="headerlink" title="定宽块级元素水平居中"></a>定宽块级元素水平居中</h3><p>只需给需要居中的块级元素加<code>margin:0 auto</code>即可，但这里需要注意的是，这里块状元素的宽度width值一定要有</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.center&#123;</span><br><span class="line">    width:200px;</span><br><span class="line">    margin:0 auto;</span><br><span class="line">    border:1px solid red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;center&quot;&gt;水平居中&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="不定宽块级元素水平居中"><a href="#不定宽块级元素水平居中" class="headerlink" title="不定宽块级元素水平居中"></a>不定宽块级元素水平居中</h3><p>不定宽，即块级元素宽度不固定</p>
<ul>
<li>方法1：设置<code>table</code></li>
</ul>
<p>通过给要居中显示的元素，设置<code>display:table</code>，然后设置<code>margin:0 auto</code>来实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.center&#123;</span><br><span class="line">    display:table;</span><br><span class="line">    margin:0 auto;</span><br><span class="line">    border:1px solid red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;center&quot;&gt;水平居中&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法2：设置<code>inline-block</code>（多个块状元素）</li>
</ul>
<p>子元素设置<code>inline-block</code>，同时父元素设置<code>text-align:center</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.center&#123;</span><br><span class="line">    text-align:center;</span><br><span class="line">&#125;</span><br><span class="line">.inlineblock-div&#123;</span><br><span class="line">    display:inline-block;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;center&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;inlineblock-div&quot;&gt;1&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;inlineblock-div&quot;&gt;2&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法3：设置<code>flex</code>布局</li>
</ul>
<p>只需把要处理的块状元素的父元素设置<code>display:flex</code>,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.center&#123;</span><br><span class="line">    display:flex;</span><br><span class="line">    justify-content:center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;center&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;flex-div&quot;&gt;1&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;flex-div&quot;&gt;2&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>方法4：position + 负margin；</p>
<p>方法5：position + margin：auto；</p>
<p>方法6：position + transform；</p>
<blockquote>
<p>这里方法4、5、6同下面垂直居中一样的道理，只不过需要把top/bottom改为left/right，在垂直居中部分会详细讲述。</p>
</blockquote>
<h1 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h1><h2 id="单行文本垂直居中"><a href="#单行文本垂直居中" class="headerlink" title="单行文本垂直居中"></a>单行文本垂直居中</h2><p>设置<code>paddingtop = paddingbottom</code>或设置<code>line-height=height</code>；</p>
<h2 id="多行文本垂直居中"><a href="#多行文本垂直居中" class="headerlink" title="多行文本垂直居中"></a>多行文本垂直居中</h2><p>通过设置父元素<code>table</code>，子元素<code>table-cell</code>和<code>vertical-align</code></p>
<p><code>vertical-align:middle</code>的意思是把元素放在父元素的中部</p>
<h2 id="块级元素垂直居中"><a href="#块级元素垂直居中" class="headerlink" title="块级元素垂直居中"></a>块级元素垂直居中</h2><ul>
<li>方法1：flex布局</li>
</ul>
<p>在需要垂直居中的父元素上，设置<code>display:flex</code>和<code>align-items：center</code></p>
<blockquote>
<p>要求：父元素必须显示设置height值</p>
</blockquote>
<ul>
<li>方法2：利用<code>position</code>和<code>top</code>和<code>负margin</code>（需知宽高）<ul>
<li>设置元素为absolute/relative/fixed</li>
<li>margin=负一半</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    border: 1px solid blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.child &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    height: 100px;</span><br><span class="line">    width: 150px;</span><br><span class="line">    top: 50%;</span><br><span class="line">    margin-top: -50px;</span><br><span class="line">    background-color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>方法3：利用<code>position</code>和<code>top/bottom</code>和<code>margin:auto</code>（注意不是margin:0 auto）</p>
<ul>
<li>position：absolute/relative/fixed</li>
<li>top/bottom：0</li>
<li>margin：auto</li>
</ul>
</li>
<li><p>方法4：利用<code>position</code>和<code>top</code>和<code>transform</code><br><code>transform</code>中<code>translate</code>偏移的百分比就是相对于元素自身的尺寸而言的</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    border: 1px solid blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.child &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    transform: translate(0, -50%);</span><br><span class="line">    background-color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h1><ul>
<li>方法1：绝对定位+margin:auto</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background: green;</span><br><span class="line">        </span><br><span class="line">        position:absolute;</span><br><span class="line">        left:0;</span><br><span class="line">        top: 0;</span><br><span class="line">        bottom: 0;</span><br><span class="line">        right: 0;</span><br><span class="line">        margin: auto;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法2：绝对定位+负margin</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">        width:200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background:green;</span><br><span class="line">        </span><br><span class="line">        position: absolute;</span><br><span class="line">        left:50%;</span><br><span class="line">        top:50%;</span><br><span class="line">        margin-left:-100px;</span><br><span class="line">        margin-top:-100px;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>方法3：绝对定位+transform</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background: green;</span><br><span class="line">    </span><br><span class="line">    position:absolute;</span><br><span class="line">    left:50%;    &#x2F;* 定位父级的50% *&#x2F;</span><br><span class="line">    top:50%;</span><br><span class="line">    transform: translate(-50%,-50%); &#x2F;*自己的50% *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法4：flex布局</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">      height:600px;  </span><br><span class="line">      </span><br><span class="line">      display:flex;</span><br><span class="line">      justify-content:center;  &#x2F;&#x2F;子元素水平居中</span><br><span class="line">      align-items:center;      &#x2F;&#x2F;子元素垂直居中</span><br><span class="line">        &#x2F;* aa只要三句话就可以实现不定宽高水平垂直居中。 *&#x2F;</span><br><span class="line"> &#125;</span><br><span class="line"> .box&gt;div&#123;</span><br><span class="line">     background: green;</span><br><span class="line">     width: 200px;</span><br><span class="line">     height: 200px;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法5：table-cell实现居中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display:table-cell;</span><br><span class="line">text-align:center;</span><br><span class="line">vertical-align: middle;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>栏式布局</title>
    <url>/2020/05/21/20-%E6%A0%8F%E5%BC%8F%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<hr>
<h1 id="三栏式布局"><a href="#三栏式布局" class="headerlink" title="三栏式布局"></a>三栏式布局</h1><blockquote>
<p>涉及浮动和清除浮动，主要讲解“圣杯”和“双飞翼”两种解决方法。这两种方法实现的都是三栏布局，两边的盒子宽度固定，中间盒子自适应，它们实现的效果是一样的，差别在于其实现的思想。</p>
</blockquote>
<h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><blockquote>
<p>圣杯：父盒子包含三个子盒子（左，中，右）</p>
</blockquote>
<ul>
<li>上部和下部各自占领屏幕所有宽度。</li>
<li>上下部之间的部分是一个三栏布局。</li>
<li>三栏布局两侧宽度不变，中间部分自动填充整个区域。</li>
<li>中间部分的高度是三栏中最高的区域的高度。<a id="more"></a>
本文会用三种方法来实现圣杯布局，分别是浮动，flexbox以及css grid。</li>
</ul>
<h3 id="浮动实现"><a href="#浮动实现" class="headerlink" title="浮动实现"></a>浮动实现</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;header&quot;&gt;这里是头部&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;middle&quot;&gt;中间部分&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;left&quot;&gt;左边&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;right&quot;&gt;右边&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;footer&quot;&gt;这里是底部&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.header,.footer&#123;</span><br><span class="line">    height:40px;</span><br><span class="line">    width:100%;</span><br><span class="line">    background:red;</span><br><span class="line">&#125;</span><br><span class="line">.footer&#123;</span><br><span class="line">    clear:both;</span><br><span class="line">&#125;</span><br><span class="line">.container&#123;</span><br><span class="line">    padding-left:200px;</span><br><span class="line">    padding-right:300px;</span><br><span class="line">&#125;</span><br><span class="line">.container div&#123;</span><br><span class="line">    postion:relative;</span><br><span class="line">    float:left;</span><br><span class="line">&#125;</span><br><span class="line">.middle&#123;</span><br><span class="line">    width:100%;</span><br><span class="line">    background:yellow;</span><br><span class="line">&#125;</span><br><span class="line">.left&#123;</span><br><span class="line">    width:200px;</span><br><span class="line">    background:pink;</span><br><span class="line">    margin-left:-100%;</span><br><span class="line">    right:200px;</span><br><span class="line">&#125;</span><br><span class="line">.right&#123;</span><br><span class="line">    width:300px;</span><br><span class="line">    background:aqua;</span><br><span class="line">    margin-right:-300px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>flexbox弹性盒子实现</strong></li>
</ol>
<blockquote>
<p>弹性盒子用来实现圣杯布局特别简单。只需要把中间的部分用flex布局即可。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;style&gt;</span><br><span class="line">		div&#123;</span><br><span class="line">			outline: 2px solid;</span><br><span class="line">			margin: 5px;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		&#x2F;* 以下为整个页面的布局 *&#x2F;</span><br><span class="line">		.main&#123;</span><br><span class="line">			display:flex;</span><br><span class="line">			flex-direction: column;</span><br><span class="line"></span><br><span class="line">			height:100%;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		.top, .footer&#123;</span><br><span class="line">			height: 50px;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		&#x2F;* 以下为中间的body布局 *&#x2F;</span><br><span class="line">		.body&#123;</span><br><span class="line">			flex:1;</span><br><span class="line"></span><br><span class="line">			display: flex;	</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		.body-main&#123;</span><br><span class="line">			flex: 1;</span><br><span class="line">			background-color: yellow;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		.body-left, .body-right&#123;</span><br><span class="line">			width: 100px;</span><br><span class="line">		&#125;</span><br><span class="line">	&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;div class&#x3D;&quot;main&quot;&gt;</span><br><span class="line">		&lt;div class&#x3D;&quot;top&quot;&gt;标题栏&lt;&#x2F;div&gt;</span><br><span class="line">		&lt;div class&#x3D;&quot;body&quot;&gt;</span><br><span class="line">			&lt;div class&#x3D;&quot;body-left&quot;&gt;左边导航栏&lt;&#x2F;div&gt;</span><br><span class="line">			&lt;div class&#x3D;&quot;body-main&quot;&gt;主内容，自动伸缩&lt;&#x2F;div&gt;</span><br><span class="line">			&lt;div class&#x3D;&quot;body-right&quot;&gt;右边提示栏&lt;&#x2F;div&gt;</span><br><span class="line">		&lt;&#x2F;div&gt;</span><br><span class="line">		&lt;div class&#x3D;&quot;footer&quot;&gt;页脚栏，使用flex布局&lt;&#x2F;div&gt;</span><br><span class="line">	&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h1 id="两栏式布局"><a href="#两栏式布局" class="headerlink" title="两栏式布局"></a>两栏式布局</h1><p>两列自适应布局：左列定宽/不定宽，右列自适应</p>
<h2 id="左列定宽，右列自适应"><a href="#左列定宽，右列自适应" class="headerlink" title="左列定宽，右列自适应"></a>左列定宽，右列自适应</h2><h3 id="margin-float"><a href="#margin-float" class="headerlink" title="margin + float"></a><code>margin + float</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;left&quot;&gt;&lt;p&gt;left&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;right-fix&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;right&quot;&gt;</span><br><span class="line">            &lt;p&gt;right&lt;&#x2F;p&gt;&lt;p&gt;right&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">    .left&#123;</span><br><span class="line">        float: left;     &#x2F;&#x2F;向左浮动</span><br><span class="line">        width: 100px;    &#x2F;&#x2F;固定宽度</span><br><span class="line">        position: relative;&#x2F;&#x2F;由于.left与.right-fix重合，且.right-fix在DOM树上的位置比.left要后，因此.right-fix会遮挡住.left，设置.left为relative可以让其冒出来。</span><br><span class="line">    &#125;</span><br><span class="line">    .right-fix&#123;</span><br><span class="line">        float: right;     &#x2F;&#x2F;向右浮动</span><br><span class="line">        width: 100%;    &#x2F;&#x2F;为了自适应设为100%</span><br><span class="line">        margin-left: -100px;&#x2F;&#x2F;由于宽度设为100%，.right-fix遭到浏览器换行处理；因此通过设置负的margin值，在左侧制造出100px的空白，使.right-fix与.left重合（即处于同一行）</span><br><span class="line">    &#125;</span><br><span class="line">    .right&#123;</span><br><span class="line">        margin-left: 120px;    &#x2F;&#x2F;由于.left和.right-fix重合了，因此给.right设置一个margin-left，避免内容区（.right）与.left重合。另外，120px - 100px &#x3D; 多出来的20px实际上就相当于.left和.right之间的间隔了。</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;left&quot;&gt;</span><br><span class="line">        &lt;p&gt;left&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;right&quot;&gt;</span><br><span class="line">        &lt;p&gt;right&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p&gt;right&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">.parent&#123;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.left&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 100px;</span><br><span class="line">&#125;</span><br><span class="line">.right&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 120px;    &#x2F;&#x2F;比.left的left多出20px，相当于间隔</span><br><span class="line">    right: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方法是通过absolute配合left/right进行布局：</p>
<p>设置display: absolute后，通过top/right/bottom/left可以实现对元素的位置进行像素级的任意控制。因此，使用left属性即可控制各元素的起始位置，避免重叠。<br>自适应的关键在于left和right属性，在对元素同时设置这两个属性后，元素的宽度便会遭到拉伸，实现自适应。<br>需要注意的是父级元素需要设置display: relative。<br>这种方案很容易理解，但缺点就是不能做到“不定宽”，因为.left和.right的left属性的值高度相关。</p>
<h3 id="table布局"><a href="#table布局" class="headerlink" title="table布局"></a>table布局</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;left&quot;&gt;</span><br><span class="line">        &lt;p&gt;left&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;right&quot;&gt;</span><br><span class="line">        &lt;p&gt;right&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p&gt;right&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">.parent&#123;</span><br><span class="line">    display: table; width: 100%;</span><br><span class="line">    table-layout: fixed;</span><br><span class="line">&#125;</span><br><span class="line">.left,.right&#123;</span><br><span class="line">    display: table-cell;</span><br><span class="line">&#125;</span><br><span class="line">.left&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    padding-right: 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法是表格布局的典型运用。说真的，我也很迷惘要不要使用表格布局，毕竟已经是上个时代的产物了，虽然已经不再用<code>&lt;table&gt;</code>的HTML结构了，但用上相应的CSS其实思路跟以前是变化不大的。<br>这个方法主要是利用了表格(table)的宽度必然等于其所有单元格(table-cell)加起来的总宽度，那么只要表格的宽度一定，其中一个（或几个）单元格的宽度也一定，那么另外一个未设置宽度的单元格则会默认占满剩下的宽度，即实现自适应。</p>
<h2 id="左列不定宽，右列自适应"><a href="#左列不定宽，右列自适应" class="headerlink" title="左列不定宽，右列自适应"></a>左列不定宽，右列自适应</h2><h3 id="float-BFC"><a href="#float-BFC" class="headerlink" title="float + BFC"></a>float + BFC</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;left&quot;&gt;</span><br><span class="line">        &lt;p&gt;left&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;right&quot;&gt;</span><br><span class="line">        &lt;p&gt;right&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p&gt;right&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">.left&#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 100px;</span><br><span class="line">    margin-right: 20px;    &#x2F;&#x2F;形成20px的间隔</span><br><span class="line">&#125;</span><br><span class="line">.right&#123;</span><br><span class="line">    overflow: hidden; &#x2F;&#x2F;通过设置overflow: hidden来触发BFC特性</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法主要是应用到BFC的一个特性：</p>
<p>浮动元素的块状兄弟元素会无视浮动元素的位置，尽量占满一整行，这样该兄弟元素就会被浮动元素覆盖。</p>
<p><strong>若浮动元素的块状兄弟元素为BFC，则不会占满一整行，而是根据浮动元素的宽度，占据该行剩下的宽度，避免与浮动元素重叠。</strong></p>
<p>浮动元素与其块状BFC兄弟元素之间的margin可以生效，这将继续减少兄弟元素的宽度。</p>
<p>并不是一定要在.right上用overflow: hidden;，只要能触发BFC就好了，另外在IE6上也可以触发haslayout特性（推荐用*zoom: 1;）。<br>由于.right的宽度是自动计算的，不需要设置任何与.left宽度相关的css，因此.left的宽度可以不固定（由内容盒子决定）。</p>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;left&quot;&gt;</span><br><span class="line">        &lt;p&gt;left&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;right&quot;&gt;</span><br><span class="line">        &lt;p&gt;right&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p&gt;right&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">.parent&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line">.left&#123;</span><br><span class="line">    margin-right: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.right&#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">&#125;</span><br><span class="line">.left p&#123;width: 200px;&#125;</span><br></pre></td></tr></table></figure>

<p>flex布局的自适应我就不多说了，本来就是设计来自适应的，只需要用上flex: 1;，就能让.right分到.parent的宽度减去.left的宽度。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>脚本化HTTP</title>
    <url>/2020/05/20/46-%E8%84%9A%E6%9C%AC%E5%8C%96HTTP/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本章会说明在没有导致Web浏览器重新加载任何窗口或窗体的内容情况下，脚本如何实现Web浏览器与服务器之间的通信。</p>
<a id="more"></a>

<p>术语Ajax描述了一种主要使用脚本操纵HTTP的Web应用架构。Ajax应用的主要特点是使用脚本操纵HTTP和Web服务器进行数据交换，不会导致页面重载。Web应用可以使用Ajax技术把用户的交互数据记录到服务器中，也可以开始只显示简单页面，之后按需加载额外的数据和页面组件来提升应用的启动时间。</p>
<p>Comet是和使用脚本操纵HTTP的Web应用架构相关的术语。某种意义上，Comet和Ajax相反。在Ajax中，客户端从服务端“拉”数据，而在Comet中，服务端向客户端“推”数据。</p>
<p>实际上，<code>&lt;script&gt;</code>元素的src属性能设置URL并发起 HTTP GET请求。<code>&lt;script&gt;</code><strong>可以跨域通信而不受限于同源策略</strong>。通常，使用基于<code>&lt;script&gt;</code>的Ajax传输协议时，<strong>服务器的响应采用JSON编码的数据格式</strong>，当执行脚本时，JavaScript解析器能自动将其解码。由于它使用JSON数据格式，因此这种<strong>Ajax传输协议也叫JSONP</strong>。</p>
<p>所有浏览器都支持XMLHttpRequest对象，它定义了使用脚本操纵HTTP的api，它可以使用get和post，同时能获取任何类型的文本文档。</p>
<h2 id="使用XMLHttpRequest"><a href="#使用XMLHttpRequest" class="headerlink" title="使用XMLHttpRequest"></a>使用XMLHttpRequest</h2><ul>
<li><p><strong>使用这个HTTP API必须做的第一件事就是实例化XMLHttpRequest对象</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var resuest &#x3D; new XMLHttpRequest();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以重用已经存在的XMLHttpRequest，但是注意这将会终止之前通过该对象挂起的任何请求。</p>
</blockquote>
</li>
<li><p>一个HTTP请求由4个部分组成</p>
<ul>
<li>HTTP请求方法</li>
<li>正在请求的url</li>
<li>一个可选的请求头集合，其中可能包含身份验证信息</li>
<li>一个可选的请求主体</li>
</ul>
</li>
<li><p>服务器返回的HTTP响应包括3部分</p>
<ul>
<li>一个数字和文字组成的状态码，用来显示请求的成功和失败</li>
<li>一个响应头集合</li>
<li>响应主题</li>
</ul>
</li>
</ul>
<h3 id="指定请求"><a href="#指定请求" class="headerlink" title="指定请求"></a>指定请求</h3><ul>
<li>发起HTTP请求的下一步是调用XMLHttpRequest对象的<strong>open()</strong>方法去指定这个<strong>请求的两个必须部分：方法和url</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">request.open(&quot;GET&quot;, &quot;data.csv&quot;);</span><br></pre></td></tr></table></figure>
<p>open()的第一个参数指定HTTP方法，支持“GET”和“POST”请求，也支持把“HEAD”,“DELETE”,“OPTIONS”,“PUT”作为open()的第一个参数。</p>
<p>open()的第二个参数是url。跨域的请求通常会报错。</p>
<ul>
<li><p>如果有请求头的话，请求进程的下个步骤就是<strong>设置请求头</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">request.setRequestHeader(&quot;Content-Type&quot;, &quot;text&#x2F;plain&quot;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>发起HTTP请求的最后一步是指定可选的请求主体并向服务器发送它，使用<code>send()</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">request.send(null);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function postMessage(msg) &#123;</span><br><span class="line">    var resuest &#x3D; new XMLHttpRequest();</span><br><span class="line">    request.open(&quot;POST&quot;, &quot;.&#x2F;log.php&quot;);</span><br><span class="line">    request.setRequestHeader(&quot;Content-Type&quot;, &quot;text&#x2F;plain&quot;, charset&#x3D;UTF-8);</span><br><span class="line">    request.send(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>open的第三个参数可以设置同步或异步响应，默认为异步(true)。</p>
<h3 id="取得响应"><a href="#取得响应" class="headerlink" title="取得响应"></a>取得响应</h3><ul>
<li>status和statusText属性以数字和文本的形式返回HTTP状态码。</li>
<li>使用getResponseHeader和getAllResponseHeaders能查询响应头。XMLHttpRequest会自动处理cookie。</li>
<li>响应主体可以从responseText属性中得到文本形式的，从responseXML中得到Document形式的。</li>
</ul>
<p>XMLHttpRequest对象通常异步使用，发送请求后，send方法立即返回，直到响应返回，相应方法和属性才有效。为了在响应准备就绪时得到通知，必须监听XMLHttpRequest对象上的<code>readystatechange</code>事件。</p>
<p>readyState是一个整数，它指定了HTTP请求的状态。表格如下：</p>
<table>
<thead>
<tr>
<th align="center">常量</th>
<th align="center">值</th>
<th align="center">定义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">UNSENT</td>
<td align="center">0</td>
<td align="center">open尚未调用</td>
</tr>
<tr>
<td align="center">OPENED</td>
<td align="center">1</td>
<td align="center">open已调用</td>
</tr>
<tr>
<td align="center">HEADERS_RECEIVED</td>
<td align="center">2</td>
<td align="center">接收到头信息</td>
</tr>
<tr>
<td align="center">LOADING</td>
<td align="center">3</td>
<td align="center">接收到响应主体</td>
</tr>
<tr>
<td align="center">DONE</td>
<td align="center">4</td>
<td align="center">响应完成</td>
</tr>
</tbody></table>
<p>当readyState值变成4时或服务器的响应完成时，所有的浏览器都触发readystatechange事件。</p>
<p>为了监听readystatechange事件，要把事件监听函数设置为XMLHttpRequest对象的onreadystatechange属性。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getText(url, callback) &#123;</span><br><span class="line">    var resuest &#x3D; new XMLHttpRequest();</span><br><span class="line">    request.open(&quot;GET&quot;, &quot;url&quot;);</span><br><span class="line"></span><br><span class="line">    request.onreadystatechange &#x3D; function() &#123;</span><br><span class="line">        if (request.readyState &#x3D;&#x3D;&#x3D; 4 &amp;&amp; request.status &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">            var type &#x3D; request.getResponseHeader(&quot;Conteng-Type&quot;);</span><br><span class="line">            if (type.match(&#x2F;^text^&#x2F;)) callback(request.responseText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>基本类型和引用类型的值</title>
    <url>/2020/05/09/%E7%AC%AC4%E7%AB%A0-%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%80%BC/</url>
    <content><![CDATA[<hr>
<h1 id="变量，作用域和内存问题"><a href="#变量，作用域和内存问题" class="headerlink" title="变量，作用域和内存问题"></a>变量，作用域和内存问题</h1><p>本文主要内容:</p>
<ul>
<li>理解基本类型和引用类型的值</li>
<li>理解执行环境</li>
<li>理解垃圾收集<a id="more"></a>
<h2 id="基本类型和引用类型的值"><a href="#基本类型和引用类型的值" class="headerlink" title="基本类型和引用类型的值"></a>基本类型和引用类型的值</h2></li>
</ul>
<p>基本数据类型是按值访问的，因为可以操作保存在变量中的实际的值。</p>
<p>引用类型的值是保存在内存中的对象。JavaScript不允许直接访问内存中的位置，即不能直接操作对象的内存空间。<strong>在操作对象时，实际上是在操作对象的引用而不是实际的对象，为此，引用类型的值是按引用访问的</strong>。</p>
<h3 id="动态的属性"><a href="#动态的属性" class="headerlink" title="动态的属性"></a>动态的属性</h3><p>对于引用类型的值，可以为其添加属性和方法，也可以改变和删除其属性和方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var person &#x3D; new Object();</span><br><span class="line">person.name &#x3D; &quot;Nicholas&quot;;</span><br><span class="line">alert(person.name);   &#x2F;&#x2F; &quot;Nicholas&quot;</span><br></pre></td></tr></table></figure>

<p>我们不能给基本类型的值添加属性，尽管这样不会导致任何错误。比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var name &#x3D; &quot;Nicholas&quot;;</span><br><span class="line">name.age &#x3D; 27;</span><br><span class="line">alert(name.age)  &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure>

<h3 id="复制变量值"><a href="#复制变量值" class="headerlink" title="复制变量值"></a>复制变量值</h3><p>在从一个变量向另一个变量复制基本类型值和引用类型值时，也存在不同。</p>
<ul>
<li><p>如果从一个变量向一个变量复制基本类型的值，会在变量对象上创建一个新值，然后把该值复制到为新变量分配的位置上。<strong>两个变量可以参与任何操作而不会相互影响。</strong></p>
</li>
<li><p>当一个变量向另一个变量复制引用类型的值时，同样也会将存储在变量对象的值复制一份到为新变量分配的空间中。不同的是，<strong>这个副本是一个指针，这个指针指向存储在堆中的一个对象</strong>，复制结束后，两个变量实际上将引用同一个对象。因此，<strong>改变其中一个变量，就会影响另一个变量。</strong></p>
</li>
</ul>
<h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><p><strong>ECMAScript中所有函数的参数都是按值传递的</strong>。即，把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量一样。</p>
<p>在向函数参数传递引用类型的值时，会把这个值的内存地址赋值给一个局部变量，因此这个局部变量的会反映在函数的外部。</p>
<p>例1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function addTen(num) &#123;</span><br><span class="line">    num + &#x3D; 10;</span><br><span class="line">    return num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var count &#x3D; 20;</span><br><span class="line">var result &#x3D; addTen(count);</span><br><span class="line">alert(count);  &#x2F;&#x2F; 20</span><br><span class="line">alert(result);  &#x2F;&#x2F;30</span><br></pre></td></tr></table></figure>

<p>例2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function setName(obj) &#123;</span><br><span class="line">    obj.name &#x3D; &quot;Nicholas&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var person &#x3D; new Object();</span><br><span class="line">setName(person);</span><br><span class="line">alert(person.name); &#x2F;&#x2F; &quot;Nicholas&quot;</span><br></pre></td></tr></table></figure>

<p>例3：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function setName(obj) &#123;</span><br><span class="line">    obj.name &#x3D; &quot;Nicholas&quot;;</span><br><span class="line">    obj &#x3D; new Object();</span><br><span class="line">    obj.name &#x3D; &quot;Greg&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var person &#x3D; new Object();</span><br><span class="line">setName(person);</span><br><span class="line">alert(person.name); &#x2F;&#x2F; &quot;Nicholas&quot;</span><br></pre></td></tr></table></figure>
<p>例3中，如果person是按引用传递的，那么person就会自动被修改为指向其name属性为“Greg”的新对象。但是结果显示为”Nicholas”，这说明，即使在函数内部修改了参数的值，但是原始的引用仍然保持未变。实<strong>际上，在函数内部重写obj时，这个变量引用的就是一个局部对象了。而这个局部对象会在函数执行完毕后立即被销毁。</strong></p>
<blockquote>
<p>可以把ECMAScript函数的参数想象成局部变量。</p>
</blockquote>
<h3 id="检测类型"><a href="#检测类型" class="headerlink" title="检测类型"></a>检测类型</h3><p><code>typeof</code>操作符是确定一个变量是字符串、数值、布尔值、还是<code>undefined</code>的最佳工具。如果变量的值是一个对象或者null，则会返回<code>object</code>。</p>
<p>在<strong>检测引用类型</strong>的值时，<code>typeof</code>的作用不大，要使用<code>instanceof</code>，可以知道它是什么类型的对象。</p>
<p><code>result = variable instanceof constructor</code></p>
<p>如果变量是给定引用类型的实例(根据原型链来识别)，那么<code>instanceof</code>就会返回<code>true</code>。<strong>所有引用类型的实例都是object。</strong><code>instanceof</code>检测基本类型时，就会返回false，因为基本类型不是对象。</p>
<h2 id="执行环境-执行上下文-及作用域"><a href="#执行环境-执行上下文-及作用域" class="headerlink" title="执行环境(执行上下文)及作用域"></a>执行环境(执行上下文)及作用域</h2><p>执行环境是JavaScript中的一个重要概念。</p>
<p>执行环境定义了变量或函数有权访问的其他数据，决定了他们各自的行为。</p>
<p>每个执行环境都有一个与之关联的变量对象，环境中定义的所有变量和函数都保存在这个对象中。</p>
<p><strong>全局执行环境是最外围的一个执行环境</strong>。根据ECMAScript实现所在的宿主环境不同，表示执行环境的对象也不一样。在Web浏览器中，全局执行环境被认为是window对象，因此所有全局变量和函数都是作为window对象的属性和方法创建的。某个执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁(全局执行环境直到应用程序退出——例如关闭网页/浏览器时才会被销毁)。</p>
<p><strong>每个函数都有自己的执行环境</strong>。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中(执行上下文栈)。而在函数执行之后，栈将其环境弹出，把控制权返回给之前的执行环境。</p>
<p><strong>当代码在一个环境中执行时，会创建变量对象的一个作用域链</strong>。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的前端，始终都是当前执行的代码所在的环境的变量对象。如果这个环境是函数，则其活动对象作为变量对象。活动对象在最开始时只包含一个变量，即<code>arguments</code>对象。作用域链中的下一个变量来自包含(外部)环境，而再下一个变量对象则来自下一个包含环境。这样，一直延续到全局执行环境；全局执行环境的变量对象始终都是作用域链中的最后一个对象。</p>
<p>标识符解析是沿着作用域链一级一级地搜索标识符的过程。搜索过程始终从作用域链的前端开始，然后逐级的向后回溯，直到找到标识符为止(若找不到，通常会导致错误发生)。</p>
<p>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var color &#x3D; &quot;blue&quot;;</span><br><span class="line"></span><br><span class="line">function changeColor () &#123;</span><br><span class="line">    if (color &#x3D;&#x3D;&#x3D; &quot;blue&quot;) &#123;</span><br><span class="line">        color &#x3D; &quot;red&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        color &#x3D; &quot;blue&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeColor();</span><br><span class="line"></span><br><span class="line">alert(&quot;Color is now&quot; + color);</span><br></pre></td></tr></table></figure>

<p>在这个简单的例子中，函数changeColor()的作用域包含两个对象：它自己的变量对象(其中定义着arguments对象)和全局环境的变量对象。可以在函数内部访问变量color，就是因为可以在这个作用域链中找到他。</p>
<p>此外，在局部作用域中定义的变量可以在局部环境中与全局变量互换使用，如下面例子所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var color &#x3D; &quot;blue&quot;;</span><br><span class="line"></span><br><span class="line">function changeColor () &#123;</span><br><span class="line">    var anotherColor &#x3D; &quot;red&quot;;</span><br><span class="line"></span><br><span class="line">    function swapColors () &#123;</span><br><span class="line">        var tempColor &#x3D; anotherColor;</span><br><span class="line">        anotherColor &#x3D; color;</span><br><span class="line">        color &#x3D; tempColor;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;这里可以访问color，anotherColor和tempColor</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;这里可以访问color，anotherColor，但不能访问tempColor</span><br><span class="line">    swapColors();</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;这里只能访问color</span><br><span class="line">changeColor();</span><br></pre></td></tr></table></figure>

<p>以上代码共涉及三个执行环境：全局环境、changeColor()的局部环境和swapColors()的局部环境。作用域链如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window</span><br><span class="line">  |______color</span><br><span class="line">  |______changeColor()</span><br><span class="line">               |_______anotherColor</span><br><span class="line">               |_______swapColors()</span><br><span class="line">                          |______tempColor</span><br></pre></td></tr></table></figure>

<p>内部环境可以通过作用域链访问所有的外部环境，但是外部环境不能访问内部环境中的任何变量和函数。</p>
<p><strong>每个环境可以向上搜索作用域链</strong>，以查询变量和函数名；<strong>但是任何环境都不能通过向下搜索作用域链而进入另一个执行环境</strong>。</p>
<blockquote>
<p>函数参数也被当作变量来对待，因此其访问规则与执行环境中的其他变量相同。</p>
</blockquote>
<h3 id="延长作用域链"><a href="#延长作用域链" class="headerlink" title="延长作用域链"></a>延长作用域链</h3><p>有些语句可以在作用域链的前端临时增加一个变量对象，该变量对象会在代码执行后被移除。在两种情况下会发生这种现象。具体来说，就是当执行流进入下列任何一个语句时，作用域链就会得到加长：</p>
<ul>
<li>try-catch语句的catch块；</li>
<li>with语句</li>
</ul>
<p>这两个语句都会在作用域链的前端添加一个变量对象。对with语句来说，会将指定的对象添加到作用域链中。对于catch语句来说，会创建一个新的变量对象，其中包含的是被抛出的错误对象的声明。下面看一个例子:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function buildUrl() &#123;</span><br><span class="line">    var qs &#x3D; &quot;?debug&#x3D;true&quot;;</span><br><span class="line"></span><br><span class="line">    with(location) &#123;</span><br><span class="line">        var url &#x3D; href + qs;  &#x2F;&#x2F;href实际上是location.href</span><br><span class="line">    &#125;</span><br><span class="line">    return url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在此，with语句接收的是location对象，因此其变量对象中就包含了location对象的所有属性，而这个变量对象被添加到了作用域链的前端。</p>
<h3 id="没有块级作用域"><a href="#没有块级作用域" class="headerlink" title="没有块级作用域"></a>没有块级作用域</h3><p>JavaScript没有块级作用域经常会导致理解上的困惑。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (true) &#123;</span><br><span class="line">    var color &#x3D; &quot;blue&quot;;</span><br><span class="line">&#125;</span><br><span class="line">alert(color);  &#x2F;&#x2F;&quot;blue&quot;;</span><br></pre></td></tr></table></figure>
<p>上述代码中，在一个if语句中定义了变量color。若是在C，C++或Java中，color会在if语句执行完毕后被销毁。但是<strong>在JavaScript中，if语句中，if语句中的变量声明会将变量添加到当前的执行环境中</strong>。在使用for语句时，尤其要牢记这一差异，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (var i &#x3D; 0;i &lt; 10; i++) &#123;</span><br><span class="line">    doSomething(i);</span><br><span class="line">&#125;</span><br><span class="line">alert(i) &#x2F;&#x2F;10，循环结束后，变量i依旧存在于循环外部的执行环境中</span><br></pre></td></tr></table></figure>

<h4 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h4><p><strong>使用<code>var</code>声明的变量会自动被添加到最接近的环境中(变量提升)</strong>。在函数内部中，最接近的环境是函数的局部环境，with语句中，最接近的是函数环境。如果初始化变量时没有使用<code>var</code>声明，该变量会被添加到全局环境。</p>
<p>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">funtion add(num1,num2) &#123;</span><br><span class="line">    var sum &#x3D; num1 + num2;</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var result &#x3D; add(10, 20); &#x2F;&#x2F;30</span><br><span class="line"></span><br><span class="line">alert(sum) &#x2F;&#x2F;错误</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">funtion add(num1,num2) &#123;</span><br><span class="line">    sum &#x3D; num1 + num2;</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var result &#x3D; add(10, 20); &#x2F;&#x2F;30</span><br><span class="line"></span><br><span class="line">alert(sum) &#x2F;&#x2F;30,sum在全局环境中</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在初始化变量之前一定要声明，可以避免一些常见的错误。在严格模式下，初始化未经声明的变量会导致错误。</p>
</blockquote>
<h4 id="查询标识符"><a href="#查询标识符" class="headerlink" title="查询标识符"></a>查询标识符</h4><p>当在某个环境中为了读取或写入而引用一个标识符时，必须通过搜索来确定该标识符实际代表什么。搜索过程从作用域链的前端开始，向上逐级查询与给定名字匹配的标识符。如果在局部环境中找到了该标识符，搜索过程停止，变量就绪。如果在局部环境中没有找到该变量名，则继续沿作用域链向上搜索。搜索过程将一直追溯到全局环境的变量对象。如果在全局环境中页没有找到这个标识符，则意味着该变量尚未声明。</p>
<p>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var color &#x3D; &quot;blue&quot;;</span><br><span class="line"></span><br><span class="line">function getColor() &#123;</span><br><span class="line">    return color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(color);   &#x2F;&#x2F; blue</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var color &#x3D; &quot;blue&quot;;</span><br><span class="line"></span><br><span class="line">function getColor() &#123;</span><br><span class="line">    var color &#x3D; &quot;red&quot;;    &#x2F;&#x2F; 向上查询找到，搜索结束</span><br><span class="line">    return color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(color);   &#x2F;&#x2F; red</span><br></pre></td></tr></table></figure>

<h2 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h2><p>JavaScript具有自动垃圾收集机制，也就是说，执行环境会负责管理代码执行过程中使用的内存。</p>
<p>这种垃圾收集机制的原理很简单：找出那些不再继续使用的变量，然后释放其占用的内存。因此，垃圾收集器会按照固定的时间间隔周期性的执行这一操作。</p>
<p>垃圾收集器必须跟踪那个变量有用哪个变量没有用，对于不再有用的变量打上标记，以备将来收回其占用的内存。标识无用变量的策略一般有2个。</p>
<h3 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h3><p>JavaScript最常用的垃圾收集方式是标记清除。当变量进入环境中时，就将这个变量标识为“进入环境”。</p>
<p>可以使用任何方式来标记变量。</p>
<p>垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后垃圾收集器完成内存清除工作，销毁那些带标记的值并回收他们所占用的内存空间。</p>
<h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>引用计数的含义是跟踪记录每个值被引用的次数。当一个值的引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。</p>
<h3 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h3><p>垃圾收集器是周期性运行的，而且如果为变量分配的内存数量很可观，那么回收工作量也是相当大的。在这种情况下，确定垃圾收集的时间间隔是一个非常重要的问题。</p>
<h3 id="管理内存"><a href="#管理内存" class="headerlink" title="管理内存"></a>管理内存</h3><p>分配给Web浏览器的可用内存数量通常要比分配给桌面应用程序的少。这样做的目的主要是出于安全方面的考虑，目的是防止运行JavaScript的网页耗尽全部系统内存而导致系统崩溃。内存限制不仅会影响给变量分配内存，同时还会影响调用栈以及在一个线程中能够同时执行的语句数量。</p>
<p>因此，确保占用最少的内存，可以让页面获得更好的性能。而优化内存占用的最佳方式，就是为执行中的代码只保存必要的数据。一旦数据不再有用，最好通过将其设置为null来释放引用——这个做法叫做解除引用。这一做法适用于大多数全局变量和全局对象的属性。局部变量会在他们离开执行环境时自动被解除引用。</p>
]]></content>
      <categories>
        <category>JavaScript高级程序设计</category>
      </categories>
      <tags>
        <tag>JavaScript高级程序设计</tag>
      </tags>
  </entry>
  <entry>
    <title>基本概念(数据类型)</title>
    <url>/2020/04/25/%E7%AC%AC3%E7%AB%A0-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文为JavaScript高级程序设计一书学习记录。</p>
<p>本文主要内容：</p>
<ul>
<li>语法</li>
<li>数据类型</li>
<li>流控制语句</li>
<li>函数<a id="more"></a>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2></li>
</ul>
<h3 id="区分大小写"><a href="#区分大小写" class="headerlink" title="区分大小写"></a>区分大小写</h3><p>ECMAscript中的一切(变量、函数名、操作符)都区分大小写。</p>
<h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><p>ECMAscript5引入了严格模式。在严格模式下，ECMAscript3中一些不确定的行为得到了处理，对某些不安全的操作也会抛出错误。要在整个脚本中启用严格模式，可以在顶部添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;use strict&quot;</span><br></pre></td></tr></table></figure>

<p>在函数内部的上方包含这条编译指示，也可以指定函数在严格模式下执行。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>ECMAscript 的变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据</strong>。换句话说，每个变量仅仅是一个用于保存值的占位符。定义变量时要使用<code>var</code>操作符，后跟变量名。</p>
<p>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var message &#x3D; &quot;hi&quot;</span><br></pre></td></tr></table></figure>

<p>可以在修改变量值的同时修改值的类型。</p>
<p><strong>有一点必须注意，即用<code>var</code>操作符定义的变量将成为定义该变量的作用域中的局部变量。如果在函数中使用<code>var</code>定义一个变量，那么这个变量在函数退出后就会被销毁。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function test() &#123;</span><br><span class="line">    var message &#x3D; &quot;hi&quot;;  &#x2F;&#x2F; 局部变量</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line">alert(message);  &#x2F;&#x2F; 错误</span><br></pre></td></tr></table></figure>

<p>也可以省略<code>var</code>操作符，从而创建一个全局变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function test() &#123;</span><br><span class="line">    message &#x3D; &quot;hi&quot;;  &#x2F;&#x2F; 全局变量</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line">alert(message);  &#x2F;&#x2F; hi</span><br></pre></td></tr></table></figure>

<p>可以使用一条语句定义多个变量，只要像下面这样把每个变量（初始化或不初始化均可）用逗号分隔开即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var message &#x3D; &quot;hi&quot;;</span><br><span class="line">    found &#x3D; false;</span><br><span class="line">    age &#x3D; 29;</span><br></pre></td></tr></table></figure>

<p>在严格模式下，不能定义名为<code>eval</code>或<code>arguments</code>的变量，否则会导致语法错误。</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>ECMAscript有6种基本数据类型，undefined、Null、Boolean、Number、string和symbol。还有一种复杂数据类型Object。</p>
<h3 id="typeof操作符"><a href="#typeof操作符" class="headerlink" title="typeof操作符"></a>typeof操作符</h3><ul>
<li>undefined——如果这个值未定义；</li>
<li>boolean——如果这个值是布尔值；</li>
<li>string——如果这个值是字符串；</li>
<li>number——如果这个值是数值；</li>
<li>object——如果这个值是对象或者null</li>
<li>function——如果这个值是函数</li>
</ul>
<h3 id="undefined类型"><a href="#undefined类型" class="headerlink" title="undefined类型"></a>undefined类型</h3><p>在使用<code>var</code>声明变量但未对其加以初始化时，这个变量的值就是undefined。</p>
<h3 id="Null类型"><a href="#Null类型" class="headerlink" title="Null类型"></a>Null类型</h3><p>从逻辑角度看，<code>null</code>表示一个空对象指针，而这也是<code>typeof</code>返回<code>object</code>的原因。</p>
<p><strong>注意</strong>：位于<code>null</code>和<code>undefined</code>之间的<code>==</code>总是会返回<code>true</code>，不过要注意的是，这个操作符出于比较的目的会转换其操作数。</p>
<h3 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h3><p>两个值：<code>true</code> + <code>false</code>,可以调用转型函数<code>Boolean()</code>，转换为Boolean类型。</p>
<h3 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h3><p>最基本的数值字面量格式是十进制整数，直接在代码中输入即可。</p>
<p>整数还可以通过八进制或十六进制的字面值来表示。其中，八进制字面值的第一位必须是0，八进制在严格模式下是无效的，会导致支持该模式的JavaScript引擎抛出错误。</p>
<h4 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h4><p>由于内存的限制，ECMAscript不能保存世界上所有的数值。ECMAscript能够保存的最小的数值保存在<code>Number.MIN_VALUE</code>中——大多数浏览器中，这个值是<code>5e-324</code>；能够表示的最大数值保存在<code>Number.MAX_VALUE中</code>。</p>
<p>如果在某次计算的结果得到了一个超出JavaScript数值范围的值，那么这个数值将被自动转换成特殊的<code>Infinity</code>值。</p>
<p><code>inifinity</code>值布不能参加数值计算，可以使用<code>isFinite()</code>函数判断数值是否有穷。</p>
<h4 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h4><p><code>NaN</code>即非数值(not a number)是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数未返回数值的情况。</p>
<ul>
<li><code>NaN</code>本身有两个非同寻常的特点。<ul>
<li>首先，任何涉及<code>NaN</code>的操作都会返回<code>NaN</code></li>
<li>其次，<code>NaN</code>与任何值都不相等，包括<code>NaN</code>本身。</li>
<li>针对，有<code>isNaN()</code>这个函数，接收一个任何类型的参数，任何不能被转换为数值的值都会导致这个函数返回<code>true</code>。</li>
</ul>
</li>
</ul>
<h4 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h4><p>有3个函数可以把非数值转换为数值，<code>Number()</code>, <code>parseInt()</code>,<code>parseFloat()</code>。</p>
<p><code>Number()</code>可以用于任何数据类型，另外两个专用于字符串。</p>
<p><code>Number()</code>函数的转换规则：</p>
<ul>
<li><code>Boolean</code>值，<code>true</code>和<code>false</code>转换为1和0；</li>
<li>数字值，返回原值；</li>
<li><code>null</code>，返回0；</li>
<li><code>undefined</code>返回<code>NaN</code></li>
<li>字符串<ul>
<li>字符串只包含数字，返回数字</li>
<li>字符串包含有效的浮点格式，返回对应浮点值</li>
<li>包含有效的十六进制值，返回相同大小的十进制值</li>
<li>字符串空，返回0；</li>
<li>包含上述格式外的，返回<code>NaN</code></li>
</ul>
</li>
<li>对象，调用对象的<code>valueof</code>方法，按照前面规则返回值。</li>
</ul>
<p><code>parseInt()</code>可以有第二个参数，表示多少进制。</p>
<h4 id="object类型"><a href="#object类型" class="headerlink" title="object类型"></a>object类型</h4><p>ECMAscript中的对象其实就是一组数据和功能的集合。对象可以通过执行<code>new</code>操作符后跟随名称来创建。</p>
<p><code>object</code>的每个实例都具有以下属性和方法：</p>
<ul>
<li><code>constructor</code>：保存着用于创建当前对象的函数。</li>
<li><code>hasownProperty(propertyName)</code>：用于检查给定的属性在当前对象实例中是否存在。</li>
<li><code>isPrototypeOf(object)</code>：用于检查传入的对象是否是当前对象的原型。</li>
<li><code>propertyIsEnumerable(propertyName)</code>：用于检查给定的属性是否能用for-in语句。</li>
<li><code>toLocalString()</code>：返回对象的字符串表示，该字符串与执行环境的地区对应。</li>
<li><code>toString()</code>：返回对象的字符串表示。</li>
<li><code>valueOf()</code>：返回对象的字符串、数值或布尔值表示。</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript高级程序设计</category>
      </categories>
      <tags>
        <tag>JavaScript高级程序设计</tag>
      </tags>
  </entry>
  <entry>
    <title>Module的语法</title>
    <url>/2020/04/22/24-Module%E7%9A%84%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要内容：</p>
<ul>
<li>概述</li>
<li>严格模式</li>
<li>export 命令</li>
<li>import 命令</li>
<li>模块的整体加载</li>
<li>export default 命令</li>
<li>export 与 import 的复合写法</li>
<li>模块的继承</li>
<li>跨模块常量</li>
<li>import()<a id="more"></a>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2></li>
</ul>
<p>在 ES6 之前，社区制定了一些模块加载方案，最主要的有 <code>CommonJS</code> 和 <code>AMD</code> 两种。<strong>前者用于服务器，后者用于浏览器</strong>。ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 <code>CommonJS</code> 和 <code>AMD</code> 规范，成为浏览器和服务器通用的模块解决方案。</p>
<blockquote>
<p>ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。</p>
</blockquote>
<p><code>CommonJS</code> 和<code>AMD</code>模块，都只能在运行时确定这些东西。比如，<code>CommonJS</code>模块就是对象，输入时必须查找对象属性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; CommonJS模块</span><br><span class="line">let &#123; stat, exists, readFile &#125; &#x3D; require(&#39;fs&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">let _fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line">let stat &#x3D; _fs.stat;</span><br><span class="line">let exists &#x3D; _fs.exists;</span><br><span class="line">let readfile &#x3D; _fs.readfile;</span><br></pre></td></tr></table></figure>

<p>上面代码的实质是整体加载fs模块（即加载fs的所有方法），生成一个对象<code>（_fs）</code>，然后再从这个对象上面读取 3 个方法。这种加载称为<strong>运行时加载</strong>，因为只有运行时才能得到这个对象，导致完全没办法在编译时做“静态优化”。</p>
<p><strong>ES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; ES6模块</span><br><span class="line">import &#123; stat, exists, readFile &#125; from &#39;fs&#39;;</span><br></pre></td></tr></table></figure>

<p>上面代码的实质是从fs模块加载 3 个方法，其他方法不加载。这种加载称为“<strong>编译时加载</strong>”或者静态加载，即 <strong>ES6 可以在编译时就完成模块加载</strong>，效率要比 <code>CommonJS</code> 模块的加载方式高。当然，这也导致了没法引用 ES6 模块本身，因为它不是对象。</p>
<p>由于 ES6 模块是编译时加载，使得静态分析成为可能。有了它，就能进一步拓宽 JavaScript 的语法，比如引入宏（macro）和类型检验（type system）这些只能靠静态分析实现的功能。</p>
<p>除了静态加载带来的各种好处，ES6 模块还有以下好处。</p>
<ul>
<li>不再需要UMD模块格式了，将来服务器和浏览器都会支持 ES6 模块格式。目前，通过各种工具库，其实已经做到了这一点。</li>
<li>将来浏览器的新 API 就能用模块格式提供，不再必须做成全局变量或者navigator对象的属性。</li>
<li>不再需要对象作为命名空间（比如Math对象），未来这些功能可以通过模块提供。<br>本章介绍 ES6 模块的语法，下一章介绍如何在浏览器和 Node 之中，加载 ES6 模块。</li>
</ul>
<h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p><strong>ES6 的模块自动采用严格模式</strong>，不管你有没有在模块头部加上”use strict”;。</p>
<p><strong>严格模式主要有以下限制</strong>。</p>
<ul>
<li>变量必须声明后再使用</li>
<li>函数的参数不能有同名属性，否则报错</li>
<li>不能使用with语句</li>
<li>不能对只读属性赋值，否则报错</li>
<li>不能使用前缀 0 表示八进制数，否则报错</li>
<li>不能删除不可删除的属性，否则报错</li>
<li>不能删除变量delete prop，会报错，只能删除属性<code>delete global[prop]</code></li>
<li><code>eval</code>不会在它的外层作用域引入变量</li>
<li><code>eval</code>和<code>arguments</code>不能被重新赋值</li>
<li><code>arguments</code>不会自动反映函数参数的变化</li>
<li>不能使用<code>arguments.callee</code></li>
<li>不能使用<code>arguments.caller</code></li>
<li>禁止<code>this</code>指向全局对象</li>
<li>不能使用<code>fn.caller</code>和<code>fn.arguments</code>获取函数调用的堆栈</li>
<li>增加了保留字（比如<code>protected</code>、<code>static</code>和<code>interface</code>）</li>
</ul>
<blockquote>
<p>上面这些限制，模块都必须遵守。由于严格模式是 ES5 引入的，不属于 ES6，所以请参阅相关 ES5 书籍，本文不再详细介绍了。</p>
</blockquote>
<p>其中，尤其需要注意<code>this</code>的限制。<strong>ES6 模块之中，顶层的this指向undefined，即不应该在顶层代码使用this。</strong></p>
<h2 id="export-命令"><a href="#export-命令" class="headerlink" title="export 命令"></a>export 命令</h2><p>模块功能主要由两个命令构成：<code>export</code>和<code>import</code>。<strong><code>export</code>命令用于规定模块的对外接口，<code>import</code>命令用于输入其他模块提供的功能。</strong></p>
<p><strong>一个模块就是一个独立的文件</strong>。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用<code>export</code>关键字输出该变量。下面是一个 JS 文件，里面使用export命令输出变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; profile.js</span><br><span class="line">export var firstName &#x3D; &#39;Michael&#39;;</span><br><span class="line">export var lastName &#x3D; &#39;Jackson&#39;;</span><br><span class="line">export var year &#x3D; 1958;</span><br></pre></td></tr></table></figure>

<p>上面代码是<code>profile.js</code>文件，保存了用户信息。ES6 将其视为一个模块，里面用<code>export</code>命令对外部输出了三个变量。</p>
<p>export的写法，除了像上面这样，还有另外一种。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; profile.js</span><br><span class="line">var firstName &#x3D; &#39;Michael&#39;;</span><br><span class="line">var lastName &#x3D; &#39;Jackson&#39;;</span><br><span class="line">var year &#x3D; 1958;</span><br><span class="line"></span><br><span class="line">export &#123; firstName, lastName, year &#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码在<code>export</code>命令后面，使用大括号指定所要输出的一组变量。它与前一种写法（直接放置在var语句前）是等价的，但是应该优先考虑使用这种写法。因为这样就可以在脚本尾部，一眼看清楚输出了哪些变量。</p>
<p><strong><code>export</code>命令除了输出变量，还可以输出函数或类（class）。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export function multiply(x, y) &#123;</span><br><span class="line">  return x * y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码对外输出一个函数<code>multiply</code>。</p>
<p>通常情况下，<code>export</code>输出的变量就是本来的名字，但是可以使用<code>as</code>关键字重命名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function v1() &#123; ... &#125;</span><br><span class="line">function v2() &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">export &#123;</span><br><span class="line">  v1 as streamV1,</span><br><span class="line">  v2 as streamV2,</span><br><span class="line">  v2 as streamLatestVersion</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码使用<code>as</code>关键字，重命名了函数v1和v2的对外接口。重命名后，v2可以用不同的名字输出两次。</p>
<blockquote>
<p>需要特别注意的是，export命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">export 1;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">var m &#x3D; 1;</span><br><span class="line">export m;</span><br></pre></td></tr></table></figure>

<p>上面两种写法都会报错，因为没有提供对外的接口。第一种写法直接输出 1，第二种写法通过变量m，还是直接输出 1。1只是一个值，不是接口。正确的写法是下面这样。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 写法一</span><br><span class="line">export var m &#x3D; 1;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 写法二</span><br><span class="line">var m &#x3D; 1;</span><br><span class="line">export &#123;m&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 写法三</span><br><span class="line">var n &#x3D; 1;</span><br><span class="line">export &#123;n as m&#125;;</span><br></pre></td></tr></table></figure>

<p>上面三种写法都是正确的，规定了对外的接口m。其他脚本可以通过这个接口，取到值1。它们的实质是，在接口名与模块内部变量之间，建立了一一对应的关系。</p>
<p>同样的，function和class的输出，也必须遵守这样的写法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">function f() &#123;&#125;</span><br><span class="line">export f;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 正确</span><br><span class="line">export function f() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 正确</span><br><span class="line">function f() &#123;&#125;</span><br><span class="line">export &#123;f&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>另外，<code>export</code>语句输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export var foo &#x3D; &#39;bar&#39;;</span><br><span class="line">setTimeout(() &#x3D;&gt; foo &#x3D; &#39;baz&#39;, 500);</span><br></pre></td></tr></table></figure>

<p>上面代码输出变量foo，值为bar，500 毫秒之后变成baz。</p>
<p>这一点与<code>CommonJS</code>规范完全不同。<code>CommonJS</code> 模块输出的是值的缓存，不存在动态更新。</p>
<blockquote>
<p>最后，<code>export</code>命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错，下一节的<code>import</code>命令也是如此。这是因为处于条件代码块之中，就没法做静态优化了，违背了 ES6 模块的设计初衷。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">  export default &#39;bar&#39; &#x2F;&#x2F; SyntaxError</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>

<p>上面代码中，export语句放在函数之中，结果报错。</p>
<h2 id="import-命令"><a href="#import-命令" class="headerlink" title="import 命令"></a>import 命令</h2><p>使用<code>export</code>命令定义了模块的对外接口以后，其他 JS 文件就可以通过<code>import</code>命令加载这个模块。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; main.js</span><br><span class="line">import &#123; firstName, lastName, year &#125; from &#39;.&#x2F;profile.js&#39;;</span><br><span class="line"></span><br><span class="line">function setName(element) &#123;</span><br><span class="line">  element.textContent &#x3D; firstName + &#39; &#39; + lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码的<code>import</code>命令，用于加载<code>profile.js</code>文件，并从中输入变量。<code>import</code>命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同。</p>
<p>如果想为输入的变量重新取一个名字，<code>import</code>命令要使用<code>as</code>关键字，将输入的变量重命名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; lastName as surname &#125; from &#39;.&#x2F;profile.js&#39;;</span><br></pre></td></tr></table></figure>

<p><code>import</code>命令输入的变量都是只读的，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面，改写接口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123;a&#125; from &#39;.&#x2F;xxx.js&#39;</span><br><span class="line"></span><br><span class="line">a &#x3D; &#123;&#125;; &#x2F;&#x2F; Syntax Error : &#39;a&#39; is read-only;</span><br></pre></td></tr></table></figure>

<p>上面代码中，脚本加载了变量a，对其重新赋值就会报错，因为a是一个只读的接口。但是，如果a是一个对象，改写a的属性是允许的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123;a&#125; from &#39;.&#x2F;xxx.js&#39;</span><br><span class="line"></span><br><span class="line">a.foo &#x3D; &#39;hello&#39;; &#x2F;&#x2F; 合法操作</span><br></pre></td></tr></table></figure>

<p>上面代码中，a的属性可以成功改写，并且其他模块也可以读到改写后的值。不过，这种写法很难查错，建议凡是输入的变量，都当作完全只读，不要轻易改变它的属性。</p>
<p><code>import</code>后面的<code>from</code>指定模块文件的位置，可以是相对路径，也可以是绝对路径，<code>.js</code>后缀可以省略。如果只是模块名，不带有路径，那么必须有配置文件，告诉 JavaScript 引擎该模块的位置。</p>
<p><code>import {myMethod} from &#39;util&#39;;</code></p>
<p>上面代码中，util是模块文件名，由于不带有路径，必须通过配置，告诉引擎怎么取到这个模块。</p>
<blockquote>
<p><strong>注意，<code>import</code>命令具有提升效果，会提升到整个模块的头部，首先执行。</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">foo();</span><br><span class="line"></span><br><span class="line">import &#123; foo &#125; from &#39;my_module&#39;;</span><br></pre></td></tr></table></figure>

<p>上面的代码不会报错，因为<code>import</code>的执行早于<code>foo</code>的调用。这种行为的本质是，<strong>import命令是编译阶段执行的，在代码运行之前</strong>。</p>
<p>由于<code>import</code>是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">import &#123; &#39;f&#39; + &#39;oo&#39; &#125; from &#39;my_module&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">let module &#x3D; &#39;my_module&#39;;</span><br><span class="line">import &#123; foo &#125; from module;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">if (x &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">  import &#123; foo &#125; from &#39;module1&#39;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  import &#123; foo &#125; from &#39;module2&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面三种写法都会报错，因为它们用到了表达式、变量和<code>if</code>结构。在静态分析阶段，这些语法都是没法得到值的。</p>
<p>最后，<code>import</code>语句会执行所加载的模块，因此可以有下面的写法。</p>
<p><code>import &#39;lodash&#39;;</code></p>
<p>上面代码仅仅执行lodash模块，但是不输入任何值。</p>
<p>如果多次重复执行同一句<code>import</code>语句，那么只会执行一次，而不会执行多次。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;lodash&#39;;</span><br><span class="line">import &#39;lodash&#39;;</span><br></pre></td></tr></table></figure>

<p>上面代码加载了两次lodash，但是只会执行一次。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; foo &#125; from &#39;my_module&#39;;</span><br><span class="line">import &#123; bar &#125; from &#39;my_module&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">import &#123; foo, bar &#125; from &#39;my_module&#39;;</span><br></pre></td></tr></table></figure>

<p>上面代码中，虽然<code>foo</code>和<code>bar</code>在两个语句中加载，但是它们对应的是同一个<code>my_module</code>实例。也就是说，<code>import</code>语句是 <code>Singleton</code> 模式。</p>
<p>目前阶段，通过 <code>Babel</code> 转码，<code>CommonJS</code> 模块的<code>require</code>命令和 ES6 模块的<code>import</code>命令，可以写在同一个模块里面，但是最好不要这样做。因为<code>import</code>在静态解析阶段执行，所以它是一个模块之中最早执行的。下面的代码可能不会得到预期结果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require(&#39;core-js&#x2F;modules&#x2F;es6.symbol&#39;);</span><br><span class="line">require(&#39;core-js&#x2F;modules&#x2F;es6.promise&#39;);</span><br><span class="line">import React from &#39;React&#39;;</span><br></pre></td></tr></table></figure>
<h2 id="模块的整体加载"><a href="#模块的整体加载" class="headerlink" title="模块的整体加载"></a>模块的整体加载</h2><p>除了指定加载某个输出值，还可以<strong>使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。</strong></p>
<p>下面是一个circle.js文件，它输出两个方法area和circumference。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; circle.js</span><br><span class="line"></span><br><span class="line">export function area(radius) &#123;</span><br><span class="line">  return Math.PI * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function circumference(radius) &#123;</span><br><span class="line">  return 2 * Math.PI * radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，加载这个模块。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; main.js</span><br><span class="line"></span><br><span class="line">import &#123; area, circumference &#125; from &#39;.&#x2F;circle&#39;;</span><br><span class="line"></span><br><span class="line">console.log(&#39;圆面积：&#39; + area(4));</span><br><span class="line">console.log(&#39;圆周长：&#39; + circumference(14));</span><br></pre></td></tr></table></figure>

<p>上面写法是逐一指定要加载的方法，整体加载的写法如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import * as circle from &#39;.&#x2F;circle&#39;;</span><br><span class="line"></span><br><span class="line">console.log(&#39;圆面积：&#39; + circle.area(4));</span><br><span class="line">console.log(&#39;圆周长：&#39; + circle.circumference(14));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，模块整体加载所在的那个对象（上例是circle），应该是可以静态分析的，所以不允许运行时改变。下面的写法都是不允许的。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import * as circle from &#39;.&#x2F;circle&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 下面两行都是不允许的</span><br><span class="line">circle.foo &#x3D; &#39;hello&#39;;</span><br><span class="line">circle.area &#x3D; function () &#123;&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="export-default-命令"><a href="#export-default-命令" class="headerlink" title="export default 命令"></a>export default 命令</h2><p>从前面的例子可以看出，使用<code>import</code>命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。</p>
<p>为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到<code>export default</code>命令，为模块指定默认输出。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; export-default.js</span><br><span class="line">export default function () &#123;</span><br><span class="line">  console.log(&#39;foo&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码是一个模块文件<code>export-default.js</code>，它的默认输出是一个函数。</p>
<p>其他模块加载该模块时，<code>import</code>命令可以为该匿名函数指定任意名字。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; import-default.js</span><br><span class="line">import customName from &#39;.&#x2F;export-default&#39;;</span><br><span class="line">customName(); &#x2F;&#x2F; &#39;foo&#39;</span><br></pre></td></tr></table></figure>

<p>上面代码的<code>import</code>命令，可以用任意名称指向<code>export-default.js</code>输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时<code>import</code>命令后面，不使用大括号。</p>
<p><code>export default</code>命令用在非匿名函数前，也是可以的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; export-default.js</span><br><span class="line">export default function foo() &#123;</span><br><span class="line">  console.log(&#39;foo&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 或者写成</span><br><span class="line"></span><br><span class="line">function foo() &#123;</span><br><span class="line">  console.log(&#39;foo&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default foo;</span><br><span class="line">上面代码中，foo函数的函数名foo，在模块外部是无效的。加载的时候，视同匿名函数加载。</span><br><span class="line"></span><br><span class="line">下面比较一下默认输出和正常输出。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 第一组</span><br><span class="line">export default function crc32() &#123; &#x2F;&#x2F; 输出</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">import crc32 from &#39;crc32&#39;; &#x2F;&#x2F; 输入</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 第二组</span><br><span class="line">export function crc32() &#123; &#x2F;&#x2F; 输出</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">import &#123;crc32&#125; from &#39;crc32&#39;; &#x2F;&#x2F; 输入</span><br></pre></td></tr></table></figure>

<p>上面代码的两组写法，第一组是使用<code>export default</code>时，对应的<code>import</code>语句不需要使用大括号；第二组是不使用<code>export default</code>时，对应的<code>import</code>语句需要使用大括号。</p>
<p><code>export default</code>命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此<code>export default</code>命令只能使用一次。所以，<code>import</code>命令后面才不用加大括号，因为只可能唯一对应<code>export default</code>命令。</p>
<p>本质上，<code>export default</code>就是输出一个叫做<code>default</code>的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; modules.js</span><br><span class="line">function add(x, y) &#123;</span><br><span class="line">  return x * y;</span><br><span class="line">&#125;</span><br><span class="line">export &#123;add as default&#125;;</span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">&#x2F;&#x2F; export default add;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; app.js</span><br><span class="line">import &#123; default as foo &#125; from &#39;modules&#39;;</span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">&#x2F;&#x2F; import foo from &#39;modules&#39;;</span><br></pre></td></tr></table></figure>

<p>正是因为<code>export default</code>命令其实只是输出一个叫做<code>default</code>的变量，所以它后面不能跟变量声明语句。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 正确</span><br><span class="line">export var a &#x3D; 1;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 正确</span><br><span class="line">var a &#x3D; 1;</span><br><span class="line">export default a;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 错误</span><br><span class="line">export default var a &#x3D; 1;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>export default a</code>的含义是将变量<code>a</code>的值赋给变量<code>default</code>。所以，最后一种写法会报错。</p>
<p>同样地，因为<code>export default</code>命令的本质是将后面的值，赋给<code>default</code>变量，所以可以直接将一个值写在<code>export default</code>之后。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 正确</span><br><span class="line">export default 42;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">export 42;</span><br></pre></td></tr></table></figure>

<p>上面代码中，后一句报错是因为没有指定对外的接口，而前一句指定对外接口为<code>default</code>。</p>
<p>有了<code>export default</code>命令，输入模块时就非常直观了，以输入 <code>lodash</code> 模块为例。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import _ from &#39;lodash&#39;;</span><br></pre></td></tr></table></figure>

<p>如果想在一条<code>import</code>语句中，同时输入默认方法和其他接口，可以写成下面这样。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import _, &#123; each, forEach &#125; from &#39;lodash&#39;;</span><br></pre></td></tr></table></figure>

<p>对应上面代码的<code>export</code>语句如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default function (obj) &#123;</span><br><span class="line">  &#x2F;&#x2F; ···</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function each(obj, iterator, context) &#123;</span><br><span class="line">  &#x2F;&#x2F; ···</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export &#123; each as forEach &#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码的最后一行的意思是，暴露出<code>forEach</code>接口，默认指向<code>each</code>接口，即<code>forEach</code>和<code>each</code>指向同一个方法。</p>
<p><code>export default</code>也可以用来输出类。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; MyClass.js</span><br><span class="line">export default class &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; main.js</span><br><span class="line">import MyClass from &#39;MyClass&#39;;</span><br><span class="line">let o &#x3D; new MyClass();</span><br></pre></td></tr></table></figure>

<h2 id="export-与-import-的复合写法"><a href="#export-与-import-的复合写法" class="headerlink" title="export 与 import 的复合写法"></a>export 与 import 的复合写法</h2><p>如果在一个模块之中，先输入后输出同一个模块，<code>import</code>语句可以与<code>export</code>语句写在一起。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export &#123; foo, bar &#125; from &#39;my_module&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 可以简单理解为</span><br><span class="line">import &#123; foo, bar &#125; from &#39;my_module&#39;;</span><br><span class="line">export &#123; foo, bar &#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>export</code>和<code>import</code>语句可以结合在一起，写成一行。但需要注意的是，写成一行以后，<code>foo</code>和<code>bar</code>实际上并没有被导入当前模块，只是相当于对外转发了这两个接口，导致当前模块不能直接使用<code>foo</code>和<code>bar</code>。</p>
<p>模块的接口改名和整体输出，也可以采用这种写法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 接口改名</span><br><span class="line">export &#123; foo as myFoo &#125; from &#39;my_module&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 整体输出</span><br><span class="line">export * from &#39;my_module&#39;;</span><br></pre></td></tr></table></figure>

<p>默认接口的写法如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export &#123; default &#125; from &#39;foo&#39;;</span><br></pre></td></tr></table></figure>

<p>具名接口改为默认接口的写法如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export &#123; es6 as default &#125; from &#39;.&#x2F;someModule&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">import &#123; es6 &#125; from &#39;.&#x2F;someModule&#39;;</span><br><span class="line">export default es6;</span><br></pre></td></tr></table></figure>

<p>同样地，默认接口也可以改名为具名接口。</p>
<p><code>export { default as es6 } from &#39;./someModule&#39;;</code></p>
<p>ES2020 之前，有一种<code>import</code>语句，没有对应的复合写法。</p>
<p><code>import * as someIdentifier from &quot;someModule&quot;;</code></p>
<p>ES2020补上了这个写法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export * as ns from &quot;mod&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">import * as ns from &quot;mod&quot;;</span><br><span class="line">export &#123;ns&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="模块的继承"><a href="#模块的继承" class="headerlink" title="模块的继承"></a>模块的继承</h2><p>模块之间也可以继承。</p>
<p>假设有一个circleplus模块，继承了circle模块。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; circleplus.js</span><br><span class="line"></span><br><span class="line">export * from &#39;circle&#39;;</span><br><span class="line">export var e &#x3D; 2.71828182846;</span><br><span class="line">export default function(x) &#123;</span><br><span class="line">  return Math.exp(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中的<code>export *</code>，表示再输出circle模块的所有属性和方法。注意，<code>export *</code>命令会忽略circle模块的<code>default</code>方法。然后，上面代码又输出了自定义的e变量和默认方法。</p>
<p>这时，也可以将circle的属性或方法，改名后再输出。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; circleplus.js</span><br><span class="line"></span><br><span class="line">export &#123; area as circleArea &#125; from &#39;circle&#39;;</span><br></pre></td></tr></table></figure>

<p>上面代码表示，只输出circle模块的area方法，且将其改名为circleArea。</p>
<p>加载上面模块的写法如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; main.js</span><br><span class="line"></span><br><span class="line">import * as math from &#39;circleplus&#39;;</span><br><span class="line">import exp from &#39;circleplus&#39;;</span><br><span class="line">console.log(exp(math.e));</span><br></pre></td></tr></table></figure>

<p>上面代码中的import exp表示，将circleplus模块的默认方法加载为exp方法。</p>
<h2 id="跨模块常量"><a href="#跨模块常量" class="headerlink" title="跨模块常量"></a>跨模块常量</h2><p>本书介绍<code>const</code>命令的时候说过，<strong><code>const</code>声明的常量只在当前代码块有效</strong>。如果想设置<strong>跨模块的常量（即跨多个文件），或者说一个值要被多个模块共享，可以采用下面的写法。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; constants.js 模块</span><br><span class="line">export const A &#x3D; 1;</span><br><span class="line">export const B &#x3D; 3;</span><br><span class="line">export const C &#x3D; 4;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; test1.js 模块</span><br><span class="line">import * as constants from &#39;.&#x2F;constants&#39;;</span><br><span class="line">console.log(constants.A); &#x2F;&#x2F; 1</span><br><span class="line">console.log(constants.B); &#x2F;&#x2F; 3</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; test2.js 模块</span><br><span class="line">import &#123;A, B&#125; from &#39;.&#x2F;constants&#39;;</span><br><span class="line">console.log(A); &#x2F;&#x2F; 1</span><br><span class="line">console.log(B); &#x2F;&#x2F; 3</span><br></pre></td></tr></table></figure>

<p>如果要使用的常量非常多，可以建一个专门的constants目录，将各种常量写在不同的文件里面，保存在该目录下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; constants&#x2F;db.js</span><br><span class="line">export const db &#x3D; &#123;</span><br><span class="line">  url: &#39;http:&#x2F;&#x2F;my.couchdbserver.local:5984&#39;,</span><br><span class="line">  admin_username: &#39;admin&#39;,</span><br><span class="line">  admin_password: &#39;admin password&#39;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; constants&#x2F;user.js</span><br><span class="line">export const users &#x3D; [&#39;root&#39;, &#39;admin&#39;, &#39;staff&#39;, &#39;ceo&#39;, &#39;chief&#39;, &#39;moderator&#39;];</span><br></pre></td></tr></table></figure>

<p>然后，将这些文件输出的常量，合并在index.js里面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; constants&#x2F;index.js</span><br><span class="line">export &#123;db&#125; from &#39;.&#x2F;db&#39;;</span><br><span class="line">export &#123;users&#125; from &#39;.&#x2F;users&#39;;</span><br><span class="line">使用的时候，直接加载index.js就可以了。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; script.js</span><br><span class="line">import &#123;db, users&#125; from &#39;.&#x2F;constants&#x2F;index&#39;;</span><br></pre></td></tr></table></figure>

<h2 id="import"><a href="#import" class="headerlink" title="import()"></a>import()</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>前面介绍过，<code>import</code>命令会被 JavaScript 引擎静态分析，先于模块内的其他语句执行（import命令叫做“连接” binding 其实更合适）。所以，下面的代码会报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">if (x &#x3D;&#x3D;&#x3D; 2) &#123;</span><br><span class="line">  import MyModual from &#39;.&#x2F;myModual&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，引擎处理<code>import</code>语句是在编译时，这时不会去分析或执行<code>if</code>语句，所以<code>import</code>语句放在<code>if</code>代码块之中毫无意义，因此会报句法错误，而不是执行时错误。也就是说，<strong><code>import</code>和<code>export</code>命令只能在模块的顶层</strong>，不能在代码块之中（比如，在if代码块之中，或在函数之中）。</p>
<p>这样的设计，固然有利于编译器提高效率，但也导致无法在运行时加载模块。在语法上，条件加载就不可能实现。如果<code>import</code>命令要取代<code>Node</code>的<code>require</code>方法，这就形成了一个障碍。因为<code>require</code>是运行时加载模块，<code>import</code>命令无法取代<code>require</code>的动态加载功能。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path &#x3D; &#39;.&#x2F;&#39; + fileName;</span><br><span class="line">const myModual &#x3D; require(path);</span><br></pre></td></tr></table></figure>

<p>上面的语句就是动态加载，<code>require</code>到底加载哪一个模块，只有运行时才知道。<code>import</code>命令做不到这一点。</p>
<p>ES2020提案 引入<code>import()</code>函数，支持动态加载模块。</p>
<h3 id="import-specifier"><a href="#import-specifier" class="headerlink" title="import(specifier)"></a>import(specifier)</h3><p>上面代码中，<code>import</code>函数的参数<code>specifier</code>，指定所要加载的模块的位置。<code>import</code>命令能够接受什么参数，<code>import()</code>函数就能接受什么参数，<strong>两者区别主要是后者为动态加载。</strong></p>
<p><strong><code>import()</code>返回一个 <code>Promis</code>e 对象</strong>。下面是一个例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const main &#x3D; document.querySelector(&#39;main&#39;);</span><br><span class="line"></span><br><span class="line">import(&#96;.&#x2F;section-modules&#x2F;$&#123;someVariable&#125;.js&#96;)</span><br><span class="line">  .then(module &#x3D;&gt; &#123;</span><br><span class="line">    module.loadPageInto(main);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(err &#x3D;&gt; &#123;</span><br><span class="line">    main.textContent &#x3D; err.message;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p><code>import()</code>函数可以用在任何地方，不仅仅是模块，非模块的脚本也可以使用。它是运行时执行，也就是说，什么时候运行到这一句，就会加载指定的模块。另外，<code>import()</code>函数与所加载的模块没有静态连接关系，这点也是与import语句不相同。<code>import()</code>类似于 <code>Node</code> 的<code>require</code>方法，<strong>区别主要是前者是异步加载，后者是同步加载</strong>。</p>
<h3 id="适用场合"><a href="#适用场合" class="headerlink" title="适用场合"></a>适用场合</h3><p>下面是<code>import()</code>的一些适用场合。</p>
<p>（1）按需加载。</p>
<p><code>import()</code>可以在需要的时候，再加载某个模块。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">button.addEventListener(&#39;click&#39;, event &#x3D;&gt; &#123;</span><br><span class="line">  import(&#39;.&#x2F;dialogBox.js&#39;)</span><br><span class="line">  .then(dialogBox &#x3D;&gt; &#123;</span><br><span class="line">    dialogBox.open();</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(error &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;* Error handling *&#x2F;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>import()</code>方法放在<code>click</code>事件的监听函数之中，只有用户点击了按钮，才会加载这个模块。</p>
<p>（2）条件加载</p>
<p><code>import()</code>可以放在<code>if</code>代码块，根据不同的情况，加载不同的模块。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (condition) &#123;</span><br><span class="line">  import(&#39;moduleA&#39;).then(...);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  import(&#39;moduleB&#39;).then(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，如果满足条件，就加载模块 A，否则加载模块 B。</p>
<p>（3）动态的模块路径</p>
<p><code>import()</code>允许模块路径动态生成。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import(f())</span><br><span class="line">.then(...);</span><br></pre></td></tr></table></figure>

<p>上面代码中，根据函数f的返回结果，加载不同的模块。</p>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p><code>import()</code>加载模块成功以后，这个模块会作为一个对象，当作<code>then</code>方法的参数。因此，<strong>可以使用对象解构赋值的语法，获取输出接口</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import(&#39;.&#x2F;myModule.js&#39;)</span><br><span class="line">.then((&#123;export1, export2&#125;) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; ...·</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>export1</code>和<code>export2</code>都是<code>myModule.js</code>的输出接口，可以<strong>解构获得</strong>。</p>
<p>如果模块有<code>default</code>输出接口，可以用参数直接获得。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import(&#39;.&#x2F;myModule.js&#39;)</span><br><span class="line">.then(myModule &#x3D;&gt; &#123;</span><br><span class="line">  console.log(myModule.default);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面的代码也可以使用具名输入的形式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import(&#39;.&#x2F;myModule.js&#39;)</span><br><span class="line">.then((&#123;default: theDefault&#125;) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(theDefault);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果想同时加载多个模块，可以采用下面的写法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Promise.all([</span><br><span class="line">  import(&#39;.&#x2F;module1.js&#39;),</span><br><span class="line">  import(&#39;.&#x2F;module2.js&#39;),</span><br><span class="line">  import(&#39;.&#x2F;module3.js&#39;),</span><br><span class="line">])</span><br><span class="line">.then(([module1, module2, module3]) &#x3D;&gt; &#123;</span><br><span class="line">   ···</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>import()</code>也可以用在 <code>async</code> 函数之中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">async function main() &#123;</span><br><span class="line">  const myModule &#x3D; await import(&#39;.&#x2F;myModule.js&#39;);</span><br><span class="line">  const &#123;export1, export2&#125; &#x3D; await import(&#39;.&#x2F;myModule.js&#39;);</span><br><span class="line">  const [module1, module2, module3] &#x3D;</span><br><span class="line">    await Promise.all([</span><br><span class="line">      import(&#39;.&#x2F;module1.js&#39;),</span><br><span class="line">      import(&#39;.&#x2F;module2.js&#39;),</span><br><span class="line">      import(&#39;.&#x2F;module3.js&#39;),</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br><span class="line">main();</span><br></pre></td></tr></table></figure>









<blockquote>
<p>本文转载自：<a href="https://es6.ruanyifeng.com/" target="_blank" rel="noopener">https://es6.ruanyifeng.com/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>Module的加载实现</title>
    <url>/2020/04/22/25-Module%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要内容：</p>
<ul>
<li>浏览器加载</li>
<li>ES6 模块与 CommonJS 模块的差异</li>
<li>Node.js 加载</li>
<li>循环加载<a id="more"></a>
<h2 id="浏览器加载"><a href="#浏览器加载" class="headerlink" title="浏览器加载"></a>浏览器加载</h2></li>
</ul>
<h3 id="传统方法"><a href="#传统方法" class="headerlink" title="传统方法"></a>传统方法</h3><p>HTML 网页中，浏览器通过<code>&lt;script&gt;</code>标签加载 JavaScript 脚本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面内嵌的脚本 --&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;application&#x2F;javascript&quot;&gt;</span><br><span class="line">  &#x2F;&#x2F; module code</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 外部脚本 --&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;application&#x2F;javascript&quot; src&#x3D;&quot;path&#x2F;to&#x2F;myModule.js&quot;&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>上面代码中，由于浏览器脚本的默认语言是 JavaScript，因此<code>type=&quot;application/javascript&quot;</code>可以省略。</p>
<p><font style = "color:blue"><strong>默认情况下，浏览器是同步加载 JavaScript 脚本，即渲染引擎遇到<code>&lt;script&gt;</code>标签就会停下来，等到执行完脚本，再继续向下渲染。如果是外部脚本，还必须加入脚本下载的时间。</strong></font></p>
<p>如果脚本体积很大，下载和执行的时间就会很长，因此<strong>造成浏览器堵塞</strong>，用户会感觉到浏览器“卡死”了，没有任何响应。这显然是很不好的体验，<font style = "color:blue">所以浏览器允许脚本异步加载，下面就是两种异步加载的语法。</font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;path&#x2F;to&#x2F;myModule.js&quot; defer&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;path&#x2F;to&#x2F;myModule.js&quot; async&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<font style = "color:blue"><code>&lt;script&gt;</code>标签打开<code>defer</code>或<code>async</code>属性，脚本就会异步加载。渲染引擎遇到这一行命令，就会开始下载外部脚本，但不会等它下载和执行，而是直接执行后面的命令。</font></p>
<ul>
<li><font style = "color:blue"><strong><code>defer</code>与<code>async</code>的区别是</strong></font>：<code>defer</code>要等到整个页面在内存中正常渲染结束（DOM 结构完全生成，以及其他脚本执行完成），才会执行；<code>async</code>一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。一句话，<strong><code>defer</code>是“渲染完再执行”，<code>async</code>是“下载完就执行”</strong>。另外，如果有多个<code>defer</code>脚本，会按照它们在页面出现的<strong>顺序加载</strong>，而多个<code>async</code>脚本是不能保证加载顺序的。</li>
</ul>
<h2 id="加载规则"><a href="#加载规则" class="headerlink" title="加载规则"></a>加载规则</h2><p>浏览器加载 ES6 模块，也使用<code>&lt;script&gt;</code>标签，但是要加入<code>type=&quot;module&quot;</code>属性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;module&quot; src&#x3D;&quot;.&#x2F;foo.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>上面代码在网页中插入一个模块<code>foo.js</code>，由于<code>type</code>属性设为<code>module</code>，所以浏览器知道这是一个 ES6 模块。</p>
<ul>
<li>浏览器对于带有<code>type=&quot;module&quot;</code>的<code>&lt;script&gt;</code>，都是<strong>异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，再执行模块脚本，等同于打开了<code>&lt;script&gt;</code>标签的<code>defer</code>属性。</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;module&quot; src&#x3D;&quot;.&#x2F;foo.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;!-- 等同于 --&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;module&quot; src&#x3D;&quot;.&#x2F;foo.js&quot; defer&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>如果网页有多个<code>&lt;script type=&quot;module&quot;&gt;</code>，它们会按照在页面出现的<strong>顺序依次执行</strong>。</p>
<p><code>&lt;script&gt;</code>标签的<code>async</code>属性也可以打开，这时只要加载完成，渲染引擎就会中断渲染立即执行。执行完成后，再恢复渲染。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;module&quot; src&#x3D;&quot;.&#x2F;foo.js&quot; async&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>一旦使用了<code>async</code>属性，<code>&lt;script type=&quot;module&quot;&gt;</code>就不会按照在页面出现的顺序执行，而是只要该模块加载完成，就执行该模块。</p>
<p>ES6 模块也允许内嵌在网页中，语法行为与加载外部脚本完全一致。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;module&quot;&gt;</span><br><span class="line">  import utils from &quot;.&#x2F;utils.js&quot;;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; other code</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>举例来说，jQuery 就支持模块加载。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;module&quot;&gt;</span><br><span class="line">  import $ from &quot;.&#x2F;jquery&#x2F;src&#x2F;jquery.js&quot;;</span><br><span class="line">  $(&#39;#message&#39;).text(&#39;Hi from jQuery!&#39;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>对于外部的模块脚本（上例是foo.js），有几点需要注意。</p>
<ul>
<li>代码是在模块作用域之中运行，而不是在全局作用域运行。模块内部的顶层变量，外部不可见。</li>
<li>模块脚本自动采用严格模式，不管有没有声明<code>use strict</code>。</li>
<li>模块之中，可以使用<code>import</code>命令加载其他模块（.js后缀不可省略，需要提供绝对 URL 或相对 URL），也可以使用<code>export</code>命令输出对外接口。</li>
<li><strong>模块之中，顶层的<code>this</code>关键字返回<code>undefined</code></strong>，而不是指向<code>window</code>。也就是说，在模块顶层使用<code>this</code>关键字，是无意义的。</li>
<li>同一个模块如果加载多次，将只执行一次。</li>
</ul>
<p>下面是一个示例模块。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import utils from &#39;https:&#x2F;&#x2F;example.com&#x2F;js&#x2F;utils.js&#39;;</span><br><span class="line"></span><br><span class="line">const x &#x3D; 1;</span><br><span class="line"></span><br><span class="line">console.log(x &#x3D;&#x3D;&#x3D; window.x); &#x2F;&#x2F;false</span><br><span class="line">console.log(this &#x3D;&#x3D;&#x3D; undefined); &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>利用顶层的<code>this</code>等于<code>undefined</code>这个语法点，可以侦测当前代码是否在 ES6 模块之中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const isNotModuleScript &#x3D; this !&#x3D;&#x3D; undefined;</span><br></pre></td></tr></table></figure>

<h2 id="ES6-模块与-CommonJS-模块的差异"><a href="#ES6-模块与-CommonJS-模块的差异" class="headerlink" title="ES6 模块与 CommonJS 模块的差异"></a>ES6 模块与 CommonJS 模块的差异</h2><p>讨论 Node.js 加载 ES6 模块之前，必须了解 ES6 模块与 CommonJS 模块完全不同。</p>
<p>它们有两个重大<strong>差异</strong>。</p>
<ul>
<li><code>CommonJS</code>模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</li>
<li><code>CommonJS</code> 模块是运行时加载，<strong>ES6 模块是编译时输出接口</strong>。</li>
<li>第二个差异是因为 <code>CommonJS</code> 加载的是一个对象（即<code>module.exports</code>属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</li>
</ul>
<p>下面重点解释第一个差异。</p>
<p><code>CommonJS</code> 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。请看下面这个模块文件lib.js的例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; lib.js</span><br><span class="line">var counter &#x3D; 3;</span><br><span class="line">function incCounter() &#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  counter: counter,</span><br><span class="line">  incCounter: incCounter,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码输出内部变量<code>counter</code>和改写这个变量的内部方法i<code>ncCounter</code>。然后，在<code>main.js</code>里面加载这个模块。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; main.js</span><br><span class="line">var mod &#x3D; require(&#39;.&#x2F;lib&#39;);</span><br><span class="line"></span><br><span class="line">console.log(mod.counter);  &#x2F;&#x2F; 3</span><br><span class="line">mod.incCounter();</span><br><span class="line">console.log(mod.counter); &#x2F;&#x2F; 3</span><br></pre></td></tr></table></figure>

<p>上面代码说明，<code>lib.js</code>模块加载以后，它的内部变化就影响不到输出的<code>mod.counter</code>了。这是因为<code>mod.counter</code>是一个原始类型的值，会被缓存。除非写成一个函数，才能得到内部变动后的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; lib.js</span><br><span class="line">var counter &#x3D; 3;</span><br><span class="line">function incCounter() &#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  get counter() &#123;</span><br><span class="line">    return counter</span><br><span class="line">  &#125;,</span><br><span class="line">  incCounter: incCounter,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码中，输出的counter属性实际上是一个取值器函数。现在再执行main.js，就可以正确读取内部变量counter的变动了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ node main.js</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<p>ES6 模块的运行机制与 <code>CommonJS</code> 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令<code>import</code>，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的<code>import</code>有点像 <code>Unix</code> 系统的“符号连接”，原始值变了，<code>import</code>加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</p>
<p>还是举上面的例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; lib.js</span><br><span class="line">export let counter &#x3D; 3;</span><br><span class="line">export function incCounter() &#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; main.js</span><br><span class="line">import &#123; counter, incCounter &#125; from &#39;.&#x2F;lib&#39;;</span><br><span class="line">console.log(counter); &#x2F;&#x2F; 3</span><br><span class="line">incCounter();</span><br><span class="line">console.log(counter); &#x2F;&#x2F; 4</span><br></pre></td></tr></table></figure>

<p>上面代码说明，ES6 模块输入的变量counter是活的，完全反应其所在模块lib.js内部的变化。</p>
<p>再举一个出现在<code>export</code>一节中的例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; m1.js</span><br><span class="line">export var foo &#x3D; &#39;bar&#39;;</span><br><span class="line">setTimeout(() &#x3D;&gt; foo &#x3D; &#39;baz&#39;, 500);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; m2.js</span><br><span class="line">import &#123;foo&#125; from &#39;.&#x2F;m1.js&#39;;</span><br><span class="line">console.log(foo);</span><br><span class="line">setTimeout(() &#x3D;&gt; console.log(foo), 500);</span><br></pre></td></tr></table></figure>

<p>上面代码中，m1.js的变量foo，在刚加载时等于bar，过了 500 毫秒，又变为等于baz。</p>
<p>让我们看看，m2.js能否正确读取这个变化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ babel-node m2.js</span><br><span class="line"></span><br><span class="line">bar</span><br><span class="line">baz</span><br></pre></td></tr></table></figure>

<p>上面代码表明，<strong>ES6 模块不会缓存运行结果，而是动态地去被加载的模块取值，并且变量总是绑定其所在的模块。</strong></p>
<p>由于 ES6 输入的模块变量，只是一个“符号连接”，所以这个变量是只读的，对它进行重新赋值会报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; lib.js</span><br><span class="line">export let obj &#x3D; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; main.js</span><br><span class="line">import &#123; obj &#125; from &#39;.&#x2F;lib&#39;;</span><br><span class="line"></span><br><span class="line">obj.prop &#x3D; 123; &#x2F;&#x2F; OK</span><br><span class="line">obj &#x3D; &#123;&#125;; &#x2F;&#x2F; TypeError</span><br></pre></td></tr></table></figure>

<p>上面代码中，main.js从lib.js输入变量obj，可以对obj添加属性，但是重新赋值就会报错。因为变量obj指向的地址是只读的，不能重新赋值，这就好比main.js创造了一个名为obj的const变量。</p>
<p>最后，<code>export</code>通过接口，输出的是同一个值。不同的脚本加载这个接口，得到的都是同样的实例。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; mod.js</span><br><span class="line">function C() &#123;</span><br><span class="line">  this.sum &#x3D; 0;</span><br><span class="line">  this.add &#x3D; function () &#123;</span><br><span class="line">    this.sum +&#x3D; 1;</span><br><span class="line">  &#125;;</span><br><span class="line">  this.show &#x3D; function () &#123;</span><br><span class="line">    console.log(this.sum);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export let c &#x3D; new C();</span><br></pre></td></tr></table></figure>

<p>上面的脚本mod.js，输出的是一个C的实例。不同的脚本加载这个模块，得到的都是同一个实例。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; x.js</span><br><span class="line">import &#123;c&#125; from &#39;.&#x2F;mod&#39;;</span><br><span class="line">c.add();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; y.js</span><br><span class="line">import &#123;c&#125; from &#39;.&#x2F;mod&#39;;</span><br><span class="line">c.show();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; main.js</span><br><span class="line">import &#39;.&#x2F;x&#39;;</span><br><span class="line">import &#39;.&#x2F;y&#39;;</span><br></pre></td></tr></table></figure>

<p>现在执行main.js，输出的是1。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ babel-node main.js</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<p>这就证明了x.js和y.js加载的都是C的同一个实例。</p>
<h2 id="Node-js-加载"><a href="#Node-js-加载" class="headerlink" title="Node.js 加载"></a>Node.js 加载</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>Node.js</code>对 ES6 模块的处理比较麻烦，因为它有自己的 <code>CommonJS</code>模块格式，与 ES6 模块格式是不兼容的。目前的解决方案是，将两者分开，ES6 模块和 <code>CommonJS</code> 采用各自的加载方案。从 v13.2 版本开始，<code>Node.js</code> 已经默认打开了 ES6 模块支持。</p>
<p><code>Node.js</code> 要求 ES6 模块采用<code>.mjs</code>后缀文件名。也就是说，只要脚本文件里面使用<code>import</code>或者<code>export</code>命令，那么就必须采用<code>.mjs</code>后缀名。<code>Node.js</code> 遇到<code>.mjs</code>文件，就认为它是 ES6 模块，默认启用严格模式，不必在每个模块文件顶部指定<code>&quot;use strict&quot;</code>。</p>
<p>如果不希望将后缀名改成<code>.mjs</code>，可以在项目的<code>package.json</code>文件中，指定<code>type</code>字段为<code>module</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;type&quot;: &quot;module&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一旦设置了以后，该目录里面的 JS 脚本，就被解释用 ES6 模块。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#解释成 ES6 模块</span><br><span class="line"></span><br><span class="line">&#96;$ node my-app.js&#96;</span><br></pre></td></tr></table></figure>

<p>如果这时还要使用 <code>CommonJS</code> 模块，那么需要将 <code>CommonJS</code> 脚本的后缀名都改成<code>.cjs</code>。如果没有<code>type</code>字段，或者<code>type</code>字段为<code>commonjs</code>，则<code>.js</code>脚本会被解释成 <code>CommonJS</code> 模块。</p>
<blockquote>
<p>总结为一句话：<code>.mjs</code>文件总是以 ES6 模块加载，<code>.cjs</code>文件总是以 <code>CommonJS</code> 模块加载，<code>.js</code>文件的加载取决于<code>package.json</code>里面<code>type</code>字段的设置。</p>
</blockquote>
<blockquote>
<p>注意，ES6 模块与 CommonJS 模块尽量不要混用。<code>require</code>命令不能加载<code>.mjs</code>文件，会报错，只有<code>import</code>命令才可以加载<code>.mjs</code>文件。反过来，<code>.mjs</code>文件里面也不能使用<code>requir</code>e命令，必须使用<code>import</code>。</p>
</blockquote>
<h3 id="main-字段"><a href="#main-字段" class="headerlink" title="main 字段"></a>main 字段</h3><p><code>package.json</code>文件有两个字段可以指定模块的入口文件：<code>main</code>和<code>exports</code>。比较简单的模块，可以只使用<code>main</code>字段，指定模块加载的入口文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; .&#x2F;node_modules&#x2F;es-module-package&#x2F;package.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;type&quot;: &quot;module&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;.&#x2F;src&#x2F;index.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码指定项目的入口脚本为<code>./src/index.js</code>，它的格式为 ES6 模块。如果没有type字段，<code>index.js</code>就会被解释为 CommonJS 模块。</p>
<p>然后，<code>import</code>命令就可以加载这个模块。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; .&#x2F;my-app.mjs</span><br><span class="line"></span><br><span class="line">import &#123; something &#125; from &#39;es-module-package&#39;;</span><br><span class="line">&#x2F;&#x2F; 实际加载的是 .&#x2F;node_modules&#x2F;es-module-package&#x2F;src&#x2F;index.js</span><br></pre></td></tr></table></figure>

<p>上面代码中，运行该脚本以后，<code>Node.js</code> 就会到<code>./node_modules</code>目录下面，寻找<code>es-module-package</code>模块，然后根据该模块<code>package.json</code>的<code>main</code>字段去执行入口文件。</p>
<p>这时，如果用 CommonJS 模块的<code>require()</code>命令去加载<code>es-module-package</code>模块会报错，因为 CommonJS 模块不能处理<code>export</code>命令。</p>
<h3 id="exports-字段"><a href="#exports-字段" class="headerlink" title="exports 字段"></a>exports 字段</h3><p><code>exports</code>字段的优先级高于<code>main</code>字段。它有多种用法。</p>
<p>（1）子目录别名</p>
<p><code>package.json</code>文件的<code>exports</code>字段可以指定脚本或子目录的别名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; .&#x2F;node_modules&#x2F;es-module-package&#x2F;package.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;exports&quot;: &#123;</span><br><span class="line">    &quot;.&#x2F;submodule&quot;: &quot;.&#x2F;src&#x2F;submodule.js&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码指定<code>src/submodule.js</code>别名为<code>submodule</code>，然后就可以从别名加载这个文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import submodule from &#39;es-module-package&#x2F;submodule&#39;;</span><br><span class="line">&#x2F;&#x2F; 加载 .&#x2F;node_modules&#x2F;es-module-package&#x2F;src&#x2F;submodule.js</span><br></pre></td></tr></table></figure>

<p>下面是子目录别名的例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; .&#x2F;node_modules&#x2F;es-module-package&#x2F;package.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;exports&quot;: &#123;</span><br><span class="line">    &quot;.&#x2F;features&#x2F;&quot;: &quot;.&#x2F;src&#x2F;features&#x2F;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import feature from &#39;es-module-package&#x2F;features&#x2F;x.js&#39;;</span><br><span class="line">&#x2F;&#x2F; 加载 .&#x2F;node_modules&#x2F;es-module-package&#x2F;src&#x2F;features&#x2F;x.js</span><br></pre></td></tr></table></figure>

<p>如果没有指定别名，就不能用“模块+脚本名”这种形式加载脚本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">import submodule from &#39;es-module-package&#x2F;private-module.js&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 不报错</span><br><span class="line">import submodule from &#39;.&#x2F;node_modules&#x2F;es-module-package&#x2F;private-module.js&#39;;</span><br></pre></td></tr></table></figure>

<p>（2）main 的别名</p>
<p><code>exports</code>字段的别名如果是.，就代表模块的主入口，优先级高于<code>main</code>字段，并且可以直接简写成<code>exports</code>字段的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;exports&quot;: &#123;</span><br><span class="line">    &quot;.&quot;: &quot;.&#x2F;main.js&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">&#123;</span><br><span class="line">  &quot;exports&quot;: &quot;.&#x2F;main.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于<code>exports</code>字段只有支持 ES6 的 <code>Node.js</code> 才认识，所以可以用来兼容旧版本的 <code>Node.js</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;main&quot;: &quot;.&#x2F;main-legacy.cjs&quot;,</span><br><span class="line">  &quot;exports&quot;: &#123;</span><br><span class="line">    &quot;.&quot;: &quot;.&#x2F;main-modern.cjs&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，老版本的 <code>Node.js</code> （不支持 ES6 模块）的入口文件是<code>main-legacy.cjs</code>，新版本的 Node.js 的入口文件是<code>main-modern.cjs</code>。</p>
<p>（3）条件加载</p>
<p>利用<code>.</code>这个别名，可以为 ES6 模块和 CommonJS <strong>指定不同的入口</strong>。目前，这个功能需要在 <code>Node.js</code> 运行的时候，打开<code>--experimental-conditional-exports</code>标志。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;type&quot;: &quot;module&quot;,</span><br><span class="line">  &quot;exports&quot;: &#123;</span><br><span class="line">    &quot;.&quot;: &#123;</span><br><span class="line">      &quot;require&quot;: &quot;.&#x2F;main.cjs&quot;,</span><br><span class="line">      &quot;default&quot;: &quot;.&#x2F;main.js&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，别名<code>.</code>的<code>require</code>条件指定<code>require()</code>命令的入口文件（即 CommonJS 的入口），<code>default</code>条件指定其他情况的入口（即 ES6 的入口）。</p>
<p>上面的写法可以简写如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;exports&quot;: &#123;</span><br><span class="line">    &quot;require&quot;: &quot;.&#x2F;main.cjs&quot;,</span><br><span class="line">    &quot;default&quot;: &quot;.&#x2F;main.js&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，如果同时还有其他别名，就不能采用简写，否则或报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; 报错</span><br><span class="line">  &quot;exports&quot;: &#123;</span><br><span class="line">    &quot;.&#x2F;feature&quot;: &quot;.&#x2F;lib&#x2F;feature.js&quot;,</span><br><span class="line">    &quot;require&quot;: &quot;.&#x2F;main.cjs&quot;,</span><br><span class="line">    &quot;default&quot;: &quot;.&#x2F;main.js&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ES6-模块加载-CommonJS-模块"><a href="#ES6-模块加载-CommonJS-模块" class="headerlink" title="ES6 模块加载 CommonJS 模块"></a>ES6 模块加载 CommonJS 模块</h3><p>目前，一个模块同时支持 ES6 和 CommonJS 两种格式的常见方法是，<code>package.json</code>文件的<code>main</code>字段指定 CommonJS 入口，给 <code>Node.js</code> 使用；<code>module</code>字段指定 ES6 模块入口，给打包工具使用，因为 <code>Node.js</code> 不认识<code>module</code>字段。</p>
<p>有了上一节的条件加载以后，<code>Node.js</code> 本身就可以同时处理两种模块。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; .&#x2F;node_modules&#x2F;pkg&#x2F;package.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;type&quot;: &quot;module&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;.&#x2F;index.cjs&quot;,</span><br><span class="line">  &quot;exports&quot;: &#123;</span><br><span class="line">    &quot;require&quot;: &quot;.&#x2F;index.cjs&quot;,</span><br><span class="line">    &quot;default&quot;: &quot;.&#x2F;wrapper.mjs&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码指定了 CommonJS 入口文件<code>index.cjs</code>，下面是这个文件的代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; .&#x2F;node_modules&#x2F;pkg&#x2F;index.cjs</span><br><span class="line">exports.name &#x3D; &#39;value&#39;;</span><br></pre></td></tr></table></figure>

<p>然后，ES6 模块可以加载这个文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; .&#x2F;node_modules&#x2F;pkg&#x2F;wrapper.mjs</span><br><span class="line">import cjsModule from &#39;.&#x2F;index.cjs&#39;;</span><br><span class="line">export const name &#x3D; cjsModule.name;</span><br></pre></td></tr></table></figure>

<p>注意，<code>import</code>命令加载 CommonJS 模块，只能整体加载，不能只加载单一的输出项。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 正确</span><br><span class="line">import packageMain from &#39;commonjs-package&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">import &#123; method &#125; from &#39;commonjs-package&#39;;</span><br></pre></td></tr></table></figure>

<p>还有一种变通的加载方法，就是使用 <code>Node.js</code> 内置的<code>module.createRequire()</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; cjs.cjs</span><br><span class="line">module.exports &#x3D; &#39;cjs&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; esm.mjs</span><br><span class="line">import &#123; createRequire &#125; from &#39;module&#39;;</span><br><span class="line"></span><br><span class="line">const require &#x3D; createRequire(import.meta.url);</span><br><span class="line"></span><br><span class="line">const cjs &#x3D; require(&#39;.&#x2F;cjs.cjs&#39;);</span><br><span class="line">cjs &#x3D;&#x3D;&#x3D; &#39;cjs&#39;; &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>上面代码中，ES6 模块通过<code>module.createRequire()</code>方法可以加载 CommonJS 模块</p>
<h3 id="CommonJS-模块加载-ES6-模块"><a href="#CommonJS-模块加载-ES6-模块" class="headerlink" title="CommonJS 模块加载 ES6 模块"></a>CommonJS 模块加载 ES6 模块</h3><p>CommonJS 的<code>require</code>命令不能加载 ES6 模块，会报错，只能使用<code>import()</code>这个方法加载。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(async () &#x3D;&gt; &#123;</span><br><span class="line">  await import(&#39;.&#x2F;my-app.mjs&#39;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>上面代码可以在 CommonJS 模块中运行。</p>
<h3 id="Node-js-的内置模块"><a href="#Node-js-的内置模块" class="headerlink" title="Node.js 的内置模块"></a>Node.js 的内置模块</h3><p><code>Node.js</code> 的内置模块可以整体加载，也可以加载指定的输出项。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 整体加载</span><br><span class="line">import EventEmitter from &#39;events&#39;;</span><br><span class="line">const e &#x3D; new EventEmitter();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 加载指定的输出项</span><br><span class="line">import &#123; readFile &#125; from &#39;fs&#39;;</span><br><span class="line">readFile(&#39;.&#x2F;foo.txt&#39;, (err, source) &#x3D;&gt; &#123;</span><br><span class="line">  if (err) &#123;</span><br><span class="line">    console.error(err);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    console.log(source);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="加载路径"><a href="#加载路径" class="headerlink" title="加载路径"></a>加载路径</h4><p>ES6 模块的加载路径必须给出脚本的完整路径，<strong>不能省略脚本的后缀名</strong>。<code>import</code>命令和<code>package.json</code>文件的<code>main</code>字段如果省略脚本的后缀名，会报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; ES6 模块中将报错</span><br><span class="line">import &#123; something &#125; from &#39;.&#x2F;index&#39;;</span><br></pre></td></tr></table></figure>

<p>为了与浏览器的<code>import</code>加载规则相同，<code>Node.js</code> 的<code>.mjs</code>文件支持 URL 路径。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;.&#x2F;foo.mjs?query&#x3D;1&#39;; &#x2F;&#x2F; 加载 .&#x2F;foo 传入参数 ?query&#x3D;1</span><br></pre></td></tr></table></figure>

<p>上面代码中，脚本路径带有参数<code>?query=1</code>，Node 会按 URL 规则解读。同一个脚本只要参数不同，就会被加载多次，并且保存成不同的缓存。由于这个原因，只要文件名中含有<code>:、%、#、?</code>等特殊字符，最好对这些字符进行转义。</p>
<p>目前，Node.js 的<code>import</code>命令只支持加载本地模块（file:协议）和data:协议，不支持加载远程模块。另外，脚本路径只支持相对路径，不支持绝对路径（即以/或//开头的路径）。</p>
<p>最后，<strong>Node 的<code>import</code>命令是异步加载</strong>，这一点与浏览器的处理方法相同。</p>
<h4 id="内部变量"><a href="#内部变量" class="headerlink" title="内部变量"></a>内部变量</h4><p>ES6 模块应该是通用的，同一个模块不用修改，就可以用在浏览器环境和服务器环境。为了达到这个目标，Node 规定 ES6 模块之中不能使用 CommonJS 模块的特有的一些内部变量。</p>
<p>首先，就是<code>this</code>关键字。ES6 模块之中，顶层的<code>this</code>指向<code>undefined</code>；CommonJS 模块的顶层<code>this</code>指向当前模块，这是两者的一个重大差异。</p>
<p>其次，以下这些顶层变量在 ES6 模块之中都是不存在的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arguments</span><br><span class="line">require</span><br><span class="line">module</span><br><span class="line">exports</span><br><span class="line">__filename</span><br><span class="line">__dirname</span><br></pre></td></tr></table></figure>

<h2 id="循环加载"><a href="#循环加载" class="headerlink" title="循环加载"></a>循环加载</h2><p>“循环加载”（circular dependency）指的是，a脚本的执行依赖b脚本，而b脚本的执行又依赖a脚本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; a.js</span><br><span class="line">var b &#x3D; require(&#39;b&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; b.js</span><br><span class="line">var a &#x3D; require(&#39;a&#39;);</span><br></pre></td></tr></table></figure>

<p>通常，“循环加载”表示存在强耦合，如果处理不好，还可能导致递归加载，使得程序无法执行，因此应该避免出现。</p>
<p>但是实际上，这是很难避免的，尤其是依赖关系复杂的大项目，很容易出现a依赖b，b依赖c，c又依赖a这样的情况。这意味着，模块加载机制必须考虑“循环加载”的情况。</p>
<p>对于 JavaScript 语言来说，目前最常见的两种模块格式 CommonJS 和 ES6，处理“循环加载”的方法是不一样的，返回的结果也不一样。</p>
<h3 id="CommonJS-模块的加载原理"><a href="#CommonJS-模块的加载原理" class="headerlink" title="CommonJS 模块的加载原理"></a>CommonJS 模块的加载原理</h3><p>介绍 ES6 如何处理“循环加载”之前，先介绍目前最流行的 CommonJS 模块格式的加载原理。</p>
<p>CommonJS 的一个模块，就是一个脚本文件。<code>require</code>命令第一次加载该脚本，就会执行整个脚本，然后在内存生成一个对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  id: &#39;...&#39;,</span><br><span class="line">  exports: &#123; ... &#125;,</span><br><span class="line">  loaded: true,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码就是 Node 内部加载模块后生成的一个对象。该对象的<code>id</code>属性是模块名，<code>exports</code>属性是模块输出的各个接口，<code>loaded</code>属性是一个布尔值，表示该模块的脚本是否执行完毕。其他还有很多属性，这里都省略了。</p>
<p>以后需要用到这个模块的时候，就会到<code>exports</code>属性上面取值。即使再次执行<code>require</code>命令，也不会再次执行该模块，而是到缓存之中取值。也就是说，CommonJS 模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存。</p>
<h3 id="CommonJS-模块的循环加载"><a href="#CommonJS-模块的循环加载" class="headerlink" title="CommonJS 模块的循环加载"></a>CommonJS 模块的循环加载</h3><p>CommonJS 模块的重要特性是<strong>加载时执行</strong>，即脚本代码在<code>require</code>的时候，就会全部执行。一旦出现某个模块被”循环加载”，就只输出已经执行的部分，还未执行的部分不会输出。</p>
<p>让我们来看，Node 官方文档里面的例子。脚本文件a.js代码如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exports.done &#x3D; false;</span><br><span class="line">var b &#x3D; require(&#39;.&#x2F;b.js&#39;);</span><br><span class="line">console.log(&#39;在 a.js 之中，b.done &#x3D; %j&#39;, b.done);</span><br><span class="line">exports.done &#x3D; true;</span><br><span class="line">console.log(&#39;a.js 执行完毕&#39;);</span><br></pre></td></tr></table></figure>

<p>上面代码之中，<code>a.js</code>脚本先输出一个<code>done</code>变量，然后加载另一个脚本文件<code>b.js</code>。注意，此时<code>a.js</code>代码就停在这里，等待<code>b.js</code>执行完毕，再往下执行。</p>
<p>再看<code>b.js</code>的代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exports.done &#x3D; false;</span><br><span class="line">var a &#x3D; require(&#39;.&#x2F;a.js&#39;);</span><br><span class="line">console.log(&#39;在 b.js 之中，a.done &#x3D; %j&#39;, a.done);</span><br><span class="line">exports.done &#x3D; true;</span><br><span class="line">console.log(&#39;b.js 执行完毕&#39;);</span><br></pre></td></tr></table></figure>

<p>上面代码之中，<code>b.js</code>执行到第二行，就会去加载<code>a.js</code>，这时，就发生了“循环加载”。系统会去a.js模块对应对象的<code>exports</code>属性取值，可是因为<code>a.js</code>还没有执行完，从<code>exports</code>属性只能取回已经执行的部分，而不是最后的值。</p>
<p><code>a.js</code>已经执行的部分，只有一行。</p>
<p><code>exports.done = false;</code></p>
<p>因此，对于<code>b.js</code>来说，它从<code>a.js</code>只输入一个变量<code>done</code>，值为<code>false</code>。</p>
<p>然后，<code>b.js</code>接着往下执行，等到全部执行完毕，再把执行权交还给<code>a.js</code>。于是，<code>a.js</code>接着往下执行，直到执行完毕。我们写一个脚本<code>main.js</code>，验证这个过程。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; require(&#39;.&#x2F;a.js&#39;);</span><br><span class="line">var b &#x3D; require(&#39;.&#x2F;b.js&#39;);</span><br><span class="line">console.log(&#39;在 main.js 之中, a.done&#x3D;%j, b.done&#x3D;%j&#39;, a.done, b.done);</span><br></pre></td></tr></table></figure>

<p>执行<code>main.js</code>，运行结果如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ node main.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在 &#96;b.js&#96; 之中，&#96;a.done &#x3D; false&#96;</span><br><span class="line"></span><br><span class="line">&#96;b.js&#96; 执行完毕</span><br><span class="line">在 a.js 之中，b.done &#x3D; true</span><br><span class="line">a.js 执行完毕</span><br><span class="line">在 main.js 之中, a.done&#x3D;true, b.done&#x3D;true</span><br></pre></td></tr></table></figure>
<p>上面的代码证明了两件事。一是，在<code>b.js</code>之中，<code>a.js</code>没有执行完毕，只执行了第一行。二是，<code>main.js</code>执行到第二行时，不会再次执行<code>b.js</code>，而是输出缓存的<code>b.js</code>的执行结果，即它的第四行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exports.done &#x3D; true;</span><br></pre></td></tr></table></figure>

<p>总之，CommonJS 输入的是被输出值的拷贝，不是引用。</p>
<p>另外，由于 CommonJS 模块遇到循环加载时，返回的是当前已经执行的部分的值，而不是代码全部执行后的值，两者可能会有差异。所以，输入变量的时候，必须非常小心。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; require(&#39;a&#39;); &#x2F;&#x2F; 安全的写法</span><br><span class="line">var foo &#x3D; require(&#39;a&#39;).foo; &#x2F;&#x2F; 危险的写法</span><br><span class="line"></span><br><span class="line">exports.good &#x3D; function (arg) &#123;</span><br><span class="line">  return a.foo(&#39;good&#39;, arg); &#x2F;&#x2F; 使用的是 a.foo 的最新值</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.bad &#x3D; function (arg) &#123;</span><br><span class="line">  return foo(&#39;bad&#39;, arg); &#x2F;&#x2F; 使用的是一个部分加载时的值</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码中，如果发生循环加载，<code>require(&#39;a&#39;).foo</code>的值很可能后面会被改写，改用<code>require(&#39;a&#39;)</code>会更保险一点。</p>
<h3 id="ES6-模块的循环加载"><a href="#ES6-模块的循环加载" class="headerlink" title="ES6 模块的循环加载"></a>ES6 模块的循环加载</h3><p>ES6 处理“循环加载”与 CommonJS 有本质的不同。ES6 模块是动态引用，如果使用<code>import</code>从一个模块加载变量（即<code>import foo from &#39;foo&#39;</code>），那些变量不会被缓存，而是成为一个指向被加载模块的引用，需要开发者自己保证，真正取值的时候能够取到值。</p>
<p>请看下面这个例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; a.mjs</span><br><span class="line">import &#123;bar&#125; from &#39;.&#x2F;b&#39;;</span><br><span class="line">console.log(&#39;a.mjs&#39;);</span><br><span class="line">console.log(bar);</span><br><span class="line">export let foo &#x3D; &#39;foo&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; b.mjs</span><br><span class="line">import &#123;foo&#125; from &#39;.&#x2F;a&#39;;</span><br><span class="line">console.log(&#39;b.mjs&#39;);</span><br><span class="line">console.log(foo);</span><br><span class="line">export let bar &#x3D; &#39;bar&#39;;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>a.mjs</code>加载<code>b.mjs</code>，<code>b.mjs</code>又加载<code>a.mjs</code>，构成循环加载。执行<code>a.mjs</code>，结果如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ node --experimental-modules a.mjs</span><br><span class="line">b.mjs</span><br><span class="line">ReferenceError: foo is not defined</span><br></pre></td></tr></table></figure>

<p>上面代码中，执行<code>a.mjs</code>以后会报错，<code>foo</code>变量未定义，这是为什么？</p>
<p>让我们一行行来看，ES6 循环加载是怎么处理的。首先，执行<code>a.mjs</code>以后，引擎发现它加载了<code>b.mjs</code>，因此会优先执行<code>b.mjs</code>，然后再执行<code>a.mjs</code>。接着，执行<code>b.mjs</code>的时候，已知它从<code>a.mjs</code>输入了<code>foo</code>接口，这时不会去执行<code>a.mjs</code>，而是认为这个接口已经存在了，继续往下执行。执行到第三行<code>console.log(foo)</code>的时候，才发现这个接口根本没定义，因此报错。</p>
<p>解决这个问题的方法，就是让<code>b.mjs</code>运行的时候，foo已经有定义了。这可以通过将<code>foo</code>写成函数来解决。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; a.mjs</span><br><span class="line">import &#123;bar&#125; from &#39;.&#x2F;b&#39;;</span><br><span class="line">console.log(&#39;a.mjs&#39;);</span><br><span class="line">console.log(bar());</span><br><span class="line">function foo() &#123; return &#39;foo&#39; &#125;</span><br><span class="line">export &#123;foo&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; b.mjs</span><br><span class="line">import &#123;foo&#125; from &#39;.&#x2F;a&#39;;</span><br><span class="line">console.log(&#39;b.mjs&#39;);</span><br><span class="line">console.log(foo());</span><br><span class="line">function bar() &#123; return &#39;bar&#39; &#125;</span><br><span class="line">export &#123;bar&#125;;</span><br></pre></td></tr></table></figure>

<p>这时再执行<code>a.mjs</code>就可以得到预期结果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ node --experimental-modules a.mjs</span><br><span class="line">b.mjs</span><br><span class="line">foo</span><br><span class="line">a.mjs</span><br><span class="line">bar</span><br></pre></td></tr></table></figure>

<p>这是因为函数具有提升作用，在执行<code>import {bar} from &#39;./b&#39;</code>时，函数<code>foo</code>就已经有定义了，所以<code>b.mjs</code>加载的时候不会报错。这也意味着，如果把函数<code>foo</code>改写成函数表达式，也会报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; a.mjs</span><br><span class="line">import &#123;bar&#125; from &#39;.&#x2F;b&#39;;</span><br><span class="line">console.log(&#39;a.mjs&#39;);</span><br><span class="line">console.log(bar());</span><br><span class="line">const foo &#x3D; () &#x3D;&gt; &#39;foo&#39;;</span><br><span class="line">export &#123;foo&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码的第四行，改成了函数表达式，就不具有提升作用，执行就会报错。</p>
<p>我们再来看 ES6 模块加载器SystemJS给出的一个例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; even.js</span><br><span class="line">import &#123; odd &#125; from &#39;.&#x2F;odd&#39;</span><br><span class="line">export var counter &#x3D; 0;</span><br><span class="line">export function even(n) &#123;</span><br><span class="line">  counter++;</span><br><span class="line">  return n &#x3D;&#x3D;&#x3D; 0 || odd(n - 1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; odd.js</span><br><span class="line">import &#123; even &#125; from &#39;.&#x2F;even&#39;;</span><br><span class="line">export function odd(n) &#123;</span><br><span class="line">  return n !&#x3D;&#x3D; 0 &amp;&amp; even(n - 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>even.js</code>里面的函数even有一个参数n，只要不等于 0，就会减去 1，传入加载的odd()。odd.js也会做类似操作。</p>
<p>运行上面这段代码，结果如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ babel-node</span><br><span class="line">&gt; import * as m from &#39;.&#x2F;even.js&#39;;</span><br><span class="line">&gt; m.even(10);</span><br><span class="line">true</span><br><span class="line">&gt; m.counter</span><br><span class="line">6</span><br><span class="line">&gt; m.even(20)</span><br><span class="line">true</span><br><span class="line">&gt; m.counter</span><br><span class="line">17</span><br></pre></td></tr></table></figure>

<p>上面代码中，参数n从 10 变为 0 的过程中，even()一共会执行 6 次，所以变量counter等于 6。第二次调用even()时，参数n从 20 变为 0，even()一共会执行 11 次，加上前面的 6 次，所以变量counter等于 17。</p>
<p>这个例子要是改写成 CommonJS，就根本无法执行，会报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; even.js</span><br><span class="line">var odd &#x3D; require(&#39;.&#x2F;odd&#39;);</span><br><span class="line">var counter &#x3D; 0;</span><br><span class="line">exports.counter &#x3D; counter;</span><br><span class="line">exports.even &#x3D; function (n) &#123;</span><br><span class="line">  counter++;</span><br><span class="line">  return n &#x3D;&#x3D; 0 || odd(n - 1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; odd.js</span><br><span class="line">var even &#x3D; require(&#39;.&#x2F;even&#39;).even;</span><br><span class="line">module.exports &#x3D; function (n) &#123;</span><br><span class="line">  return n !&#x3D; 0 &amp;&amp; even(n - 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，even.js加载odd.js，而odd.js又去加载even.js，形成“循环加载”。这时，执行引擎就会输出even.js已经执行的部分（不存在任何结果），所以在odd.js之中，变量even等于undefined，等到后面调用even(n - 1)就会报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ node</span><br><span class="line">&gt; var m &#x3D; require(&#39;.&#x2F;even&#39;);</span><br><span class="line">&gt; m.even(10)</span><br><span class="line">TypeError: even is not a function</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS属性：字体属性和文本属性</title>
    <url>/2020/04/18/01-CSS%E5%B1%9E%E6%80%A7%EF%BC%9A%E5%AD%97%E4%BD%93%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%87%E6%9C%AC%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<hr>
<h2 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h2><ul>
<li>CSS的单位</li>
<li>字体属性</li>
<li>文本属性</li>
<li>定位属性：position、float、overflow等<a id="more"></a>
<h2 id="CSS的单位"><a href="#CSS的单位" class="headerlink" title="CSS的单位"></a>CSS的单位</h2></li>
</ul>
<p>html中的单位只有一种，那就是像素px，所以单位是可以省略的，但是在CSS中不一样。<br><font color="#0000FF"><strong>CSS中的单位是必须要写的</strong>，因为它没有默认单位。</font></p>
<h3 id="绝对单位"><a href="#绝对单位" class="headerlink" title="绝对单位"></a>绝对单位</h3><p>1 <code>in</code>=2.54<code>cm</code>=25.4<code>mm</code>=72<code>pt</code>=6<code>pc</code>。</p>
<p>各种单位的含义：</p>
<ul>
<li><code>in</code>：英寸Inches (1 英寸 = 2.54 厘米)</li>
<li><code>cm</code>：厘米Centimeters</li>
<li><code>mm</code>：毫米Millimeters</li>
<li><code>pt</code>：点Points，或者叫英镑 (1点 = 1/72英寸)</li>
<li><code>pc</code>：皮卡Picas (1 皮卡 = 12 点)</li>
</ul>
<h3 id="相对单位"><a href="#相对单位" class="headerlink" title="相对单位"></a>相对单位</h3><p><code>px</code>：像素<br><code>em</code>：印刷单位相当于12个点<br><code>%</code>：百分比，相对周围的文字的大小</p>
<p>为什么说像素px是一个相对单位呢，这也很好理解。比如说，电脑屏幕的的尺寸是不变的，但是我们可以让其显示不同的分辨率，在不同的分辨率下，单个像素的长度肯定是不一样的啦。</p>
<h2 id="font-字体属性"><a href="#font-字体属性" class="headerlink" title="font 字体属性"></a>font 字体属性</h2><p>CSS中，有很多<strong>非布局样式</strong>（与布局无关），包括：字体、行高、颜色、大小、背景、边框、滚动、换行、装饰性属性（粗体、斜体、下划线）等。</p>
<p>字体属性: css样式中，常见的字体属性有以下几种：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">50px</span>; 		<span class="comment">/*字体大小*/</span></span><br><span class="line">	<span class="attribute">line-height</span>: <span class="number">30px</span>;      <span class="comment">/*行高*/</span></span><br><span class="line">	<span class="attribute">font-family</span>: 幼圆,黑体; 	<span class="comment">/*字体类型：如果没有幼圆就显示黑体，没有黑体就显示默认*/</span></span><br><span class="line">	<span class="attribute">font-style</span>: italic ;		<span class="comment">/*italic表示斜体，normal表示不倾斜*/</span></span><br><span class="line">	<span class="attribute">font-weight</span>: bold;	<span class="comment">/*粗体*/</span></span><br><span class="line">	<span class="attribute">font-variant</span>: small-caps;  <span class="comment">/*小写变大写*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h3><p>CSS中，所有的行，都有行高。盒子模型的padding，绝对不是直接作用在文字上的，而是作用在“行”上的。</p>
<p>为了严格保证字在行里面居中，我们的工程师有一个约定： <strong>行高、字号，一般都是偶数</strong>。这样可以保证，它们的差一定偶数，就能够被2整除。</p>
<h3 id="如何让单行文本垂直居中"><a href="#如何让单行文本垂直居中" class="headerlink" title="如何让单行文本垂直居中"></a>如何让单行文本垂直居中</h3><p>小技巧：如果一段文本只有一行，如果此时设置<strong>行高 = 盒子高</strong>，就可以保证单行文本垂直居中。这个很好理解。</p>
<h3 id="vertical-align-middle-属性"><a href="#vertical-align-middle-属性" class="headerlink" title="vertical-align: middle; 属性"></a><code>vertical-align: middle;</code> 属性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">vertical-align</span>: <span class="selector-tag">middle</span>; <span class="comment">/*指定行内元素（inline）或表格单元格（table-cell）元素的垂直对齐方式。*/</span></span><br></pre></td></tr></table></figure>

<h3 id="字号、行高、字体三大属性"><a href="#字号、行高、字体三大属性" class="headerlink" title="字号、行高、字体三大属性"></a>字号、行高、字体三大属性</h3><p>（1）字号：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">font-size:14px;</span><br></pre></td></tr></table></figure>

<p>（2）行高：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">line-height:24px;</span><br></pre></td></tr></table></figure>

<p>（3）字体：（font-family就是“字体”，family是“家庭”的意思）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">font-family:&quot;宋体&quot;;</span><br></pre></td></tr></table></figure>

<p>是否加粗属性以及上面这三个属性，我们可以连写：（是否加粗、字号 font-size、行高 line-height、字体 font-family）</p>
<p>格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">font: 加粗 字号&#x2F;行高&#x2F; 字体</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">font: 400 14px&#x2F;24px &quot;宋体&quot;;</span><br></pre></td></tr></table></figure>

<p>PS：400是nomal，700是bold。</p>
<p>上面这几个属性可以连写，但是有一个要求，font属性连写至少要有<strong>字号和字体</strong>，否则连写是不生效的（相当于没有这一行代码）。</p>
<p><strong>2、字体属性的说明：</strong></p>
<p>（1）网页中不是所有字体都能用，因为这个字体要看用户的电脑里面装没装，比如你设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">font-family: &quot;华文彩云&quot;;</span><br></pre></td></tr></table></figure>

<p>上方代码中，如果用户的 Windows 电脑里面没有这个字体，那么就会变成宋体。</p>
<p>页面中，中文我们一般使用：微软雅黑、宋体、黑体。英文使用：Arial、Times New Roman。页面中如果需要其他的字体，就需要单独安装字体，或者切图。</p>
<p>（2）为了防止用户电脑里，没有微软雅黑这个字体。就要用英语的逗号，提供备选字体。如下：（可以备选多个）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">font-family: &quot;微软雅黑&quot;,&quot;宋体&quot;;</span><br></pre></td></tr></table></figure>

<p>上方代码表示：如果用户电脑里没有安装微软雅黑字体，那么就是宋体。</p>
<p>（3）我们<strong>须将英语字体放在最前面</strong>，这样所有的中文，就不能匹配英语字体，就自动的变为后面的中文字体：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">font-family: &quot;Times New Roman&quot;,&quot;微软雅黑&quot;,&quot;宋体&quot;;</span><br></pre></td></tr></table></figure>

<p>上方代码的意思是，英文会采用Times New Roman字体，而中文会采用微软雅黑字体（因为美国人设计的Times New Roman字体并不针对中文，所以中文会采用后面的微软雅黑）。比如说，对于<code>smyhvae哈哈哈</code>这段文字，<code>smyhvae</code>会采用Times New Roman字体，而<code>哈哈哈</code>会采用微软雅黑字体。</p>
<p>可是，如果我们把中文字体写在前面：(错误写法)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">font-family: &quot;微软雅黑&quot;,&quot;Times New Roman&quot;,&quot;宋体&quot;;</span><br></pre></td></tr></table></figure>

<p>上方代码会导致，中文和英文都会采用微软雅黑字体。</p>
<p>（4）所有的中文字体，都有英语别名。</p>
<p>微软雅黑的英语别名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">font-family: &quot;Microsoft YaHei&quot;;</span><br></pre></td></tr></table></figure>

<p>宋体的英语别名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">font-family: &quot;SimSun&quot;;</span><br></pre></td></tr></table></figure>

<p>于是，当我们把字号、行高、字体这三个属性合二为一时，也可以写成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">font:12px&#x2F;30px  &quot;Times New Roman&quot;,&quot;Microsoft YaHei&quot;,&quot;SimSun&quot;;</span><br></pre></td></tr></table></figure>

<p>（5）行高可以用百分比，表示字号的百分之多少。</p>
<p>一般来说，百分比都是大于100%的，因为行高一定要大于字号。</p>
<p>比如说， <code>font:12px/200% “宋体”</code>等价于<code>font:12px/24px “宋体”</code>。<code>200%</code>可以理解成word里面的2倍行高。</p>
<p>反过来， <code>font:16px/48px “宋体”;</code>等价于<code>font:16px/300% “宋体”</code>。</p>
<h3 id="字体加粗属性"><a href="#字体加粗属性" class="headerlink" title="字体加粗属性"></a>字体加粗属性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">	<span class="attribute">font-weight</span>: normal; <span class="comment">/*正常*/</span></span><br><span class="line">	<span class="attribute">font-weight</span>: bold;  <span class="comment">/*加粗*/</span></span><br><span class="line">	<span class="attribute">font-weight</span>: <span class="number">100</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>: <span class="number">200</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>: <span class="number">900</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在设置字体是否加粗时，属性值既可以填写<code>normal</code>、<code>bold</code>这样的加粗字体，也可以直接填写 100至900 这样的数字。<code>normal</code>的值相当于400，<code>bold</code>的值相当于700。</p>
<h2 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h2><p>CSS样式中，常见的文本属性有以下几种：</p>
<ul>
<li><code>letter-spacing: 0.5cm ;</code>  单个字母之间的间距</li>
<li><code>word-spacing: 1cm;</code>   单词之间的间距</li>
<li><code>text-decoration: none;</code> 字体修饰：none 去掉下划线、<strong>underline 下划线</strong>、line-through 中划线、overline 上划线</li>
<li><code>text-transform: lowercase;</code>  单词字体大小写。uppercase大写、lowercase小写、<code>capitalize</code>（每个单词的首字母大写）</li>
<li><code>color:red;</code> 字体颜色</li>
<li><code>text-align: center;</code> 在当前容器中的对齐方式。属性值可以是：left、right、center（<font color="#0000FF"><strong>在当前容器的中间</strong></font>）、justify</li>
</ul>
<h2 id="列表属性"><a href="#列表属性" class="headerlink" title="列表属性"></a>列表属性</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">	<span class="attribute">list-style-image</span>:<span class="built_in">url</span>(images/<span class="number">2</span>.gif) ;  <span class="comment">/*列表项前设置为图片*/</span></span><br><span class="line">	<span class="attribute">margin-left</span>:<span class="number">80px</span>;  <span class="comment">/*公有属性*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外还有一个简写属性叫做<code>list-style</code>，它的作用是：将上面的多个属性写在一个声明中。</p>
<h2 id="overflow属性：超出范围的内容要怎么处理"><a href="#overflow属性：超出范围的内容要怎么处理" class="headerlink" title="overflow属性：超出范围的内容要怎么处理"></a>overflow属性：超出范围的内容要怎么处理</h2><p><code>overflow</code>属性的属性值可以是：</p>
<ul>
<li><code>visible</code>：默认值。多余的内容不剪切也不添加滚动条，会全部显示出来。</li>
<li><code>hidden</code>：不显示超过对象尺寸的内容。</li>
<li><code>auto</code>：如果内容不超出，则不显示滚动条；如果内容超出，则显示滚动条。<ul>
<li><code>scroll</code>：Windows 平台下，无论内容是否超出，总是显示滚动条。Mac 平台下，和 <code>auto</code> 属性相同。</li>
</ul>
</li>
</ul>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Generator"</span> <span class="attr">content</span>=<span class="string">"EditPlus®"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Author"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Keywords"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		div&#123;</span><br><span class="line">			width: 100px;</span><br><span class="line">			height: 100px;</span><br><span class="line"><span class="css">			<span class="selector-tag">background-color</span>: <span class="selector-id">#00cc66</span>;</span></span><br><span class="line">			margin-right: 100px;</span><br><span class="line">			float: left;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-id">#div1</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">overflow</span>: <span class="selector-tag">auto</span>;<span class="comment">/*超出的部分让浏览器自行解决*/</span></span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-id">#div2</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">overflow</span>: <span class="selector-tag">visible</span>;<span class="comment">/*超出的部分会显示出来*/</span></span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-id">#div3</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;<span class="comment">/*超出的部分将剪切掉*/</span></span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>其实很简单 其实很自然 两个人的爱由两人分担 其实并不难 是你太悲观 隔着一道墙不跟谁分享 不想让你为难 你不再需要给我个答案<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span>其实很简单 其实很自然 两个人的爱由两人分担 其实并不难 是你太悲观 隔着一道墙不跟谁分享 不想让你为难 你不再需要给我个答案<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div3"</span>&gt;</span>其实很简单 其实很自然 两个人的爱由两人分担 其实并不难 是你太悲观 隔着一道墙不跟谁分享 不想让你为难 你不再需要给我个答案<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="鼠标的属性-cursor"><a href="#鼠标的属性-cursor" class="headerlink" title="鼠标的属性 cursor"></a>鼠标的属性 cursor</h2><p>鼠标的属性<code>cursor</code>有以下几个属性值：</p>
<ul>
<li><code>auto</code>：默认值。浏览器根据当前情况自动确定鼠标光标类型。</li>
<li><code>pointer</code>：IE6.0，竖起一只手指的手形光标。就像通常用户将光标移到超链接上时那样。</li>
<li><code>hand</code>：和<code>pointer</code>的作用一样：竖起一只手指的手形光标。就像通常用户将光标移到超链接上时那样。</li>
</ul>
<p>比如说，我想让鼠标放在那个标签上时，光标显示手状，代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">p:hover&#123;</span><br><span class="line">	cursor: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外还有以下的属性：（不用记，需要的时候查一下就行了）</p>
<ul>
<li>all-scroll      :　 IE6.0  有上下左右四个箭头，中间有一个圆点的光标。用于标示页面可以向上下左右任何方向滚动。</li>
<li>col-resize      :　 IE6.0  有左右两个箭头，中间由竖线分隔开的光标。用于标示项目或标题栏可以被水平改变尺寸。</li>
<li>crosshair       :　  简单的十字线光标。</li>
<li>default         :　  客户端平台的默认光标。通常是一个箭头。</li>
<li>hand            :　  竖起一只手指的手形光标。就像通常用户将光标移到超链接上时那样。</li>
<li>move            :　  十字箭头光标。用于标示对象可被移动。</li>
<li>help            :　  带有问号标记的箭头。用于标示有帮助信息存在。</li>
<li>no-drop         :　 IE6.0  带有一个被斜线贯穿的圆圈的手形光标。用于标示被拖起的对象不允许在光标的当前位置被放下。</li>
<li>not-allowed     :　 IE6.0  禁止标记(一个被斜线贯穿的圆圈)光标。用于标示请求的操作不允许被执行。</li>
<li>progress        :　 IE6.0  带有沙漏标记的箭头光标。用于标示一个进程正在后台运行。</li>
<li>row-resize      :　 IE6.0  有上下两个箭头，中间由横线分隔开的光标。用于标示项目或标题栏可以被垂直改变尺寸。</li>
<li>text            :　  用于标示可编辑的水平文本的光标。通常是大写字母 I 的形状。</li>
<li>vertical-text   :　 IE6.0  用于标示可编辑的垂直文本的光标。通常是大写字母 I 旋转90度的形状。</li>
<li>wait            :　  用于标示程序忙用户需要等待的光标。通常是沙漏或手表的形状。</li>
<li>*-resize        :　  用于标示对象可被改变尺寸方向的箭头光标。</li>
<li>w-resize | s-resize | n-resize | e-resize | ne-resize | sw-resize | se-resize | nw-resize</li>
<li>url ( url )     :　 IE6.0  用户自定义光标。使用绝对或相对 url 地址指定光标文件(后缀为 .cur 或者 .ani )。</li>
</ul>
<h2 id="滤镜"><a href="#滤镜" class="headerlink" title="滤镜"></a>滤镜</h2><p>这里只举一个滤镜的例子吧。比如说让图片变成灰度图的效果，可以这样设置滤镜：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"3.jpg"</span> <span class="attr">style</span>=<span class="string">"filter:gray()"</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS简介</title>
    <url>/2020/04/18/01-JS%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<hr>
<h2 id="JavaScript背景"><a href="#JavaScript背景" class="headerlink" title="JavaScript背景"></a>JavaScript背景</h2><p>Web前端有三层：</p>
<ul>
<li><p>HTML：从语义的角度，描述页面<strong>结构</strong></p>
</li>
<li><p>CSS：从审美的角度，描述<strong>样式</strong>（美化页面）</p>
</li>
<li><p>JavaScript：从交互的角度，描述<strong>行为</strong>（实现业务逻辑和页面控制）</p>
<a id="more"></a>
<h3 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h3></li>
</ul>
<p>JavaScript诞生于<strong>1995年</strong>。布兰登 • 艾奇（Brendan Eich，1961年～），1995年在网景公司，发明的JavaScript。</p>
<p>JavaScript是由<strong>网景</strong>公司发明，起初命名为LiveScript；1995年年12月SUN公司合作，因市场宣传需要，改名为 JavaScript。</p>
<p>后来 Sun 公司 被Oracle收购，JavaScript版权归Oracle所有。</p>
<blockquote>
<p>备注：由于当时Java这个语言特别火，所以为了傍大牌，就改名为JavaScript。如同“北大”和“北大青鸟”的关系。“北大青鸟”就是傍“北大”大牌。</p>
</blockquote>
<p>同时期还有其他的网页语言，比如VBScript、JScript等等，但是后来都被JavaScript打败了，所以现在的浏览器中，只运行一种脚本语言就是JavaScript。</p>
<p>JavaScript是世界上用的最多的<strong>脚本语言</strong>。</p>
<h3 id="JavaScript的发展：蒸蒸日上"><a href="#JavaScript的发展：蒸蒸日上" class="headerlink" title="JavaScript的发展：蒸蒸日上"></a>JavaScript的发展：蒸蒸日上</h3><p>2003年之前，JavaScript被认为“牛皮鲜”，用来制作页面上的广告，弹窗、漂浮的广告。什么东西让人烦，什么东西就是JavaScript开发的。所以很多浏览器就推出了屏蔽广告功能。</p>
<p>2004年，JavaScript命运开始改变。那一年，<strong>谷歌公司开始带头使用Ajax技术</strong>，Ajax技术就是JavaScript的一个应用。并且，那时候人们逐渐开始提升用户体验了。Ajax有一些应用场景。比如，当我们在百度搜索框搜文字时，输入框下方的智能提示，可以通过Ajax实现。比如，当我们注册网易邮箱时，能够及时发现用户名是否被占用，而不用调到另外一个页面。</p>
<p>2007年乔布斯发布了第一款iPhone，这一年开始，用户就多了上网的途径，就是用移动设备上网。<br><strong>JavaScript在移动页面中，也是不可或缺的</strong>。并且这一年，互联网开始标准化，按照W3C规则三层分离，JavaScript越来越被重视。</p>
<p>2010年，人们更加了解<strong>HTML5技术</strong>，<strong>HTML5推出了一个东西叫做Canvas</strong>（画布），工程师可以在Canvas上进行游戏制作，利用的就是JavaScript。</p>
<p>2011年，<strong>Node.js诞生</strong>，使JavaScript能够开发服务器程序了。</p>
<p>如今，<strong>WebApp</strong>已经非常流行，就是用<strong>网页技术开发手机应用</strong>。手机系统有iOS、安卓。比如公司要开发一个“携程网”App，就需要招聘三队人马，比如iOS工程师10人，安卓工程师10人，前端工程师10人。共30人，开发成本大；而且如果要改版，要改3个版本。现在，假设公司都用web技术，用html+css+javascript技术就可以开发App。也易于迭代（网页一改变，所有的终端都变了）。</p>
<p>虽然目前WebApp（Web应用）在功能和性能上的体验远不如Native App（原生应用），但是“在原生App中内嵌一部分H5页面”已经是一种趋势。</p>
<h2 id="浏览器的介绍"><a href="#浏览器的介绍" class="headerlink" title="浏览器的介绍"></a>浏览器的介绍</h2><p>浏览器是网页运行的平台，常用的浏览器有谷歌（Chrome）、Safari、火狐（Firefox）、IE、Edge、Opera等。</p>
<h3 id="浏览器的组成"><a href="#浏览器的组成" class="headerlink" title="浏览器的组成"></a>浏览器的组成</h3><p>浏览器分成两部分：</p>
<ul>
<li><p>渲染引擎</p>
</li>
<li><p>JS 引擎</p>
</li>
</ul>
<p>1、<strong>渲染引擎</strong>：（浏览器内核）</p>
<p>浏览器所采用的「渲染引擎」也称之为「浏览器内核」，用来解析 HTML与CSS。渲染引擎决定了浏览器如何显示网页的内容以及页面的格式信息。<strong>渲染引擎是兼容性问题出现的根本原因。</strong></p>
<p>常见浏览器的内核如下：</p>
<table>
<thead>
<tr>
<th align="center">浏览器</th>
<th align="center">内核</th>
</tr>
</thead>
<tbody><tr>
<td align="center">chrome / 欧鹏</td>
<td align="center">Blink</td>
</tr>
<tr>
<td align="center">Safari</td>
<td align="center">Webkit</td>
</tr>
<tr>
<td align="center">Firefox 火狐</td>
<td align="center">Gecko</td>
</tr>
<tr>
<td align="center">IE</td>
<td align="center">Trident</td>
</tr>
</tbody></table>
<p>2、<strong>JS 引擎</strong>：</p>
<p>也称为 JS 解释器。 用来解析网页中的JavaScript代码，对其处理后再运行。</p>
<p>浏览器本身并不会执行JS代码，而是通过内置 JavaScript 引擎(解释器) 来执行 JS 代码 。JS 引擎执行时会逐行解释源码（转换为机器语言），然后由计算机去执行。</p>
<p>浏览器本身并不会执行JS代码，而是通过内置 JavaScript 引擎(解释器) 来执行 JS 代码 。JS 引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行。所以 JavaScript 语言归为脚本语言，会逐行解释执行。</p>
<p>常见浏览器的 JS 引擎如下：</p>
<table>
<thead>
<tr>
<th align="center">浏览器</th>
<th align="left">JS 引擎</th>
</tr>
</thead>
<tbody><tr>
<td align="center">chrome / 欧鹏</td>
<td align="left">V8</td>
</tr>
<tr>
<td align="center">Safari</td>
<td align="left">Nitro</td>
</tr>
<tr>
<td align="center">Firefox 火狐</td>
<td align="left">SpiderMonkey（1.0-3.0）/ TraceMonkey（3.5-3.6）/ JaegerMonkey（4.0-）</td>
</tr>
<tr>
<td align="center">Opera</td>
<td align="left">Linear A（4.0-6.1）/ Linear B（7.0-9.2）/ Futhark（9.5-10.2）/ Carakan（10.5-）</td>
</tr>
<tr>
<td align="center">IE</td>
<td align="left">Trident</td>
</tr>
</tbody></table>
<p>参考链接：</p>
<ul>
<li><a href="https://juejin.im/post/5ada727c518825670b33a584" target="_blank" rel="noopener">主流浏览器内核及JS引擎</a></li>
</ul>
<h3 id="浏览器工作原理"><a href="#浏览器工作原理" class="headerlink" title="浏览器工作原理"></a>浏览器工作原理</h3><p><img src="http://img.smyhvae.com/20180124_1700.png" alt=""></p>
<p>1、User Interface  用户界面，我们所看到的浏览器</p>
<p>2、Browser engine  浏览器引擎，用来查询和操作渲染引擎</p>
<p>3、Rendering engine 用来显示请求的内容，负责解析HTML、CSS</p>
<p>4、Networking   网络，负责发送网络请求</p>
<p>5、JavaScript Interpreter(解析者)   JavaScript解析器，负责执行JavaScript的代码</p>
<p>6、UI Backend   UI后端，用来绘制类似组合框和弹出窗口</p>
<p>7、Data Persistence(持久化)  数据持久化，数据存储  cookie、HTML5中的sessionStorage</p>
<p>参考链接：<a href="https://www.2cto.com/kf/201202/118111.html" target="_blank" rel="noopener">https://www.2cto.com/kf/201202/118111.html</a></p>
<h2 id="JavaScript介绍"><a href="#JavaScript介绍" class="headerlink" title="JavaScript介绍"></a>JavaScript介绍</h2><h3 id="JavaScript入门易学性"><a href="#JavaScript入门易学性" class="headerlink" title="JavaScript入门易学性"></a>JavaScript入门易学性</h3><ul>
<li><p>JavaScript对初学者比较友好、简单易用。可以使用任何文本编辑工具编写，只需要浏览器就可以执行程序。</p>
</li>
<li><p>JavaScript是有界面效果的（相比之下，C语言只有白底黑字）。</p>
</li>
<li><p>JavaScript是<strong>弱变量类型</strong>的语言，变量只需要用 var/let/const 来声明。而Java中变量的声明，要根据变量的类型来定义。</p>
</li>
</ul>
<p>比如Java中需要定义如下变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">float</span> a;</span><br><span class="line"><span class="keyword">double</span> a;</span><br><span class="line">String a;</span><br><span class="line"><span class="keyword">boolean</span> a;</span><br></pre></td></tr></table></figure>

<p>而JavaScript中，只需要用一种方式来定义：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 写法</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 写法</span></span><br><span class="line"><span class="keyword">const</span> a;</span><br><span class="line"><span class="keyword">let</span> a;</span><br></pre></td></tr></table></figure>

<h3 id="JavaScript是前端语言"><a href="#JavaScript是前端语言" class="headerlink" title="JavaScript是前端语言"></a>JavaScript是前端语言</h3><p>JavaScript是前端语言，而不是后台语言。</p>
<p>JavaScript运行在用户的终端网页上，而不是服务器上，所以我们称之为“<strong>前端语言</strong>”。就是服务于页面的交互效果、美化，不能操作数据库。</p>
<p><strong>后台语言</strong>是运行在服务器上的，比如PHP、ASP、JSP等等，这些语言都能够操作数据库，都能够对数据库进行“增删改查”操作。</p>
<p>备注：Node.js是用 JavaScript 开发的，现在也可以基于 Node.js 技术进行服务器端编程。</p>
<h3 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h3><p>JavaScript基础分为三个部分：</p>
<ul>
<li><p>ECMAScript：JavaScript的语法标准。包括变量、表达式、运算符、函数、if语句、for语句等。</p>
</li>
<li><p><strong>DOM</strong>：Document Object Model（文档对象模型），操作<strong>页面上的元素</strong>的API。比如让盒子移动、变色、改变大小、轮播图等等。</p>
</li>
<li><p><strong>BOM</strong>：Browser Object Model（浏览器对象模型），操作<strong>浏览器部分功能</strong>的API。通过BOM可以操作浏览器窗口，比如弹框、控制浏览器跳转、获取浏览器分辨率等等。</p>
</li>
</ul>
<h2 id="JavaScript-的特点"><a href="#JavaScript-的特点" class="headerlink" title="JavaScript 的特点"></a>JavaScript 的特点</h2><h3 id="特点1：解释型语言"><a href="#特点1：解释型语言" class="headerlink" title="特点1：解释型语言"></a>特点1：解释型语言</h3><p>JavaScript 是解释型语言，不需要事先被翻译为机器码；而是边翻译边执行（翻译一行，执行一行）。</p>
<p>什么是「解释型语言」？详见下一段。</p>
<blockquote>
<p>由于少了实现编译这一步骤，所以解释型语言开发起来尤为方便，但是解释型语言运行较慢也是它的劣势。不过解释型语言中使用了JIT技术，使得运行速度得以改善。</p>
</blockquote>
<h3 id="特点2：单线程"><a href="#特点2：单线程" class="headerlink" title="特点2：单线程"></a>特点2：单线程</h3><h3 id="特点3：ECMAScript标准"><a href="#特点3：ECMAScript标准" class="headerlink" title="特点3：ECMAScript标准"></a>特点3：ECMAScript标准</h3><p>ECMAScript是一种由 ECMA 国际（前身为欧洲计算机制造商协会,英文名称是European Computer Manufacturers Association）制定和发布的脚本语言规范。</p>
<p>JavaScript是由公司开发而成的，问题是不便于其他的公司拓展和使用。所以欧洲的这个ECMA的组织，牵头制定JavaScript的标准，取名为ECMAScript。</p>
<p>简单来说，<strong>ECMAScript不是一门语言，而是一个标准</strong>。ECMAScript 规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准。</p>
<p>ECMAScript在2015年6月，发布了ECMAScript 6版本（ES6），语言的能力更强（也包含了很多新特性）。但是，浏览器的厂商不会那么快去追上这个标准，需要时间。</p>
<h2 id="编程语言的分类"><a href="#编程语言的分类" class="headerlink" title="编程语言的分类"></a>编程语言的分类</h2><h3 id="翻译器"><a href="#翻译器" class="headerlink" title="翻译器"></a>翻译器</h3><p>计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序员所编写的语言翻译成机器语言，计算机才能执行程序。<strong>程序语言翻译成机器语言的工具，被称为翻译器</strong>。</p>
<p>由此可见，所谓的“翻译”，指的是翻译成计算机能够执行的指令。</p>
<p>翻译器翻译的方式有两种：一种是<strong>编译</strong>，另一种是<strong>解释</strong>。两种方式之间的区别在于<strong>翻译的时机</strong>不同。</p>
<ul>
<li><p><strong>编译器</strong>：在代码执行之前，事前把所有的代码一次性翻译好，生成中间代码文件，然后整体执行。</p>
</li>
<li><p><strong>解释器</strong>：边翻译，边执行（在代码执行时进行及时翻译，并立即执行）。当编译器以解释的方式运行时，也称之为解释器。</p>
</li>
</ul>
<p>对应的语言，称之为“编译型语言”、“解释型语言”。</p>
<h3 id="编译型语言"><a href="#编译型语言" class="headerlink" title="编译型语言"></a>编译型语言</h3><ul>
<li><p>定义：事先把所有的代码一次性翻译好，然后整体执行。</p>
</li>
<li><p>优点：运行更快。</p>
</li>
<li><p>不足：移植性不好，不跨平台。</p>
</li>
<li><p>编译型语言举例：c、c++</p>
</li>
</ul>
<p>比如说，c语言的代码文件是<code>.c</code>后缀，翻译之后文件是<code>.obj</code>后缀，系统执行的是 obj 文件；再比如， java 语言的代码文件是<code>.java</code>后缀，翻译之后的文件是<code>.class</code>后缀。（注意，Java 语言不是严格的 编译型语言，这个一会儿会讲）</p>
<h3 id="解释型语言"><a href="#解释型语言" class="headerlink" title="解释型语言"></a>解释型语言</h3><ul>
<li><p>定义：<strong>边翻译边执行</strong>（翻译一行，执行一行），不需要事先一次性翻译。</p>
</li>
<li><p>优点：移植性好，跨平台。</p>
</li>
<li><p>缺点：运行更慢。</p>
</li>
<li><p>解释型语言举例：JavaScript、php、Python。</p>
</li>
</ul>
<h3 id="Java语言"><a href="#Java语言" class="headerlink" title="Java语言"></a>Java语言</h3><p>Java 语言既不是编译型语言，也不是解释型语言。翻译过程：</p>
<p>（1）编译：<code>.java</code>代码文件先通过 javac 命令编译成<code>.class</code>文件。</p>
<p>（2）执行：<code>.class</code>文件再通过 jvm 虚拟机，解释执行。有了 jvm 的存在，让 java 跨平台了。</p>
<h2 id="开始写第一行JavaScript代码"><a href="#开始写第一行JavaScript代码" class="headerlink" title="开始写第一行JavaScript代码"></a>开始写第一行JavaScript代码</h2><blockquote>
<p>JavaScript 代码的书写位置在哪里呢？这个问题，也可以理解成：引入 js 代码，有哪几种方式。</p>
</blockquote>
<h3 id="方式1：行内式"><a href="#方式1：行内式" class="headerlink" title="方式1：行内式"></a>方式1：行内式</h3><p><strong>代码举例</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">"button"</span> value=<span class="string">"点我点我"</span> onclick=<span class="string">"alert('千古壹号')"</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>完整的可执行代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点我点我"</span> <span class="attr">onclick</span>=<span class="string">"alert('千古壹号的方式1')"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>分析</strong>：</p>
<ul>
<li><p>可以将单行或少量 JS 代码写在HTML标签的事件属性中（以 on 开头的属性），比如放在上面的 <code>onclick</code>点击事件中。</p>
</li>
<li><p>这种书写方式，不推荐使用，原因是：可读性差，尤其是需要编写大量 JS代码时，容易出错；引号多层嵌套时，也容易出错。</p>
</li>
<li><p>关于代码中的「引号」，在HTML标签中，我们推荐使用双引号, JS 中我们推荐使用单引号。</p>
</li>
</ul>
<h3 id="方式2、内嵌式"><a href="#方式2、内嵌式" class="headerlink" title="方式2、内嵌式"></a>方式2、内嵌式</h3><p>我们可以在html 页面的 <code>&lt;body&gt;</code> 标签里放入<code>&lt;script type=”text/javascript”&gt;&lt;/script&gt;</code>标签对儿，并在<code>&lt;script&gt;</code>里书写JavaScript 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">		<span class="comment">// 在这里写 js 代码</span></span></span><br><span class="line"><span class="actionscript">		alert(<span class="string">'千古壹号的方式2'</span>);</span></span><br><span class="line"><span class="javascript">		<span class="built_in">console</span>.log(<span class="string">'qianguyihao 方式2'</span>);</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>分析</strong>：</p>
<ul>
<li><p>text表示纯文本，因为JavaScript也是一个纯文本的语言。</p>
</li>
<li><p>可以将多行JS代码写到 <code>&lt;script&gt;</code> 标签中。</p>
</li>
<li><p>内嵌式 JS 是学习时常用的方式。</p>
</li>
</ul>
<h3 id="方式3：引入外部的-JS-文件"><a href="#方式3：引入外部的-JS-文件" class="headerlink" title="方式3：引入外部的 JS 文件"></a>方式3：引入外部的 JS 文件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 引入外部的 js 文件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"tool.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面这段代码，依然是放到body标签里，可以和内嵌的js代码并列。</p>
<p>另外，引用外部 JS文件的 script 标签中间不可以再写代码。</p>
<p><strong>总结</strong>：</p>
<p>我们在实战开发中，基本都是采用方式3，因为这种方式，可以确保 html 文件和 js 文件是分开的，有利于代码的结构化和复用。很少会有人把一大堆 js 代码塞到 html 文件里。</p>
<h2 id="JS一些简单的语法规则"><a href="#JS一些简单的语法规则" class="headerlink" title="JS一些简单的语法规则"></a>JS一些简单的语法规则</h2><p>学习程序，是有规律可循的，程序会有有相同的部分，这些部分就是一种规定，不能更改，我们成为：语法。</p>
<p>（1）JavaScript对换行、缩进、空格不敏感。每一条语句以分号结尾。</p>
<p>也就是说：</p>
<p>代码一：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">	alert(<span class="string">"今天蓝天白云"</span>);</span></span><br><span class="line"><span class="actionscript">	alert(<span class="string">"我很高兴"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>等价于代码二：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">	alert(<span class="string">"今天蓝天白云"</span>);alert(<span class="string">"我很高兴"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>备注：每一条语句末尾要加上分号，虽然分号不是必须加的，如果不写分号，浏览器会自动添加，但是会消耗一些系统资源。</p>
<p>（2）所有的符号，都是英语的。比如<strong>括号</strong>、引号、分号。</p>
<p>如果你用的是搜狗拼音，<strong>建议不要用shift切换中英文</strong>（可以在搜狗软件里进行设置），不然很容易输入中文的分号；建议用ctrl+space切换中英文输入法。</p>
<p>（3）严格区分大小写。</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>我们不要把 HTML、CSS、JavaScript三者的注释格式搞混淆了。</p>
<h3 id="HTML-的注释"><a href="#HTML-的注释" class="headerlink" title="HTML 的注释"></a>HTML 的注释</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 我是注释  --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="CSS的注释"><a href="#CSS的注释" class="headerlink" title="CSS的注释"></a>CSS的注释</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	/*</span><br><span class="line">		我是注释</span><br><span class="line">	*/</span><br><span class="line"></span><br><span class="line">	p&#123;</span><br><span class="line">		font-weight: bold;</span><br><span class="line">		font-style: italic;</span><br><span class="line">		color: red;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：CSS只有<code>/*  */</code>这种注释，没有<code>//</code>这种注释。而且注释要写在<code>&lt;style&gt;</code>标签里面才算生效哦。</p>
<h3 id="JavaScript-的注释"><a href="#JavaScript-的注释" class="headerlink" title="JavaScript 的注释"></a>JavaScript 的注释</h3><p>单行注释：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 我是注释</span><br></pre></td></tr></table></figure>

<p>多行注释：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">	多行注释1</span><br><span class="line">	多行注释2</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>

<p>补充：VS Code中，单行注释的快捷键是「Ctrl + /」，多行注释的默认快捷键是「Alt + Shift + A」。</p>
<p>当然，如果你觉得多行注释的默认快捷键不方便，我们还可以修改默认快捷键。操作如下：</p>
<p>VS Code –&gt; 首选项 –&gt; 键盘快捷方式 –&gt; 查找“注释”这两个字 –&gt; 将原来的快捷键修改为「Ctrl + Shift + /」。</p>
<h2 id="Javascript-输入输出语句"><a href="#Javascript-输入输出语句" class="headerlink" title="Javascript 输入输出语句"></a>Javascript 输入输出语句</h2><h3 id="弹出警告框：alert语句"><a href="#弹出警告框：alert语句" class="headerlink" title="弹出警告框：alert语句"></a>弹出警告框：alert语句</h3><p>我们要学习的第一个语句，就是alert语句。</p>
<p>代码举例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">'千古壹号'</span>);</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>alert</strong>（英文翻译为“警报”）的用途：<strong>弹出“警告框”</strong>。</p>
<p>如果写了两个alert()语句的话，网页的效果是：弹出第一个警告框，点击确定后，继续弹出第二个警告框。</p>
<h3 id="控制台输出：console-log-“”"><a href="#控制台输出：console-log-“”" class="headerlink" title="控制台输出：console.log(“”)"></a>控制台输出：console.log(“”)</h3><p><code>console.log(&quot;&quot;)</code>表示在控制台中输出。console表示“控制台”，log表示“输出”。</p>
<p>在Chrome浏览器中，按F12即可打开控制台，选择「console」栏，即可看到打印的内容。</p>
<p>控制台是工程师、程序员调试程序的地方。程序员经常使用这条语句输出一些东西，来测试程序是否正确。</p>
<p><strong>总结</strong>：alert() 主要用来显示消息给用户，console.log() 用来给程序员自己调试用的。</p>
<h3 id="弹出输入框：prompt-语句"><a href="#弹出输入框：prompt-语句" class="headerlink" title="弹出输入框：prompt()语句"></a>弹出输入框：prompt()语句</h3><p><code>prompt()</code>就是专门用来弹出能够让用户输入的对话框。用得少，测试的时候偶尔会用。</p>
<p>JS代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = prompt(<span class="string">"请随便输入点什么东西吧"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>

<p>上方代码中，用户输入的内容，将被传递到变量 a 里面，并在控制台打印出来。</p>
<p>效</p>
<p><strong>prompt()语句中，用户不管输入什么内容，都是字符串。</strong></p>
<p><strong>alert()和prompt()的区别：</strong></p>
<ul>
<li><p>alert() 可以直接使用。</p>
</li>
<li><p>prompt() 会返回用户输入的内容。我们可以用一个变量，来接收用户输入的内容。</p>
</li>
</ul>
<p><strong>confirm</strong></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScriptWindow-浏览器对象模型</title>
    <url>/2020/04/18/01-JavaScriptWindow-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>浏览器对象模型（Browser Object Model (BOM)）允许 JavaScript 与浏览器对话。</strong></p>
<h2 id="浏览器对象模型（Browser-Object-Model-BOM-）"><a href="#浏览器对象模型（Browser-Object-Model-BOM-）" class="headerlink" title="浏览器对象模型（Browser Object Model (BOM)）"></a>浏览器对象模型（Browser Object Model (BOM)）</h2><p>不存在浏览器对象模型（BOM）的官方标准。</p>
<p>现代的浏览器已经（几乎）实现了 JavaScript 交互相同的方法和属性，因此它经常作为 BOM 的方法和属性被提到。</p>
<a id="more"></a>
<h2 id="Window-对象"><a href="#Window-对象" class="headerlink" title="Window 对象"></a>Window 对象</h2><p>所有浏览器都支持 <strong>window</strong> 对象。它代表浏览器的窗口。</p>
<p>所有全局 JavaScript 对象，函数和变量自动成为 window 对象的成员。</p>
<p><strong>全局变量是 window 对象的属性</strong>。</p>
<p><strong>全局函数是 window 对象的方法</strong>。</p>
<p>甚至（HTML DOM 的）document 对象也是 window 对象属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.document.getElementById(&quot;header&quot;);</span><br></pre></td></tr></table></figure>

<p>等同于：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.getElementById(&quot;header&quot;);</span><br></pre></td></tr></table></figure>

<h2 id="窗口尺寸"><a href="#窗口尺寸" class="headerlink" title="窗口尺寸"></a>窗口尺寸</h2><p><strong>两个属性可用用于确定浏览器窗口的尺寸</strong>。</p>
<p>这两个属性都以像素返回尺寸：</p>
<ul>
<li><code>window.innerHeight</code> - 浏览器窗口的内高度（以像素计）</li>
<li><code>window.innerWidth</code> - 浏览器窗口的内宽度（以像素计）</li>
</ul>
<blockquote>
<p>浏览器窗口（浏览器视口）<strong>不包括工具栏和滚动条</strong>。</p>
</blockquote>
<p>对于 Internet Explorer 8, 7, 6, 5：</p>
<ul>
<li><p>document.documentElement.clientHeight</p>
</li>
<li><p>document.documentElement.clientWidth</p>
</li>
<li><p>或</p>
</li>
<li><p>document.body.clientHeight</p>
</li>
<li><p>document.body.clientWidth</p>
</li>
</ul>
<p>一个实用的 JavaScript 解决方案（包括所有浏览器）：</p>
<p>实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var w &#x3D; window.innerWidth</span><br><span class="line">|| document.documentElement.clientWidth</span><br><span class="line">|| document.body.clientWidth;</span><br><span class="line"></span><br><span class="line">var h &#x3D; window.innerHeight</span><br><span class="line">|| document.documentElement.clientHeight</span><br><span class="line">|| document.body.clientHeight;</span><br></pre></td></tr></table></figure>

<h2 id="其他窗口方法"><a href="#其他窗口方法" class="headerlink" title="其他窗口方法"></a>其他窗口方法</h2><p>一些其他方法：</p>
<ul>
<li>window.open() - 打开新窗口</li>
<li>window.close() - 关闭当前窗口</li>
<li>window.moveTo() -移动当前窗口</li>
<li>window.resizeTo() -重新调整当前窗口</li>
</ul>
]]></content>
      <categories>
        <category>BOM</category>
      </categories>
      <tags>
        <tag>BOM</tag>
      </tags>
  </entry>
  <entry>
    <title>cookie</title>
    <url>/2020/04/18/01-cookie/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>cookie</code>是什么，<code>cookie</code>就是一种浏览器管理状态的一个文件，它有name，也有value，后面那些看不见的是Domain、path等等。</p>
<p><strong>Cookie主要用于以下三个方面</strong>：</p>
<ul>
<li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li>
<li>个性化设置（如用户自定义设置、主题等）</li>
<li>浏览器行为跟踪（如跟踪分析用户行为等）<a id="more"></a>

</li>
</ul>
<p><img src="cookie.png" alt=""></p>
<h2 id="cookie原理"><a href="#cookie原理" class="headerlink" title="cookie原理"></a>cookie原理</h2><p>第一次访问网站的时候，浏览器发出请求，服务器响应请求后，会将<code>cookie</code>放入到响应请求中，在浏览器第二次发请求的时候，会把<code>cookie</code>带过去，服务端会辨别用户身份，当然服务器也可以修改<code>cookie</code>内容。</p>
<h2 id="cookie不可跨域"><a href="#cookie不可跨域" class="headerlink" title="cookie不可跨域"></a>cookie不可跨域</h2><p>cookie不能在不同的域名下用，每个cookie都会绑定单一的域名。</p>
<h2 id="cookie的属性"><a href="#cookie的属性" class="headerlink" title="cookie的属性"></a>cookie的属性</h2><ul>
<li><strong>name</strong><ul>
<li>这个显而易见，就是代表cookie的名字的意思，一个域名下绑定的cookie，name不能相同，相同的name的值会被覆盖掉。</li>
</ul>
</li>
<li><strong>value</strong><ul>
<li>这个就是每个cookie拥有的一个属性，它表示cookie的值。</li>
</ul>
</li>
<li><strong>domain</strong><ul>
<li>这个是指的域名，这个代表的是，cookie绑定的域名，如果没有设置，就会自动绑定到执行语句的当前域，还有值得注意的点，统一个域名下的二级域名也是不可以交换使用cookie的，比如，你设置<code>www.baidu.com</code>和<code>image.baidu.com</code>,依旧是不能公用的。</li>
</ul>
</li>
<li><strong>path</strong><ul>
<li>path这个属性默认是’/‘，这个值匹配的是web的路由，举个例子：<code>默认路径
www.baidu.com</code>, <code>blog路径www.baidu.com/blog</code>， path为 <code>/blog</code>。当你路径设置成/blog的时候，其实它会给/blog、/blogabc等等的绑定cookie。</li>
</ul>
</li>
</ul>
<h2 id="cookie的有效期"><a href="#cookie的有效期" class="headerlink" title="cookie的有效期"></a>cookie的有效期</h2><p><strong>有效期就是前言图中的<code>Expires</code>属性</strong>，一般浏览器的<code>cookie</code>都是默认储存的，当关闭浏览器结束这个会话的时候，这个<code>cookie</code>也就会被删除，这就是<code>session</code>(会话储存)。</p>
<p>如果你想要<code>cookie</code>存在一段时间，那么你可以通过设置Expires属性为未来的一个时间节点，<code>Expires</code>这个是代表当前时间的，这个属性已经逐渐被<code>Max-Age</code>所取代。</p>
<p><code>Max-Age</code>，是以秒为单位的，Max-Age为正数时，cookie会在Max-Age秒之后，被删除，当<strong>Max-Age为负数时</strong>，表示的是临时储存，不会生出<code>cookie</code>文件，只会存在浏览器内存中，且只会在打开的浏览器窗口或者子窗口有效，一旦浏览器关闭，<code>cookie</code>就会消失，当<strong>Max-Age为0</strong>时，又会发生什么呢，删除<code>cookie</code>，因为<code>cookie</code>机制本身没有设置删除<code>cookie</code>，失效的<code>cookie</code>会被浏览器自动从内存中删除，所以，它实现的就是让<code>cookie</code>失效。</p>
<h2 id="secure"><a href="#secure" class="headerlink" title="secure"></a>secure</h2><p>这个属性译为安全，http不仅是无状态的，还是不安全的协议，容易被劫持，当这个属性设置为true时，此cookie只会在https和ssl等安全协议下传输。</p>
<p>提示：这个属性并不能对客户端的cookie进行加密，不能保证绝对的安全性</p>
<h2 id="HttpOnly"><a href="#HttpOnly" class="headerlink" title="HttpOnly"></a>HttpOnly</h2><p>为避免跨域脚本 (XSS) 攻击，通过JavaScript的 <code>Document.cookie</code> API无法访问带有 <code>HttpOnly</code> 标记的<code>Cookie</code>，它们只应该发送给服务端。如果包含服务端 Session 信息的 Cookie 不想被客户端 JavaScript 脚本调用，那么就应该为其设置 HttpOnly 标记。</p>
<h2 id="SameSite-Cookies"><a href="#SameSite-Cookies" class="headerlink" title="SameSite Cookies"></a>SameSite Cookies</h2><p><code>SameSite Cookie</code>允许服务器要求某个<code>cookie</code>在跨站请求时不会被发送，从而可以阻止跨站请求伪造攻击（CSRF）。</p>
<p>SameSite cookies是相对较新的一个字段，所有主流浏览器都已经得到支持。</p>
<p>下面是例子：</p>
<p><code>Set-Cookie: key=value; SameSite=Strict</code></p>
<h2 id="JS操作cookie"><a href="#JS操作cookie" class="headerlink" title="JS操作cookie"></a>JS操作cookie</h2><p>通过<code>Document.cookie</code>属性可创建新的<code>Cookie</code>，也可通过该属性访问非HttpOnly标记的<code>Cookie</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.cookie &#x3D; &quot;yummy_cookie&#x3D;choco&quot;; </span><br><span class="line">document.cookie &#x3D; &quot;tasty_cookie&#x3D;strawberry&quot;; </span><br><span class="line">console.log(document.cookie); </span><br><span class="line">&#x2F;&#x2F; logs &quot;yummy_cookie&#x3D;choco; tasty_cookie&#x3D;strawberry&quot;</span><br></pre></td></tr></table></figure>

<h2 id="服务端操作cookie"><a href="#服务端操作cookie" class="headerlink" title="服务端操作cookie"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie" target="_blank" rel="noopener">服务端操作cookie</a></h2><p>响应首部   <code>Set-Cookie</code>被用来由服务器端向客户端发送 <code>cookie</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Set-Cookie: &lt;cookie-name&gt;&#x3D;&lt;cookie-value&gt; </span><br><span class="line">Set-Cookie: &lt;cookie-name&gt;&#x3D;&lt;cookie-value&gt;; Expires&#x3D;&lt;date&gt;</span><br><span class="line">Set-Cookie: &lt;cookie-name&gt;&#x3D;&lt;cookie-value&gt;; Max-Age&#x3D;&lt;non-zero-digit&gt;</span><br><span class="line">Set-Cookie: &lt;cookie-name&gt;&#x3D;&lt;cookie-value&gt;; Domain&#x3D;&lt;domain-value&gt;</span><br><span class="line">Set-Cookie: &lt;cookie-name&gt;&#x3D;&lt;cookie-value&gt;; Path&#x3D;&lt;path-value&gt;</span><br><span class="line">Set-Cookie: &lt;cookie-name&gt;&#x3D;&lt;cookie-value&gt;; Secure</span><br><span class="line">Set-Cookie: &lt;cookie-name&gt;&#x3D;&lt;cookie-value&gt;; HttpOnly</span><br><span class="line"></span><br><span class="line">Set-Cookie: &lt;cookie-name&gt;&#x3D;&lt;cookie-value&gt;; SameSite&#x3D;Strict</span><br><span class="line">Set-Cookie: &lt;cookie-name&gt;&#x3D;&lt;cookie-value&gt;; SameSite&#x3D;Lax</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Multiple directives are also possible, for example:</span><br><span class="line">Set-Cookie: &lt;cookie-name&gt;&#x3D;&lt;cookie-value&gt;; Domain&#x3D;&lt;domain-value&gt;; Secure; HttpOnly</span><br></pre></td></tr></table></figure>






<p>——-参考：</p>
<ul>
<li><a href="https://juejin.im/post/59d1f59bf265da06700b0934" target="_blank" rel="noopener">https://juejin.im/post/59d1f59bf265da06700b0934</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies</a></li>
</ul>
]]></content>
      <categories>
        <category>JS高级</category>
      </categories>
      <tags>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScriptWindowScreen</title>
    <url>/2020/04/18/02-JavaScriptWindowScreen/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>window.screen 对象包含用户屏幕的信息。</strong></p>
<h2 id="Window-Screen"><a href="#Window-Screen" class="headerlink" title="Window Screen"></a>Window Screen</h2><p>window.screen 对象不带 window 前缀也可以写：</p>
<p>属性：</p>
<ul>
<li>screen.width</li>
<li>screen.height</li>
<li>screen.availWidth</li>
<li>screen.availHeight</li>
<li>screen.colorDepth</li>
<li>screen.pixelDepth</li>
</ul>
<a id="more"></a>

<h2 id="Window-Screen-宽度"><a href="#Window-Screen-宽度" class="headerlink" title="Window Screen 宽度"></a>Window Screen 宽度</h2><p>screen.width 属性返回以像素计的访问者屏幕宽度。</p>
<p><strong>实例</strong></p>
<p>显示以像素计的屏幕宽度：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;Screen Width: &quot; + screen.width;</span><br></pre></td></tr></table></figure>

<p>结果将是：</p>
<p>Screen Width: 1536</p>
<h2 id="Window-Screen-高度"><a href="#Window-Screen-高度" class="headerlink" title="Window Screen 高度"></a>Window Screen 高度</h2><p>screen.height 属性返回以像素计的访问者屏幕的高度。</p>
<p>实例</p>
<p>显示以像素计的屏幕高度：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;Screen Height: &quot; + screen.height;</span><br></pre></td></tr></table></figure>

<p>结果将是：</p>
<p>Screen Height: 864</p>
<h2 id="Window-Screen-可用宽度"><a href="#Window-Screen-可用宽度" class="headerlink" title="Window Screen 可用宽度"></a>Window Screen 可用宽度</h2><p>screen.availWidth 属性返回访问者屏幕的宽度，以像素计，减去诸如窗口工具条之类的界面特征。</p>
<p>实例</p>
<p>显示以像素计的屏幕可用宽度：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;Available Screen Width: &quot; + screen.availWidth;</span><br></pre></td></tr></table></figure>
<p>结果将是：</p>
<p>Available Screen Width: 1536</p>
<h2 id="Window-Screen-可用高度"><a href="#Window-Screen-可用高度" class="headerlink" title="Window Screen 可用高度"></a>Window Screen 可用高度</h2><p>screen.availHeight 属性返回访问者屏幕的高度，以像素计，减去诸如窗口工具条之类的界面特征。</p>
<p>实例</p>
<p>显示以像素计的屏幕可用高度：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;Available Screen Height: &quot; + screen.availHeight;</span><br></pre></td></tr></table></figure>

<p>结果将是：</p>
<p>Available Screen Height: 864</p>
<h2 id="Window-Screen-色深"><a href="#Window-Screen-色深" class="headerlink" title="Window Screen 色深"></a>Window Screen 色深</h2><p>screen.colorDepth 属性返回用于显示一种颜色的比特数。</p>
<p>所有现代计算机都使用 24 位或 32 位硬件的色彩分辨率：</p>
<p>-24 bits =16,777,216 种不同的 “True Colors”</p>
<ul>
<li>32 bits = 4,294,967,296 中不同的 “Deep Colors”</li>
</ul>
<p>更老的计算机使用 14 位：65,536 种不同的 “High Colors” 分辨率。</p>
<p>异常古老的计算机，以及老式的手机使用 8 位：256 中不同的 “VGA colors”。</p>
<p>实例</p>
<p>显示以位计的屏幕色彩深度：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">结果将是：</span><br><span class="line"></span><br><span class="line">Screen Color Depth: 24</span><br><span class="line"></span><br><span class="line">## Window Screen 像素深度</span><br><span class="line"></span><br><span class="line">screen.pixelDepth 属性返回屏幕的像素深度。</span><br><span class="line"></span><br><span class="line">实例</span><br><span class="line"></span><br><span class="line">显示以位计的屏幕像素深度：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;&#96;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;Screen Pixel Depth: &quot; + screen.pixelDepth;&#96;</span><br></pre></td></tr></table></figure>

<p>结果将是：</p>
<p>Screen Pixel Depth: 24</p>
<p>对于现代计算机，颜色深度和像素深度是相等的。</p>
]]></content>
      <categories>
        <category>BOM</category>
      </categories>
      <tags>
        <tag>BOM</tag>
      </tags>
  </entry>
  <entry>
    <title>事件循环</title>
    <url>/2020/04/18/02-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<p>—# 前言</p>
<p>JavaScript是一门<strong>单线程的非阻塞的脚本语言</strong>。</p>
<p>单线程意味着，JavaScript代码在执行的任何时候，都只有一个主线程来处理所有的任务。</p>
<p>非阻塞则是当代码需要进行一项异步任务，主线程会挂起（pending）这个任务，然后在异步任务返回结果的时候再根据一定规则去执行相应的回调。</p>
<a id="more"></a>
<h2 id="浏览器环境下js引擎的事件循环机制"><a href="#浏览器环境下js引擎的事件循环机制" class="headerlink" title="浏览器环境下js引擎的事件循环机制"></a>浏览器环境下js引擎的事件循环机制</h2><h3 id="执行栈与事件队列"><a href="#执行栈与事件队列" class="headerlink" title="执行栈与事件队列"></a>执行栈与事件队列</h3><p><strong>当javascript代码执行的时候会将不同的变量存于内存中的不同位置</strong>：堆（heap）和栈（stack）中来加以区分。其中，堆里存放着一些对象。而栈中则存放着一些基础类型变量以及对象的指针。 但是我们这里说的执行栈和上面这个栈的意义却有些不同。</p>
<p>我们知道，<strong>当我们调用一个方法的时候，js会生成一个与这个方法对应的执行环境（context），又叫执行上下文</strong>。这个执行环境中存在着这个方法的私有作用域，上层作用域的指向，方法的参数，这个作用域中定义的变量以及这个作用域的this对象。 而<strong>当一系列方法被依次调用的时候，因为js是单线程的，同一时间只能执行一个方法，于是这些方法被排队在一个单独的地方。这个地方被称为执行栈</strong>。</p>
<p>当一个脚本第一次执行的时候，js引擎会解析这段代码，并将其中的同步代码按照执行顺序加入执行栈中，然后从头开始执行。如果当前执行的是一个方法，那么js会向执行栈中添加这个方法的执行环境，然后进入这个执行环境继续执行其中的代码。当这个执行环境中的代码 执行完毕并返回结果后，js会退出这个执行环境并把这个执行环境销毁，回到上一个方法的执行环境。。这个过程反复进行，直到执行栈中的代码全部执行完毕。</p>
<p><img src="https://pic2.zhimg.com/v2-2f761eb83b50f53d741e6aa1f15a9db1_b.webp" alt=""></p>
<p>从图片可知，<strong>一个方法执行会向执行栈中加入这个方法的执行环境，在这个执行环境中还可以调用其他方法，甚至是自己，其结果不过是在执行栈中再添加一个执行环境</strong>。这个过程可以是无限进行下去的，除非发生了栈溢出，即超过了所能使用内存的最大值。</p>
<p><strong>js引擎遇到一个异步事件后并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。当一个异步事件返回结果后，js会将这个事件加入与当前执行栈不同的另一个队列，我们称之为事件队列</strong>。被放入事件队列不会立刻执行其回调，而是等待当前执行栈中的所有任务都执行完毕， 主线程处于闲置状态时，主线程会去查找事件队列是否有任务。如果有，那么主线程会从中取出排在第一位的事件，并把这个事件对应的回调放入执行栈中，然后执行其中的同步代码…，如此反复，这样就形成了一个无限的循环。这就是这个过程被称为“事件循环（Event Loop）”的原因。</p>
<h3 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h3><p><strong>因为异步任务之间并不相同，因此他们的执行优先级也有区别。不同的异步任务被分为两类：微任务（micro task）和宏任务（macro task）。</strong></p>
<h4 id="以下事件属于宏任务："><a href="#以下事件属于宏任务：" class="headerlink" title="以下事件属于宏任务："></a>以下事件属于宏任务：</h4><ul>
<li>setInterval()</li>
<li>setTimeout()</li>
</ul>
<h4 id="以下事件属于微任务"><a href="#以下事件属于微任务" class="headerlink" title="以下事件属于微任务"></a>以下事件属于微任务</h4><ul>
<li>new Promise()</li>
<li>new MutaionObserver()</li>
</ul>
<p>前面我们介绍过，在一个事件循环中，异步事件返回结果后会被放到一个任务队列中。然而，根据这个异步事件的类型，这个事件实际上会被对应的宏任务队列或者微任务队列中去。并且<strong>在当前执行栈为空的时候，主线程会 查看微任务队列是否有事件存在。如果不存在，那么再去宏任务队列中取出一个事件并把对应的回到加入当前执行栈</strong>；如果存在，则会依次执行队列中事件对应的回调，直到微任务队列为空，然后去宏任务队列中取出最前面的一个事件，把对应的回调加入当前执行栈…如此反复，进入循环。</p>
<p>我们只需记住<strong>当当前执行栈执行完毕时会立刻先处理所有微任务队列中的事件，然后再去宏任务队列中取出一个事件。同一次事件循环中，微任务永远在宏任务之前执行</strong>。</p>
<p>这样就能解释下面这段代码的结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setTimeout(function () &#123;</span><br><span class="line">    console.log(1);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">new Promise(function(resolve,reject)&#123;</span><br><span class="line">    console.log(2)</span><br><span class="line">    resolve(3)</span><br><span class="line">&#125;).then(function(val)&#123;</span><br><span class="line">    console.log(val);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h2 id="node环境下的事件循环机制"><a href="#node环境下的事件循环机制" class="headerlink" title="node环境下的事件循环机制"></a>node环境下的事件循环机制</h2><h3 id="与浏览器环境有何不同"><a href="#与浏览器环境有何不同" class="headerlink" title="与浏览器环境有何不同?"></a>与浏览器环境有何不同?</h3><p>在node中，事件循环表现出的状态与浏览器中大致相同。不同的是node中有一套自己的模型。node中事件循环的实现是依靠的libuv引擎。我们知道<strong>node选择chrome v8引擎作为js解释器</strong>，v8引擎将js代码分析后去调用对应的node api，而这些api最后则由libuv引擎驱动，执行对应的任务，并把不同的事件放在不同的队列中等待主线程执行。 <strong>因此实际上node中的事件循环存在于libuv引擎中</strong>。</p>
<h3 id="事件循环模型"><a href="#事件循环模型" class="headerlink" title="事件循环模型"></a>事件循环模型</h3><p>下面是一个libuv引擎中的事件循环的模型:</p>
<p>既然目前大多数内核都是多线程的，它们可在后台处理多种操作。<strong>当其中的一个操作完成的时候，内核通知 Node.js 将适合的回调函数添加到 轮询 队列中等待时机执行</strong>。我们在本文后面会进行详细介绍。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   ┌───────────────────────────┐</span><br><span class="line">┌─&gt;│           timers          │</span><br><span class="line">│  └─────────────┬─────────────┘</span><br><span class="line">│  ┌─────────────┴─────────────┐</span><br><span class="line">│  │ I&#x2F;O(pending) callbacks    │</span><br><span class="line">│  └─────────────┬─────────────┘</span><br><span class="line">│  ┌─────────────┴─────────────┐</span><br><span class="line">│  │       idle, prepare       │</span><br><span class="line">│  └─────────────┬─────────────┘      ┌───────────────┐</span><br><span class="line">│  ┌─────────────┴─────────────┐      │   incoming:   │</span><br><span class="line">│  │           poll            │&lt;─────┤  connections, │</span><br><span class="line">│  └─────────────┬─────────────┘      │   data, etc.  │</span><br><span class="line">│  ┌─────────────┴─────────────┐      └───────────────┘</span><br><span class="line">│  │           check           │</span><br><span class="line">│  └─────────────┬─────────────┘</span><br><span class="line">│  ┌─────────────┴─────────────┐</span><br><span class="line">└──┤      close callbacks      │</span><br><span class="line">   └───────────────────────────┘</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：模型中的每一个方块代表事件循环的一个阶段</p>
</blockquote>
<h3 id="事件循环各阶段详解"><a href="#事件循环各阶段详解" class="headerlink" title="事件循环各阶段详解"></a>事件循环各阶段详解</h3><p>从上面这个模型中，我们可以大致分析出<strong>node中的事件循环的顺序</strong>：</p>
<ul>
<li>外部输入数据–&gt;轮询阶段(poll)–&gt;检查阶段(check)–&gt;关闭事件回调阶段(close callback)–&gt;定时器检测阶段(timer)–&gt;I/O事件回调阶段(I/O callbacks)–&gt;闲置阶段(idle, prepare)–&gt;轮询阶段…</li>
</ul>
<p>以上各阶段的名称是根据我个人理解的翻译，为了避免错误和歧义，下面解释的时候会用英文来表示这些阶段。</p>
<h4 id="这些阶段大致的功能如下："><a href="#这些阶段大致的功能如下：" class="headerlink" title="这些阶段大致的功能如下："></a>这些阶段大致的功能如下：</h4><ul>
<li><code>timers</code>: 这个阶段执行定时器队列中的回调如 setTimeout() 和 setInterval()。</li>
<li><code>I/O callbacks</code>: 这个阶段执行几乎所有的回调。但是不包括close事件，定时器和setImmediate()的回调。</li>
<li><code>idle, prepare</code>: 这个阶段仅在内部使用，可以不必理会。</li>
<li><code>poll</code>: 等待新的I/O事件，node在一些特殊情况下会阻塞在这里。</li>
<li><code>check</code>: setImmediate()的回调会在这个阶段执行。</li>
<li><code>close callbacks</code>: 例如socket.on(‘close’, …)这种close事件的回调。</li>
</ul>
<p>下面我们来按照代码第一次进入libuv引擎后的顺序来详细解说这些阶段：</p>
<h4 id="poll阶段"><a href="#poll阶段" class="headerlink" title="poll阶段"></a>poll阶段</h4><p>当v8引擎将js代码解析后传入libuv引擎后，循环首先进入poll阶段。poll阶段的执行逻辑如下： <strong>先查看poll queue中是否有事件，有任务就按先进先出的顺序依次执行回调。 当queue为空时，会检查是否有setImmediate()的callback，如果有就进入check阶段执行这些callback</strong>。<strong>但同时也会检查是否有到期的timer，如果有，就把这些到期的timer的callback按照调用顺序放到timer queue中，之后循环会进入timer阶段执行queue中的 callback</strong>。 这两者的顺序是不固定的，收到代码运行的环境的影响。<strong>如果两者的queue都是空的，那么loop会在poll阶段停留，直到有一个i/o事件返回，循环会进入i/o callback阶段并立即执行这个事件的callback。</strong></p>
<p>值得注意的是，poll阶段在执行poll queue中的回调时实际上不会无限的执行下去。有两种情况poll阶段会终止执行poll queue中的下一个回调：</p>
<ul>
<li>1.所有回调执行完毕。</li>
<li>2.执行数超过了node的限制。</li>
</ul>
<h4 id="check阶段"><a href="#check阶段" class="headerlink" title="check阶段"></a>check阶段</h4><p>check阶段专门用来执行setImmediate()方法的回调，当poll阶段进入空闲状态，并且setImmediate queue中有callback时，事件循环进入这个阶段。</p>
<h4 id="close阶段"><a href="#close阶段" class="headerlink" title="close阶段"></a>close阶段</h4><p>当一个socket连接或者一个handle被突然关闭时（例如调用了socket.destroy()方法），close事件会被发送到这个阶段执行回调。否则事件会用process.nextTick（）方法发送出去。</p>
<h4 id="timer阶段"><a href="#timer阶段" class="headerlink" title="timer阶段"></a>timer阶段</h4><p>这个阶段以<strong>先进先出</strong>的方式执行所有到期的timer加入timer队列里的callback，<strong>一个timer callback指得是一个通过setTimeout或者setInterval函数设置的回调函数</strong>。</p>
<h4 id="I-O-callback阶段"><a href="#I-O-callback阶段" class="headerlink" title="I/O callback阶段"></a>I/O callback阶段</h4><p>如上文所言，这个阶段主要执行大部分I/O事件的回调，包括一些为操作系统执行的回调。例如一个TCP连接生错误时，系统需要执行回调来获得这个错误的报告。</p>
<h3 id="process-nextTick-setTimeout与setImmediate的区别与使用场景"><a href="#process-nextTick-setTimeout与setImmediate的区别与使用场景" class="headerlink" title="process.nextTick,setTimeout与setImmediate的区别与使用场景"></a>process.nextTick,setTimeout与setImmediate的区别与使用场景</h3><p>在node中有三个常用的用来<strong>推迟任务执行</strong>的方法：process.nextTick,setTimeout（setInterval与之相同）与setImmediate</p>
<p>这三者间存在着一些非常不同的区别：</p>
<h4 id="process-nextTick"><a href="#process-nextTick" class="headerlink" title="process.nextTick()"></a>process.nextTick()</h4><p>尽管没有提及，但是实际上node中存在着一个特殊的队列，即<code>nextTick queue</code>。这个队列中的回调执行虽然没有被表示为一个阶段，<strong>但是这些事件却会在每一个阶段执行完毕准备进入下一个阶段时优先执行</strong>。<strong>当事件循环准备进入下一个阶段之前，会先检查nextTick queue中是否有任务，如果有，那么会先清空这个队列。与执行poll queue中的任务不同的是，这个操作在队列清空前是不会停止的</strong>。这也就意味着，错误的使用<code>process.nextTick()</code>方法会导致node进入一个死循环，直到内存泄漏。</p>
<p>那么合适使用这个方法比较合适呢？下面有一个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const server &#x3D; net.createServer(() &#x3D;&gt; &#123;&#125;).listen(8080);</span><br><span class="line"></span><br><span class="line">server.on(&#39;listening&#39;, () &#x3D;&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure>

<p>这个例子中当，当listen方法被调用时，除非端口被占用，否则会立刻绑定在对应的端口上。这意味着此时这个端口可以立刻触发listening事件并执行其回调。然而，这时候on(‘listening)还没有将callback设置好，自然没有callback可以执行。为了避免出现这种情况，node会在listen事件中使用process.nextTick()方法，确保事件在回调函数绑定后被触发。</p>
<h4 id="setTimeout-和setImmediate"><a href="#setTimeout-和setImmediate" class="headerlink" title="setTimeout()和setImmediate()"></a>setTimeout()和setImmediate()</h4><p>在三个方法中，这两个方法最容易被弄混。实际上，某些情况下这两个方法的表现也非常相似。然而实际上，这两个方法的意义却大为不同。</p>
<ul>
<li><p><code>setTimeout()</code>方法是定义一个回调，并且希望这个回调在我们所<strong>指定的时间间隔后第一时间去执行</strong>。注意这个“第一时间执行”，这意味着，受到操作系统和当前执行任务的诸多影响，该回调并不会在我们预期的时间间隔后精准的执行。执行的时间存在一定的延迟和误差，这是不可避免的。node会在可以执行timer回调的第一时间去执行你所设定的任务。</p>
</li>
<li><p><code>setImmediate()</code>方法从意义上将是立刻执行的意思，但是实际上它<strong>却是在一个固定的阶段才会执行回调，即poll阶段之后</strong>。有趣的是，这个名字的意义和之前提到过的<code>process.nextTick()</code>方法才是最匹配的。node的开发者们也清楚这两个方法的命名上存在一定的混淆，他们表示不会把这两个方法的名字调换过来—因为有大量的node程序使用着这两个方法，调换命名所带来的好处与它的影响相比不值一提。</p>
</li>
</ul>
<p>setTimeout()和不设置时间间隔的setImmediate()表现上及其相似。猜猜下面这段代码的结果是什么？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;timeout&#39;);</span><br><span class="line">&#125;, 0);</span><br><span class="line"></span><br><span class="line">setImmediate(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;immediate&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>实际上，答案是不一定。没错，就连node的开发者都无法准确的判断这两者的顺序谁前谁后。这取决于这段代码的运行环境。运行环境中的各种复杂的情况会导致在同步队列里两个方法的顺序随机决定。但是，在一种情况下可以准确判断两个方法回调的执行顺序，那就是在一个I/O事件的回调中。下面这段代码的顺序永远是固定的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line"></span><br><span class="line">fs.readFile(__filename, () &#x3D;&gt; &#123;</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;timeout&#39;);</span><br><span class="line">    &#125;, 0);</span><br><span class="line">    setImmediate(() &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;immediate&#39;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>答案永远是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">immediate</span><br><span class="line">timeout</span><br></pre></td></tr></table></figure>

<p>因为<strong>在I/O事件的回调中，setImmediate方法的回调永远在timer的回调前执行</strong>。</p>
<p>参考：</p>
<ul>
<li><p><a href="https://zhuanlan.zhihu.com/p/33058983" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/33058983</a></p>
</li>
<li><p><a href="https://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/#what-is-the-event-loop" target="_blank" rel="noopener">https://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/#what-is-the-event-loop</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>JS高级</category>
      </categories>
      <tags>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>变量</title>
    <url>/2020/04/18/02-%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<hr>
<h2 id="字面量：数字和字符串"><a href="#字面量：数字和字符串" class="headerlink" title="字面量：数字和字符串"></a>字面量：数字和字符串</h2><p>“字面量”即<strong>常量</strong>，是固定值，不可改变。看见什么，它就是什么。</p>
<p>字面量有3种：</p>
<ul>
<li><p>数字</p>
</li>
<li><p>字符串</p>
</li>
<li><p>布尔字面量</p>
<a id="more"></a>
<p>（1）数值的字面量非常简单，写上去就行了，不需要任何的符号。例如：</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(<span class="number">886</span>);  <span class="comment">//886是数字，所以不需要加引号。</span></span><br></pre></td></tr></table></figure>

<p>（2）字符串的字面量也很简单，但一定要加上引号。可以是单词、句子等。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'886'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br></pre></td></tr></table></figure>

<p>温馨提示：100是数字，”100”是字符串。</p>
<p>（3）布尔字面量举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'如果为真，就走这里面的代码);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>字面量都可以直接使用，但是我们一般不会直接使用字面量。</p>
<p>如果直接使用字面量的话，比较麻烦。比如说，多个地方要用到同一个字面量，还不如事先定义一个变量，用来保存字面量。</p>
<p>变量更方便我们使用，所以在开发中都是通过变量去保存一个字面量，而不会直接使用字面量。</p>
<h2 id="变量的概念"><a href="#变量的概念" class="headerlink" title="变量的概念"></a>变量的概念</h2><p><strong>变量</strong>：是用于存放数据的容器。我们通过「变量名」获取数据，甚至可以修改数据。</p>
<p>变量还可以用来保存字面量。</p>
<p><strong>本质</strong>：变量是程序在内存中申请的一块用来存放数据的空间。</p>
<h2 id="变量的声明和赋值"><a href="#变量的声明和赋值" class="headerlink" title="变量的声明和赋值"></a>变量的声明和赋值</h2><h3 id="变量的声明（变量的定义）"><a href="#变量的声明（变量的定义）" class="headerlink" title="变量的声明（变量的定义）"></a>变量的声明（变量的定义）</h3><p>在<strong>ES6语法之前，统一使用<code>var</code>关键字来声明一个变量</strong>。比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name; <span class="comment">// 生命一个名为 name 的变量</span></span><br></pre></td></tr></table></figure>

<p>补充：在ES6语法及之后，统一使用 <code>const</code>、<code>let</code>关键字来声明一个变量。</p>
<h3 id="变量的赋值"><a href="#变量的赋值" class="headerlink" title="变量的赋值"></a>变量的赋值</h3><p>变量的赋值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">name= <span class="string">'Edward'</span></span><br></pre></td></tr></table></figure>

<p>变量的声明和赋值，举例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>; <span class="comment">// ES5语法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = hello; <span class="comment">// ES6 语法</span></span><br><span class="line"><span class="keyword">let</span> b = world; <span class="comment">// ES6 语法</span></span><br></pre></td></tr></table></figure>



<p>var是英语“variant”变量的缩写。后面要加一个空格，空格后面的东西就是“变量名”：</p>
<ul>
<li><p>定义变量：var就是一个<strong>关键字</strong>，用来定义变量。所谓关键字，就是有特殊功能的单词。</p>
</li>
<li><p>变量的赋值：等号表示<strong>赋值</strong>，将等号右边的值，赋给左边的变量。</p>
</li>
<li><p>变量名：我们可以给变量任意的取名字。</p>
</li>
</ul>
<p>PS：<strong>在JavaScript中，永远都是用var来定义变量</strong>（在ES6 之前），这和C、Java等语言不同。</p>
<h3 id="变量的初始化"><a href="#变量的初始化" class="headerlink" title="变量的初始化"></a>变量的初始化</h3><p>有经验的程序员，会把声明和赋值写在一起：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;    <span class="comment">//声明，并且赋值100</span></span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">//输出100</span></span><br></pre></td></tr></table></figure>

<p>声明一个变量并赋值， 我们称之为<strong>变量的初始化</strong>。</p>
<h2 id="变量声明和赋值的补充"><a href="#变量声明和赋值的补充" class="headerlink" title="变量声明和赋值的补充"></a>变量声明和赋值的补充</h2><h3 id="修改变量的值"><a href="#修改变量的值" class="headerlink" title="修改变量的值"></a>修改变量的值</h3><p>一个变量被重新复赋值后，它原有的值就会被覆盖，变量值将以最后一次赋的值为准。</p>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line">a = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 打印结果：110。因为 110 覆盖了 100</span></span><br></pre></td></tr></table></figure>


<h3 id="同时声明多个变量"><a href="#同时声明多个变量" class="headerlink" title="同时声明多个变量"></a>同时声明多个变量</h3><p>同时声明多个变量时，只需要写一个 var， 多个变量名之间用英文逗号隔开。</p>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'千古壹号'</span>, age = <span class="number">27</span>, number = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<h3 id="变量声明的几种特殊情况"><a href="#变量声明的几种特殊情况" class="headerlink" title="变量声明的几种特殊情况"></a>变量声明的几种特殊情况</h3><p>变量建议先声明，再使用。否则可能会报错。具体如下。</p>
<p><strong>写法1</strong>、先声明，再赋值：（正常）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 打印结果：100</span></span><br></pre></td></tr></table></figure>
<p><strong>写法2</strong>、不声明，只赋值：（正常）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 打印结果：100</span></span><br></pre></td></tr></table></figure>

<p><strong>写法3</strong>、只声明，不赋值：（注意，打印 undefined）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 打印结果：undefined</span></span><br></pre></td></tr></table></figure>

<p><strong>写法4</strong>、不声明，不赋值，直接使用：（会报错）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 会报错</span></span><br></pre></td></tr></table></figure>

<p><strong>补充</strong>：写法1和写法2虽然都正常，但这两种写法是有区别的，等以后学习了「变量提升」的概念就明白了。大多数情况下，我们都是采用的写法1。</p>
<h2 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h2><p>大写字母是可以使用的，并且大小写敏感。也就是说A和a是两个变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="number">250</span>;    <span class="comment">//变量1</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">888</span>;    <span class="comment">//变量2</span></span><br></pre></td></tr></table></figure>

<p>我们来整理一下<strong>变量的命名规范</strong>：</p>
<ul>
<li><p>只能由字母(A-Z、a-z)、数字(0-9)、下划线(_)、美元符( $ )组成</p>
</li>
<li><p>不能以数字开头。也就是说，必须以字母(A-Z、a-z)、下划线(_)或者美元符( $ )开头。变量名中不允许出现空格。</p>
</li>
</ul>
<ul>
<li>不用使用 JS 语言中保留的「关键字」和「保留字」作为变量名。</li>
</ul>
<ul>
<li><p>建议用驼峰命名规则。比如getElementById、matherAndFather、aaaOrBbbAndCcc</p>
</li>
<li><p>变量名会区分大小写(javascript 是区分大小写的语言)。</p>
</li>
<li><p>变量名长度不能超过255个字符。</p>
</li>
<li><p>汉语可以作为变量名。但是不建议使用。</p>
</li>
</ul>
<h2 id="标识符、关键字、保留字"><a href="#标识符、关键字、保留字" class="headerlink" title="标识符、关键字、保留字"></a>标识符、关键字、保留字</h2><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p><strong>标识符</strong>：在JS中所有的可以由我们<strong>自主命名</strong>的都可以称之为标识符。</p>
<p>例如：变量名、函数名、属性名、参数名都是属于标识符。通俗来讲，标识符就是我们写代码时为它们起的名字。</p>
<p><strong>标识符的命名规则</strong>和变量的命令规则是一样的。看上面一段就可以了。</p>
<p>同样，标识符不能使用语言中保留的<strong>关键字</strong>及<strong>保留字</strong>。如下。</p>
<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p><strong>关键字</strong>：是指 JS 本身已经使用了的单词，不能再用它们充当变量、函数名等标识符。</p>
<p>JS 中的关键字如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">break、continue、case、default、</span><br><span class="line"></span><br><span class="line">if、else、switch、for、in、do、while、</span><br><span class="line"></span><br><span class="line">try、catch、finally、throw、</span><br><span class="line"></span><br><span class="line">var、void、function、return、new、</span><br><span class="line"></span><br><span class="line">this、typeof、instanceof、delete、with、</span><br><span class="line"></span><br><span class="line">true、false、null、undefined</span><br></pre></td></tr></table></figure>

<h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><p><strong>保留字</strong>：实际上就是预留的“关键字”。意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不<br>能使用它们当充当变量名、函数名等标识符。</p>
<p>JS 中的保留字如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abstract、boolean、byte、char、class、const、</span><br><span class="line"></span><br><span class="line">debugger、double、enum、export、extends、final、float、goto</span><br><span class="line"></span><br><span class="line">implements、import、int、interface、long、native、package、</span><br><span class="line"></span><br><span class="line">private、protected、public、short、static、super、synchronized、throws、</span><br><span class="line"></span><br><span class="line">transient、volatile</span><br></pre></td></tr></table></figure>



<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p><strong>举例1</strong>：交换两个变量的值</p>
<p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> a2 = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> temp;</span><br><span class="line"></span><br><span class="line">temp = a1;</span><br><span class="line">a1 = a2;</span><br><span class="line">a2 = temp;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS样式表和选择器</title>
    <url>/2020/04/18/03-CSS%E6%A0%B7%E5%BC%8F%E8%A1%A8%E5%92%8C%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<hr>
<h2 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h2><ul>
<li>CSS应用的三种方式：<code>行内样式表</code>、<code>内嵌样式表</code>、<code>外部样式表</code></li>
<li>CSS四种基本选择器：<code>标签选择器</code>、<code>类选择器</code>、<code>ID选择器</code>、<code>通用选择器</code></li>
<li>CSS几种扩展选择器：<code>后代选择器</code>、<code>交集选择器</code>、<code>并集选择器</code></li>
<li>CSS样式优先级<a id="more"></a>

</li>
</ul>
<h3 id="CSS的重点知识点"><a href="#CSS的重点知识点" class="headerlink" title="CSS的重点知识点"></a>CSS的重点知识点</h3><p>盒子模型、浮动、定位</p>
<p>css对换行不敏感，对空格也不敏感。但是一定要有标准的语法。冒号，分号都不能省略。</p>
<h2 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h2><p><strong>语法格式：</strong>（其实就是键值对）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">选择器&#123;</span><br><span class="line">	属性名: 属性值;</span><br><span class="line">	属性名: 属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者可以写成：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器&#123;</span><br><span class="line">	<span class="attribute">k</span>:v;</span><br><span class="line">	<span class="attribute">k</span>:v;</span><br><span class="line">	<span class="attribute">k</span>:v;</span><br><span class="line">	<span class="attribute">k</span>:v;</span><br><span class="line">&#125;</span><br><span class="line">选择器&#123;</span><br><span class="line">	<span class="attribute">k</span>:v;</span><br><span class="line">	<span class="attribute">k</span>:v;</span><br><span class="line">	<span class="attribute">k</span>:v;</span><br><span class="line">	<span class="attribute">k</span>:v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解释：</strong></p>
<ul>
<li>选择器代表页面上的某类元素，选择器后一定是大括号。</li>
<li>属性名后必须用冒号隔开，属性值后用分号（最后一个属性可以不用分号）。</li>
<li>属性名和冒号之间最好不要有空格（经验）。</li>
<li>如果一个属性有多个值的话，那么多个值用 空格 隔开</li>
</ul>
<blockquote>
<p>CSS有两个知识部分：<br>1） 选择器；<br>2） 属性.</p>
</blockquote>
<h2 id="CSS使用方式（样式表）"><a href="#CSS使用方式（样式表）" class="headerlink" title="CSS使用方式（样式表）"></a>CSS使用方式（样式表）</h2><p>CSS和HTML结合的方式，其实就是问你css的代码放在哪里比较合适。CSS代码理论上的位置是任意的，<strong>但通常写在<code>&lt;style&gt;</code>标签里</strong>。只要是<code>&lt;style&gt;</code>标签里的代码，那就是css代码，浏览器就是这样来进行解析的。</p>
<p>CSS和HTML的结合方式有3种：</p>
<ul>
<li><p><strong>行内样式</strong>：在某个特定的标签里采用style<strong>属性</strong>。范围只针对此标签。</p>
</li>
<li><p><strong>内嵌样式表</strong>：在页面的head里采用<code>&lt;style&gt;</code><strong>标签</strong>。范围针对此页面。</p>
</li>
<li><p><strong>引入外部样式表css文件</strong>的方式。这种引入方式又分为两种：</p>
<ul>
<li>1、采用<code>&lt;link&gt;</code>标签。例如：<code>&lt;link rel = &quot;stylesheet&quot; type = &quot;text/css&quot; href = &quot;a.css&quot;&gt;&lt;/link&gt;</code></li>
<li>2、采用import，必须写在<code>&lt;style&gt;</code>标签中，并且必须是第一句。例如：<code>@import url(a.css) ;</code></li>
</ul>
<blockquote>
<p> 两种引入样式方式的区别：外部样式表中不能写<code>&lt;link&gt;</code>标签，但是可以写import语句。</p>
</blockquote>
</li>
</ul>
<p>下面来详细的讲一讲这三种方式。</p>
<h3 id="1、CSS和HTML结合方式一：行内样式"><a href="#1、CSS和HTML结合方式一：行内样式" class="headerlink" title="1、CSS和HTML结合方式一：行内样式"></a>1、CSS和HTML结合方式一：行内样式</h3><p>采用style属性。范围只针对此标签适用。</p>
<p>该方式比较灵活，但是对于多个相同标签的同一样式定义比较麻烦，适合局部修改。</p>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:white;background-color:red"</span>&gt;</span>我不会就这样轻易的狗带<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果：</p>
<h3 id="2、CSS和HTML结合方式二：内嵌样式表"><a href="#2、CSS和HTML结合方式二：内嵌样式表" class="headerlink" title="2、CSS和HTML结合方式二：内嵌样式表"></a>2、CSS和HTML结合方式二：内嵌样式表</h3><p>在head标签中加入<code>&lt;style&gt;</code>标签，对多个标签进行统一修改，范围针对此页面。</p>
<p>该方式可以对单个页面的样式进行统一设置，但对于局部不够灵活。</p>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">    p&#123;</span><br><span class="line">        font-weight: bold;</span><br><span class="line">        font-style: italic;</span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:blue"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、CSS和HTML结合方式三：引入外部样式表css文件"><a href="#3、CSS和HTML结合方式三：引入外部样式表css文件" class="headerlink" title="3、CSS和HTML结合方式三：引入外部样式表css文件"></a>3、CSS和HTML结合方式三：引入外部样式表css文件</h3><p><strong>引入样式表文件</strong>的方式又分为两种：</p>
<ul>
<li><p>（1）<strong>采用<code>&lt;link&gt;</code>标签</strong>。例如：<code>&lt;link rel = &quot;stylesheet&quot; type = &quot;text/css&quot; href = &quot;a.css&quot;&gt;&lt;/link&gt;</code></p>
</li>
<li><p>（2）<strong>采用import</strong>，必须写在<code>&lt;style&gt;</code>标签中，并且必须是第一句。例如：<code>@import url(a.css) ;</code></p>
<blockquote>
<p> 两种引入样式方式的区别：</p>
<ul>
<li>@import是 CSS 提供的语法规则，只有导入样式表的作用；link是HTML提供的标签，不仅可以加载 CSS 文件，还可以定义 RSS、rel 连接属性等;</li>
<li>加载页面时，link标签引入的 CSS 被同时加载；@import引入的 CSS 将在页面加载完毕后被加载;</li>
<li>@import是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；link标签作为 HTML 元素，不存在兼容性问题。</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="CSS的四种基本选择器"><a href="#CSS的四种基本选择器" class="headerlink" title="CSS的四种基本选择器"></a>CSS的四种基本选择器</h2><p>CSS选择器：就是指定CSS要作用的标签，那个标签的名称就是选择器。意为：选择哪个容器。</p>
<p>CSS的选择器分为两大类：基本选择题和扩展选择器。</p>
<p><strong>基本选择器：</strong></p>
<ul>
<li>标签选择器：针对<strong>一类</strong>标签</li>
<li>ID选择器：针对某<strong>一个</strong>特定的标签使用</li>
<li>类选择器：针对<strong>你想要的所有</strong>标签使用</li>
<li>通用选择器（通配符）：针对所有的标签都适用（不建议使用）</li>
</ul>
<p>下面来分别讲一讲。</p>
<h3 id="1、标签选择器：选择器的名字代表html页面上的标签"><a href="#1、标签选择器：选择器的名字代表html页面上的标签" class="headerlink" title="1、标签选择器：选择器的名字代表html页面上的标签"></a>1、标签选择器：选择器的名字代表html页面上的标签</h3><p>标签选择器，选择的是页面上所有这种类型的标签，所以经常描述“<strong>共性</strong>”，无法描述某一个元素的“个性”。</p>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">p&#123;</span><br><span class="line">	font-size:14px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上方选择器的意思是说：所有的<code>&lt;p&gt;</code>标签里的内容都将显示14号字体。</p>
<p>【总结】需要注意的是：</p>
<p>（1）所有的标签，都可以是选择器。比如ul、li、label、dt、dl、input。</p>
<p>（2）无论这个标签藏的多深，一定能够被选择上。</p>
<p>（3）选择的所有，而不是一个。</p>
<h3 id="2、ID选择器：规定用-来定义"><a href="#2、ID选择器：规定用-来定义" class="headerlink" title="2、ID选择器：规定用#来定义"></a>2、ID选择器：规定用<code>#</code>来定义</h3><p>针对某一个特定的标签来使用，只能使用一次。css中的ID选择器以”#”来定义。</p>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#mytitle&#123;</span><br><span class="line">	border:3px dashed green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>id选择器的选择符是“#”。</p>
<p>任何的HTML标签都可以有id属性。表示这个标签的名字。这个标签的名字，可以任取，但是：</p>
<ul>
<li>（1）只能有字母、数字、下划线。</li>
<li>（2）必须以字母开头。</li>
<li>（3）不能和标签同名。比如id不能叫做body、img、a。</li>
</ul>
<p>另外，特别强调的是：<strong>HTML页面，不能出现相同的id，哪怕他们不是一个类型</strong>。比如页面上有一个id为pp的p，一个id为pp的div，是非法的！</p>
<p><strong>一个标签可以被多个css选择器选择：</strong></p>
<h3 id="3、类选择器：规定用圆点-来定义"><a href="#3、类选择器：规定用圆点-来定义" class="headerlink" title="3、类选择器：规定用圆点.来定义"></a>3、类选择器：规定用圆点<code>.</code>来定义</h3><p>针对<strong>你想要的所有</strong>标签使用。优点：灵活。</p>
<p>css中用<code>.</code>来表示类。举例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.one&#123;</span><br><span class="line">	width:800px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>和id非常相似，任何的标签都可以携带id属性和class属性。class属性的特点：</p>
<ul>
<li><p>特性1：类选择器可以被多种标签使用。</p>
</li>
<li><p>特性2：同一个标签可以使用多个类选择器。用<strong>空格</strong>隔开。举例如下：（正确）</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"teshu  zhongyao"</span>&gt;</span>我是一个h3啊<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><strong>类选择器使用的举例：</strong></p>
<p>类选择器的使用，能够决定一个人的css水平。</p>
<p>（1）不要去试图用一个类名，把某个标签的所有样式写完。这个标签要多携带几个类，共同完成这个标签的样式。</p>
<p>（2）每一个类要尽可能小，有“公共”的概念，能够让更多的标签使用。</p>
<p>问题：到底用id还是用class？</p>
<p>答案：尽可能的用class，除非极特殊的情况可以用id。</p>
<p>原因：id是js用的。也就是说，js要通过id属性得到标签，所以css层面尽量不用id，要不然js就很别扭。另一层面，我们会认为一个有id的元素，有动态效果。</p>
<p><strong>上面这三种选择器的区别：</strong></p>
<ul>
<li>标签选择器针对的是页面上的一类标签。</li>
<li>ID选择器是只针对特定的标签(一个)，ID是此标签在此页面上的唯一标识。</li>
<li>类选择器可以被多种标签使用。</li>
</ul>
<h3 id="4、通配符-：匹配任何标签"><a href="#4、通配符-：匹配任何标签" class="headerlink" title="4、通配符*：匹配任何标签"></a>4、通配符<code>*</code>：匹配任何标签</h3><p>通用选择器，将匹配任何标签。不建议使用，IE有些版本不支持，大网站增加客户端负担。</p>
<p>效率不高，如果页面上的标签越多，效率越低，所以页面上不能出现这个选择器。</p>
<p>举例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">	<span class="attribute">margin-left</span>:<span class="number">0px</span>;</span><br><span class="line">	<span class="attribute">margin-top</span>:<span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="CSS的几种高级选择器"><a href="#CSS的几种高级选择器" class="headerlink" title="CSS的几种高级选择器"></a>CSS的几种高级选择器</h2><p><strong>高级选择器：</strong></p>
<ul>
<li>后代选择器：用空格隔开</li>
<li>交集选择器：选择器之间紧密相连</li>
<li>并集选择器（分组选择器）：用逗号隔开</li>
<li>伪类选择器</li>
</ul>
<p>下面详细讲一下这几种高级（扩展）选择器。</p>
<h3 id="1、后代选择器-定义的时候用空格隔开"><a href="#1、后代选择器-定义的时候用空格隔开" class="headerlink" title="1、后代选择器: 定义的时候用空格隔开"></a>1、后代选择器: 定义的时候用空格隔开</h3><p>对于<code>E F</code>这种格式，表示<strong>所有属于E元素后代的F元素</strong>，有这个样式。<strong>空格就表示后代。</strong></p>
<p>后代选择器，就是一种平衡：共性、特性的平衡。当要把<strong>某一个部分的所有的什么</strong>，进行样式改变，就要想到后代选择器。</p>
<p>后代选择器，描述的是祖先结构。</p>
<p>空格就表示后代。<code>.div1 p</code> 表示<code>.div1</code>的后代所有的<code>p</code>。</p>
<p>这里强调一下：这两个标签不一定是连续紧挨着的，只要保持一个后代的关联即可。也就是说，选择的是后代，不一定是儿子。</p>
<h3 id="2、交集选择器：定义的时候紧密相连"><a href="#2、交集选择器：定义的时候紧密相连" class="headerlink" title="2、交集选择器：定义的时候紧密相连"></a>2、交集选择器：定义的时候紧密相连</h3><p>定义交集选择器的时候，两个选择器之间紧密相连。一般是以标签名开头，比如<code>div.haha</code>，再比如<code>p.special</code>。</p>
<p>如果后一个选择器是类选择器，则写为<code>div.special</code>；如果后一个选择器id选择器，则写为<code>div#special</code>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h3</span><span class="selector-class">.special</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>选择的元素要求同时满足两个条件：必须是h3标签，然后必须是special标签。</p>
<blockquote>
<p>注意，交集选择器没有空格。所以，没有空格的<code>div.red</code>（交集选择器）和有空格的<code>div .red</code>（后代选择器）不是一个意思。</p>
</blockquote>
<p>交集选择器可以连续交：（一般不要这么写）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h3</span><span class="selector-class">.special</span><span class="selector-class">.zhongyao</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这种写法，是 IE7 开始兼容的，IE6 不兼容。</p>
<h3 id="3、并集选择器：定义的时候用逗号隔开"><a href="#3、并集选择器：定义的时候用逗号隔开" class="headerlink" title="3、并集选择器：定义的时候用逗号隔开"></a>3、并集选择器：定义的时候用逗号隔开</h3><p>三种基本选择器都可以放进来。</p>
<p>举例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>,<span class="selector-tag">h1</span>,<span class="selector-id">#mytitle</span>,<span class="selector-class">.one</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="浏览器的兼容性问题"><a href="#浏览器的兼容性问题" class="headerlink" title="浏览器的兼容性问题"></a>浏览器的兼容性问题</h3><h3 id="1-子代选择器，用符号-gt-表示"><a href="#1-子代选择器，用符号-gt-表示" class="headerlink" title="1.子代选择器，用符号&gt;表示"></a>1.子代选择器，用符号<code>&gt;</code>表示</h3><blockquote>
<p>IE7开始兼容，IE6不兼容。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>div的儿子p。和div的后代p的截然不同。</p>
<p>能够选择：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>我是div的儿子<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不能选择：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>我是div的重孙子<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-序选择器"><a href="#2-序选择器" class="headerlink" title="2.序选择器"></a>2.序选择器</h3><blockquote>
<p>IE8开始兼容；IE6、7都不兼容</p>
</blockquote>
<p>设置无序列表<code>&lt;ul&gt;</code>中的第一个<code>&lt;li&gt;</code>为红色：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span>&#123;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>设置无序列表<code>&lt;ul&gt;</code>中的最后一个<code>&lt;li&gt;</code>为红色：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>。</p>
<p>由于浏览器的更新需要过程，所以现在如果公司还要求兼容IE6、7，那么就要自己写类名：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"first"</span>&gt;</span>项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"last"</span>&gt;</span>项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>用类选择器来选择第一个或者最后一个：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">ul li.first&#123;</span><br><span class="line">	color:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ul li.last&#123;</span><br><span class="line">	color:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-下一个兄弟选择器"><a href="#3-下一个兄弟选择器" class="headerlink" title="3.下一个兄弟选择器"></a>3.下一个兄弟选择器</h3><blockquote>
<p>IE7开始兼容，IE6不兼容。</p>
</blockquote>
<p><code>+</code>表示选择下一个兄弟</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">	h3+p&#123;</span><br><span class="line"><span class="css">		<span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上方的选择器意思是：选择的是h3元素后面紧挨着的第一个兄弟。</p>
<p>这种选择器作用不大。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS属性：背景属性</title>
    <url>/2020/04/18/02-CSS%E5%B1%9E%E6%80%A7%EF%BC%9A%E8%83%8C%E6%99%AF%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<hr>
<h2 id="background-的常见背景属性"><a href="#background-的常见背景属性" class="headerlink" title="background 的常见背景属性"></a>background 的常见背景属性</h2><p><strong>css2.1</strong> 中，常见的背景属性有以下几种：（经常用到，要记住）</p>
<ul>
<li><p><code>background-color:#ff99ff;</code>  设置元素的背景颜色。</p>
</li>
<li><p><code>background-image:url(images/2.gif);</code> 将图像设置为背景。</p>
<a id="more"></a></li>
<li><p><code>background-repeat: no-repeat;</code>  设置背景图片是否重复及如何重复，默认平铺满。（重要）</p>
<ul>
<li><code>no-repeat</code>不要平铺；</li>
<li><code>repeat-x</code>横向平铺；</li>
<li><code>repeat-y</code>纵向平铺。</li>
</ul>
</li>
<li><p><code>background-position:center top;</code> 设置背景图片在当前容器中的位置。</p>
</li>
<li><p><code>background-attachment:scroll;</code> 设置背景图片是否跟着滚动条一起移动。<br>属性值可以是：<code>scroll</code>（与fixed属性相反，默认属性）、<code>fixed</code>（背景就会被固定住，不会被滚动条滚走）。</p>
</li>
<li><p>另外还有一个综合属性叫做<code>background</code>，它的作用是：将上面的多个属性写在一个声明中。</p>
</li>
</ul>
<p><strong>CSS3</strong> 中，新增了一些background属性：</p>
<ul>
<li><p>background-origin</p>
</li>
<li><p>background-clip 背景裁切</p>
</li>
<li><p>background-size 调整尺寸</p>
</li>
<li><p>多重背景</p>
</li>
</ul>
<h2 id="background-color：背景颜色的表示方法"><a href="#background-color：背景颜色的表示方法" class="headerlink" title="background-color：背景颜色的表示方法"></a>background-color：背景颜色的表示方法</h2><p>css2.1 中，背景颜色的表示方法有三种：单词、rgb表示法、十六进制表示法。</p>
<p>比如红色可以有下面的三种表示方法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">red</span>;</span><br><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">rgb</span>(255,0,0);</span><br><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-id">#ff0000</span>;</span><br></pre></td></tr></table></figure>

<p>CSS3 中，有一种新的表示颜色的方式：RGBA或者HSLA。</p>
<p>RGBA、HSLA可应用于<strong>所有</strong>使用颜色的地方。</p>
<p>下面分别介绍。</p>
<h3 id="用英语单词表示"><a href="#用英语单词表示" class="headerlink" title="用英语单词表示"></a>用英语单词表示</h3><p>能够用英语单词来表述的颜色，都是简单颜色。比如红色、绿色等。代码举例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">red</span>;</span><br></pre></td></tr></table></figure>
<h3 id="RGB-表示法"><a href="#RGB-表示法" class="headerlink" title="RGB 表示法"></a>RGB 表示法</h3><p>RGB 表示三原色“红”red、“绿”green、“蓝”blue。</p>
<p>光学显示器中，每个像素都是由三原色的发光原件组成的，靠明亮度不同调成不同的颜色的。r、g、b的值，每个值的取值范围0~255，一共256个值。</p>
<p>比如红色：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">rgb</span>(255,0,0);</span><br></pre></td></tr></table></figure>

<p>黑色：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">rgb</span>(0,0,0);</span><br></pre></td></tr></table></figure>

<p>颜色可以叠加，比如黄色就是红色和绿色的叠加：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">rgb</span>(255,255,0);</span><br></pre></td></tr></table></figure>

<h3 id="RGBA-表示法"><a href="#RGBA-表示法" class="headerlink" title="RGBA 表示法"></a>RGBA 表示法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">background-color: rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0.3</span>);</span><br><span class="line"></span><br><span class="line">border: <span class="number">30</span>px solid rgba(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ul>
<li><p>RGBA 即：Red、Green、Blue、Alpha</p>
</li>
<li><p>R、G、B 的取值范围是：0~255</p>
</li>
</ul>
<h3 id="十六进制表示法"><a href="#十六进制表示法" class="headerlink" title="十六进制表示法"></a>十六进制表示法</h3><p>比如红色：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">background-color: #ff0000;</span><br></pre></td></tr></table></figure>

<p>PS:所有用<code>#</code>开头的值，都是16进制的。</p>
<p>这里，我们就要学会16进制与10进制之间的转换。下面举几个例子。</p>
<p>问：16进制中28等于10进制多少？<br>答：2*16+8 = 40。</p>
<p>16进制中的af等于10进制多少？<br>答：10 * 16 + 15 = 175</p>
<p>所以，#ff0000就等于rgb(255,0,0)。</p>
<p><code>background-color: #123456;</code>等价于<code>background-color: rgb(18,52,86);</code></p>
<p><strong>十六进制可以简化为3位，所有#aabbcc的形式，能够简化为#abc</strong>。举例如下：</p>
<p>比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">background-color:#ff0000;</span><br></pre></td></tr></table></figure>

<p>等价于：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">background-color:#f00;</span><br></pre></td></tr></table></figure>

<p>比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">background-color:#112233;</span><br></pre></td></tr></table></figure>

<p>等价于：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">background-color:#123;</span><br></pre></td></tr></table></figure>

<p>但是，比如下面这个是无法简化的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">background-color:#222333;</span><br></pre></td></tr></table></figure>

<p>再比如，下面这个也是无法简化的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">background-color:#123123;</span><br></pre></td></tr></table></figure>

<p>几种常见的颜色简写可以记住。如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#000   黑</span><br><span class="line">#fff   白</span><br><span class="line">#f00   红</span><br><span class="line">#222   深灰</span><br><span class="line">#333   灰</span><br><span class="line">#ccc   浅灰</span><br></pre></td></tr></table></figure>

<h3 id="HSLA-表示法"><a href="#HSLA-表示法" class="headerlink" title="HSLA 表示法"></a>HSLA 表示法</h3><p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">background-color: hsla(<span class="number">240</span>,<span class="number">50</span>%,<span class="number">50</span>%,<span class="number">0.4</span>);</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ul>
<li><p><code>H</code> 色调，取值范围 0~360。0或360表示红色、120表示绿色、240表示蓝色。</p>
</li>
<li><p><code>S</code> 饱和度，取值范围 0%~100%。值越大，越鲜艳。</p>
</li>
<li><p><code>L</code> 亮度，取值范围 0%~100%。亮度最大时为白色，最小时为黑色。</p>
</li>
<li><p><code>A</code> 透明度，取值范围 0~1。</p>
</li>
</ul>
<p><strong>关于设置透明度的其他方式：</strong></p>
<p>（1）<code>opacity: 0.3;</code> 会将整个盒子及子盒子设置透明度。也就是说，当盒子设置半透明的时候，会影响里面的子盒子。</p>
<p>（2）<code>background: transparent;</code> 可以单独设置透明度，但设置的是完全透明（不可调节透明度）。</p>
<h2 id="background-repeat属性"><a href="#background-repeat属性" class="headerlink" title="background-repeat属性"></a><code>background-repeat</code>属性</h2><p><code>background-repeat:no-repeat;</code>设置背景图片是否重复及如何重复，默认平铺满。属性值可以是：</p>
<ul>
<li><code>no-repeat</code>（不要平铺）</li>
<li><code>repeat-x</code>（横向平铺）</li>
<li><code>repeat-y</code>（纵向平铺）</li>
</ul>
<h2 id="background-position属性"><a href="#background-position属性" class="headerlink" title="background-position属性"></a><code>background-position</code>属性</h2><p><code>background-position</code>属性指的是<strong>背景定位</strong>属性。</p>
<p>在描述属性值的时候，有两种方式：用像素描述、用单词描述。下面分别介绍。</p>
<p><strong>1、用像素值描述属性值：</strong></p>
<p>格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">background-position:向右偏移量 向下偏移量;</span><br></pre></td></tr></table></figure>

<p>属性值可以是正数，也可以是负数。比如：<code>100px 200px</code>、<code>-50px -120px</code>。</p>
<p><strong>2、用单词描述属性值：</strong></p>
<p>格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">background-position: 描述左右的词 描述上下的词;</span><br></pre></td></tr></table></figure>

<ul>
<li>描述左右的词：left、center、right</li>
<li>描述上下的词：top 、center、bottom</li>
</ul>
<p>比如说，<code>right center</code>表示将图片放到右边的中间；<code>center center</code>表示将图片放到正中间。</p>
<p>比如说，<code>bottom</code>表示图片的底边和父亲<strong>底边贴齐</strong>（好好理解）。</p>
<h2 id="background-attachment-属性"><a href="#background-attachment-属性" class="headerlink" title="background-attachment 属性"></a><code>background-attachment</code> 属性</h2><ul>
<li><code>background-attachment:scroll;</code> 设置背景图片是否固定。属性值可以是：<ul>
<li><code>fixed</code>（背景就会被固定住，不会被滚动条滚走）。</li>
<li><code>scroll</code>（与fixed属性相反，默认属性）</li>
</ul>
</li>
</ul>
<p><code>background-attachment:fixed;</code>的效果如下：</p>
<h3 id="background-综合属性"><a href="#background-综合属性" class="headerlink" title="background 综合属性"></a>background 综合属性</h3><p>background属性和border一样，是一个综合属性，可以将多个属性写在一起.<br>举例1:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background</span><span class="selector-pseudo">:red</span> <span class="selector-tag">url</span>(1<span class="selector-class">.jpg</span>) <span class="selector-tag">no-repeat</span> 100<span class="selector-tag">px</span> 100<span class="selector-tag">px</span> <span class="selector-tag">fixed</span>;</span><br></pre></td></tr></table></figure>

<p>等价于：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-color</span><span class="selector-pseudo">:red</span>;</span><br><span class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:url(1.jpg)</span>;</span><br><span class="line"><span class="selector-tag">background-repeat</span><span class="selector-pseudo">:no-repeat</span>;</span><br><span class="line"><span class="selector-tag">background-position</span><span class="selector-pseudo">:100px</span> 100<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">background-attachment</span><span class="selector-pseudo">:fixed</span>;</span><br></pre></td></tr></table></figure>


<h2 id="background-size属性：背景尺寸"><a href="#background-size属性：背景尺寸" class="headerlink" title="background-size属性：背景尺寸"></a><code>background-size</code>属性：背景尺寸</h2><p><code>background-size</code>属性：设置背景图片的尺寸。</p>
<p>格式举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 宽、高的具体数值 */</span></span><br><span class="line">background-size: <span class="number">500</span>px <span class="number">500</span>px;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 宽高的百分比（相对于容器的大小） */</span></span><br><span class="line">background-size: <span class="number">50</span>% <span class="number">50</span>%;   <span class="comment">// 如果两个属性值相同，可以简写成：background-size: 50%;</span></span><br><span class="line"></span><br><span class="line">background-size: <span class="number">100</span>% auto;  <span class="comment">//这个属性可以自己试验一下。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* cover：图片始终填充满容器，且保证长宽比不变。图片如果有超出部分，则超出部分会被隐藏。 */</span></span><br><span class="line">background-size: cover;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* contain：将图片完整地显示在容器中，且保证长宽比不变。可能会导致容器的部分区域为空白。  */</span></span><br><span class="line">background-size: contain;</span><br></pre></td></tr></table></figure>

<p>这里我们对属性值 <code>cover</code> 和 <code>contain</code> 进行再次强调：</p>
<ul>
<li><p><code>cover</code>：图片始终<strong>填充满</strong>容器，且保证<strong>长宽比不变</strong>。图片如果有超出部分，则超出部分会被隐藏。</p>
</li>
<li><p><code>contain</code>：将图片<strong>完整地</strong>显示在容器中，且保证<strong>长宽比不变</strong>。可能会导致容器的部分区域留白。</p>
</li>
</ul>
<h2 id="背景原点：background-origin-属性"><a href="#背景原点：background-origin-属性" class="headerlink" title="背景原点：background-origin 属性"></a>背景原点：<code>background-origin</code> 属性</h2><p><code>background-origin</code> 属性：控制背景从什么地方开始显示。</p>
<p><strong>格式举例</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* 从 padding-box 内边距开始显示背景图 */</span></span><br><span class="line">background-origin: padding-box;           <span class="comment">//默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 从 border-box 边框开始显示背景图  */</span></span><br><span class="line">background-origin: border-box;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 从 content-box 内容区域开始显示背景图  */</span></span><br><span class="line">background-origin: content-box;</span><br></pre></td></tr></table></figure>

<p>如果属性值设置成了<code>border-box</code>，那边框部分也会显示图片哦。</p>
<h2 id="background-clip属性：设置元素的背景（背景图片或颜色）是否延伸到边框下面"><a href="#background-clip属性：设置元素的背景（背景图片或颜色）是否延伸到边框下面" class="headerlink" title="background-clip属性：设置元素的背景（背景图片或颜色）是否延伸到边框下面"></a><code>background-clip</code>属性：设置元素的背景（背景图片或颜色）是否延伸到边框下面</h2><p>格式举例：</p>
<p><code>background-clip: content-box;</code>   超出的部分，将裁剪掉。属性值可以是：</p>
<ul>
<li><p><code>border-box</code> 超出 border-box 的部分，将裁剪掉</p>
</li>
<li><p><code>padding-box</code> 超出 padding-box 的部分，将裁剪掉</p>
</li>
<li><p><code>content-box</code> 超出 content-box 的部分，将裁剪掉</p>
</li>
</ul>
<p>假设现在有这样的属性设置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">background-origin: border-box;</span><br><span class="line"></span><br><span class="line">background-clip: content-box;</span><br></pre></td></tr></table></figure>

<p>上方代码的意思是，背景图片从<strong>边框部分</strong>开始加载，但是呢，超出<strong>内容区域</strong>的部分将被裁减掉。</p>
<h2 id="同时设置多个背景"><a href="#同时设置多个背景" class="headerlink" title="同时设置多个背景"></a>同时设置多个背景</h2><p>我们可以给一个盒子同时设置多个背景，用以逗号隔开即可。可用于自适应局。</p>
<p>代码举例：</p>
<h2 id="渐变：background-image"><a href="#渐变：background-image" class="headerlink" title="渐变：background-image"></a>渐变：background-image</h2><p>渐变是CSS3当中比较丰富多彩的一个特性，通过渐变我们可以实现许多炫丽的效果，有效的减少图片的使用数量，并且具有很强的适应性和可扩展性。</p>
<p>渐变分为：</p>
<ul>
<li><p>线性渐变：沿着某条直线朝一个方向产生渐变效果。linear-gradient</p>
</li>
<li><p>径向渐变：从一个<strong>中心点</strong>开始沿着<strong>四周</strong>产生渐变效果。radial-gradient</p>
</li>
<li><p>重复渐变。linear-gradient-repeat</p>
</li>
</ul>
<h3 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h3><p>格式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">background-image: linear-gradient(方向, 起始颜色, 终止颜色);</span><br><span class="line"></span><br><span class="line">background-image: linear-gradient(to right, yellow, green);</span><br></pre></td></tr></table></figure>

<p>参数解释：</p>
<ul>
<li>方向可以是：<code>to left</code>、<code>to right</code>、<code>to top</code>、<code>to bottom</code>、角度<code>30deg</code>（指的是顺时针方向30°）。</li>
</ul>
<p>格式举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            margin: 10px auto;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* 语法：</span><br><span class="line">            linear-gradient(方向，起始颜色，终止颜色);</span><br><span class="line">            方向：to left   to right  to top   to bottom 　角度　30deg</span><br><span class="line">            起始颜色</span><br><span class="line">            终止颜色</span><br><span class="line">        */</span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span></span><br><span class="line">            background-image: linear-gradient(to right, yellow, green);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 不写方向，表示默认的方向是：从上往下 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span></span><br><span class="line">            background-image: linear-gradient(yellow, green);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 方向可以指定角度 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-image: linear-gradient(135deg, yellow, green);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 0%的位置开始出现黄色，40%的位置开始出现红色的过度。70%的位置开始出现绿色的过度，100%的位置开始出现蓝色 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(4)</span> &#123;</span></span><br><span class="line">            background-image: linear-gradient(to right,</span><br><span class="line">            yellow 0%,</span><br><span class="line">            red 40%,</span><br><span class="line">            green 70%,</span><br><span class="line">            blue 100%);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 颜色之间，出现突变 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(5)</span> &#123;</span></span><br><span class="line">            background-image: linear-gradient(45deg,</span><br><span class="line">            yellow 0%,</span><br><span class="line">            yellow 25%,</span><br><span class="line">            blue 25%,</span><br><span class="line">            blue 50%,</span><br><span class="line">            red 50%,</span><br><span class="line">            red 75%,</span><br><span class="line">            green 75%,</span><br><span class="line">            green 100%</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(6)</span> &#123;</span></span><br><span class="line">            background-image: linear-gradient(to right,</span><br><span class="line"><span class="css">            <span class="selector-id">#000</span> 0%,</span></span><br><span class="line"><span class="css">            <span class="selector-id">#000</span> 25%,</span></span><br><span class="line"><span class="css">            <span class="selector-id">#fff</span> 25%,</span></span><br><span class="line"><span class="css">            <span class="selector-id">#fff</span> 50%,</span></span><br><span class="line"><span class="css">            <span class="selector-id">#000</span> 50%,</span></span><br><span class="line"><span class="css">            <span class="selector-id">#000</span> 75%,</span></span><br><span class="line"><span class="css">            <span class="selector-id">#fff</span> 75%,</span></span><br><span class="line"><span class="css">            <span class="selector-id">#fff</span> 100%</span></span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h3><p>格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">background-image: radial-gradient(辐射的半径大小, 中心的位置, 起始颜色, 终止颜色);</span><br><span class="line"></span><br><span class="line">background-image: radial-gradient(100px at center,yellow ,green);</span><br></pre></td></tr></table></figure>

<p>解释：围绕中心点做渐变，半径是150px，从黄色到绿色做渐变。</p>
<p>中心点的位置可以是：at  left  right  center bottom  top。如果以像素为单位，则中心点参照的是盒子的左上角。</p>
<p>当然，还有其他的各种参数。格式举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 250px;</span><br><span class="line">            height: 250px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">            margin: 20px;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">            径向渐变：</span><br><span class="line">            radial-gradient（辐射的半径大小, 中心的位置，起始颜色，终止颜色）;</span><br><span class="line">            中心点位置：at  left  right  center bottom  top</span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*辐射半径为100px，中心点在中间*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span></span><br><span class="line">            background-image: radial-gradient(100px at center, yellow, green);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*中心点在左上角*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span></span><br><span class="line">            background-image: radial-gradient(at left top, yellow, green);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span></span><br><span class="line">            background-image: radial-gradient(at 50px 50px, yellow, green);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*设置不同的颜色渐变*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(4)</span> &#123;</span></span><br><span class="line">            background-image: radial-gradient(100px at center,</span><br><span class="line">            yellow 0%,</span><br><span class="line">            green 30%,</span><br><span class="line">            blue 60%,</span><br><span class="line">            red 100%);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*如果辐射半径的宽高不同，那就是椭圆*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(5)</span> &#123;</span></span><br><span class="line">            background-image: radial-gradient(100px 50px at center, yellow, green);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="clip-path：裁剪出元素的部分区域做展示"><a href="#clip-path：裁剪出元素的部分区域做展示" class="headerlink" title="clip-path：裁剪出元素的部分区域做展示"></a>clip-path：裁剪出元素的部分区域做展示</h2><p><code>clip-path</code>属性可以创建一个只有元素的部分区域可以显示的剪切区域。区域内的部分显示，区域外的隐藏。</p>
<p>虽然<code>clip-path</code>不是背景属性，但这个属性非常强大，但往往会结合背景属性一起使用，达到一些效果。</p>
<p>举例：（鼠标悬停时，放大裁剪的区域）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">320px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">320px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(http://img.smyhvae.com/<span class="number">20191006</span>_1410.png) no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 裁剪出圆形区域 */</span></span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">circle</span>(<span class="number">50px</span> at <span class="number">100px</span> <span class="number">100px</span>);</span><br><span class="line">    <span class="attribute">transition</span>: clip-path .<span class="number">4s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div1</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="comment">/* 鼠标悬停时，裁剪出更大的圆形 */</span></span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">circle</span>(<span class="number">80px</span> at <span class="number">100px</span> <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>clip-path</code>属性的好处是，即使做了任何裁剪，<strong>容器的占位大小是不变的</strong>。比如上方代码中，容器的占位大小一直都是 320px * 320px。这样的话，也方便我们做一些动画效果。</p>
<p><code>clip-path: polygon()</code>举例：</p>
<p>另外，通过 <code>clip-path: (svg)</code> 可以导入svg矢量图，实现 iOS图标的圆角。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>let和const</title>
    <url>/2020/04/18/03-let%E5%92%8Cconst/</url>
    <content><![CDATA[<hr>
<h2 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>ES6新增了<code>let</code>命令，用来声明变量，类似于<code>var</code>，但是<strong>所声明的变量，只在<code>let</code>命令所在的代码块有效</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let a &#x3D; 10;</span><br><span class="line">  var b &#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a &#x2F;&#x2F; ReferenceError: a is not defined.</span><br><span class="line">b &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>上面代码在代码块之中，分别用<code>let</code>和<code>var</code>声明了两个变量。然后在代码块之外调用这两个变量，结果<code>let</code>声明的变量报错，<code>var</code>声明的变量返回了正确的值。这表明，<code>let</code>声明的变量只在它所在的代码块有效。</p>
<h3 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h3><p><code>var</code>命令会发生“变量提升”现象，即变量可以在声明前使用，值为<code>undefined</code>。</p>
<p><code>let</code>声明的变量一定要在声明后使用，否则报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; var 的情况</span><br><span class="line">console.log(foo); &#x2F;&#x2F; 输出undefined</span><br><span class="line">var foo &#x3D; 2;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; let 的情况</span><br><span class="line">console.log(bar); &#x2F;&#x2F; 报错ReferenceError</span><br><span class="line">let bar &#x3D; 2;</span><br></pre></td></tr></table></figure>


<h3 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h3><p>只要块级作用域内存在<code>let</code>命令，它所声明的变量就会绑定在这个区域，不再受外部的影响。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var tmp &#x3D; 123;</span><br><span class="line"></span><br><span class="line">if (true) &#123;</span><br><span class="line">  tmp &#x3D; &#39;abc&#39;; &#x2F;&#x2F; ReferenceError</span><br><span class="line">  let tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上述代码，存在全局变量<code>tmp</code>，但是块级作用域又声明了一个局部变量<code>tmp</code>，导致后者绑定在这个块级作用域，所以在<code>let</code>声明这个变量前会报错。</p>
</blockquote>
<p><strong>ES6明确规定，如果区块中存在<code>let</code>和<code>const</code>命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</strong></p>
<p>在代码块内，使用<code>let</code>命令声明变量之前，该变量都是不可用的。这在语法上，称为<strong>暂时性死区</strong>（temporal dead zone，简称TDZ）。</p>
<p>暂时性死区意味着<strong>typeof不再是一个百分之百安全的操作</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typeof x; &#x2F;&#x2F; ReferenceError</span><br><span class="line"></span><br><span class="line">let x;</span><br><span class="line"></span><br><span class="line">let x &#x3D; x;</span><br></pre></td></tr></table></figure>
<p>上面代码中，变量x使用<code>let</code>命令声明，所以在声明之前，都属于x的“死区”，只要用到该变量就会报错。因此，<code>typeof</code>运行时就会抛出一个<code>ReferenceError</code>。</p>
<p>作为比较，如果一个变量根本没有被声明，使用typeof反而不会报错。</p>
<p><code>typeof undeclared_variable // &quot;undefined&quot;</code></p>
<p>ES6规定暂时性死区以及<code>let</code>和<code>const</code>不出现变量提升，主要是为了减少运行时的错误，防止在变量声明前就使用这个变量。</p>
<h3 id="不允许重复声明"><a href="#不允许重复声明" class="headerlink" title="不允许重复声明"></a>不允许重复声明</h3><p><code>let</code>不允许在相同作用域内，重复声明同一个变量。</p>
<h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>为什么要有块级作用域？</p>
<p>ES5只有全局作用域和函数作用域。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var tmp &#x3D; new Date();</span><br><span class="line"></span><br><span class="line">function f() &#123;</span><br><span class="line">  console.log(tmp);</span><br><span class="line">  if (false) &#123;</span><br><span class="line">    var tmp &#x3D; &#39;hello world&#39;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(); &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure>

<p>上面代码的原意是，if代码块的外部使用外层的<code>tmp</code>变量，内部使用内层的<code>tmp</code>变量。但是，函数f执行后，输出结果为<code>undefined</code>，原因在于<strong>变量提升</strong>，导致内层的<code>tmp</code>变量覆盖了外层的<code>tmp</code>变量。</p>
<p>第二种场景，用来计数的循环变量泄露为全局变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var s &#x3D; &#39;hello&#39;;</span><br><span class="line"></span><br><span class="line">for (var i &#x3D; 0; i &lt; s.length; i++) &#123;</span><br><span class="line">  console.log(s[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(i); &#x2F;&#x2F; 5</span><br></pre></td></tr></table></figure>

<p>上面代码中，变量i只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。</p>
<h3 id="ES6的块级作用域"><a href="#ES6的块级作用域" class="headerlink" title="ES6的块级作用域"></a>ES6的块级作用域</h3><p><code>let</code>实际上为JavaScript新增了块级作用域。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function f1() &#123;</span><br><span class="line">  let n &#x3D; 5;</span><br><span class="line">  if (true) &#123;</span><br><span class="line">    let n &#x3D; 10;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(n); &#x2F;&#x2F; 5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的函数有两个代码块，都声明了变量n，运行后输出 5。这表示<strong>外层代码块不受内层代码块的影响</strong>。如果两次都使用var定义变量n，最后输出的值才是 10。</p>
<p>ES6允许块级作用域的任意嵌套。</p>
<p>内层作用域可以定义外层作用域的同名变量。</p>
<h3 id="块级作用域与函数声明"><a href="#块级作用域与函数声明" class="headerlink" title="块级作用域与函数声明"></a>块级作用域与函数声明</h3><ul>
<li>允许在块级作用域内声明函数</li>
<li>函数声明类似于<code>var</code>，即会提升到全局作用域或函数作用域的头</li>
<li>同时，函数声明还会提升到所在的块级作用域的头部</li>
</ul>
<blockquote>
<p>注意：应该避免在块级作用域内声明函数<br>ES6的块级作用域必须有<code>{}</code>，如果没有大括号，JavaScript引擎就认为不存在块级作用域。</p>
</blockquote>
<h2 id="const命令"><a href="#const命令" class="headerlink" title="const命令"></a>const命令</h2><h3 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h3><p><code>const</code>声明一个只读的常量，不得改变值。</p>
<p><code>const</code>的作用域与<code>let</code>相同：只在声明所在的块级作用域内有效。</p>
<p><code>const</code>的作用域与<code>let</code>命令相同：只在声明所在的块级作用域内有效。</p>
<p>本质：</p>
<p><code>const</code>实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。</p>
<p>对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。</p>
<p><strong>ES6声明对象的六种方式</strong>：</p>
<p>ES5 只有两种声明变量的方法：<code>var</code>命令和<code>function</code>命令。ES6 除了添加<code>let</code>和<code>const</code>命令，后面章节还会提到，另外两种声明变量的方法：<code>import</code>命令和<code>class</code>命令。所以，ES6 一共有 6 种声明变量的方法。</p>
<h3 id="顶层对象的属性"><a href="#顶层对象的属性" class="headerlink" title="顶层对象的属性"></a>顶层对象的属性</h3><p><strong>顶层对象</strong>，在<strong>浏览器中指的是window对象</strong>，在<strong>Node中指的是global对象</strong>。ES5之中，顶层对象的属性与全局变量是等价的。</p>
<p>ES6为了改变这一点，为了保持兼容性，规定，<code>var</code>和<code>function</code>声明的全局变量，依旧是顶层对象的属性；另一方面规定，<code>let</code>命令和<code>const</code>命令、<code>class</code>命令声明的全局变量，不属于顶层对象的属性。也就是说，从SE6开始，全局变量将逐步与顶层对象的属性脱钩。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; 1;</span><br><span class="line">&#x2F;&#x2F; 如果在 Node 的 REPL 环境，可以写成 global.a</span><br><span class="line">&#x2F;&#x2F; 或者采用通用方法，写成 this.a</span><br><span class="line">window.a &#x2F;&#x2F; 1</span><br><span class="line"></span><br><span class="line">let b &#x3D; 1;</span><br><span class="line">window.b &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure>
<p>上面代码中，全局变量<code>a</code>由<code>var</code>命令声明，所以它是顶层对象的属性；全局变量<code>b</code>由<code>let</code>命令声明，所以它不是顶层对象的属性，返回<code>undefined</code>。</p>
<h3 id="globalThis对象"><a href="#globalThis对象" class="headerlink" title="globalThis对象"></a>globalThis对象</h3><p>JavaScript 语言存在一个顶层对象，它提供全局环境（即全局作用域），所有代码都是在这个环境中运行。但是，<strong>顶层对象在各种实现里面是不统一的</strong>。</p>
<ul>
<li>浏览器里面，顶层对象是window，但 Node 和 Web Worker 没有window。</li>
<li>浏览器和 Web Worker 里面，self也指向顶层对象，但是 Node 没有self。</li>
<li>Node 里面，顶层对象是global，但其他环境都不支持。</li>
</ul>
<p><strong>同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用this变量，但是有局限性</strong>。</p>
<ul>
<li>全局环境中，<code>this</code>会返回顶层对象。但是，Node 模块和 ES6 模块中，<code>this</code>返回的是当前模块。</li>
<li>函数里面的<code>this</code>，如果函数不是作为对象的方法运行，而是单纯作为函数运行，<code>this</code>会指向顶层对象。但是，严格模式下，这时<code>this</code>会返回<code>undefined</code>。</li>
<li>不管是严格模式，还是普通模式，<code>new Function(&#39;return this&#39;)()</code>，总是会返回全局对象。但是，如果浏览器用了 <code>CSP（Content Security Policy，内容安全策略）</code>，那么<code>eval</code>、<code>new Function</code>这些方法都可能无法使用。</li>
</ul>
<p>ES2020 在语言标准的层面，引入<code>globalThis</code>作为顶层对象。也就是说，任何环境下，<code>globalThis</code>都是存在的，都可以从它拿到顶层对象，指向全局环境下的<code>this</code>。</p>
<p>垫片库<code>global-this</code>模拟了这个提案，可以在所有环境拿到<code>globalThis</code>。</p>
]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScriptWindowLocation</title>
    <url>/2020/04/18/03-JavaScriptWindowLocation/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>window.location 对象可用于<strong>获取当前页面地址（URL）并把浏览器重定向到新页面</strong>。</p>
<p>Window Location</p>
<p>window.location 对象可不带 window 前缀书写。</p>
<p>一些例子：</p>
<ul>
<li>window.location.href 返回当前页面的 href (URL)</li>
<li>window.location.hostname 返回 web 主机的域名</li>
<li>window.location.pathname 返回当前页面的路径或文件名</li>
<li>window.location.protocol 返回使用的 web 协议（http: 或 https:）</li>
<li>window.location.assign 加载新文档</li>
</ul>
]]></content>
      <categories>
        <category>BOM</category>
      </categories>
      <tags>
        <tag>BOM</tag>
      </tags>
  </entry>
  <entry>
    <title>变量的数据类型</title>
    <url>/2020/04/18/03-%E5%8F%98%E9%87%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<hr>
<h2 id="变量的数据类型"><a href="#变量的数据类型" class="headerlink" title="变量的数据类型"></a>变量的数据类型</h2><h3 id="为什么需要数据类型"><a href="#为什么需要数据类型" class="headerlink" title="为什么需要数据类型"></a>为什么需要数据类型</h3><p>在计算机中，不同的数据所需占用的存储空间不同，为了充分利用存储空间，于是定义了不同的数据类型。而且，不同的数据类型，寓意也不同。</p>
<p>我们都知道，无论这个变量是字符串类型，还是数字类型，我们都可以直接用 <code>var</code> 去定义它。比如：</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'hello word'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>

<p>为什么可以这样做呢？这是因为：JavaScript 是一种「弱类型语言」，或者说是一种「动态语言」，这意味着不需要提前声明变量的类型，在程序运行过程中，类型会自动被确定。</p>
<p><strong>JS 的变量数据类型，是在程序运行的过程中，根据等号右边的值来确定的</strong>。而且，变量的数据类型是可以变化的。比如说：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'qianguyihao'</span>;</span><br><span class="line"></span><br><span class="line">name = <span class="number">123</span>; <span class="comment">// 强制将变量 name 修改为 数字类型</span></span><br></pre></td></tr></table></figure>

<h3 id="JS中一共有六种数据类型"><a href="#JS中一共有六种数据类型" class="headerlink" title="JS中一共有六种数据类型"></a>JS中一共有六种数据类型</h3><ul>
<li><p><strong>基本数据类型（值类型）</strong>：String 字符串、Number 数值、Boolean 布尔值、Null 空值、Undefined 未定义、Symbol。</p>
</li>
<li><p><strong>引用数据类型（引用类型）</strong>：Object 对象。</p>
</li>
</ul>
<p>注意：内置对象 Function、Array、Date、RegExp、Error等都是属于 Object 类型。也就是说，除了那五种基本数据类型之外，其他的，都称之为 Object类型。</p>
<blockquote>
<p>面试问：引用数据类型有几种？</p>
</blockquote>
<blockquote>
<p>面试答：只有一种，即 Object 类型。</p>
</blockquote>
<p><strong>数据类型之间最大的区别</strong>：</p>
<ul>
<li><p>基本数据类型：参数赋值的时候，<strong>传数值</strong>。</p>
</li>
<li><p>引用数据类型：参数赋值的时候，<strong>传地址</strong>（修改的同一片内存空间）。</p>
</li>
</ul>
<h2 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String 字符串"></a>String 字符串</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>字符串型可以是引号中的任意文本，其语法为：双引号 <code>&quot;&quot;</code> 或者单引号 <code>&#39;&#39;</code>。</p>
<p>来看个示例。下面的这些，都是字符串：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"abcde"</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">"千古壹号"</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">"123123"</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="string">'哈哈哈哈哈'</span>;</span><br><span class="line"><span class="keyword">var</span> e = <span class="string">""</span>;     <span class="comment">//空字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = haha; <span class="comment">// 没使用引号，到这里会直接报错。因为会被认为是js代码，但是之前并没有定义 haha。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> c);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> d);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> e);</span><br></pre></td></tr></table></figure>

<p>控制台输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string</span><br><span class="line">string</span><br><span class="line">string</span><br><span class="line">string</span><br><span class="line">string</span><br></pre></td></tr></table></figure>

<h3 id="引号的注意事项"><a href="#引号的注意事项" class="headerlink" title="引号的注意事项"></a>引号的注意事项</h3><p>1、单引号和双引号不能混用。比如下面这样写是不可以的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'hello";  // 报错：Uncaught SyntaxError: Invalid or unexpected token</span></span><br></pre></td></tr></table></figure>

<p>2、同类引号不能嵌套：双引号里不能再放双引号，单引号里不能再放单引号。</p>
<p>3、单引号里可以嵌套双引号；双引号里可以嵌套单引号。</p>
<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>在字符串中我们可以使用<code>\</code>作为转义字符，当表示一些特殊符号时可以使用<code>\</code>进行转义。</p>
<ul>
<li><p><code>\&quot;</code> 表示 <code>&quot;</code></p>
</li>
<li><p><code>\&#39;</code> 表示 <code>&#39;</code></p>
</li>
<li><p><code>\\</code> 表示<code>\</code></p>
</li>
<li><p><code>\r</code> 表示回车</p>
</li>
<li><p><code>\n</code> 表示换行。n 的意思是 newline。</p>
</li>
<li><p><code>\t</code> 表示缩进。t 的意思是 tab。</p>
</li>
<li><p><code>\b</code> 表示空格。b 的意思是 blank。</p>
</li>
</ul>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"我说:\"今天\t天气真不错！\""</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"\\\\\\"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1);</span><br><span class="line"><span class="built_in">console</span>.log(str2);</span><br></pre></td></tr></table></figure>


<p>上方代码的打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我说:&quot;今天	天气真不错！&quot;</span><br><span class="line">\\\</span><br></pre></td></tr></table></figure>

<h3 id="获取字符串的长度"><a href="#获取字符串的长度" class="headerlink" title="获取字符串的长度"></a>获取字符串的长度</h3><p>字符串是由若干个字符组成的，这些字符的数量就是字符串的长度。我们可以通过字符串的 length 属性可以获取整个字符串的长度。</p>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">'千古壹号'</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">'千古壹号，永不止步！'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">'qianguyihao'</span>;</span><br><span class="line"><span class="keyword">var</span> str4 = <span class="string">'qianguyihao, keep moving!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1.length); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.length); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(str3.length); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(str4.length); <span class="comment">// 25</span></span><br></pre></td></tr></table></figure>

<p>由此可见，字符串的 length 属性，在判断字符串的长度时，会认为：</p>
<ul>
<li><p>一个中文算一个字符，一个英文算一个字符</p>
</li>
<li><p>一个标点符号（包括中文标点、英文标点）算一个字符</p>
</li>
<li><p>一个空格算一个字符</p>
</li>
</ul>
<h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>多个字符串之间可以使用加号 <code>+</code> 进行拼接。</p>
<p><strong>拼接语法</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字符串 + 任意数据类型 &#x3D; 拼接之后的新字符串;</span><br></pre></td></tr></table></figure>

<p><strong>拼接规则</strong>：拼接前，会把与字符串相加的这个数据类型转成字符串，然后再拼接成一个新的字符串。</p>
<p><strong>代码举例</strong>：（字符串与六大数据类型相加）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">'千古壹号'</span> + <span class="string">'永不止步'</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">'千古壹号'</span> + <span class="number">666</span>;</span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">'千古壹号'</span> + <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> str4 = <span class="string">'千古壹号'</span> + <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> str5 = <span class="string">'千古壹号'</span> + <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">'千古壹号'</span>, <span class="attr">age</span>: <span class="number">28</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> str6 = <span class="string">'千古壹号'</span> + obj;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1);</span><br><span class="line"><span class="built_in">console</span>.log(str2);</span><br><span class="line"><span class="built_in">console</span>.log(str3);</span><br><span class="line"><span class="built_in">console</span>.log(str4);</span><br><span class="line"><span class="built_in">console</span>.log(str5);</span><br><span class="line"><span class="built_in">console</span>.log(str6);</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">千古壹号永不止步</span><br><span class="line"></span><br><span class="line">千古壹号666</span><br><span class="line"></span><br><span class="line">千古壹号true</span><br><span class="line"></span><br><span class="line">千古壹号null</span><br><span class="line"></span><br><span class="line">千古壹号undefined</span><br><span class="line"></span><br><span class="line">千古壹号[object Object]</span><br></pre></td></tr></table></figure>


<h2 id="数值型：Number"><a href="#数值型：Number" class="headerlink" title="数值型：Number"></a>数值型：Number</h2><p>在JS中所有的数值都是 Number 类型，包括整数和浮点数（小数）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>; <span class="comment">// 定义一个变量 a，并且赋值整数100</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">// 输出变量 a 的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">12.3</span>; <span class="comment">// 定义一个变量 b，并且赋值浮点数 12.3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);</span><br></pre></td></tr></table></figure>

<p>上方代码的输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">number</span><br><span class="line"></span><br><span class="line">number</span><br></pre></td></tr></table></figure>

<p>再次补充：在 JS 中，只要是数，就是 Number 数值型的。无论整浮、浮点数（即小数）、无论大小、无论正负，都是 Number 类型的。</p>
<h3 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h3><p>由于内存的限制，ECMAScript 并不能保存世界上所有的数值。</p>
<ul>
<li><p>最大值：<code>Number.MAX_VALUE</code>，这个值为： 1.7976931348623157e+308</p>
</li>
<li><p>最小值：<code>Number.MIN_VALUE</code>，这个值为： 5e-324</p>
</li>
</ul>
<p>如果使用 Number 表示的变量超过了最大值，则会返回Infinity。</p>
<ul>
<li><p>无穷大（正无穷）：Infinity</p>
</li>
<li><p>无穷小（负无穷）：-Infinity</p>
</li>
</ul>
<blockquote>
<p>注意：<code>typeof Infinity</code>的返回结果是number。</p>
</blockquote>
<h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h3><p><strong>NaN</strong>：是一个特殊的数字，表示Not a Number，非数值。比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"abc"</span> / <span class="number">18</span>);  <span class="comment">//结果是NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"abc"</span> * <span class="string">"abcd"</span>); <span class="comment">//按理说，字符串相乘是没有结果的，但如果你非要让JS去算，它就一定会给你一个结果。结果是NaN</span></span><br></pre></td></tr></table></figure>

<p>注意：<code>typeof NaN</code>的返回结果是 number。</p>
<p>Undefined和任何数值计算的结果为 NaN。NaN 与任何值都不相等，包括 NaN 本身。</p>
<p>另外，关于 isNaN() 函数，可以看下一篇文章。</p>
<h3 id="浮点数的运算"><a href="#浮点数的运算" class="headerlink" title="浮点数的运算"></a>浮点数的运算</h3><p>在JS中，整数的运算<strong>基本</strong>可以保证精确；但是<strong>小数的运算，可能会得到一个不精确的结果</strong>。所以，千万不要使用JS进行对精确度要求比较高的运算。</p>
<p>如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0.1</span> + <span class="number">0.2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">//打印结果：0.30000000000000004</span></span><br></pre></td></tr></table></figure>

<p>上方代码中，打印结果并不是0.3，而是0.30000000000000004。</p>
<p>我们知道，所有的运算都要转换成二进制去计算，然而，二进制是无法精确表示1/10的。因此存在小数的计算不精确的问题。</p>
<h3 id="连字符和加号的区别"><a href="#连字符和加号的区别" class="headerlink" title="连字符和加号的区别"></a>连字符和加号的区别</h3><p>键盘上的<code>+</code>可能是连字符，也可能是数字的加号。如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(&quot;我&quot; + &quot;爱&quot; + &quot;你&quot;);	&#x2F;&#x2F;连字符，把三个独立的汉字，连接在一起了</span><br><span class="line">console.log(&quot;我+爱+你&quot;);			&#x2F;&#x2F;原样输出</span><br><span class="line">console.log(1+2+3);				&#x2F;&#x2F;输出6</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我爱你</span><br><span class="line">我+爱+你</span><br><span class="line">6</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong>：如果加号两边<strong>都是</strong>数值，此时是加。否则，就是连字符（用来连接字符串）。</p>
<p>举例1：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"1"</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a + b);</span><br></pre></td></tr></table></figure>

<p>控制台输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure>

<p>举例2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; 1;</span><br><span class="line">var b &#x3D; 2;</span><br><span class="line">console.log(&quot;a&quot; + b);	&#x2F;&#x2F;&quot;a&quot;就不是变量了！所以就是&quot;a&quot;+2 输出a2</span><br></pre></td></tr></table></figure>

<p>控制台输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a2</span><br></pre></td></tr></table></figure>

<p>于是我们明白了，在变量中加入字符串进行拼接，可以被同化为字符串。【重要】</p>
<h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><p>我们知道，<code>&quot;2&quot;+1</code>得到的结果其实是字符串，但是<code>&quot;2&quot;-1</code>得到的结果却是数值1，这是因为计算机自动帮我们进行了“<strong>隐式转换</strong>”。</p>
<p>也就是说，<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>这几个符号会自动进行隐式转换。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"4"</span> + <span class="number">3</span> - <span class="number">6</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">37</span></span><br></pre></td></tr></table></figure>

<p>虽然程序可以对<code>-</code>、<code>*</code>、<code>/</code>、`%``这几个符号自动进行“隐式转换”；但作为程序员，我们最好自己完成转换，方便程序的可读性。</p>
<h2 id="布尔值：Boolean"><a href="#布尔值：Boolean" class="headerlink" title="布尔值：Boolean"></a>布尔值：Boolean</h2><p>布尔型有两个值：true 和 false。主要用来做逻辑判断： true 表示真，false 表示假。</p>
<p>布尔值直接使用就可以了，千万不要加上引号。</p>
<p>代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);</span><br></pre></td></tr></table></figure>

<p>控制台输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">boolean</span><br></pre></td></tr></table></figure>

<p>布尔型和数字型相加时， true 按 1 来算 ，false 按 0 来算。</p>
<h2 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h2><h3 id="null：空值"><a href="#null：空值" class="headerlink" title="null：空值"></a><code>null</code>：空值</h3><p>专门用来表示一个为空的<strong>对象</strong>（例如：<code>var a = null</code>）。注意，专门用来表示<strong>空对象</strong>。</p>
<ul>
<li><p>Null类型的值只有一个，就是null。比如 <code>var a = null</code>。</p>
</li>
<li><p>使用 typeof 检查一个null值时，会返回object。</p>
</li>
</ul>
<h3 id="undefined：未定义"><a href="#undefined：未定义" class="headerlink" title="undefined：未定义"></a><code>undefined</code>：未定义</h3><p><strong>声明</strong>了一个变量，但是没有<strong>赋值</strong>（例如：<code>var a;</code>），此时它的值就是 <code>undefined</code>。</p>
<ul>
<li><p>Undefined类型的值只有一个，就是undefind。比如</p>
</li>
<li><p>使用 type of 检查一个undefined时，会返回undefined。</p>
</li>
</ul>
<p>null和undefined有很大的相似性。看看null == undefined的结果(true)也就更加能说明这点。</p>
<p>但是null === undefined的结果(false)。它们虽然相似，但还是有区别的，其中一个区别是：和数字运算时，10 + null结果为：10；10 + undefined结果为：NaN。</p>
<ul>
<li><p>任何数据类型和undefined运算都是NaN;</p>
</li>
<li><p>任何值和null运算，null可看做0运算。</p>
</li>
</ul>
<h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>Symbol 是 ES6 引入了一个新的数据类型。</p>
<p>symbol 是一种基本数据类型 （primitive data type）。Symbol()函数会返回symbol类型的值，该类型具有静态属性和静态方法。它的静态属性会暴露几个内建的成员对象；它的静态方法会暴露全局的symbol注册，且类似于内建对象类，但作为构造函数来说它并不完整，因为它不支持语法：”new Symbol()”。</p>
<p>每个从Symbol()返回的symbol值都是唯一的。一个symbol值能作为对象属性的标识符；这是该数据类型仅有的目的。</p>
<h2 id="变量值的传递（赋值）"><a href="#变量值的传递（赋值）" class="headerlink" title="变量值的传递（赋值）"></a>变量值的传递（赋值）</h2><p>语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; b;</span><br></pre></td></tr></table></figure>

<p>把b的值赋给a，b不变。</p>
<p>将等号右边的值，赋给左边的变量；等号右边的变量，值不变。</p>
<p>来做几个题目。</p>
<p>举例1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">					 	&#x2F;&#x2F;a		b       c</span><br><span class="line">var a &#x3D; 1;              &#x2F;&#x2F;1</span><br><span class="line">var b &#x3D; 2;              &#x2F;&#x2F;1     2</span><br><span class="line">var c &#x3D; 3;              &#x2F;&#x2F;1     2       3</span><br><span class="line">a &#x3D; b + c;              &#x2F;&#x2F;5     2       3</span><br><span class="line">b &#x3D; c - a;              &#x2F;&#x2F;5     -2      3</span><br><span class="line">c &#x3D; a * b;              &#x2F;&#x2F;5     -2      -10</span><br><span class="line">console.log(a);</span><br><span class="line">console.log(b);</span><br><span class="line">console.log(c);</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">-2</span><br><span class="line">-10</span><br></pre></td></tr></table></figure>

<p>举例2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">						&#x2F;&#x2F;a    b     c</span><br><span class="line">var a &#x3D; 1;</span><br><span class="line">var b &#x3D; 2;</span><br><span class="line">var c &#x3D; 3;              &#x2F;&#x2F;1     2     3</span><br><span class="line">a &#x3D; a + b;              &#x2F;&#x2F;3     2     3</span><br><span class="line">b &#x3D; b + a;              &#x2F;&#x2F;3     5     3</span><br><span class="line">c &#x3D; c + b;              &#x2F;&#x2F;3     5     8</span><br><span class="line">console.log(a);  &#x2F;&#x2F;3</span><br><span class="line">console.log(b);  &#x2F;&#x2F;5</span><br><span class="line">console.log(c);  &#x2F;&#x2F;8</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">5</span><br><span class="line">8</span><br></pre></td></tr></table></figure>

<p>举例3：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">				    &#x2F;&#x2F;a       b</span><br><span class="line">var a &#x3D; &quot;1&quot;;</span><br><span class="line">var b &#x3D; 2;          &#x2F;&#x2F;&quot;1&quot;     2</span><br><span class="line">a &#x3D; a + b;          &#x2F;&#x2F;&quot;12&quot;    2</span><br><span class="line">b &#x3D; b + a;          &#x2F;&#x2F;&quot;12&quot;    &quot;212&quot;</span><br><span class="line">console.log(a);     &#x2F;&#x2F;输出12</span><br><span class="line">console.log(b);     &#x2F;&#x2F;输出212</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12</span><br><span class="line">212</span><br></pre></td></tr></table></figure>

<p>举例4：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">				  &#x2F;&#x2F;a         b</span><br><span class="line">var a &#x3D; &quot;1&quot;;</span><br><span class="line">var b &#x3D; 2;</span><br><span class="line">a &#x3D; b + a;       &#x2F;&#x2F;&quot;21&quot;       2</span><br><span class="line">b &#x3D; b + a;       &#x2F;&#x2F;&quot;21&quot;       &quot;221&quot;</span><br><span class="line">console.log(a);  &#x2F;&#x2F;21</span><br><span class="line">console.log(b)   &#x2F;&#x2F;221</span><br></pre></td></tr></table></figure>


<p>效果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">21</span><br><span class="line">221</span><br></pre></td></tr></table></figure>

<p>举例5：（这个例子比较特殊，字符串减去数字）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; &quot;3&quot;;</span><br><span class="line">var b &#x3D; 2;</span><br><span class="line">console.log(a-b);</span><br></pre></td></tr></table></figure>


<p>效果：（注意，字符串 - 数值 = 数值）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS选择器：伪类</title>
    <url>/2020/04/18/04-CSS%E9%80%89%E6%8B%A9%E5%99%A8%EF%BC%9A%E4%BC%AA%E7%B1%BB/</url>
    <content><![CDATA[<hr>
<h2 id="伪类（伪类选择器）"><a href="#伪类（伪类选择器）" class="headerlink" title="伪类（伪类选择器）"></a>伪类（伪类选择器）</h2><p><strong>伪类</strong>：同一个标签，根据其<strong>不同的种状态，有不同的样式</strong>。这就叫做“伪类”。伪类用冒号来表示。</p>
<p>比如div是属于box类，这一点很明确，就是属于box类。但是a属于什么类？不明确。因为需要看用户点击前是什么状态，点击后是什么状态。所以，就叫做“伪类”。</p>
<a id="more"></a>
<br>

<h3 id="静态伪类和动态伪类"><a href="#静态伪类和动态伪类" class="headerlink" title="静态伪类和动态伪类"></a>静态伪类和动态伪类</h3><p>伪类选择器分为两种。</p>
<p>（1）<strong>静态伪类</strong>：只能用于<strong>超链接</strong>的样式。如下：</p>
<ul>
<li><code>:link</code> 超链接点击之前</li>
<li><code>:visited</code> 链接被访问过之后</li>
</ul>
<p>PS：以上两种样式，只能用于超链接。</p>
<p>（2）<strong>动态伪类</strong>：针对<strong>所有标签</strong>都适用的样式。如下：</p>
<ul>
<li><code>:hover</code> “悬停”：鼠标放到标签上的时候</li>
<li><code>:active</code>    “激活”： 鼠标点击标签，但是不松手时。</li>
<li><code>:focus</code> 是某个标签获得焦点时的样式（比如某个输入框获得焦点）</li>
</ul>
<h2 id="超链接a标签"><a href="#超链接a标签" class="headerlink" title="超链接a标签"></a>超链接a标签</h2><h3 id="超链接的四种状态"><a href="#超链接的四种状态" class="headerlink" title="超链接的四种状态"></a>超链接的四种状态</h3><p>a标签有4种伪类（即对应四种状态）。如下：</p>
<ul>
<li><code>:link</code>      “链接”：超链接点击之前</li>
<li><code>:visited</code> “访问过的”：链接被访问过之后</li>
<li><code>:hover</code>    “悬停”：鼠标放到标签上的时候</li>
<li><code>:active</code>    “激活”： 鼠标点击标签，但是不松手时。</li>
</ul>
<p>对应的代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="comment">/*让超链接点击之前是红色*/</span></span></span><br><span class="line"><span class="css">	<span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">	<span class="comment">/*让超链接点击之后是绿色*/</span></span></span><br><span class="line"><span class="css">	<span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">color</span><span class="selector-pseudo">:orange</span>;</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">	<span class="comment">/*鼠标悬停，放到标签上的时候*/</span></span></span><br><span class="line"><span class="css">	<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">color</span><span class="selector-pseudo">:green</span>;</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">	<span class="comment">/*鼠标点击链接，但是不松手的时候*/</span></span></span><br><span class="line"><span class="css">	<span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">color</span><span class="selector-pseudo">:black</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>记住，在css中，这四种状态<span style="color: blue"><strong>必须按照固定的顺序写</strong></span>：</p>
<blockquote>
<p>a:link 、a:visited 、a:hover 、a:active</p>
</blockquote>
<p>如果不按照顺序，那么将失效。</p>
<h3 id="超链接的美化"><a href="#超链接的美化" class="headerlink" title="超链接的美化"></a>超链接的美化</h3><p><strong><code>a{}</code>和<code>a:link{}</code>的区别：</strong></p>
<ul>
<li><code>a{}</code>定义的样式针对所有的超链接(包括锚点)</li>
<li><code>a:link{}</code>定义的样式针对所有写了href属性的超链接(不包括锚点)</li>
</ul>
<p>超链接a标签在使用的时候，比较难。因为不仅仅要控制a这个盒子，也要控制它的伪类。</p>
<p>我们一定要将a标签写在前面，将<code>:link、:visited、:hover、:active</code>这些伪类写在后面。</p>
<p>当我们在定义<code>a:link</code>和 <code>a:visited</code>这两个伪类的时候，如果它们的属性相同，我们其实可以写在一起，用逗号隔开就好，摘抄如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*两个伪类的属性，可以用逗号隔开*/</span></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> , <span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">	<span class="attribute">text-decoration</span>: none;</span><br><span class="line">	<span class="attribute">background-color</span>: purple;</span><br><span class="line">	<span class="attribute">color</span>:white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">	<span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上方代码所示，最标准的写法，就是把link、visited、hover这三个伪类都要写。但是前端开发工程师在大量的实践中，发现不写link、visited也挺兼容。写法是：</p>
<blockquote>
<p>a:link、a:visited都是可以省略的，简写在a标签里面。也就是说，a标签涵盖了link、visited的状态（前提是都具有了相同的属性）。写法如下：</p>
</blockquote>
<h2 id="动态伪类举例"><a href="#动态伪类举例" class="headerlink" title="动态伪类举例"></a>动态伪类举例</h2><p>下面这三种动态伪类，针对所有标签都适用。</p>
<ul>
<li><code>:hover</code> “悬停”：鼠标放到标签上的时候</li>
<li><code>:active</code>    “激活”： 鼠标点击标签，但是不松手时。</li>
<li><code>:focus</code> 是某个标签获得焦点时的样式（比如某个输入框获得焦点）</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>基本数据类型vs引用数据类型</title>
    <url>/2020/04/18/04-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8Bvs%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<hr>
<p>变量有以下数据类型：</p>
<ul>
<li><p><strong>基本数据类型（值类型）</strong>：String 字符串、Number 数值、Boolean 布尔值、Null 空值、Undefined 未定义。</p>
</li>
<li><p><strong>引用数据类型（引用类型）</strong>：Object 对象。</p>
</li>
</ul>
<p>本文，我们针对这两种类型，做进一步介绍。我们先来看个例子。</p>
<a id="more"></a>
<p><strong>基本数据类型举例</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">23</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line"></span><br><span class="line">a++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 打印结果：24</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 打印结果：23</span></span><br></pre></td></tr></table></figure>

<p>上面的代码中：a 和 b 都是基本数据类型，让 b 等于 a，然后<strong>改变 a 的值之后，发现 b 的值并没有被改变</strong>。</p>
<p>但是在引用数据类型中，就不同了，我们来看一看。</p>
<p><strong>引用数据类型举例</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj1.name = <span class="string">'smyh'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让 obj2 等于 obj1</span></span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改 obj1 的 name 属性</span></span><br><span class="line">obj1.name = <span class="string">'vae'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj1.name); <span class="comment">// 打印结果：vae</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.name); <span class="comment">// 打印结果：vae</span></span><br></pre></td></tr></table></figure>


<p>上面的代码中：obj1 和 obj2 都是引用数据类型，让 obj2 等于 obj1，然后<strong>修改 obj1.name 的值之后，发现 obj2.name 的值也发生了改变</strong>。</p>
<p>从上面的例子中，可以反映出，<strong>基本数据类型和引用数据类型是有区别的</strong>。</p>
<blockquote>
<p>那到底有什么区别呢？我们进一步往下看。</p>
</blockquote>
<h2 id="栈内存和堆内存"><a href="#栈内存和堆内存" class="headerlink" title="栈内存和堆内存"></a>栈内存和堆内存</h2><p>我们首先记住一句话：JS中，<strong>所有的变量都是保存在栈内存中的</strong>。</p>
<p>然后来看看下面的区别。</p>
<p><strong>基本数据类型</strong>：</p>
<p>基本数据类型的值，直接保存在栈内存中。值与值之间是独立存在，修改一个变量不会影响其他的变量。</p>
<p><strong>引用数据类型</strong>：</p>
<p>引用数据类型在被创建时，首先要在栈上给其引用（句柄）分配一块内存，而对象的具体信息都存储在堆内存上，然后由栈上面的引用指向堆中对象的地址。</p>
<p>如果两个变量保存了同一个对象的引用，当一个通过一个变量修改属性时，另一个也会受到影响。</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/9/3/6fb2c3d13d830efc6ae07ac368df0816?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>变量的解构赋值</title>
    <url>/2020/04/18/04-%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要内容：</p>
<ul>
<li>数组的解构赋值</li>
<li>对象的解构赋值</li>
<li>字符串的解构赋值</li>
<li>数值和布尔值的解构赋值</li>
<li>函数参数的解构赋值</li>
<li>圆括号问题</li>
<li>用途<a id="more"></a>
<h2 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h2></li>
</ul>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构(Destructuring).</p>
<p>ES6允许写成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let [a, b, c] &#x3D; [1, 2, 3];</span><br></pre></td></tr></table></figure>
<p>上面代码表示，可以从数组中提取值，按照对用位置，对变量赋值。</p>
<blockquote>
<p>如果解构不成功，变量的值就等于undefined。</p>
</blockquote>
<blockquote>
<p>不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。</p>
</blockquote>
<blockquote>
<p>如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。</p>
</blockquote>
<p>对于Set结构，也可以使用数组的解构赋值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let [x, y, z] &#x3D; new Set([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]);</span><br><span class="line">x &#x2F;&#x2F; &quot;a&quot;</span><br></pre></td></tr></table></figure>

<p><strong>只要某种数据结构具有Iterator接口，都可以采用数组形式的解构赋值。</strong></p>
<h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>解构赋值允许指定默认值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let [foo &#x3D; true] &#x3D; [];</span><br><span class="line">foo &#x2F;&#x2F; true</span><br><span class="line"></span><br><span class="line">let [x, y &#x3D; &#39;b&#39;] &#x3D; [&#39;a&#39;]; &#x2F;&#x2F; x&#x3D;&#39;a&#39;, y&#x3D;&#39;b&#39;</span><br><span class="line">let [x, y &#x3D; &#39;b&#39;] &#x3D; [&#39;a&#39;, undefined]; &#x2F;&#x2F; x&#x3D;&#39;a&#39;, y&#x3D;&#39;b&#39;</span><br></pre></td></tr></table></figure>
<p>注意，ES6 内部使用严格相等运算符<code>（===）</code>，判断一个位置是否有值。所以，只有当一个数组成员严格等于<code>undefined</code>，默认值才会生效。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let [x &#x3D; 1] &#x3D; [undefined];</span><br><span class="line">x &#x2F;&#x2F; 1</span><br><span class="line"></span><br><span class="line">let [x &#x3D; 1] &#x3D; [null];</span><br><span class="line">x &#x2F;&#x2F; null</span><br></pre></td></tr></table></figure>

<p>上面代码中，如果一个数组成员是<code>null</code>，默认值就不会生效，因为null不严格等于undefined。</p>
<p><strong>如果默认值是一个表达式</strong>，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function f() &#123;</span><br><span class="line">  console.log(&#39;aaa&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let [x &#x3D; f()] &#x3D; [1];</span><br></pre></td></tr></table></figure>
<p>上面代码中，因为x能取到值，所以函数<code>f</code>根本不会执行。上面的代码其实等价于下面的代码。</p>
<p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let [x &#x3D; 1, y &#x3D; x] &#x3D; [];     &#x2F;&#x2F; x&#x3D;1; y&#x3D;1</span><br><span class="line">let [x &#x3D; 1, y &#x3D; x] &#x3D; [2];    &#x2F;&#x2F; x&#x3D;2; y&#x3D;2</span><br><span class="line">let [x &#x3D; 1, y &#x3D; x] &#x3D; [1, 2]; &#x2F;&#x2F; x&#x3D;1; y&#x3D;2</span><br><span class="line">let [x &#x3D; y, y &#x3D; 1] &#x3D; [];     &#x2F;&#x2F; ReferenceError: y is not defined</span><br></pre></td></tr></table></figure>

<h2 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h2><h3 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h3><p>解构不仅可以用于数组，还可以用于对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let &#123; foo, bar &#125; &#x3D; &#123; foo: &#39;aaa&#39;, bar: &#39;bbb&#39; &#125;;</span><br><span class="line">foo &#x2F;&#x2F; &quot;aaa&quot;</span><br><span class="line">bar &#x2F;&#x2F; &quot;bbb&quot;</span><br></pre></td></tr></table></figure>

<p>对象的解构与数组有一个重要的不同。数组的元素是按顺序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>
<blockquote>
<p>如果解构失败，变量的值等于undefined。</p>
</blockquote>
<p>对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 例一</span><br><span class="line">let &#123; log, sin, cos &#125; &#x3D; Math;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 例二</span><br><span class="line">const &#123; log &#125; &#x3D; console;</span><br><span class="line">log(&#39;hello&#39;) &#x2F;&#x2F; hello</span><br></pre></td></tr></table></figure>

<p><strong>也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是变量，而不是前者。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let &#123; foo: baz &#125; &#x3D; &#123; foo: &#39;aaa&#39;, bar: &#39;bbb&#39; &#125;;</span><br><span class="line"></span><br><span class="line">baz &#x2F;&#x2F; &quot;aaa&quot;</span><br><span class="line">foo &#x2F;&#x2F; error: foo is not defined</span><br></pre></td></tr></table></figure>

<p>与数组一样，解构也可以用于嵌套结构的对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let obj &#x3D; &#123;</span><br><span class="line">  p: [</span><br><span class="line">    &#39;Hello&#39;,</span><br><span class="line">    &#123; y: &#39;World&#39; &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let &#123; p: [x, &#123; y &#125;] &#125; &#x3D; obj;</span><br><span class="line">x &#x2F;&#x2F; &quot;Hello&quot;</span><br><span class="line">y &#x2F;&#x2F; &quot;World&quot;</span><br></pre></td></tr></table></figure>
<p>注意，这时p是模式，不是变量，因此不会被赋值。</p>
<p><strong>对象的解构赋值可以取到继承的属性</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const obj1 &#x3D; &#123;&#125;;</span><br><span class="line">const obj2 &#x3D; &#123; foo: &#39;bar&#39; &#125;;</span><br><span class="line">Object.setPrototypeOf(obj1, obj2);</span><br><span class="line"></span><br><span class="line">const &#123; foo &#125; &#x3D; obj1;</span><br><span class="line">foo &#x2F;&#x2F; &quot;bar&quot;</span><br></pre></td></tr></table></figure>
<p>上面代码中，对象 <code>obj1</code>的原型对象是<code>obj2</code>。<code>foo</code>属性不是<code>obj1</code>自身的属性，而是继承自<code>obj2</code>的属性，解构赋值可以取到这个属性。</p>
<h3 id="默认值-1"><a href="#默认值-1" class="headerlink" title="默认值"></a>默认值</h3><p>对象的解构也可以指定默认值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var &#123;x &#x3D; 3&#125; &#x3D; &#123;&#125;;</span><br><span class="line">x &#x2F;&#x2F; 3</span><br><span class="line"></span><br><span class="line">var &#123;x, y &#x3D; 5&#125; &#x3D; &#123;x: 1&#125;;</span><br><span class="line">x &#x2F;&#x2F; 1</span><br><span class="line">y &#x2F;&#x2F; 5</span><br><span class="line"></span><br><span class="line">var &#123;x: y &#x3D; 3&#125; &#x3D; &#123;&#125;;</span><br><span class="line">y &#x2F;&#x2F; 3</span><br><span class="line"></span><br><span class="line">var &#123;x: y &#x3D; 3&#125; &#x3D; &#123;x: 5&#125;;</span><br><span class="line">y &#x2F;&#x2F; 5</span><br><span class="line"></span><br><span class="line">var &#123; message: msg &#x3D; &#39;Something went wrong&#39; &#125; &#x3D; &#123;&#125;;</span><br><span class="line">msg &#x2F;&#x2F; &quot;Something went wrong&quot;</span><br></pre></td></tr></table></figure>
<p>默认值生效的条件是，对象的属性值严格等于undefined。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var &#123;x &#x3D; 3&#125; &#x3D; &#123;x: undefined&#125;;</span><br><span class="line">x &#x2F;&#x2F; 3</span><br><span class="line"></span><br><span class="line">var &#123;x &#x3D; 3&#125; &#x3D; &#123;x: null&#125;;</span><br><span class="line">x &#x2F;&#x2F; null</span><br></pre></td></tr></table></figure>
<p>上面代码中，属性x等于null，因为null与undefined不严格相等，所以是个有效的赋值，导致默认值3不会生效。</p>
<h2 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h2><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const [a, b, c, d, e] &#x3D; &#39;hello&#39;;</span><br><span class="line">a &#x2F;&#x2F; &quot;h&quot;</span><br><span class="line">b &#x2F;&#x2F; &quot;e&quot;</span><br><span class="line">c &#x2F;&#x2F; &quot;l&quot;</span><br><span class="line">d &#x2F;&#x2F; &quot;l&quot;</span><br><span class="line">e &#x2F;&#x2F; &quot;o&quot;</span><br></pre></td></tr></table></figure>
<p>类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let &#123;length : len&#125; &#x3D; &#39;hello&#39;;</span><br><span class="line">len &#x2F;&#x2F; 5</span><br></pre></td></tr></table></figure>

<h2 id="数值和布尔值的解构赋值"><a href="#数值和布尔值的解构赋值" class="headerlink" title="数值和布尔值的解构赋值"></a>数值和布尔值的解构赋值</h2><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let &#123;toString: s&#125; &#x3D; 123;</span><br><span class="line">s &#x3D;&#x3D;&#x3D; Number.prototype.toString &#x2F;&#x2F; true</span><br><span class="line"></span><br><span class="line">let &#123;toString: s&#125; &#x3D; true;</span><br><span class="line">s &#x3D;&#x3D;&#x3D; Boolean.prototype.toString &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>上面代码中，数值和布尔值的包装对象都有toString属性，因此变量s都能取到值。</p>
<p>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let &#123; prop: x &#125; &#x3D; undefined; &#x2F;&#x2F; TypeError</span><br><span class="line">let &#123; prop: y &#125; &#x3D; null; &#x2F;&#x2F; TypeError</span><br></pre></td></tr></table></figure>

<h2 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h2><p>函数的参数也可以使用解构赋值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function add([x, y])&#123;</span><br><span class="line">  return x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add([1, 2]); &#x2F;&#x2F; 3</span><br></pre></td></tr></table></figure>

<p>上面代码中，函数add的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量x和y。对于函数内部的代码来说，它们能感受到的参数就是x和y。</p>
<p>下面是另一个例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[1, 2], [3, 4]].map(([a, b]) &#x3D;&gt; a + b);</span><br><span class="line">&#x2F;&#x2F; [ 3, 7 ]</span><br><span class="line">函数参数的解构也可以使用默认值。</span><br><span class="line"></span><br><span class="line">function move(&#123;x &#x3D; 0, y &#x3D; 0&#125; &#x3D; &#123;&#125;) &#123;</span><br><span class="line">  return [x, y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">move(&#123;x: 3, y: 8&#125;); &#x2F;&#x2F; [3, 8]</span><br><span class="line">move(&#123;x: 3&#125;); &#x2F;&#x2F; [3, 0]</span><br><span class="line">move(&#123;&#125;); &#x2F;&#x2F; [0, 0]</span><br><span class="line">move(); &#x2F;&#x2F; [0, 0]</span><br></pre></td></tr></table></figure>
<p>上面代码中，函数move的参数是一个对象，通过对这个对象进行解构，得到变量x和y的值。如果解构失败，x和y等于默认值。</p>
<p>注意，下面的写法会得到不一样的结果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function move(&#123;x, y&#125; &#x3D; &#123; x: 0, y: 0 &#125;) &#123;</span><br><span class="line">  return [x, y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">move(&#123;x: 3, y: 8&#125;); &#x2F;&#x2F; [3, 8]</span><br><span class="line">move(&#123;x: 3&#125;); &#x2F;&#x2F; [3, undefined]</span><br><span class="line">move(&#123;&#125;); &#x2F;&#x2F; [undefined, undefined]</span><br><span class="line">move(); &#x2F;&#x2F; [0, 0]</span><br></pre></td></tr></table></figure>
<p>上面代码是为函数move的参数指定默认值，而不是为变量x和y指定默认值，所以会得到与前一种写法不同的结果。</p>
<p><strong>undefined就会触发函数参数的默认值</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1, undefined, 3].map((x &#x3D; &#39;yes&#39;) &#x3D;&gt; x);</span><br><span class="line">&#x2F;&#x2F; [ 1, &#39;yes&#39;, 3 ]</span><br></pre></td></tr></table></figure>

<h2 id="圆括号问题"><a href="#圆括号问题" class="headerlink" title="圆括号问题"></a>圆括号问题</h2><p>解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。</p>
<p>由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。</p>
<p>但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。</p>
<h3 id="不能使用圆括号的情况"><a href="#不能使用圆括号的情况" class="headerlink" title="不能使用圆括号的情况"></a>不能使用圆括号的情况</h3><p>以下三种解构赋值不得使用圆括号。</p>
<p>（1）变量声明语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 全部报错</span><br><span class="line">let [(a)] &#x3D; [1];</span><br><span class="line"></span><br><span class="line">let &#123;x: (c)&#125; &#x3D; &#123;&#125;;</span><br><span class="line">let (&#123;x: c&#125;) &#x3D; &#123;&#125;;</span><br><span class="line">let &#123;(x: c)&#125; &#x3D; &#123;&#125;;</span><br><span class="line">let &#123;(x): c&#125; &#x3D; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">let &#123; o: (&#123; p: p &#125;) &#125; &#x3D; &#123; o: &#123; p: 2 &#125; &#125;;</span><br></pre></td></tr></table></figure>
<p>上面 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。</p>
<p>（2）函数参数</p>
<p>函数参数也属于变量声明，因此不能带有圆括号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">function f([(z)]) &#123; return z; &#125;</span><br><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">function f([z,(x)]) &#123; return x; &#125;</span><br></pre></td></tr></table></figure>
<p>（3）赋值语句的模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 全部报错</span><br><span class="line">(&#123; p: a &#125;) &#x3D; &#123; p: 42 &#125;;</span><br><span class="line">([a]) &#x3D; [5];</span><br><span class="line">上面代码将整个模式放在圆括号之中，导致报错。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">[(&#123; p: a &#125;), &#123; x: c &#125;] &#x3D; [&#123;&#125;, &#123;&#125;];</span><br></pre></td></tr></table></figure>
<p>上面代码将一部分模式放在圆括号之中，导致报错。</p>
<h3 id="可以使用圆括号的情况"><a href="#可以使用圆括号的情况" class="headerlink" title="可以使用圆括号的情况"></a>可以使用圆括号的情况</h3><p>可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[(b)] &#x3D; [3]; &#x2F;&#x2F; 正确</span><br><span class="line">(&#123; p: (d) &#125; &#x3D; &#123;&#125;); &#x2F;&#x2F; 正确</span><br><span class="line">[(parseInt.prop)] &#x3D; [3]; &#x2F;&#x2F; 正确</span><br></pre></td></tr></table></figure>
<p>上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是p，而不是d；第三行语句与第一行语句的性质一致。</p>
<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>变量的解构赋值用途很多。</p>
<p>（1）交换变量的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let x &#x3D; 1;</span><br><span class="line">let y &#x3D; 2;</span><br><span class="line"></span><br><span class="line">[x, y] &#x3D; [y, x];</span><br></pre></td></tr></table></figure>
<p>上面代码交换变量x和y的值，这样的写法不仅简洁，而且易读，语义非常清晰。</p>
<p>（2）从函数返回多个值</p>
<p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 返回一个数组</span><br><span class="line"></span><br><span class="line">function example() &#123;</span><br><span class="line">  return [1, 2, 3];</span><br><span class="line">&#125;</span><br><span class="line">let [a, b, c] &#x3D; example();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 返回一个对象</span><br><span class="line"></span><br><span class="line">function example() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    foo: 1,</span><br><span class="line">    bar: 2</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">let &#123; foo, bar &#125; &#x3D; example();</span><br></pre></td></tr></table></figure>
<p>（3）函数参数的定义</p>
<p>解构赋值可以方便地将一组参数与变量名对应起来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 参数是一组有次序的值</span><br><span class="line">function f([x, y, z]) &#123; ... &#125;</span><br><span class="line">f([1, 2, 3]);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 参数是一组无次序的值</span><br><span class="line">function f(&#123;x, y, z&#125;) &#123; ... &#125;</span><br><span class="line">f(&#123;z: 3, y: 2, x: 1&#125;);</span><br></pre></td></tr></table></figure>
<p>（4）提取 JSON 数据</p>
<p>解构赋值对提取 JSON 对象中的数据，尤其有用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let jsonData &#x3D; &#123;</span><br><span class="line">  id: 42,</span><br><span class="line">  status: &quot;OK&quot;,</span><br><span class="line">  data: [867, 5309]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let &#123; id, status, data: number &#125; &#x3D; jsonData;</span><br><span class="line"></span><br><span class="line">console.log(id, status, number);</span><br><span class="line">&#x2F;&#x2F; 42, &quot;OK&quot;, [867, 5309]</span><br></pre></td></tr></table></figure>
<p>上面代码可以快速提取 JSON 数据的值。</p>
<p>（5）函数参数的默认值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jQuery.ajax &#x3D; function (url, &#123;</span><br><span class="line">  async &#x3D; true,</span><br><span class="line">  beforeSend &#x3D; function () &#123;&#125;,</span><br><span class="line">  cache &#x3D; true,</span><br><span class="line">  complete &#x3D; function () &#123;&#125;,</span><br><span class="line">  crossDomain &#x3D; false,</span><br><span class="line">  global &#x3D; true,</span><br><span class="line">  &#x2F;&#x2F; ... more config</span><br><span class="line">&#125; &#x3D; &#123;&#125;) &#123;</span><br><span class="line">  &#x2F;&#x2F; ... do stuff</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>指定参数的默认值，就避免了在函数体内部再写var foo = config.foo || ‘default foo’;这样的语句。</p>
<p>（6）遍历 Map 结构</p>
<p>任何部署了 Iterator 接口的对象，都可以用for…of循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const map &#x3D; new Map();</span><br><span class="line">map.set(&#39;first&#39;, &#39;hello&#39;);</span><br><span class="line">map.set(&#39;second&#39;, &#39;world&#39;);</span><br><span class="line"></span><br><span class="line">for (let [key, value] of map) &#123;</span><br><span class="line">  console.log(key + &quot; is &quot; + value);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; first is hello</span><br><span class="line">&#x2F;&#x2F; second is world</span><br><span class="line">如果只想获取键名，或者只想获取键值，可以写成下面这样。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取键名</span><br><span class="line">for (let [key] of map) &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取键值</span><br><span class="line">for (let [,value] of map) &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（7）输入模块的指定方法</p>
<p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const &#123; SourceMapConsumer, SourceNode &#125; &#x3D; require(&quot;source-map&quot;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>WindowHistory</title>
    <url>/2020/04/18/04-WindowHistory/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>window.history 对象<strong>包含浏览器历史</strong>。</p>
<h2 id="Window-History"><a href="#Window-History" class="headerlink" title="Window History"></a>Window History</h2><p>window.history 对象可不带 window 书写。</p>
<p><strong>为了保护用户的隐私，JavaScript 访问此对象存在限制</strong>。</p>
<a id="more"></a>
<p>一些方法：</p>
<ul>
<li>history.back() - 等同于在浏览器点击后退按钮</li>
<li>history.forward() - 等同于在浏览器中点击前进按钮</li>
</ul>
<h2 id="Window-History-Back"><a href="#Window-History-Back" class="headerlink" title="Window History Back"></a>Window History Back</h2><p>history.back() 方法加载历史列表中前一个 URL。</p>
<p>这等同于在浏览器中点击后退按钮。</p>
<p>实例</p>
<p>在页面中创建后退按钮：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function goBack() &#123;</span><br><span class="line">    window.history.back()</span><br><span class="line"> &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;Back&quot; onclick&#x3D;&quot;goBack()&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Window-History-Forward"><a href="#Window-History-Forward" class="headerlink" title="Window History Forward"></a>Window History Forward</h2><p>history forward() 方法加载历史列表中下一个 URL。</p>
<p>这等同于在浏览器中点击前进按钮。</p>
<p>实例</p>
<p>在页面中创建前进按钮：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function goForward() &#123;</span><br><span class="line">    window.history.forward()</span><br><span class="line"> &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;Forward&quot; onclick&#x3D;&quot;goForward()&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOM</category>
      </categories>
      <tags>
        <tag>BOM</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS样式表的继承性和层叠性</title>
    <url>/2020/04/18/05-CSS%E6%A0%B7%E5%BC%8F%E8%A1%A8%E7%9A%84%E7%BB%A7%E6%89%BF%E6%80%A7%E5%92%8C%E5%B1%82%E5%8F%A0%E6%80%A7/</url>
    <content><![CDATA[<hr>
<h2 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h2><ul>
<li>CSS的继承性</li>
<li>CSS的层叠性<ul>
<li>计算权重</li>
<li>权重问题大总结</li>
<li>CSS样式表的冲突的总结</li>
</ul>
</li>
<li>权重问题深入<ul>
<li>同一个标签，携带了多个类名</li>
<li>!important标记<a id="more"></a>
<h2 id="CSS的继承性"><a href="#CSS的继承性" class="headerlink" title="CSS的继承性"></a>CSS的继承性</h2></li>
</ul>
</li>
</ul>
<blockquote>
<p>有一些属性，当给自己设置的时候，自己的后代都继承上了，这个就是<strong>继承性。</strong></p>
</blockquote>
<p>继承性是从自己开始，直到最小的元素。</p>
<ul>
<li><p>关于文字样式的属性，都具有继承性。这些属性包括：color、 text-开头的、line-开头的、font-开头的。</p>
</li>
<li><p>关于盒子、定位、布局的属性，都不能继承。</p>
</li>
</ul>
<h2 id="CSS的层叠性"><a href="#CSS的层叠性" class="headerlink" title="CSS的层叠性"></a>CSS的层叠性</h2><p>很多公司如果要笔试，那么一定会考层叠性。</p>
<h3 id="层叠性：计算权重"><a href="#层叠性：计算权重" class="headerlink" title="层叠性：计算权重"></a>层叠性：计算权重</h3><p><strong>层叠性：就是css处理冲突的能力。</strong> 所有的权重计算，没有任何兼容问题！</p>
<p>当多个选择器，选择上了某个元素的时候，要按照如下顺序统计权重：</p>
<ul>
<li>id 选择器</li>
<li>类选择器、属性选择器、伪类选择器</li>
<li>标签选择器、伪元素选择器</li>
</ul>
<p>因为对于相同方式的样式表，其选择器排序的优先级为：ID选择器 &gt; 类选择器 &gt; 标签选择器</p>
<h3 id="层叠性：权重计算的问题大总结（非常重要）"><a href="#层叠性：权重计算的问题大总结（非常重要）" class="headerlink" title="层叠性：权重计算的问题大总结（非常重要）"></a>层叠性：权重计算的问题大总结（非常重要）</h3><p>层叠性。层叠性是一种能力，就是处理冲突的能力。当不同选择器，对一个标签的同一个样式，有不同的值，听谁的？这就是冲突。css有着严格的处理冲突的机制。</p>
<ul>
<li>选择上了，数权重，(id的数量，类的数量，标签的数量)。如果权重一样，谁写在后面听谁的。</li>
<li>没有选择上，通过继承影响的，就近原则，谁描述的近听谁的。如果描述的一样近，比如选择器权重，如果权重再一样重，谁写在后面听谁的。</li>
</ul>
<h3 id="CSS样式表的冲突的总结"><a href="#CSS样式表的冲突的总结" class="headerlink" title="CSS样式表的冲突的总结"></a>CSS样式表的冲突的总结</h3><ul>
<li>1、对于相同的选择器（比如同样都是类选择器），其样式表排序：行级样式 &gt; 内嵌样式表 &gt; 外部样式表（就近原则）</li>
<li>2、对于相同类型的样式表（比如同样都是内部样式表），其选择器排序：ID选择器 &gt; 类选择器 &gt; 标签选择器</li>
<li>3、外部样式表的ID选择器  &gt; 内嵌样式表的标签选择器</li>
</ul>
<blockquote>
<p>总结：就近原则。ID选择器优先级最大。</p>
</blockquote>
<h2 id="权重问题深入"><a href="#权重问题深入" class="headerlink" title="权重问题深入"></a>权重问题深入</h2><h3 id="同一个标签，携带了多个类名，有冲突："><a href="#同一个标签，携带了多个类名，有冲突：" class="headerlink" title="同一个标签，携带了多个类名，有冲突："></a>同一个标签，携带了多个类名，有冲突：</h3><p>这里需要补充两种冲突的情况：</p>
<ul>
<li>1、对同一个标签，如果用到了了多个相同的内嵌样式表，它的优先级：<strong>定义</strong>的样式表中，谁最近，就用谁。</li>
<li>2、对于同一个标签，如果引用了多个相同的外部样式表，它的优先级：html文件中，引用样式表的位置越近，就用谁。</li>
</ul>
<p><code>!important</code>标记需要强调如下3点：</p>
<p><strong>（1）!important提升的是一个属性，而不是一个选择器</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">	color:red !important;    只写了这一个!important，所以只有字体颜色属性提升了权重</span><br><span class="line">	<span class="selector-tag">font-size</span>: 100<span class="selector-tag">px</span> ;       这条属性没有写!<span class="selector-tag">important</span>，所以没有提升权重</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#para1</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:blue;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.spec</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:green;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以，综合来看，字体颜色是red（听important的）；字号是50px（听id的）。</p>
<p><strong>（2）!important无法提升继承的权重，该是0还是0</strong></p>
<p>比如HTML结构：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈哈哈哈哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>有CSS样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:red <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于div是通过继承性来影响文字颜色的，所以!important无法提升它的权重，权重依然是0。</p>
<p>干不过p标签，因为p标签是实实在在选中了，所以字是蓝色的（以p为准）。</p>
<p><strong>(3)!important不影响就近原则</strong></p>
<p>如果大家都是继承来的，按理说应该按照“就近原则”，那么important能否影响就近原则呢？<br>答案是：不影响。远的，永远是远的。不能给远的写一个important，干掉近的。</p>
<p>为了验证这个问题，我们可以搞两层具有继承性的标签，然后给外层标签加一个!important，最终看看就近原则有没有被打破。举例如下：</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串的拓展</title>
    <url>/2020/04/18/05-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要内容：</p>
<ul>
<li>字符的 Unicode 表示法</li>
<li>字符串的遍历器接口</li>
<li>直接输入 U+2028 和 U+2029</li>
<li>JSON.stringify() 的改造</li>
<li>模板字符串</li>
<li>实例：模板编译</li>
<li>标签模板</li>
<li>模板字符串的限制<a id="more"></a>
<h2 id="字符的-Unicode-表示法"><a href="#字符的-Unicode-表示法" class="headerlink" title="字符的 Unicode 表示法"></a>字符的 Unicode 表示法</h2></li>
</ul>
<p>ES6 加强了对 Unicode 的支持，允许采用<code>\uxxxx</code>形式表示一个字符，其中<code>xxxx</code>表示字符的 Unicode 码点。</p>
<p>ES6 中，只要将码点放入大括号，就能正确解读该字符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;\u&#123;20BB7&#125;&quot;</span><br><span class="line">&#x2F;&#x2F; &quot;𠮷&quot;</span><br><span class="line"></span><br><span class="line">&quot;\u&#123;41&#125;\u&#123;42&#125;\u&#123;43&#125;&quot;</span><br><span class="line">&#x2F;&#x2F; &quot;ABC&quot;</span><br><span class="line"></span><br><span class="line">let hello &#x3D; 123;</span><br><span class="line">hell\u&#123;6F&#125; &#x2F;&#x2F; 123</span><br><span class="line"></span><br><span class="line">&#39;\u&#123;1F680&#125;&#39; &#x3D;&#x3D;&#x3D; &#39;\uD83D\uDE80&#39;</span><br><span class="line">&#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>
<p>上面代码中，最后一个例子表明，大括号表示法与四字节的 UTF-16 编码是等价的。</p>
<p>有了这种表示法之后，JavaScript 共有 6 种方法可以表示一个字符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;\z&#39; &#x3D;&#x3D;&#x3D; &#39;z&#39;  &#x2F;&#x2F; true</span><br><span class="line">&#39;\172&#39; &#x3D;&#x3D;&#x3D; &#39;z&#39; &#x2F;&#x2F; true</span><br><span class="line">&#39;\x7A&#39; &#x3D;&#x3D;&#x3D; &#39;z&#39; &#x2F;&#x2F; true</span><br><span class="line">&#39;\u007A&#39; &#x3D;&#x3D;&#x3D; &#39;z&#39; &#x2F;&#x2F; true</span><br><span class="line">&#39;\u&#123;7A&#125;&#39; &#x3D;&#x3D;&#x3D; &#39;z&#39; &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<h2 id="字符串的遍历器接口"><a href="#字符串的遍历器接口" class="headerlink" title="字符串的遍历器接口"></a>字符串的遍历器接口</h2><p>ES6 为字符串添加了遍历器接口，使得字符串可以被for…of循环遍历。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (let codePoint of &#39;foo&#39;) &#123;</span><br><span class="line">  console.log(codePoint)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; &quot;f&quot;</span><br><span class="line">&#x2F;&#x2F; &quot;o&quot;</span><br><span class="line">&#x2F;&#x2F; &quot;o&quot;</span><br></pre></td></tr></table></figure>
<p>除了遍历字符串，这个遍历器最大的优点是可以识别大于<code>0xFFFF</code>的码点，传统的for循环无法识别这样的码点。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let text &#x3D; String.fromCodePoint(0x20BB7);</span><br><span class="line"></span><br><span class="line">for (let i &#x3D; 0; i &lt; text.length; i++) &#123;</span><br><span class="line">  console.log(text[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; &quot; &quot;</span><br><span class="line">&#x2F;&#x2F; &quot; &quot;</span><br><span class="line"></span><br><span class="line">for (let i of text) &#123;</span><br><span class="line">  console.log(i);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; &quot;𠮷&quot;</span><br></pre></td></tr></table></figure>
<p>上面代码中，字符串text只有一个字符，但是for循环会认为它包含两个字符（都不可打印），而for…of循环会正确识别出这一个字符。</p>
]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>WindowNavigator</title>
    <url>/2020/04/18/05-WindowNavigator/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>window.navigator 对象<strong>包含有关访问者的信息</strong>。</p>
<a id="more"></a>
<h2 id="Window-Navigator"><a href="#Window-Navigator" class="headerlink" title="Window Navigator"></a>Window Navigator</h2><p>window.navigator 对象可以不带 window 前缀来写。</p>
<p>一些例子：</p>
<ul>
<li>navigator.appName</li>
<li>navigator.appCodeName</li>
<li>navigator.platform</li>
</ul>
<h2 id="浏览器-Cookie"><a href="#浏览器-Cookie" class="headerlink" title="浏览器 Cookie"></a>浏览器 Cookie</h2><p>cookieEnabled 属性返回 true，如果 cookie 已启用，否则返回 false：</p>
<p>实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;cookiesEnabled is &quot; + navigator.cookieEnabled;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="浏览器应用程序名称"><a href="#浏览器应用程序名称" class="headerlink" title="浏览器应用程序名称"></a>浏览器应用程序名称</h2><p>appName 属性返回浏览器的应用程序名称.</p>
<h2 id="浏览器应用程序代码名称"><a href="#浏览器应用程序代码名称" class="headerlink" title="浏览器应用程序代码名称"></a>浏览器应用程序代码名称</h2><p>appCodeName 属性返回浏览器的应用程序代码名称：</p>
<p>实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;navigator.appCodeName is &quot; + navigator.appCodeName;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>“Mozilla” 是 Chrome、Firefox、IE、Safari 以及 Opera 的应用程序代码名称。</p>
<h2 id="浏览器引擎"><a href="#浏览器引擎" class="headerlink" title="浏览器引擎"></a>浏览器引擎</h2><p>product 属性返回浏览器引擎的产品名称：</p>
<p>实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;navigator.product is &quot; + navigator.product;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="浏览器版本"><a href="#浏览器版本" class="headerlink" title="浏览器版本"></a>浏览器版本</h2><p>appVersion 属性返回有关浏览器的版本信息.</p>
<h2 id="浏览器代理"><a href="#浏览器代理" class="headerlink" title="浏览器代理"></a>浏览器代理</h2><p>userAgent 属性返回由浏览器发送到服务器的用户代理报头（user-agent header）.</p>
<h4 id="来自-navigator-对象的信息通常是误导性的，不应该用于检测浏览器版本，因为："><a href="#来自-navigator-对象的信息通常是误导性的，不应该用于检测浏览器版本，因为：" class="headerlink" title="来自 navigator 对象的信息通常是误导性的，不应该用于检测浏览器版本，因为："></a>来自 navigator 对象的信息通常是误导性的，不应该用于检测浏览器版本，因为：</h4><ul>
<li>不同浏览器能够使用相同名称</li>
<li>导航数据可被浏览器拥有者更改</li>
<li>某些浏览器会错误标识自身以绕过站点测试</li>
<li>浏览器无法报告发布晚于浏览器的新操作系统</li>
</ul>
<h2 id="浏览器平台"><a href="#浏览器平台" class="headerlink" title="浏览器平台"></a>浏览器平台</h2><p>platform 属性返回浏览器平台（操作系统）.</p>
<h2 id="浏览器语"><a href="#浏览器语" class="headerlink" title="浏览器语"></a>浏览器语</h2><p>language 属性返回浏览器语言.</p>
<h2 id="浏览器是否在线？"><a href="#浏览器是否在线？" class="headerlink" title="浏览器是否在线？"></a>浏览器是否在线？</h2><p>onLine 属性返回 true，假如浏览器在线.</p>
<h2 id="Java-是否启用？"><a href="#Java-是否启用？" class="headerlink" title="Java 是否启用？"></a>Java 是否启用？</h2><p>javaEnabled() 方法返回 true，如果 Java 已启用：</p>
]]></content>
      <categories>
        <category>BOM</category>
      </categories>
      <tags>
        <tag>BOM</tag>
      </tags>
  </entry>
  <entry>
    <title>typeof和数据类型转换</title>
    <url>/2020/04/18/05-typeof%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<hr>
<p><strong>变量的数据类型转换</strong>：将一种数据类型转换为另外一种数据类型。</p>
<p>通常有三种形式的类型转换：</p>
<ul>
<li><p>转换为字符串类型</p>
</li>
<li><p>转换为数字型</p>
</li>
<li><p>转换为布尔型</p>
</li>
</ul>
<a id="more"></a>
<h2 id="typeof-运算符"><a href="#typeof-运算符" class="headerlink" title="typeof 运算符"></a>typeof 运算符</h2><blockquote>
<p>我们先来讲一下 typeof，再讲类型转换。</p>
</blockquote>
<p><code>typeof()</code>表示“<strong>获取变量的数据类型</strong>”，返回的是小写，语法为：（两种写法都可以）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写法1</span></span><br><span class="line"><span class="keyword">typeof</span> 变量;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法2</span></span><br><span class="line"><span class="keyword">typeof</span>(变量);</span><br></pre></td></tr></table></figure>

<p>typeof 这个运算符的返回结果就是变量的类型。那返回结果的类型是什么呢？是字符串。</p>
<p><strong>返回结果</strong>：</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Undefined</td>
<td align="center">“undefined”</td>
</tr>
<tr>
<td align="left">Null</td>
<td align="center">“object”</td>
</tr>
<tr>
<td align="left">Boolean</td>
<td align="center">“boolean”</td>
</tr>
<tr>
<td align="left">Number</td>
<td align="center">“number”</td>
</tr>
<tr>
<td align="left">BigInt</td>
<td align="center">“bigint”</td>
</tr>
<tr>
<td align="left">String</td>
<td align="center">“string”</td>
</tr>
<tr>
<td align="left">Symbol (ECMAScript 2015 新增)</td>
<td align="center">“symbol”</td>
</tr>
<tr>
<td align="left">宿主对象（由 JS 环境提供）</td>
<td align="center">取决于具体实现</td>
</tr>
<tr>
<td align="left">Function 对象(按照 ECMA-262 规范实现 [[Call]])</td>
<td align="center">“function”</td>
</tr>
<tr>
<td align="left">其他任何对象</td>
<td align="center">“object”</td>
</tr>
</tbody></table>
<p>备注 1：为啥 <code>typeof null</code>的返回值也是 object 呢？因为 null 代表的是<strong>空对象</strong>。</p>
<p>备注 2：<code>typeof NaN</code>的返回值是 number，NaN 是一个特殊的数字。</p>
<p><strong>返回结果举例</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(type []); <span class="comment">// 空数组的打印结果：object</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(type &#123;&#125;); <span class="comment">// 空对象的打印结果：object</span></span><br></pre></td></tr></table></figure>

<p>代码解释：这里的空数组<code>[]</code>、空对象<code>{}</code> ，为啥他们在使用 typeof 时，返回值也是 <code>object</code>呢？因为这里的 返回结果<code>object</code>指的是<strong>引用数据类型</strong>。空数组、空对象都是<strong>引用数据类型 Object</strong>。</p>
<h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p><code>instanceof</code> 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。</p>
<blockquote>
<p><code>instanceof</code> 是判断变量是否为某个对象的实例，返回值为true或false。</p>
</blockquote>
<blockquote>
<p>语法：object instanceof constructor</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var o &#x3D; &#123;&#125;;</span><br><span class="line">var a &#x3D; [];</span><br><span class="line"></span><br><span class="line">o instanceof Array &#x2F;&#x2F; false</span><br><span class="line">a instanceof Array &#x2F;&#x2F; true</span><br><span class="line">a instanceof Object &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<h2 id="变量的类型转换的分类"><a href="#变量的类型转换的分类" class="headerlink" title="变量的类型转换的分类"></a>变量的类型转换的分类</h2><p>类型转换分为两种：显示类型转换、隐式类型转换。</p>
<h3 id="显示类型转换"><a href="#显示类型转换" class="headerlink" title="显示类型转换"></a>显示类型转换</h3><ul>
<li><p>toString()</p>
</li>
<li><p>String()</p>
</li>
<li><p>Number()</p>
</li>
<li><p>parseInt(string)</p>
</li>
<li><p>parseFloat(string)</p>
</li>
<li><p>Boolean()</p>
</li>
</ul>
<h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><ul>
<li><p>isNaN ()</p>
</li>
<li><p>自增/自减运算符：<code>++</code>、<code>—-</code></p>
</li>
<li><p>正号/负号：<code>+a</code>、<code>-a</code></p>
</li>
<li><p>加号：<code>+</code></p>
</li>
<li><p>运算符：<code>-</code>、<code>*</code>、<code>/</code></p>
</li>
</ul>
<h3 id="隐式类型转换（特殊）"><a href="#隐式类型转换（特殊）" class="headerlink" title="隐式类型转换（特殊）"></a>隐式类型转换（特殊）</h3><ul>
<li><p>逻辑运算符：<code>&amp;&amp;</code>、<code>||</code>、<code>！</code> 。非布尔值进行<strong>与或</strong>运算时，会先将其转换为布尔值，然后再运算，但运算结果是<strong>原值</strong>。具体可以看下一篇文章《运算符》。</p>
</li>
<li><p>关系运算符：<code>&lt;</code>、<code>&gt;</code> <code>&lt;=</code> <code>&gt;=</code>等。关系运算符，得到的运算结果都是布尔值：要么是true，要么是false。</p>
</li>
</ul>
<p>针对上面这两种类型转换，这篇文章来详细介绍。</p>
<h2 id="其他的简单类型-–-gt-String"><a href="#其他的简单类型-–-gt-String" class="headerlink" title="其他的简单类型 –&gt; String"></a>其他的简单类型 –&gt; String</h2><h3 id="方法一（隐式类型转换）：字符串拼接"><a href="#方法一（隐式类型转换）：字符串拼接" class="headerlink" title="方法一（隐式类型转换）：字符串拼接"></a>方法一（隐式类型转换）：字符串拼接</h3><p>格式：变量+”” 或者 变量+”abc”</p>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>; <span class="comment">// Number 类型</span></span><br><span class="line"><span class="built_in">console</span>.log(a + <span class="string">''</span>); <span class="comment">// 转换成 String 类型</span></span><br><span class="line"><span class="built_in">console</span>.log(a + <span class="string">'haha'</span>); <span class="comment">// 转换成 String 类型</span></span><br></pre></td></tr></table></figure>

<p>上面的例子中，打印的结果，都是字符串类型的数据。实际上内部是调用的 String() 函数。也就是说，<code>c = c + &quot;&quot;</code> 等价于 <code>c = String(c)</code>。</p>
<h3 id="方法二：调用-toString-方法"><a href="#方法二：调用-toString-方法" class="headerlink" title="方法二：调用 toString()方法"></a>方法二：调用 toString()方法</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">变量.toString()</span><br></pre></td></tr></table></figure>

<p>【重要】该方法<strong>不会影响到原变量</strong>，它会将转换的结果返回。当然我们还可以直接写成<code>a = a.toString()</code>，这样的话，就是直接修改原变量。</p>
<p>注意：null 和 undefined 这两个值没有 toString()方法，所以它们不能用方法二。如果调用，会报错。</p>
<p>另外，Number 类型的变量，在调用 toString()时，可以在方法中传递一个整数作为参数。此时它将会把数字转换为指定的进制，如果不指定则默认转换为 10 进制。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于Number调用toString()时可以在方法中传递一个整数作为参数</span></span><br><span class="line"><span class="comment">//此时它将会把数字转换为指定的进制,如果不指定则默认转换为10进制</span></span><br><span class="line">a = a.toString(<span class="number">2</span>); <span class="comment">// 转换为二进制</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 11111111</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">// string</span></span><br></pre></td></tr></table></figure>

<h3 id="方法三（强制转换）：使用-String-函数"><a href="#方法三（强制转换）：使用-String-函数" class="headerlink" title="方法三（强制转换）：使用 String()函数"></a>方法三（强制转换）：使用 String()函数</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>(变量)</span><br></pre></td></tr></table></figure>

<p>使用 String()函数做强制类型转换时：</p>
<ul>
<li><p>对于 Number 和 Boolean 而言，本质上就是调用 toString()方法。</p>
</li>
<li><p>但是对于 null 和 undefined，则不会调用 toString()方法。它会将 null 直接转换为 “null”。将 undefined 直接转换为 “undefined”。</p>
</li>
</ul>
<h3 id="prompt-：用户的输入"><a href="#prompt-：用户的输入" class="headerlink" title="prompt()：用户的输入"></a>prompt()：用户的输入</h3><p><code>prompt()</code>就是专门用来弹出能够让用户输入的对话框。重要的是：用户不管输入什么，都当字符串处理。</p>
<h2 id="其他的数据类型-–-gt-Number-【重要】"><a href="#其他的数据类型-–-gt-Number-【重要】" class="headerlink" title="其他的数据类型 –&gt; Number 【重要】"></a>其他的数据类型 –&gt; Number 【重要】</h2><h3 id="使用-Number-函数"><a href="#使用-Number-函数" class="headerlink" title="使用 Number() 函数"></a>使用 Number() 函数</h3><p><strong>情况一：字符串 –&gt; 数字</strong></p>
<ul>
<li><p>1.如果字符串中是纯数字，则直接将其转换为数字。</p>
</li>
<li><p>2.只要字符串中包含了非数字的内容（<code>小数点</code>按数字来算），则转换为 NaN。</p>
</li>
<li><p>3.如果字符串是一个空串或者是一个全是空格的字符串，则转换为 0。</p>
</li>
</ul>
<p><strong>情况二：布尔 –&gt; 数字</strong></p>
<ul>
<li><p>true 转成 1</p>
</li>
<li><p>false 转成 0</p>
</li>
</ul>
<p><strong>情况三：null –&gt; 数字</strong></p>
<ul>
<li>结果为：0</li>
</ul>
<p><strong>情况四：undefined –&gt; 数字</strong></p>
<ul>
<li>结果为：NaN</li>
</ul>
<p>补充：怎么理解这里的 <strong>NaN</strong> 呢？可以这样理解，使用 Number() 函数之后，<strong>如果无法转换为数字，就会转换为 NaN</strong>。</p>
<h3 id="使用-parseInt-函数：字符串-gt-整数"><a href="#使用-parseInt-函数：字符串-gt-整数" class="headerlink" title="使用 parseInt()函数：字符串 -&gt; 整数"></a>使用 parseInt()函数：字符串 -&gt; 整数</h3><p><strong>parseInt()的作用是将字符串中的有效的整数内容转为数字</strong>。parse 表示“转换”，Int 表示“整数”（注意<code>Int</code>的拼写）。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">"5"</span>);</span><br></pre></td></tr></table></figure>

<p>得到的结果是数字 5。</p>
<p>parseInt()的转换情况如下。</p>
<p><strong>情况一：字符串 –&gt; 数字</strong></p>
<ul>
<li><p>1.<strong>只保留字符串最开头的数字</strong>，后面的中文自动消失。</p>
</li>
<li><p>2.如果字符串不是以数字开头，则转换为 NaN。</p>
</li>
<li><p>3.如果字符串是一个空串或者是一个全是空格的字符串，转换时会报错。</p>
</li>
</ul>
<p><strong>情况二：Boolean –&gt; 数字</strong></p>
<ul>
<li>结果为：NaN</li>
</ul>
<p><strong>情况三：Null –&gt; 数字</strong></p>
<ul>
<li>结果为：NaN</li>
</ul>
<p><strong>情况四：Undefined –&gt; 数字</strong></p>
<ul>
<li>结果为：NaN</li>
</ul>
<p>Number() 函数和 parseInt() 函数的区别：</p>
<p>就拿<code>Number(true)</code> 和 <code>parseInt(true)/parseFloat(true)</code>来举例，二者在使用时，是有区别的：</p>
<ul>
<li><p>Number(true) ：千方百计地想转换为数字。</p>
</li>
<li><p>parseInt(true)/parseFloat(true) ：先转为字符串，再提取出最前面的数字部分；没提取出来，那就返回 NaN。</p>
</li>
</ul>
<p><strong>parseInt()具有以下特性</strong>：</p>
<p>（1）<strong>只保留字符串最开头的数字</strong>，后面的中文自动消失。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"2017在公众号上写了6篇文章"</span>)); <span class="comment">//打印结果：2017</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"2017.01在公众号上写了6篇文章"</span>)); <span class="comment">//打印结果仍是：2017   （说明只会取整数）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"aaa2017.01在公众号上写了6篇文章"</span>)); <span class="comment">//打印结果：NaN （因为不是以数字开头）</span></span><br></pre></td></tr></table></figure>

<p>（2）如果对<strong>非 String</strong>使用 parseInt()或 parseFloat()，它会<strong>先将其转换为 String</strong> 然后再操作。【重要】</p>
<p>比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">168.23</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(a)); <span class="comment">//打印结果：168  （因为是先将c转为字符串"168.23"，然后然后再操作）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(b)); <span class="comment">//打印结果：NaN （因为是先将a转为字符串"true"，然后然后再操作）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(c)); <span class="comment">//打印结果：NaN  （因为是先将b转为字符串"null"，然后然后再操作）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="literal">undefined</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(d)); <span class="comment">//打印结果：NaN  （因为是先将b转为字符串"undefined"，然后然后再操作）</span></span><br></pre></td></tr></table></figure>

<p>（3）自动带有截断小数的功能：<strong>取整，不四舍五入</strong>。</p>
<p>例 1：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">parseInt</span>(<span class="number">5.8</span>) + <span class="built_in">parseInt</span>(<span class="number">4.7</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure>

<p>例 2：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">parseInt</span>(<span class="number">5.8</span> + <span class="number">4.7</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>（4）带两个参数时，表示在转换时，包含了进制转换。</p>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'110'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">parseInt</span>(a, <span class="number">16</span>); <span class="comment">// 【重要】将 a 当成 十六进制 来看待，转换成 十进制 的 num</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">272</span><br></pre></td></tr></table></figure>

<p>如果你对打印结果感到震惊，请仔细看上面的代码注释。就是说，无论 parseInt() 里面的进制参数是多少，最终的转换结果是十进制。</p>
<p>我们继续来看下面的代码，打印结果是多少。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'5'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">parseInt</span>(a, <span class="number">2</span>); <span class="comment">// 将 a 当成 二进制 来看待，转换成 十进制 的 num</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 打印结果：NaN。因为 二进制中没有 5 这个数，转换失败。</span></span><br></pre></td></tr></table></figure>

<h3 id="parseFloat-函数：字符串-–-gt-浮点数（小数）"><a href="#parseFloat-函数：字符串-–-gt-浮点数（小数）" class="headerlink" title="parseFloat()函数：字符串 –&gt; 浮点数（小数）"></a>parseFloat()函数：字符串 –&gt; 浮点数（小数）</h3><p>parseFloat()的作用是：将字符串转换为<strong>浮点数</strong>。</p>
<p>parseFloat()和 parseInt()的作用类似，不同的是，parseFloat()可以获得有效的小数部分。</p>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'123.456.789px'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(a)); <span class="comment">// 打印结果：123.456</span></span><br></pre></td></tr></table></figure>

<p>parseFloat() 的几个特性，可以参照 parseInt()。</p>
<h2 id="转换为-Boolean"><a href="#转换为-Boolean" class="headerlink" title="转换为 Boolean"></a>转换为 Boolean</h2><p>将其他的数据类型转换为 Boolean，可以使用 Boolean()函数。情况如下：</p>
<ul>
<li><p>情况一：数字 –&gt; 布尔。除了 0 和 NaN，其余的都是 true。也就是说，<code>Boolean(NaN)</code>的结果是 false。</p>
</li>
<li><p>情况二：字符串 —&gt; 布尔。除了空串，其余的都是 true。全是空格的字符串，转换结果也是 true。字符串<code>&#39;0&#39;</code>的转换结果也是 true。</p>
</li>
<li><p>情况三：null 和 undefined 都会转换为 false。</p>
</li>
<li><p>情况四：引用数据类型会转换为 true。注意，空数组<code>[]</code>和空对象<code>{}</code>，转换结果也是 true，这个一点，很多人都不知道。</p>
</li>
</ul>
<p>PS：转换为 Boolean 的这几种情况，<strong>很重要</strong>，开发中会经常用到。</p>
<h2 id="知识补充：其他进制的数字"><a href="#知识补充：其他进制的数字" class="headerlink" title="知识补充：其他进制的数字"></a>知识补充：其他进制的数字</h2><ul>
<li><p>16 进制的数字，以<code>0x</code>开头</p>
</li>
<li><p>8 进制的数字，以<code>0</code>开头</p>
</li>
<li><p>2 进制的数字，<code>0b</code>开头（不是所有的浏览器都支持：chrome 和火狐支持，IE 不支持）</p>
</li>
</ul>
<p>比如<code>070</code>这个字符串，如果我调用 parseInt()转成数字时，有些浏览器会当成 8 进制解析，有些会当成 10 进制解析。</p>
<p>所以，比较建议的做法是：可以在 parseInt()中传递第二个参数，来指定当前数字的进制。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"070"</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">parseInt</span>(a, <span class="number">8</span>); <span class="comment">//将 070 当成八进制来看待，转换结果为十进制。</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 打印结果：56。这个地方要好好理解。</span></span><br></pre></td></tr></table></figure>

<h2 id="隐式类型转换-1"><a href="#隐式类型转换-1" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h2><p>重点：<strong>隐式类型转换，内部调用的都是显式类型的方法</strong>。下面来详细介绍。</p>
<h3 id="isNaN-函数"><a href="#isNaN-函数" class="headerlink" title="isNaN() 函数"></a>isNaN() 函数</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(参数);</span><br></pre></td></tr></table></figure>

<p>解释：判断指定的参数是否为 NaN（非数字类型），返回结果为 Boolean 类型。也就是说：<strong>任何不能被转换为数值的参数，都会让这个函数返回 true</strong>。</p>
<p><strong>执行过程</strong>：</p>
<p>（1）先调用<code>Number(参数)</code>函数；</p>
<p>（2）然后将<code>Number(参数)</code>的返回结果和<code>NaN</code>进行比较。</p>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">'123'</span>)); <span class="comment">// 返回结果：false。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">'abc'</span>)); <span class="comment">// 返回结果：true。因为 Number('abc') 的返回结果是 NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">null</span>)); <span class="comment">// 返回结果：false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">undefined</span>)); <span class="comment">// 返回结果：true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>)); <span class="comment">// 返回结果：true</span></span><br></pre></td></tr></table></figure>

<h3 id="自增-自减运算符：-、—"><a href="#自增-自减运算符：-、—" class="headerlink" title="自增/自减运算符：++、—-"></a>自增/自减运算符：<code>++</code>、<code>—-</code></h3><p><strong>举例 1</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"666"</span>;</span><br><span class="line">a++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">// 打印结果： number</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 打印结果：667</span></span><br></pre></td></tr></table></figure>

<p>执行过程：</p>
<p>（1）先调用<code>Number(参数)</code>函数；</p>
<p>（2）然后将<code>Number(参数)</code>的返回结果进行 加 1 操作。</p>
<p><strong>举例 2</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'abc'</span>;</span><br><span class="line">a++;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">// 打印结果：number</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 打印结果：NaN。因为 Number('abc')的结果为 NaN，再自增后，结果依然是 NaN</span></span><br></pre></td></tr></table></figure>

<h3 id="正号-负号：-a、-a"><a href="#正号-负号：-a、-a" class="headerlink" title="正号/负号：+a、-a"></a>正号/负号：<code>+a</code>、<code>-a</code></h3><blockquote>
<p>注意，这里说的是正号/负号，不是加号/减号。</p>
</blockquote>
<p>任何值做<code>+a</code>、<code>-a</code>、<code>/a</code>运算时，运算结果都会自动转换为 Number 类型。 内部调用的是 Number() 函数。</p>
<p><strong>举例</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'666'</span>;</span><br><span class="line"><span class="keyword">var</span> b = +a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">// 打印结果：string。说明 a 的数据类型保持不变。</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 打印结果：666</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b); <span class="comment">// 打印结果：number。说明 b 的数据类型发生了变化。</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 打印结果：666</span></span><br></pre></td></tr></table></figure>

<h3 id="加号："><a href="#加号：" class="headerlink" title="加号：+"></a>加号：<code>+</code></h3><p><strong>情况一</strong>：字符串 + 数字</p>
<ul>
<li>当加号的两边，只要有一个是字符串的时候，就会调用 String() 函数将数字转为字符串，然后再计算。导致最终的运算结果是字符串。</li>
</ul>
<p><strong>情况二</strong>：Boolean + 数字</p>
<ul>
<li>Boolean 型和数字型相加时， true 按 1 来算 ，false 按 0 来算。这里其实是先调 Number() 函数，将 Boolean 类型转换为 Number类型，然后再和 数字相加。</li>
</ul>
<p><strong>情况三</strong>： null + 数字</p>
<ul>
<li>等价于：0 + 数字</li>
</ul>
<p><strong>情况四</strong>： undefined + 数字</p>
<ul>
<li>计算结果：NaN</li>
</ul>
<h3 id="运算符：-、-、"><a href="#运算符：-、-、" class="headerlink" title="运算符：-、*、/"></a>运算符：<code>-</code>、<code>*</code>、<code>/</code></h3><p>1、任何非 Number 类型的值做<code>-</code>、<code>*</code>、<code>/</code>运算时，会将这些值转换为Number然后再运算(内部调用的是 Number() 函数），运算结果是  Number 类型。（注：<code>任何值 + 字符串</code>是特例，运算结果是字符串）</p>
<p>比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">result1 = <span class="literal">true</span> + <span class="number">1</span>;  <span class="comment">// 2 = 1+ 1</span></span><br><span class="line"></span><br><span class="line">result2 = <span class="literal">true</span> + <span class="literal">false</span>; <span class="comment">// 1 = 1+ 0</span></span><br><span class="line"></span><br><span class="line">result3 = <span class="number">1</span> + <span class="literal">null</span>; <span class="comment">// 1 = 1+ 0</span></span><br><span class="line"></span><br><span class="line">result4 = <span class="number">100</span> - <span class="string">'1'</span> <span class="comment">// 99</span></span><br></pre></td></tr></table></figure>

<p>2、任何的值和字符串做加法运算，都会先转换为字符串，然后再做拼串操作。</p>
<p>比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">result1 = <span class="number">1</span> + <span class="number">2</span> + <span class="string">'3'</span>  <span class="comment">// 33</span></span><br><span class="line"></span><br><span class="line">result2 = <span class="string">'1'</span> + <span class="number">2</span> + <span class="number">3</span>; <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>


<p>3、任何值和NaN做运算的结果都是NaN。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS盒模型</title>
    <url>/2020/04/18/06-CSS%E7%9B%92%E6%A8%A1%E5%9E%8B%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<hr>
<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>盒子模型，英文即box model。无论是div、span、还是a都是盒子。</p>
<p>但是，图片、表单元素一律看作是文本，它们并不是盒子。这个很好理解，比如说，一张图片里并不能放东西，它自己就是自己的内容。</p>
<a id="more"></a>
<h3 id="盒子中的区域"><a href="#盒子中的区域" class="headerlink" title="盒子中的区域"></a>盒子中的区域</h3><p>一个盒子中主要的属性就5个：width、height、padding、border、margin。如下：</p>
<ul>
<li>width和height：<strong>内容</strong>的宽度、高度（不是盒子的宽度、高度）。</li>
<li>padding：内边距。</li>
<li>border：边框。</li>
<li>margin：外边距。</li>
</ul>
<blockquote>
<p>注意：<strong>宽度和真实占有宽度，不是一个概念！</strong>来看下面这例子。</p>
</blockquote>
<h3 id="标准盒模型和IE盒模型"><a href="#标准盒模型和IE盒模型" class="headerlink" title="标准盒模型和IE盒模型"></a>标准盒模型和IE盒模型</h3><blockquote>
<p>我们目前所学习的知识中，以标准盒子模型为准。</p>
</blockquote>
<p>标准盒子模型：</p>
<p><img src="css1.jpg" alt=""></p>
<p>IE盒子模型：</p>
<p><img src="css2.jpg" alt=""></p>
<p>上图显示：</p>
<p>在 CSS 盒子模型 (Box Model) 规定了元素处理元素的几种方式：</p>
<ul>
<li>width和height：<strong>内容</strong>的宽度、高度（不是盒子的宽度、高度）。</li>
<li>padding：内边距。</li>
<li>border：边框。</li>
<li>margin：外边距。</li>
</ul>
<p>CSS盒模型和IE盒模型的区别：</p>
<ul>
<li><p>在 <font color="#0000FF"><strong>标准盒子模型</strong></font>中，<font color="#0000FF"><strong>width 和 height 指的是内容区域</strong></font>的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。</p>
</li>
<li><p><font color="#0000FF"><strong>IE盒子模型</strong></font>中，<font color="#0000FF"><strong>width 和 height 指的是内容区域+border+padding</strong></font>的宽度和高度。</p>
</li>
</ul>
<br>

<h3 id="lt-body-gt-标签也有margin"><a href="#lt-body-gt-标签也有margin" class="headerlink" title="&lt;body&gt;标签也有margin"></a><code>&lt;body&gt;</code>标签也有margin</h3><p><code>&lt;body&gt;</code>标签有必要强调一下。很多人以为<code>&lt;body&gt;</code>标签占据的是整个页面的全部区域，其实是错误的，正确的理解是这样的：整个网页最大的盒子是<code>&lt;document&gt;</code>，即浏览器。而<code>&lt;body&gt;</code>是<code>&lt;document&gt;</code>的儿子。浏览器给<code>&lt;body&gt;</code>默认的margin大小是8个像素，此时<code>&lt;body&gt;</code>占据了整个页面的一大部分区域，而不是全部区域。来看一段代码。</p>
<p><strong>如果想保持一个盒子的真实占有宽度不变，那么加width的时候就要减padding。加padding的时候就要减width</strong>。因为盒子变胖了是灾难性的，这会把别的盒子挤下去。</p>
<h2 id="认识padding"><a href="#认识padding" class="headerlink" title="认识padding"></a>认识padding</h2><h3 id="padding区域也有颜色"><a href="#padding区域也有颜色" class="headerlink" title="padding区域也有颜色"></a>padding区域也有颜色</h3><p>padding就是内边距。<font color="#0000FF"><strong>padding的区域有背景颜色</strong></font>，css2.1前提下，并且背景颜色一定和内容区域的相同。也就是说，background-color将填充<strong>所有border以内的区域。</strong></p>
<h3 id="padding有四个方向"><a href="#padding有四个方向" class="headerlink" title="padding有四个方向"></a>padding有四个方向</h3><p>padding是4个方向的，所以我们能够分别描述4个方向的padding。</p>
<p>方法有两种，第一种写小属性；第二种写综合属性，用空格隔开。</p>
<p>小属性的写法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">padding-top</span>: 30<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">padding-right</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">padding-bottom</span>: 40<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">padding-left</span>: 100<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure>

<p>综合属性的写法：(上、右、下、左)（顺时针方向，用空格隔开。margin的道理也是一样的）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">padding</span><span class="selector-pseudo">:30px</span> 20<span class="selector-tag">px</span> 40<span class="selector-tag">px</span> 100<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure>

<p>如果写了四个值，则顺序为：上、右、下、左。</p>
<p>如果只写了三个值，则顺序为：上、右、下。左边与右侧相同。</p>
<p>如果只写了两个值，比如说：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">padding: 30px 40px;</span><br></pre></td></tr></table></figure>

<p>则顺序等价于：30px 40px 30px 40px;</p>
<p>要懂得，<strong>用小属性层叠大属性</strong>。比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">padding: 20px;</span><br><span class="line">padding-left: 30px;</span><br></pre></td></tr></table></figure>

<p>下面的写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">padding-left: 30px;</span><br><span class="line">padding: 20px;</span><br></pre></td></tr></table></figure>

<p>第一行的小属性无效，因为被第二行的大属性层叠掉了。</p>
<h3 id="一些元素，默认带有padding"><a href="#一些元素，默认带有padding" class="headerlink" title="一些元素，默认带有padding"></a>一些元素，默认带有padding</h3><p>一些元素，默认带有<code>padding</code>，比如ul标签。不加任何样式的ul，也是有40px的padding-left。</p>
<p>所以，我们做站的时候，为了便于控制，总是喜欢清除这个默认的padding。</p>
<p>可以使用<code>*</code>进行清除：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 但是，<code>*</code>的效率不高，所以我们使用并集选择器，罗列所有的标签（不用背，有专业的清除默认样式的样式表，今后学习）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,code,form,fieldset,legend,input,textarea,p,blockquote,th,td&#123;</span><br><span class="line">    margin:0;</span><br><span class="line">    padding:0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="认识border"><a href="#认识border" class="headerlink" title="认识border"></a>认识border</h2><p>border就是边框。边框有三个要素：像素（粗细）、线型、颜色。</p>
<p>比如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.div1</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">2px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>颜色如果不写，默认是黑色。另外两个属性如果不写，则无法显示边框。</p>
<h3 id="border-style"><a href="#border-style" class="headerlink" title="border-style"></a>border-style</h3><p>border的所有的线型如下：（我们可以通过查看<a href="https://www.w3school.com.cn/cssref/index.asp" target="_blank" rel="noopener">CSS参考手册</a>得到）</p>
<p>比较稳定的border-style就几个：solid、dashed、dotted。</p>
<h3 id="border拆分"><a href="#border拆分" class="headerlink" title="border拆分"></a>border拆分</h3><p>border是一个大综合属性。比如说：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span><br></pre></td></tr></table></figure>

<p>就是把上下左右这四个方向的边框，都设置为 1px 宽度、线型实线、red颜色。</p>
<p>border属性是能够被拆开的，有两大种拆开的方式：</p>
<ul>
<li><p>（1）按三要素拆开：border-width、border-style、border-color。（一个border属性是由三个小属性综合而成的）</p>
</li>
<li><p>（2）按方向拆开：border-top、border-right、border-bottom、border-left。</p>
</li>
</ul>
<p>现在我们明白了：<strong>一个border属性，是由三个小属性综合而成的</strong>。如果某一个小属性后面是空格隔开的多个值，那么就是上右下左的顺序。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">border-width:10px 20px;</span><br><span class="line">border-style:solid dashed dotted;</span><br><span class="line">border-color:red green blue yellow;</span><br></pre></td></tr></table></figure>


<h3 id="border-image-属性"><a href="#border-image-属性" class="headerlink" title="border-image 属性"></a>border-image 属性</h3><p>比如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border-image</span>: <span class="selector-tag">url</span>(<span class="selector-class">.img</span><span class="selector-class">.png</span>) 30 <span class="selector-tag">round</span>;</span><br></pre></td></tr></table></figure>

<p>这个属性在实际开发中用得不多，暂时忽略。</p>
<h3 id="举例1：利用-border-属性画一个三角形（小技巧）"><a href="#举例1：利用-border-属性画一个三角形（小技巧）" class="headerlink" title="举例1：利用 border 属性画一个三角形（小技巧）"></a>举例1：利用 border 属性画一个三角形（小技巧）</h3><p>完整代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">	<span class="attribute">border-top-color</span>: red;</span><br><span class="line">	<span class="attribute">border-bottom</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果如下：<br><br><img src="%E4%B8%89%E8%A7%92%E5%BD%A2.png" alt=""></p>
<h3 id="举例2：利用-border-属性画一个三角形（更推荐的技巧）"><a href="#举例2：利用-border-属性画一个三角形（更推荐的技巧）" class="headerlink" title="举例2：利用 border 属性画一个三角形（更推荐的技巧）"></a>举例2：利用 border 属性画一个三角形（更推荐的技巧）</h3><p>上面的例子1中，画出来的是直角三角形，可如果我想画等边三角形，要怎么做呢？</p>
<p>完整代码如下：（用 css 画等边三角形）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div1</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border-top</span>: <span class="number">30px</span> solid red;</span><br><span class="line">	<span class="comment">/* 通过改变 border-left 和 border-right 中的像素值，来改变三角形的形状 */</span></span><br><span class="line">	<span class="attribute">border-left</span>: <span class="number">20px</span> solid transparent;</span><br><span class="line">	<span class="attribute">border-right</span>: <span class="number">20px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外，我们在上方代码的基础之上，再加一个 <code>border-radus: 20px;</code> 就能画出一个扇形。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript弹出框</title>
    <url>/2020/04/18/06-JavaScript%E5%BC%B9%E5%87%BA%E6%A1%86/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>JavaScript 有三种类型的弹出框：<strong>警告框、确认框和提示框</strong>。</p>
<a id="more"></a>
<h2 id="警告框"><a href="#警告框" class="headerlink" title="警告框"></a>警告框</h2><p>如果要确保信息传递给用户，通常会使用警告框。</p>
<p><strong>当警告框弹出时，用户将需要单击“确定”来继续。</strong></p>
<p>语法<br><code>window.alert(&quot;sometext&quot;);</code></p>
<p>window.alert() 方法可以不带 window 前缀来写。</p>
<p>实例<br><code>alert(&quot;我是一个警告框！&quot;);</code></p>
<h2 id="确认框"><a href="#确认框" class="headerlink" title="确认框"></a>确认框</h2><p>如果<strong>您希望用户验证或接受某个东西，则通常使用“确认”框</strong>。</p>
<p>当确认框弹出时，用户将不得不单击“确定”或“取消”来继续进行。</p>
<p>如果用户单击“确定”，该框返回 <code>true</code>。如果用户单击“取消”，该框返回 <code>false</code>。</p>
<p>语法<br><code>window.confirm(&quot;sometext&quot;);</code></p>
<p><code>window.confirm()</code> 方法可以不带 window 前缀来编写。</p>
<p>实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var r &#x3D; confirm(&quot;请按按钮&quot;);</span><br><span class="line">if (r &#x3D;&#x3D; true) &#123;</span><br><span class="line">    x &#x3D; &quot;您按了确认！&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    x &#x3D; &quot;您按了取消！&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="提示框"><a href="#提示框" class="headerlink" title="提示框"></a>提示框</h2><p>如果您希望用户在进入页面前输入值，通常会使用提示框。</p>
<p><strong>当提示框弹出时，用户将不得不输入值后单击“确定”或点击“取消”来继续进行</strong>。</p>
<p>如果用户单击“确定”，该框返回输入值。如果用户单击“取消”，该框返回 NULL。</p>
<p>语法<br><code>window.prompt(&quot;sometext&quot;,&quot;defaultText&quot;)</code>;</p>
<p>window.prompt() 方法可以不带 window 前缀来编写。</p>
<p>实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var person &#x3D; prompt(&quot;请输入您的姓名&quot;, &quot;比尔盖茨&quot;);</span><br><span class="line">if (person !&#x3D; null) &#123;</span><br><span class="line">    document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;你好 &quot; + person + &quot;！今天过的怎么样？&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="折行"><a href="#折行" class="headerlink" title="折行"></a>折行</h2><p>如需在弹出框中显示折行，请在反斜杠后面加一个字符 <code>n</code>。</p>
<p>实例</p>
<p><code>alert(&quot;Hello\nHow are you?&quot;);</code></p>
]]></content>
      <categories>
        <category>BOM</category>
      </categories>
      <tags>
        <tag>BOM</tag>
      </tags>
  </entry>
  <entry>
    <title>Timing事件</title>
    <url>/2020/04/18/07-Timing%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>JavaScript 可以在时间间隔内执行。</p>
<p>这就是所谓的定时事件（ Timing Events）。</p>
<h2 id="timing-事件"><a href="#timing-事件" class="headerlink" title="timing 事件"></a>timing 事件</h2><p>window 对象允许以指定的时间间隔执行代码。</p>
<a id="more"></a>
<p>这些时间间隔称为定时事件。</p>
<p>通过 JavaScript 使用的有两个关键的方法：</p>
<ul>
<li>setTimeout(function, milliseconds):在等待指定的毫秒数后执行函数。</li>
<li>setInterval(function, milliseconds)等同于 setTimeout()，但持续重复执行该函数。</li>
</ul>
<p><code>setTimeout()</code> 和 <code>setInterval()</code> 都属于 HTML DOM Window 对象的方法。</p>
<h2 id="setTimeout-方法"><a href="#setTimeout-方法" class="headerlink" title="setTimeout() 方法"></a>setTimeout() 方法</h2><p><code>window.setTimeout(function, milliseconds);</code></p>
<p>window.setTimeout() 方法可以不带 window 前缀来编写。</p>
<ul>
<li><p>第一个参数是要执行的函数。</p>
</li>
<li><p>第二个参数指示执行之前的毫秒数。</p>
</li>
</ul>
<p>实例</p>
<p>单击按钮。等待 3 秒，然后页面会提示 “Hello”：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button onclick&#x3D;&quot;setTimeout(myFunction, 3000)&quot;&gt;试一试&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">function myFunction() &#123;</span><br><span class="line">    alert(&#39;Hello&#39;);</span><br><span class="line"> &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="如何停止执行？"><a href="#如何停止执行？" class="headerlink" title="如何停止执行？"></a>如何停止执行？</h2><p><code>clearTimeout()</code>方法停止执行 setTimeout() 中规定的函数。</p>
<p><code>window.clearTimeout(timeoutVariable)</code></p>
<p>window.clearTimeout() 方法可以不带 window 前缀来写。</p>
<ul>
<li>clearTimeout() 使用从 setTimeout() 返回的变量：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">myVar &#x3D; setTimeout(function, milliseconds);</span><br><span class="line">clearTimeout(myVar);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>实例</p>
<p>类似上例，但是添加了“停止”按钮：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button onclick&#x3D;&quot;myVar &#x3D; setTimeout(myFunction, 3000)&quot;&gt;试一试&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button onclick&#x3D;&quot;clearTimeout(myVar)&quot;&gt;停止执行&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<h2 id="setInterval-方法"><a href="#setInterval-方法" class="headerlink" title="setInterval() 方法"></a>setInterval() 方法</h2><p><code>setInterval()</code> 方法在每个给定的时间间隔重复给定的函数。</p>
<p><code>window.setInterval(function, milliseconds);</code></p>
<p>window.setInterval() 方法可以不带 window 前缀来写。</p>
<ul>
<li><p>第一个参数是要执行的函数。</p>
</li>
<li><p>第二个参数每个执行之间的时间间隔的长度。</p>
</li>
</ul>
<p>本例每秒执行一次函数 “myTimer”（就像数字手表）。</p>
<p>实例</p>
<p>显示当前时间：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var myVar &#x3D; setInterval(myTimer, 1000);</span><br><span class="line"> </span><br><span class="line">function myTimer() &#123;</span><br><span class="line">    var d &#x3D; new Date();</span><br><span class="line">    document.getElementById(&quot;demo&quot;).innerHTML &#x3D; d.toLocaleTimeString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="如何停止执行？-1"><a href="#如何停止执行？-1" class="headerlink" title="如何停止执行？"></a>如何停止执行？</h2><p><code>clearInterval()</code> 方法停止 setInterval() 方法中指定的函数的执行。</p>
<p><code>window.clearInterval(timerVariable)</code></p>
<p>window.clearInterval() 方法可以不带 window 前缀来写。</p>
<ul>
<li>clearInterval() 方法使用从 setInterval() 返回的变量：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">myVar &#x3D; setInterval(function, milliseconds);</span><br><span class="line">clearInterval(myVar);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>实例</p>
<p>类似上例，但是我们添加了一个“停止时间”按钮：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;button onclick&#x3D;&quot;clearInterval(myVar)&quot;&gt;停止时间&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var myVar &#x3D; setInterval(myTimer, 1000);</span><br><span class="line"> function myTimer() &#123;</span><br><span class="line">    var d &#x3D; new Date();</span><br><span class="line">    document.getElementById(&quot;demo&quot;).innerHTML &#x3D; d.toLocaleTimeString();</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BOM</category>
      </categories>
      <tags>
        <tag>BOM</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串的新增方法</title>
    <url>/2020/04/18/06-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要内容：</p>
<ul>
<li>String.fromCodePoint()</li>
<li>String.raw()</li>
<li>实例方法：codePointAt()</li>
<li>实例方法：normalize()</li>
<li>实例方法：includes(), startsWith(), endsWith()</li>
<li>实例方法：repeat()</li>
<li>实例方法：padStart()，padEnd()</li>
<li>实例方法：trimStart()，trimEnd()</li>
<li>实例方法：matchAll()<a id="more"></a>
<h2 id="String-fromCodePoint"><a href="#String-fromCodePoint" class="headerlink" title="String.fromCodePoint()"></a>String.fromCodePoint()</h2></li>
</ul>
<p>ES5 提供<code>String.fromCharCode()</code>方法，用于从 <code>Unicode</code> 码点返回对应字符，但是这个方法不能识别码点大于<code>0xFFFF</code>的字符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String.fromCharCode(0x20BB7)</span><br><span class="line">&#x2F;&#x2F; &quot;ஷ&quot;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>String.fromCharCode()</code>不能识别大于0xFFFF的码点，所以0x20BB7就发生了溢出，最高位2被舍弃了，最后返回码点U+0BB7对应的字符，而不是码点U+20BB7对应的字符。</p>
<p>ES6 提供了<code>String.fromCodePoint()</code>方法，可以识别大于0xFFFF的字符，弥补了<code>String.fromCharCode()</code>方法的不足。在作用上，正好与下面的<code>codePointAt()</code>方法相反。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String.fromCodePoint(0x20BB7)</span><br><span class="line">&#x2F;&#x2F; &quot;𠮷&quot;</span><br><span class="line">String.fromCodePoint(0x78, 0x1f680, 0x79) &#x3D;&#x3D;&#x3D; &#39;x\uD83D\uDE80y&#39;</span><br><span class="line">&#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>上面代码中，如果String.fromCodePoint方法有多个参数，则它们会被合并成一个字符串返回。</p>
<p>注意，<code>fromCodePoint</code>方法定义在String对象上，而<code>codePointAt</code>方法定义在字符串的实例对象上。</p>
<h2 id="String-raw"><a href="#String-raw" class="headerlink" title="String.raw()"></a>String.raw()</h2><p>ES6 还为原生的 String 对象，提供了一个<code>raw()</code>方法。<strong>该方法返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串</strong>，往往用于模板字符串的处理方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String.raw&#96;Hi\n$&#123;2+3&#125;!&#96;</span><br><span class="line">&#x2F;&#x2F; 实际返回 &quot;Hi\\n5!&quot;，显示的是转义后的结果 &quot;Hi\n5!&quot;</span><br><span class="line"></span><br><span class="line">String.raw&#96;Hi\u000A!&#96;;</span><br><span class="line">&#x2F;&#x2F; 实际返回 &quot;Hi\\u000A!&quot;，显示的是转义后的结果 &quot;Hi\u000A!&quot;</span><br></pre></td></tr></table></figure>

<p>如果原字符串的斜杠已经转义，那么String.raw()会进行再次转义。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String.raw&#96;Hi\\n&#96;</span><br><span class="line">&#x2F;&#x2F; 返回 &quot;Hi\\\\n&quot;</span><br><span class="line"></span><br><span class="line">String.raw&#96;Hi\\n&#96; &#x3D;&#x3D;&#x3D; &quot;Hi\\\\n&quot; &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p><code>String.raw()</code>方法可以作为处理模板字符串的基本方法，它会将所有变量替换，而且对斜杠进行转义，方便下一步作为字符串来使用。</p>
<p><code>String.raw()</code>本质上是一个正常的函数，只是专用于模板字符串的标签函数。如果写成正常函数的形式，它的第一个参数，应该是一个具有raw属性的对象，且raw属性的值应该是一个数组，对应模板字符串解析后的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; &#96;foo$&#123;1 + 2&#125;bar&#96;</span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">String.raw(&#123; raw: [&#39;foo&#39;, &#39;bar&#39;] &#125;, 1 + 2) &#x2F;&#x2F; &quot;foo3bar&quot;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>String.raw()</code>方法的第一个参数是一个对象，它的raw属性等同于原始的模板字符串解析后得到的数组。</p>
<p>作为函数，<code>String.raw()</code>的代码实现基本如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String.raw &#x3D; function (strings, ...values) &#123;</span><br><span class="line">  let output &#x3D; &#39;&#39;;</span><br><span class="line">  let index;</span><br><span class="line">  for (index &#x3D; 0; index &lt; values.length; index++) &#123;</span><br><span class="line">    output +&#x3D; strings.raw[index] + values[index];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  output +&#x3D; strings.raw[index]</span><br><span class="line">  return output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实例方法：codePointAt"><a href="#实例方法：codePointAt" class="headerlink" title="实例方法：codePointAt()"></a>实例方法：codePointAt()</h2><p>JavaScript 内部，字符以 UTF-16 的格式储存，每个字符固定为2个字节。对于那些需要4个字节储存的字符（Unicode 码点大于0xFFFF的字符），JavaScript 会认为它们是两个字符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var s &#x3D; &quot;𠮷&quot;;</span><br><span class="line"></span><br><span class="line">s.length &#x2F;&#x2F; 2</span><br><span class="line">s.charAt(0) &#x2F;&#x2F; &#39;&#39;</span><br><span class="line">s.charAt(1) &#x2F;&#x2F; &#39;&#39;</span><br><span class="line">s.charCodeAt(0) &#x2F;&#x2F; 55362</span><br><span class="line">s.charCodeAt(1) &#x2F;&#x2F; 57271</span><br></pre></td></tr></table></figure>

<p>上面代码中，汉字“𠮷”（注意，这个字不是“吉祥”的“吉”）的码点是0x20BB7，UTF-16 编码为0xD842 0xDFB7（十进制为55362 57271），需要4个字节储存。对于这种4个字节的字符，JavaScript 不能正确处理，字符串长度会误判为2，而且charAt()方法无法读取整个字符，charCodeAt()方法只能分别返回前两个字节和后两个字节的值。</p>
<p><strong>ES6 提供了<code>codePointAt()</code>方法，能够正确处理 4 个字节储存的字符，返回一个字符的码点。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let s &#x3D; &#39;𠮷a&#39;;</span><br><span class="line"></span><br><span class="line">s.codePointAt(0) &#x2F;&#x2F; 134071</span><br><span class="line">s.codePointAt(1) &#x2F;&#x2F; 57271</span><br><span class="line"></span><br><span class="line">s.codePointAt(2) &#x2F;&#x2F; 97</span><br></pre></td></tr></table></figure>

<p><code>codePointAt()</code>方法的参数，是字符在字符串中的位置（从 0 开始）。上面代码中，JavaScript 将“𠮷a”视为三个字符，<code>codePointAt</code>方法在第一个字符上，正确地识别了“𠮷”，返回了它的十进制码点 134071（即十六进制的20BB7）。在第二个字符（即“𠮷”的后两个字节）和第三个字符“a”上，<code>codePointAt()</code>方法的结果与<code>charCodeAt()</code>方法相同。</p>
<p>总之，<code>codePointAt()</code>方法会正确返回 32 位的 UTF-16 字符的码点。对于那些两个字节储存的常规字符，它的返回结果与charCodeAt()方法相同。</p>
<p><code>codePointAt()</code>方法返回的是码点的十进制值，如果想要十六进制的值，可以使用<code>toString()</code>方法转换一下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let s &#x3D; &#39;𠮷a&#39;;</span><br><span class="line"></span><br><span class="line">s.codePointAt(0).toString(16) &#x2F;&#x2F; &quot;20bb7&quot;</span><br><span class="line">s.codePointAt(2).toString(16) &#x2F;&#x2F; &quot;61&quot;</span><br></pre></td></tr></table></figure>

<p>你可能注意到了，<code>codePointAt()</code>方法的参数，仍然是不正确的。比如，上面代码中，字符a在字符串s的正确位置序号应该是 1，但是必须向codePointAt()方法传入 2。解决这个问题的一个办法是使用for…of循环，因为它会正确识别 32 位的 UTF-16 字符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let s &#x3D; &#39;𠮷a&#39;;</span><br><span class="line">for (let ch of s) &#123;</span><br><span class="line">  console.log(ch.codePointAt(0).toString(16));</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 20bb7</span><br><span class="line">&#x2F;&#x2F; 61</span><br></pre></td></tr></table></figure>

<p>另一种方法也可以，使用扩展运算符（…）进行展开运算。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arr &#x3D; [...&#39;𠮷a&#39;]; &#x2F;&#x2F; arr.length &#x3D;&#x3D;&#x3D; 2</span><br><span class="line">arr.forEach(</span><br><span class="line">  ch &#x3D;&gt; console.log(ch.codePointAt(0).toString(16))</span><br><span class="line">);</span><br><span class="line">&#x2F;&#x2F; 20bb7</span><br><span class="line">&#x2F;&#x2F; 61</span><br><span class="line">codePointAt()方法是测试一个字符由两个字节还是由四个字节组成的最简单方法。</span><br><span class="line"></span><br><span class="line">function is32Bit(c) &#123;</span><br><span class="line">  return c.codePointAt(0) &gt; 0xFFFF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">is32Bit(&quot;𠮷&quot;) &#x2F;&#x2F; true</span><br><span class="line">is32Bit(&quot;a&quot;) &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>

<h2 id="实例方法：normalize"><a href="#实例方法：normalize" class="headerlink" title="实例方法：normalize()"></a>实例方法：normalize()</h2><p>许多欧洲语言有语调符号和重音符号。为了表示它们，Unicode 提供了两种方法。一种是直接提供带重音符号的字符，比如Ǒ（\u01D1）。另一种是提供合成符号（combining character），即原字符与重音符号的合成，两个字符合成一个字符，比如O（\u004F）和ˇ（\u030C）合成Ǒ（\u004F\u030C）。</p>
<p>这两种表示方法，在视觉和语义上都等价，但是 JavaScript 不能识别。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;\u01D1&#39;&#x3D;&#x3D;&#x3D;&#39;\u004F\u030C&#39; &#x2F;&#x2F;false</span><br><span class="line"></span><br><span class="line">&#39;\u01D1&#39;.length &#x2F;&#x2F; 1</span><br><span class="line">&#39;\u004F\u030C&#39;.length &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure>

<p>上面代码表示，JavaScript 将合成字符视为两个字符，导致两种表示方法不相等。</p>
<p>ES6 提供字符串实例的<code>normalize()</code>方法，用来将字符的不同表示方法统一为同样的形式，这称为 <strong>Unicode 正规化</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;\u01D1&#39;.normalize() &#x3D;&#x3D;&#x3D; &#39;\u004F\u030C&#39;.normalize()</span><br><span class="line">&#x2F;&#x2F; true&#96;</span><br></pre></td></tr></table></figure>

<p><code>normalize</code>方法可以接受一个参数来指定<code>normalize</code>的方式，参数的四个可选值如下。</p>
<ul>
<li>NFC，默认参数，表示“标准等价合成”（Normalization Form Canonical Composition），返回多个简单字符的合成字符。所谓“标准等价”指的是视觉和语义上的等价。</li>
<li>NFD，表示“标准等价分解”（Normalization Form Canonical Decomposition），即在标准等价的前提下，返回合成字符分解的多个简单字符。</li>
<li>NFKC，表示“兼容等价合成”（Normalization Form Compatibility Composition），返回合成字符。所谓“兼容等价”指的是语义上存在等价，但视觉上不等价，比如“囍”和“喜喜”。（这只是用来举例，normalize方法不能识别中文。）</li>
<li>NFKD，表示“兼容等价分解”（Normalization Form Compatibility Decomposition），即在兼容等价的前提下，返回合成字符分解的多个简单字符。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;\u004F\u030C&#39;.normalize(&#39;NFC&#39;).length &#x2F;&#x2F; 1   &quot;Ǒ&quot;</span><br><span class="line">&#39;\u004F\u030C&#39;.normalize(&#39;NFD&#39;).length &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>上面代码表示，NFC参数返回字符的合成形式，NFD参数返回字符的分解形式。</p>
<p>不过，normalize方法目前不能识别三个或三个以上字符的合成。这种情况下，还是只能使用正则表达式，通过 Unicode 编号区间判断。</p>
<h2 id="实例方法：includes-startsWith-endsWith"><a href="#实例方法：includes-startsWith-endsWith" class="headerlink" title="实例方法：includes(), startsWith(), endsWith()"></a>实例方法：includes(), startsWith(), endsWith()</h2><p>传统上，JavaScript 只有<code>indexOf</code>方法，可以用来确定一个字符串是否包含在另一个字符串中。<strong>ES6 又提供了三种新方法。</strong></p>
<ul>
<li><code>includes()</code>：返回布尔值，表示是否找到了参数字符串。</li>
<li><code>startsWith()</code>：返回布尔值，表示参数字符串是否在原字符串的头部。</li>
<li><code>endsWith()</code>：返回布尔值，表示参数字符串是否在原字符串的尾部。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let s &#x3D; &#39;Hello world!&#39;;</span><br><span class="line"></span><br><span class="line">s.startsWith(&#39;Hello&#39;) &#x2F;&#x2F; true</span><br><span class="line">s.endsWith(&#39;!&#39;) &#x2F;&#x2F; true</span><br><span class="line">s.includes(&#39;o&#39;) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p><strong>这三个方法都支持第二个参数，表示开始搜索的位置。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let s &#x3D; &#39;Hello world!&#39;;</span><br><span class="line"></span><br><span class="line">s.startsWith(&#39;world&#39;, 6) &#x2F;&#x2F; true</span><br><span class="line">s.endsWith(&#39;Hello&#39;, 5) &#x2F;&#x2F; true</span><br><span class="line">s.includes(&#39;Hello&#39;, 6) &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>

<p>上面代码表示，使用第二个参数n时，<strong>endsWith的行为与其他两个方法有所不同。它针对前n个字符</strong>，而其他两个方法针对从第n个位置直到字符串结束。</p>
<h2 id="实例方法：repeat"><a href="#实例方法：repeat" class="headerlink" title="实例方法：repeat()"></a>实例方法：repeat()</h2><p><strong>repeat方法返回一个新字符串，表示将原字符串重复n次。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;x&#39;.repeat(3) &#x2F;&#x2F; &quot;xxx&quot;</span><br><span class="line">&#39;hello&#39;.repeat(2) &#x2F;&#x2F; &quot;hellohello&quot;</span><br><span class="line">&#39;na&#39;.repeat(0) &#x2F;&#x2F; &quot;&quot;</span><br></pre></td></tr></table></figure>

<p><strong>参数如果是小数，会被取整。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;na&#39;.repeat(2.9) &#x2F;&#x2F; &quot;nana&quot;</span><br><span class="line">如果repeat的参数是负数或者Infinity，会报错。</span><br><span class="line"></span><br><span class="line">&#39;na&#39;.repeat(Infinity)</span><br><span class="line">&#x2F;&#x2F; RangeError</span><br><span class="line">&#39;na&#39;.repeat(-1)</span><br><span class="line">&#x2F;&#x2F; RangeError</span><br></pre></td></tr></table></figure>

<p>但是，如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于-0，repeat视同为 0。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;na&#39;.repeat(-0.9) &#x2F;&#x2F; &quot;&quot;</span><br><span class="line">参数NaN等同于 0。</span><br><span class="line"></span><br><span class="line">&#39;na&#39;.repeat(NaN) &#x2F;&#x2F; &quot;&quot;</span><br><span class="line">如果repeat的参数是字符串，则会先转换成数字。</span><br><span class="line"></span><br><span class="line">&#39;na&#39;.repeat(&#39;na&#39;) &#x2F;&#x2F; &quot;&quot;</span><br><span class="line">&#39;na&#39;.repeat(&#39;3&#39;) &#x2F;&#x2F; &quot;nanana&quot;</span><br></pre></td></tr></table></figure>

<h2 id="实例方法：padStart-，padEnd"><a href="#实例方法：padStart-，padEnd" class="headerlink" title="实例方法：padStart()，padEnd()"></a>实例方法：padStart()，padEnd()</h2><p>ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。<strong>padStart()用于头部补全，padEnd()用于尾部补全。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;x&#39;.padStart(5, &#39;ab&#39;) &#x2F;&#x2F; &#39;ababx&#39;</span><br><span class="line">&#39;x&#39;.padStart(4, &#39;ab&#39;) &#x2F;&#x2F; &#39;abax&#39;</span><br><span class="line"></span><br><span class="line">&#39;x&#39;.padEnd(5, &#39;ab&#39;) &#x2F;&#x2F; &#39;xabab&#39;</span><br><span class="line">&#39;x&#39;.padEnd(4, &#39;ab&#39;) &#x2F;&#x2F; &#39;xaba&#39;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>padStart()</code>和<code>padEnd()</code>一共接受两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串。</p>
<p>如果原字符串的长度，等于或大于最大长度，则字符串补全不生效，返回原字符串。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;xxx&#39;.padStart(2, &#39;ab&#39;) &#x2F;&#x2F; &#39;xxx&#39;</span><br><span class="line">&#39;xxx&#39;.padEnd(2, &#39;ab&#39;) &#x2F;&#x2F; &#39;xxx&#39;</span><br></pre></td></tr></table></figure>

<p>如果用来补全的字符串与原字符串，两者的长度之和超过了最大长度，则会截去超出位数的补全字符串。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;abc&#39;.padStart(10, &#39;0123456789&#39;)</span><br><span class="line">&#x2F;&#x2F; &#39;0123456abc&#39;</span><br></pre></td></tr></table></figure>

<p><strong>如果省略第二个参数，默认使用空格补全长度。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;x&#39;.padStart(4) &#x2F;&#x2F; &#39;   x&#39;</span><br><span class="line">&#39;x&#39;.padEnd(4) &#x2F;&#x2F; &#39;x   &#39;</span><br></pre></td></tr></table></figure>

<p><code>padStart()</code>的常见用途是为数值补全指定位数。下面代码生成 10 位的数值字符串。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;1&#39;.padStart(10, &#39;0&#39;) &#x2F;&#x2F; &quot;0000000001&quot;</span><br><span class="line">&#39;12&#39;.padStart(10, &#39;0&#39;) &#x2F;&#x2F; &quot;0000000012&quot;</span><br><span class="line">&#39;123456&#39;.padStart(10, &#39;0&#39;) &#x2F;&#x2F; &quot;0000123456&quot;</span><br></pre></td></tr></table></figure>

<p>另一个用途是提示字符串格式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;12&#39;.padStart(10, &#39;YYYY-MM-DD&#39;) &#x2F;&#x2F; &quot;YYYY-MM-12&quot;</span><br><span class="line">&#39;09-12&#39;.padStart(10, &#39;YYYY-MM-DD&#39;) &#x2F;&#x2F; &quot;YYYY-09-12&quot;</span><br></pre></td></tr></table></figure>

<h2 id="实例方法：trimStart-，trimEnd"><a href="#实例方法：trimStart-，trimEnd" class="headerlink" title="实例方法：trimStart()，trimEnd()"></a>实例方法：trimStart()，trimEnd()</h2><p>ES2019 对字符串实例新增了<code>trimStart()</code>和<code>trimEnd()</code>这两个方法。它们的行为与trim()一致，<strong>trimStart()消除字符串头部的空格，trimEnd()消除尾部的空格。它们返回的都是新字符串，不会修改原始字符串</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const s &#x3D; &#39;  abc  &#39;;</span><br><span class="line"></span><br><span class="line">s.trim() &#x2F;&#x2F; &quot;abc&quot;</span><br><span class="line">s.trimStart() &#x2F;&#x2F; &quot;abc  &quot;</span><br><span class="line">s.trimEnd() &#x2F;&#x2F; &quot;  abc&quot;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>trimStart()</code>只消除头部的空格，保留尾部的空格。<code>trimEnd()</code>也是类似行为。</p>
<p>除了空格键，这两个方法对字符串头部（或尾部）的 <code>tab</code> 键、换行符等不可见的空白符号也有效。</p>
<p>浏览器还部署了额外的两个方法，<code>trimLeft()</code>是<code>trimStart()</code>的别名，<code>trimRight()</code>是<code>trimEnd()</code>的别名。</p>
<h2 id="实例方法：matchAll"><a href="#实例方法：matchAll" class="headerlink" title="实例方法：matchAll()"></a>实例方法：matchAll()</h2><p><code>matchAll()</code>方法返回一个正则表达式在当前字符串的所有匹配，详见《正则的扩展》的一章。</p>
]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>正则的拓展</title>
    <url>/2020/04/18/07-%E6%AD%A3%E5%88%99%E7%9A%84%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要内容：</p>
<ul>
<li>RegExp 构造函数</li>
<li>字符串的正则方法</li>
<li>u 修饰符</li>
<li>RegExp.prototype.unicode 属性</li>
<li>y 修饰符</li>
<li>RegExp.prototype.sticky 属性</li>
<li>RegExp.prototype.flags 属性</li>
<li>s 修饰符：dotAll 模式</li>
<li>后行断言</li>
<li>Unicode 属性类</li>
<li>具名组匹配</li>
<li>正则匹配索引</li>
<li>String.prototype.matchAll()<a id="more"></a>
<h2 id="RegExp-构造函数"><a href="#RegExp-构造函数" class="headerlink" title="RegExp 构造函数"></a>RegExp 构造函数</h2></li>
</ul>
<p>在 ES5 中，RegExp构造函数的参数有两种情况。</p>
<p><strong>第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var regex &#x3D; new RegExp(&#39;xyz&#39;, &#39;i&#39;);</span><br><span class="line">&#x2F;&#x2F; 等价于</span><br><span class="line">var regex &#x3D; &#x2F;xyz&#x2F;i;</span><br></pre></td></tr></table></figure>

<p><strong>第二种情况是，参数是一个正则表示式，这时会返回一个原有正则表达式的拷贝。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var regex &#x3D; new RegExp(&#x2F;xyz&#x2F;i);</span><br><span class="line">&#x2F;&#x2F; 等价于</span><br><span class="line">var regex &#x3D; &#x2F;xyz&#x2F;i;</span><br></pre></td></tr></table></figure>

<p>但是，ES5 不允许此时使用第二个参数添加修饰符，否则会报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var regex &#x3D; new RegExp(&#x2F;xyz&#x2F;, &#39;i&#39;);</span><br><span class="line">&#x2F;&#x2F; Uncaught TypeError: Cannot supply flags when constructing one RegExp from another</span><br></pre></td></tr></table></figure>

<p><strong>ES6 改变了这种行为。如果RegExp构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符。而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new RegExp(&#x2F;abc&#x2F;ig, &#39;i&#39;).flags</span><br><span class="line">&#x2F;&#x2F; &quot;i&quot;</span><br></pre></td></tr></table></figure>

<p>上面代码中，原有正则对象的修饰符是<code>ig</code>，它会被第二个参数i覆盖。</p>
<h2 id="字符串的正则方法"><a href="#字符串的正则方法" class="headerlink" title="字符串的正则方法"></a>字符串的正则方法</h2><p>字符串对象共有 4 个方法，可以使用正则表达式：<font style = "color:blue"><strong>match()、replace()、search()和split()</strong></font>。</p>
<p>ES6 将这 4 个方法，在语言内部全部调用RegExp的实例方法，从而做到所有与正则相关的方法，全都定义在RegExp对象上。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String.prototype.match 调用 RegExp.prototype[Symbol.match]</span><br><span class="line">String.prototype.replace 调用 RegExp.prototype[Symbol.replace]</span><br><span class="line">String.prototype.search 调用 RegExp.prototype[Symbol.search]</span><br><span class="line">String.prototype.split 调用 RegExp.prototype[Symbol.split]</span><br></pre></td></tr></table></figure>

<h2 id="u-修饰符"><a href="#u-修饰符" class="headerlink" title="u 修饰符"></a>u 修饰符</h2><p>ES6 对正则表达式添加了<code>u修饰符</code>，含义为“<strong>Unicode 模式</strong>”，用来正确处理大于<code>\uFFFF</code>的 Unicode 字符。也就是说，会正确处理四个字节的 UTF-16 编码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;^\uD83D&#x2F;u.test(&#39;\uD83D\uDC2A&#39;) &#x2F;&#x2F; false</span><br><span class="line">&#x2F;^\uD83D&#x2F;.test(&#39;\uD83D\uDC2A&#39;) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>\uD83D\uDC2A</code>是一个四个字节的 UTF-16 编码，代表一个字符。但是，ES5 不支持四个字节的 UTF-16 编码，会将其识别为两个字符，导致第二行代码结果为true。<strong>加了u修饰符以后，ES6 就会识别其为一个字符</strong>，所以第一行代码结果为false。</p>
<p>一旦加上u修饰符号，就会修改下面这些正则表达式的行为。</p>
<ul>
<li>（1）点字符</li>
</ul>
<p><strong>点（.）字符在正则表达式中，含义是除了换行符以外的任意单个字符</strong>。对于码点大于<code>0xFFFF</code>的 Unicode 字符，点字符不能识别，必须加上u修饰符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var s &#x3D; &#39;𠮷&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;^.$&#x2F;.test(s) &#x2F;&#x2F; false</span><br><span class="line">&#x2F;^.$&#x2F;u.test(s) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>上面代码表示，如果不添加u修饰符，正则表达式就会认为字符串为两个字符，从而匹配失败。</p>
<ul>
<li>（2）Unicode 字符表示法</li>
</ul>
<p><strong>ES6 新增了使用大括号表示 Unicode 字符，这种表示法在正则表达式中必须加上u修饰符</strong>，才能识别当中的大括号，否则会被解读为量词。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;\u&#123;61&#125;&#x2F;.test(&#39;a&#39;) &#x2F;&#x2F; false</span><br><span class="line">&#x2F;\u&#123;61&#125;&#x2F;u.test(&#39;a&#39;) &#x2F;&#x2F; true</span><br><span class="line">&#x2F;\u&#123;20BB7&#125;&#x2F;u.test(&#39;𠮷&#39;) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>上面代码表示，如果不加u修饰符，正则表达式无法识别\u{61}这种表示法，只会认为这匹配 61 个连续的u。</p>
<ul>
<li>（3）量词</li>
</ul>
<p>使用u修饰符后，所有量词都会正确识别码点大于<code>0xFFFF</code>的 Unicode 字符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;a&#123;2&#125;&#x2F;.test(&#39;aa&#39;) &#x2F;&#x2F; true</span><br><span class="line">&#x2F;a&#123;2&#125;&#x2F;u.test(&#39;aa&#39;) &#x2F;&#x2F; true</span><br><span class="line">&#x2F;𠮷&#123;2&#125;&#x2F;.test(&#39;𠮷𠮷&#39;) &#x2F;&#x2F; false</span><br><span class="line">&#x2F;𠮷&#123;2&#125;&#x2F;u.test(&#39;𠮷𠮷&#39;) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<ul>
<li>（4）预定义模式</li>
</ul>
<p>u修饰符也影响到预定义模式，能否正确识别码点大于<code>0xFFFF的</code> Unicode 字符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;^\S$&#x2F;.test(&#39;𠮷&#39;) &#x2F;&#x2F; false</span><br><span class="line">&#x2F;^\S$&#x2F;u.test(&#39;𠮷&#39;) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>上面<strong>代码的<code>\S</code>是预定义模式，匹配所有非空白字符</strong>。只有加了u修饰符，它才能正确匹配码点大于<code>0xFFFF</code>的 Unicode 字符。</p>
<p>利用这一点，可以写出一个正确返回字符串长度的函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function codePointLength(text) &#123;</span><br><span class="line">  var result &#x3D; text.match(&#x2F;[\s\S]&#x2F;gu);</span><br><span class="line">  return result ? result.length : 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var s &#x3D; &#39;𠮷𠮷&#39;;</span><br><span class="line"></span><br><span class="line">s.length &#x2F;&#x2F; 4</span><br><span class="line">codePointLength(s) &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure>

<ul>
<li>（5）i 修饰符</li>
</ul>
<p>有些 Unicode 字符的编码不同，但是字型很相近，比如，\u004B与\u212A都是大写的K。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;[a-z]&#x2F;i.test(&#39;\u212A&#39;) &#x2F;&#x2F; false</span><br><span class="line">&#x2F;[a-z]&#x2F;iu.test(&#39;\u212A&#39;) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>上面代码中，不加u修饰符，就无法识别非规范的K字符。</p>
<ul>
<li>（6）转义</li>
</ul>
<p>没有u修饰符的情况下，正则中没有定义的转义（如逗号的转义,）无效，而在u模式会报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;\,&#x2F; &#x2F;&#x2F; &#x2F;\,&#x2F;</span><br><span class="line">&#x2F;\,&#x2F;u &#x2F;&#x2F; 报错</span><br></pre></td></tr></table></figure>

<p>上面代码中，没有u修饰符时，逗号前面的反斜杠是无效的，加了u修饰符就报错。</p>
<h2 id="RegExp-prototype-unicode-属性"><a href="#RegExp-prototype-unicode-属性" class="headerlink" title="RegExp.prototype.unicode 属性"></a>RegExp.prototype.unicode 属性</h2><p>正则实例对象新增unicode属性，表示是否设置了u修饰符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const r1 &#x3D; &#x2F;hello&#x2F;;</span><br><span class="line">const r2 &#x3D; &#x2F;hello&#x2F;u;</span><br><span class="line"></span><br><span class="line">r1.unicode &#x2F;&#x2F; false</span><br><span class="line">r2.unicode &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>上面代码中，正则表达式是否设置了u修饰符，可以从unicode属性看出来。</p>
<h2 id="y-修饰符"><a href="#y-修饰符" class="headerlink" title="y 修饰符"></a>y 修饰符</h2><p>除了u修饰符，ES6 还为正则表达式添加了<code>y修饰符</code>，叫做<code>“粘连”（sticky）</code>修饰符。</p>
<p><code>y修饰符</code>的作用与<code>g修饰符</code>类似，也是全局匹配，<strong>后一次匹配都从上一次匹配成功的下一个位置开始</strong>。不同之处在于，g修饰符只要剩余位置中存在匹配就可，而y修饰符确保匹配必须从剩余的第一个位置开始，这也就是“粘连”的涵义。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var s &#x3D; &#39;aaa_aa_a&#39;;</span><br><span class="line">var r1 &#x3D; &#x2F;a+&#x2F;g;</span><br><span class="line">var r2 &#x3D; &#x2F;a+&#x2F;y;</span><br><span class="line"></span><br><span class="line">r1.exec(s) &#x2F;&#x2F; [&quot;aaa&quot;]</span><br><span class="line">r2.exec(s) &#x2F;&#x2F; [&quot;aaa&quot;]</span><br><span class="line"></span><br><span class="line">r1.exec(s) &#x2F;&#x2F; [&quot;aa&quot;]</span><br><span class="line">r2.exec(s) &#x2F;&#x2F; null</span><br></pre></td></tr></table></figure>

<p>上面代码有两个正则表达式，一个使用g修饰符，另一个使用y修饰符。这两个正则表达式各执行了两次，第一次执行的时候，两者行为相同，剩余字符串都是_aa_a。由于g修饰没有位置要求，所以第二次执行会返回结果，而y修饰符要求匹配必须从头部开始，所以返回null。</p>
<p>如果改一下正则表达式，保证每次都能头部匹配，y修饰符就会返回结果了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var s &#x3D; &#39;aaa_aa_a&#39;;</span><br><span class="line">var r &#x3D; &#x2F;a+_&#x2F;y;</span><br><span class="line"></span><br><span class="line">r.exec(s) &#x2F;&#x2F; [&quot;aaa_&quot;]</span><br><span class="line">r.exec(s) &#x2F;&#x2F; [&quot;aa_&quot;]</span><br></pre></td></tr></table></figure>

<p>上面代码每次匹配，都是从剩余字符串的头部开始。</p>
<p>使用<code>lastIndex</code>属性，可以更好地说明y修饰符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const REGEX &#x3D; &#x2F;a&#x2F;g;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 指定从2号位置（y）开始匹配</span><br><span class="line">REGEX.lastIndex &#x3D; 2;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 匹配成功</span><br><span class="line">const match &#x3D; REGEX.exec(&#39;xaya&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在3号位置匹配成功</span><br><span class="line">match.index &#x2F;&#x2F; 3</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 下一次匹配从4号位开始</span><br><span class="line">REGEX.lastIndex &#x2F;&#x2F; 4</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 4号位开始匹配失败</span><br><span class="line">REGEX.exec(&#39;xaya&#39;) &#x2F;&#x2F; null</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>lastIndex</code>属性指定每次搜索的开始位置，g修饰符从这个位置开始向后搜索，直到发现匹配为止。</p>
<p>y修饰符同样遵守<code>lastIndex</code>属性，但是要求必须在lastIndex指定的位置发现匹配。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const REGEX &#x3D; &#x2F;a&#x2F;y;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 指定从2号位置开始匹配</span><br><span class="line">REGEX.lastIndex &#x3D; 2;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 不是粘连，匹配失败</span><br><span class="line">REGEX.exec(&#39;xaya&#39;) &#x2F;&#x2F; null</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 指定从3号位置开始匹配</span><br><span class="line">REGEX.lastIndex &#x3D; 3;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 3号位置是粘连，匹配成功</span><br><span class="line">const match &#x3D; REGEX.exec(&#39;xaya&#39;);</span><br><span class="line">match.index &#x2F;&#x2F; 3</span><br><span class="line">REGEX.lastIndex &#x2F;&#x2F; 4</span><br></pre></td></tr></table></figure>

<p>实际上，y修饰符号隐含了头部匹配的标志^。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;b&#x2F;y.exec(&#39;aba&#39;)</span><br><span class="line">&#x2F;&#x2F; null</span><br></pre></td></tr></table></figure>

<p>上面代码由于不能保证头部匹配，所以返回null。<strong>y修饰符的设计本意，就是让头部匹配的标志^在全局匹配中都有效</strong>。</p>
<p>下面是字符串对象的replace方法的例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const REGEX &#x3D; &#x2F;a&#x2F;gy;</span><br><span class="line">&#39;aaxa&#39;.replace(REGEX, &#39;-&#39;) &#x2F;&#x2F; &#39;--xa&#39;</span><br></pre></td></tr></table></figure>

<p>上面代码中，最后一个a因为不是出现在下一次匹配的头部，所以不会被替换。</p>
<p>单单一个y修饰符对match方法，只能返回第一个匹配，必须与g修饰符联用，才能返回所有匹配。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;a1a2a3&#39;.match(&#x2F;a\d&#x2F;y) &#x2F;&#x2F; [&quot;a1&quot;]</span><br><span class="line">&#39;a1a2a3&#39;.match(&#x2F;a\d&#x2F;gy) &#x2F;&#x2F; [&quot;a1&quot;, &quot;a2&quot;, &quot;a3&quot;]</span><br></pre></td></tr></table></figure>

<p>y修饰符的一个应用，是从字符串提取 token（词元），y修饰符确保了匹配之间不会有漏掉的字符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const TOKEN_Y &#x3D; &#x2F;\s*(\+|[0-9]+)\s*&#x2F;y;</span><br><span class="line">const TOKEN_G  &#x3D; &#x2F;\s*(\+|[0-9]+)\s*&#x2F;g;</span><br><span class="line"></span><br><span class="line">tokenize(TOKEN_Y, &#39;3 + 4&#39;)</span><br><span class="line">&#x2F;&#x2F; [ &#39;3&#39;, &#39;+&#39;, &#39;4&#39; ]</span><br><span class="line">tokenize(TOKEN_G, &#39;3 + 4&#39;)</span><br><span class="line">&#x2F;&#x2F; [ &#39;3&#39;, &#39;+&#39;, &#39;4&#39; ]</span><br><span class="line"></span><br><span class="line">function tokenize(TOKEN_REGEX, str) &#123;</span><br><span class="line">  let result &#x3D; [];</span><br><span class="line">  let match;</span><br><span class="line">  while (match &#x3D; TOKEN_REGEX.exec(str)) &#123;</span><br><span class="line">    result.push(match[1]);</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，如果字符串里面没有非法字符，y修饰符与g修饰符的提取结果是一样的。但是，一旦出现非法字符，两者的行为就不一样了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tokenize(TOKEN_Y, &#39;3x + 4&#39;)</span><br><span class="line">&#x2F;&#x2F; [ &#39;3&#39; ]</span><br><span class="line">tokenize(TOKEN_G, &#39;3x + 4&#39;)</span><br><span class="line">&#x2F;&#x2F; [ &#39;3&#39;, &#39;+&#39;, &#39;4&#39; ]</span><br></pre></td></tr></table></figure>

<p>上面代码中，<strong>g修饰符会忽略非法字符，而y修饰符不会，这样就很容易发现错误</strong>。</p>
<h2 id="RegExp-prototype-sticky-属性"><a href="#RegExp-prototype-sticky-属性" class="headerlink" title="RegExp.prototype.sticky 属性"></a>RegExp.prototype.sticky 属性</h2><p>与y修饰符相匹配，ES6 的正则实例对象多了<code>sticky</code>属性，表示是否设置了y修饰符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var r &#x3D; &#x2F;hello\d&#x2F;y;</span><br><span class="line">r.sticky &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<h2 id="RegExp-prototype-flags-属性"><a href="#RegExp-prototype-flags-属性" class="headerlink" title="RegExp.prototype.flags 属性"></a>RegExp.prototype.flags 属性</h2><p>ES6 为正则表达式新增了<code>flags</code>属性，<strong>会返回正则表达式的修饰符</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; ES5 的 source 属性</span><br><span class="line">&#x2F;&#x2F; 返回正则表达式的正文</span><br><span class="line">&#x2F;abc&#x2F;ig.source</span><br><span class="line">&#x2F;&#x2F; &quot;abc&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ES6 的 flags 属性</span><br><span class="line">&#x2F;&#x2F; 返回正则表达式的修饰符</span><br><span class="line">&#x2F;abc&#x2F;ig.flags</span><br><span class="line">&#x2F;&#x2F; &#39;gi&#39;</span><br></pre></td></tr></table></figure>

<h2 id="s-修饰符：dotAll-模式"><a href="#s-修饰符：dotAll-模式" class="headerlink" title="s 修饰符：dotAll 模式"></a>s 修饰符：dotAll 模式</h2><p>正则表达式中，点（.）是一个特殊字符，代表任意的单个字符，但是有两个例外。一个是四个字节的 UTF-16 字符，这个可以用u修饰符解决；另一个是<strong>行终止符</strong>（line terminator character）。</p>
<p>所谓行终止符，就是该字符表示一行的终结。以下四个字符属于“行终止符”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">U+000A 换行符（\n）</span><br><span class="line">U+000D 回车符（\r）</span><br><span class="line">U+2028 行分隔符（line separator）</span><br><span class="line">U+2029 段分隔符（paragraph separator）</span><br><span class="line">&#x2F;foo.bar&#x2F;.test(&#39;foo\nbar&#39;)</span><br><span class="line">&#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>

<p>上面代码中，因为.不匹配\n，所以正则表达式返回false。</p>
<p>但是，很多时候我们希望匹配的是任意单个字符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;foo.bar&#x2F;s.test(&#39;foo\nbar&#39;) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>这被称为dotAll模式，即点（dot）代表一切字符。所以，正则表达式还引入了一个dotAll属性，返回一个布尔值，表示该正则表达式是否处在dotAll模式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const re &#x3D; &#x2F;foo.bar&#x2F;s;</span><br><span class="line">&#x2F;&#x2F; 另一种写法</span><br><span class="line">&#x2F;&#x2F; const re &#x3D; new RegExp(&#39;foo.bar&#39;, &#39;s&#39;);</span><br><span class="line"></span><br><span class="line">re.test(&#39;foo\nbar&#39;) &#x2F;&#x2F; true</span><br><span class="line">re.dotAll &#x2F;&#x2F; true</span><br><span class="line">re.flags &#x2F;&#x2F; &#39;s&#39;</span><br></pre></td></tr></table></figure>

<p><code>/s</code>修饰符和多行修饰符<code>/m</code>不冲突，两者一起使用的情况下，<code>.</code>匹配所有字符，而<code>^</code>和<code>$</code>匹配每一行的行首和行尾。</p>
<h2 id="后行断言"><a href="#后行断言" class="headerlink" title="后行断言"></a>后行断言</h2><p>JavaScript 语言的正则表达式，只支持先行断言（lookahead）和先行否定断言（negative lookahead），不支持后行断言（lookbehind）和后行否定断言（negative lookbehind）。ES2018 引入后行断言，V8 引擎 4.9 版（Chrome 62）已经支持。</p>
<ul>
<li>“先行断言”指的是，x只有在y前面才匹配，必须写成<code>/x(?=y)/</code>。比如，只匹配百分号之前的数字，要写成<code>/\d+(?=%)/</code>。“先行否定断言”指的是，x只有不在y前面才匹配，必须写成<code>/x(?!y)/</code>。比如，只匹配不在百分号之前的数字，要写成<code>/\d+(?!%)/</code>。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;\d+(?&#x3D;%)&#x2F;.exec(&#39;100% of US presidents have been male&#39;)  &#x2F;&#x2F; [&quot;100&quot;]</span><br><span class="line">&#x2F;\d+(?!%)&#x2F;.exec(&#39;that’s all 44 of them&#39;)                 &#x2F;&#x2F; [&quot;44&quot;]</span><br></pre></td></tr></table></figure>

<p>上面两个字符串，如果互换正则表达式，就不会得到相同结果。另外，还可以看到，“先行断言”括号之中的部分<code>（(?=%)）</code>，是不计入返回结果的。</p>
<ul>
<li>“后行断言”正好与“先行断言”相反，x只有在y后面才匹配，必须写成<code>/(?&lt;=y)x/</code>。比如，只匹配美元符号之后的数字，要写成<code>/(?&lt;=\$)\d+/</code>。“后行否定断言”则与“先行否定断言”相反，x只有不在y后面才匹配，必须写成<code>/(?&lt;!y)x/</code>。比如，只匹配不在美元符号后面的数字，要写成<code>/(?&lt;!\$)\d+/</code>。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;(?&lt;&#x3D;\$)\d+&#x2F;.exec(&#39;Benjamin Franklin is on the $100 bill&#39;)  &#x2F;&#x2F; [&quot;100&quot;]</span><br><span class="line">&#x2F;(?&lt;!\$)\d+&#x2F;.exec(&#39;it’s is worth about €90&#39;)                &#x2F;&#x2F; [&quot;90&quot;]</span><br></pre></td></tr></table></figure>

<p>上面的例子中，“后行断言”的括号之中的部分<code>（(?&lt;=\$)）</code>，也是不计入返回结果。</p>
<p>下面的例子是使用后行断言进行字符串替换。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const RE_DOLLAR_PREFIX &#x3D; &#x2F;(?&lt;&#x3D;\$)foo&#x2F;g;</span><br><span class="line">&#39;$foo %foo foo&#39;.replace(RE_DOLLAR_PREFIX, &#39;bar&#39;);</span><br><span class="line">&#x2F;&#x2F; &#39;$bar %foo foo&#39;</span><br></pre></td></tr></table></figure>

<p>上面代码中，只有在美元符号后面的foo才会被替换。</p>
<p>“后行断言”的实现，需要先匹配<code>/(?&lt;=y)x/</code>的<code>x</code>，然后再回到左边，匹配y的部分。这种“先右后左”的执行顺序，与所有其他正则操作相反，导致了一些不符合预期的行为。</p>
<p>首先，后行断言的组匹配，与正常情况下结果是不一样的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;(?&lt;&#x3D;(\d+)(\d+))$&#x2F;.exec(&#39;1053&#39;) &#x2F;&#x2F; [&quot;&quot;, &quot;1&quot;, &quot;053&quot;]</span><br><span class="line">&#x2F;^(\d+)(\d+)$&#x2F;.exec(&#39;1053&#39;) &#x2F;&#x2F; [&quot;1053&quot;, &quot;105&quot;, &quot;3&quot;]</span><br></pre></td></tr></table></figure>

<p>上面代码中，需要捕捉两个组匹配。没有“后行断言”时，第一个括号是贪婪模式，第二个括号只能捕获一个字符，所以结果是105和3。而“后行断言”时，由于执行顺序是从右到左，第二个括号是贪婪模式，第一个括号只能捕获一个字符，所以结果是1和053。</p>
<p>其次，<strong>“后行断言”的反斜杠引用，也与通常的顺序相反，必须放在对应的那个括号之前</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;(?&lt;&#x3D;(o)d\1)r&#x2F;.exec(&#39;hodor&#39;)  &#x2F;&#x2F; null</span><br><span class="line">&#x2F;(?&lt;&#x3D;\1d(o))r&#x2F;.exec(&#39;hodor&#39;)  &#x2F;&#x2F; [&quot;r&quot;, &quot;o&quot;]</span><br></pre></td></tr></table></figure>

<p>上面代码中，如果后行断言的反斜杠引用（\1）放在括号的后面，就不会得到匹配结果，必须放在前面才可以。因为后行断言是先从左到右扫描，发现匹配以后再回过头，从右到左完成反斜杠引用。</p>
<h2 id="Unicode-属性类"><a href="#Unicode-属性类" class="headerlink" title="Unicode 属性类"></a>Unicode 属性类</h2><p>ES2018 引入了一种新的类的写法<code>\p{...}和\P{...}</code>，允许正则表达式匹配符合 Unicode 某种属性的所有字符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const regexGreekSymbol &#x3D; &#x2F;\p&#123;Script&#x3D;Greek&#125;&#x2F;u;</span><br><span class="line">regexGreekSymbol.test(&#39;π&#39;) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>\p{Script=Greek}</code>指定匹配一个希腊文字母，所以匹配π成功。</p>
<p><strong>Unicode 属性类要指定属性名和属性值</strong>。</p>
<p><code>\p{UnicodePropertyName=UnicodePropertyValue}</code></p>
<p>对于某些属性，可以只写属性名，或者只写属性值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\p&#123;UnicodePropertyName&#125;</span><br><span class="line">\p&#123;UnicodePropertyValue&#125;</span><br></pre></td></tr></table></figure>

<p>\P{…}是\p{…}的反向匹配，即匹配不满足条件的字符。</p>
<p>注意，这两种类只对 Unicode 有效，所以使用的时候一定要加上u修饰符。如果不加u修饰符，正则表达式使用\p和\P会报错，ECMAScript 预留了这两个类。</p>
<p>由于 Unicode 的各种属性非常多，所以这种新的类的表达能力非常强。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const regex &#x3D; &#x2F;^\p&#123;Decimal_Number&#125;+$&#x2F;u;</span><br><span class="line">regex.test(&#39;𝟏𝟐𝟑𝟜𝟝𝟞𝟩𝟪𝟫𝟬𝟭𝟮𝟯𝟺𝟻𝟼&#39;) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>上面代码中，属性类指定匹配所有十进制字符，可以看到各种字型的十进制字符都会匹配成功。</p>
<h2 id="具名组匹配"><a href="#具名组匹配" class="headerlink" title="具名组匹配"></a>具名组匹配</h2><p>正则表达式使用圆括号进行组匹配。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const RE_DATE &#x3D; &#x2F;(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)&#x2F;;</span><br></pre></td></tr></table></figure>

<p>上面代码中，正则表达式里面有三组圆括号。使用exec方法，就可以将这三组匹配结果提取出来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const RE_DATE &#x3D; &#x2F;(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)&#x2F;;</span><br><span class="line"></span><br><span class="line">const matchObj &#x3D; RE_DATE.exec(&#39;1999-12-31&#39;);</span><br><span class="line">const year &#x3D; matchObj[1]; &#x2F;&#x2F; 1999</span><br><span class="line">const month &#x3D; matchObj[2]; &#x2F;&#x2F; 12</span><br><span class="line">const day &#x3D; matchObj[3]; &#x2F;&#x2F; 31</span><br></pre></td></tr></table></figure>

<p>组匹配的一个问题是，每一组的匹配含义不容易看出来，而且只能用数字序号（比如matchObj[1]）引用，要是组的顺序变了，引用的时候就必须修改序号。</p>
<p>ES2018 引入了具名组匹配（Named Capture Groups），允许为每一个组匹配指定一个名字，既便于阅读代码，又便于引用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const RE_DATE &#x3D; &#x2F;(?&lt;year&gt;\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;2&#125;)-(?&lt;day&gt;\d&#123;2&#125;)&#x2F;;</span><br><span class="line"></span><br><span class="line">const matchObj &#x3D; RE_DATE.exec(&#39;1999-12-31&#39;);</span><br><span class="line">const year &#x3D; matchObj.groups.year; &#x2F;&#x2F; 1999</span><br><span class="line">const month &#x3D; matchObj.groups.month; &#x2F;&#x2F; 12</span><br><span class="line">const day &#x3D; matchObj.groups.day; &#x2F;&#x2F; 31</span><br></pre></td></tr></table></figure>

<p>上面代码中，“具名组匹配”在圆括号内部，模式的头部添加“问号 + 尖括号 + 组名”（?<code>&lt;year&gt;</code>），然后就可以在<code>exec</code>方法返回结果的groups属性上引用该组名。同时，数字序号（matchObj[1]）依然有效。</p>
<p>具名组匹配等于为每一组匹配加上了 ID，便于描述匹配的目的。如果组的顺序变了，也不用改变匹配后的处理代码。</p>
<p>如果具名组没有匹配，那么对应的groups对象属性会是undefined。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const RE_OPT_A &#x3D; &#x2F;^(?&lt;as&gt;a+)?$&#x2F;;</span><br><span class="line">const matchObj &#x3D; RE_OPT_A.exec(&#39;&#39;);</span><br><span class="line"></span><br><span class="line">matchObj.groups.as &#x2F;&#x2F; undefined</span><br><span class="line">&#39;as&#39; in matchObj.groups &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>上面代码中，具名组as没有找到匹配，那么matchObj.groups.as属性值就是undefined，并且as这个键名在groups是始终存在的。</p>
<h2 id="正则匹配索引"><a href="#正则匹配索引" class="headerlink" title="正则匹配索引"></a>正则匹配索引</h2><p>正则匹配结果的开始位置和结束位置，目前获取并不是很方便。<strong>正则实例</strong>的<code>exec()</code>方法，返回结果有一个<code>index</code>属性，可以获取整个匹配结果的开始位置，但是如果包含组匹配，每个组匹配的开始位置，很难拿到。</p>
<p>现在有一个第三阶段提案，为exec()方法的返回结果加上<code>indices</code>属性，在这个属性上面可以拿到匹配的开始位置和结束位置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const text &#x3D; &#39;zabbcdef&#39;;</span><br><span class="line">const re &#x3D; &#x2F;ab&#x2F;;</span><br><span class="line">const result &#x3D; re.exec(text);</span><br><span class="line"></span><br><span class="line">result.index &#x2F;&#x2F; 1</span><br><span class="line">result.indices &#x2F;&#x2F; [ [1, 3] ]</span><br></pre></td></tr></table></figure>

<p>上面例子中，<code>exec()</code>方法的返回结果result，<strong>它的index属性是整个匹配结果（ab）的开始位置，而它的<code>indices</code>属性是一个数组，成员是每个匹配的开始位置和结束位置的数组</strong>。由于该例子的正则表达式没有组匹配，所以<code>indices</code>数组只有一个成员，表示整个匹配的开始位置是1，结束位置是3。</p>
<p>注意，开始位置包含在匹配结果之中，但是结束位置不包含在匹配结果之中。比如，匹配结果为ab，分别是原始字符串的第1位和第2位，那么结束位置就是第3位。</p>
<p>如果正则表达式包含组匹配，那么<code>indices</code>属性对应的数组就会包含多个成员，提供每个组匹配的开始位置和结束位置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const text &#x3D; &#39;zabbcdef&#39;;</span><br><span class="line">const re &#x3D; &#x2F;ab+(cd)&#x2F;;</span><br><span class="line">const result &#x3D; re.exec(text);</span><br><span class="line"></span><br><span class="line">result.indices &#x2F;&#x2F; [ [ 1, 6 ], [ 4, 6 ] ]</span><br></pre></td></tr></table></figure>

<p>上面例子中，正则表达式包含一个组匹配，那么indices属性数组就有两个成员，第一个成员是整个匹配结果（abbcd）的开始位置和结束位置，第二个成员是组匹配（cd）的开始位置和结束位置。</p>
<p>下面是多个组匹配的例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const text &#x3D; &#39;zabbcdef&#39;;</span><br><span class="line">const re &#x3D; &#x2F;ab+(cd(ef))&#x2F;;</span><br><span class="line">const result &#x3D; re.exec(text);</span><br><span class="line"></span><br><span class="line">result.indices &#x2F;&#x2F; [ [1, 8], [4, 8], [6, 8] ]</span><br></pre></td></tr></table></figure>

<p>上面例子中，正则表达式包含两个组匹配，所以indices属性数组就有三个成员。</p>
<p>如果正则表达式包含具名组匹配，indices属性数组还会有一个groups属性。该属性是一个对象，可以从该对象获取具名组匹配的开始位置和结束位置。</p>
<p>如果获取组匹配不成功，indices属性数组的对应成员则为undefined，indices.groups属性对象的对应成员也是undefined。</p>
<h2 id="String-prototype-matchAll"><a href="#String-prototype-matchAll" class="headerlink" title="String.prototype.matchAll()"></a>String.prototype.matchAll()</h2><p>如果一个正则表达式在字符串里面有多个匹配，现在一般使用g修饰符或y修饰符，在循环里面逐一取出。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var regex &#x3D; &#x2F;t(e)(st(\d?))&#x2F;g;</span><br><span class="line">var string &#x3D; &#39;test1test2test3&#39;;</span><br><span class="line"></span><br><span class="line">var matches &#x3D; [];</span><br><span class="line">var match;</span><br><span class="line">while (match &#x3D; regex.exec(string)) &#123;</span><br><span class="line">  matches.push(match);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">matches</span><br><span class="line">&#x2F;&#x2F; [</span><br><span class="line">&#x2F;&#x2F;   [&quot;test1&quot;, &quot;e&quot;, &quot;st1&quot;, &quot;1&quot;, index: 0, input: &quot;test1test2test3&quot;],</span><br><span class="line">&#x2F;&#x2F;   [&quot;test2&quot;, &quot;e&quot;, &quot;st2&quot;, &quot;2&quot;, index: 5, input: &quot;test1test2test3&quot;],</span><br><span class="line">&#x2F;&#x2F;   [&quot;test3&quot;, &quot;e&quot;, &quot;st3&quot;, &quot;3&quot;, index: 10, input: &quot;test1test2test3&quot;]</span><br><span class="line">&#x2F;&#x2F; ]</span><br></pre></td></tr></table></figure>

<p>上面代码中，while循环取出每一轮的正则匹配，一共三轮。</p>
<p>ES2020 增加了String.prototype.matchAll()方法，可以一次性取出所有匹配。不过，它返回的是一个遍历器（Iterator），而不是数组。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const string &#x3D; &#39;test1test2test3&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; g 修饰符加不加都可以</span><br><span class="line">const regex &#x3D; &#x2F;t(e)(st(\d?))&#x2F;g;</span><br><span class="line"></span><br><span class="line">for (const match of string.matchAll(regex)) &#123;</span><br><span class="line">  console.log(match);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; [&quot;test1&quot;, &quot;e&quot;, &quot;st1&quot;, &quot;1&quot;, index: 0, input: &quot;test1test2test3&quot;]</span><br><span class="line">&#x2F;&#x2F; [&quot;test2&quot;, &quot;e&quot;, &quot;st2&quot;, &quot;2&quot;, index: 5, input: &quot;test1test2test3&quot;]</span><br><span class="line">&#x2F;&#x2F; [&quot;test3&quot;, &quot;e&quot;, &quot;st3&quot;, &quot;3&quot;, index: 10, input: &quot;test1test2test3&quot;]</span><br></pre></td></tr></table></figure>

<p>上面代码中，由于<code>string.matchAll(regex)</code>返回的是遍历器，所以可以用<code>for...of</code>循环取出。相对于返回数组，返回遍历器的好处在于，如果匹配结果是一个很大的数组，那么遍历器比较节省资源。</p>
<p>遍历器转为数组是非常简单的，使用…运算符和Array.from()方法就可以了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 转为数组方法一</span><br><span class="line">[...string.matchAll(regex)]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 转为数组方法二</span><br><span class="line">Array.from(string.matchAll(regex))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>运算符</title>
    <url>/2020/04/18/06-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<hr>
<h2 id="运算符的定义和分类"><a href="#运算符的定义和分类" class="headerlink" title="运算符的定义和分类"></a>运算符的定义和分类</h2><h3 id="运算符的定义"><a href="#运算符的定义" class="headerlink" title="运算符的定义"></a>运算符的定义</h3><p><strong>运算符</strong>：也叫操作符，是一种符号。通过运算符可以对一个或多个值进行运算，并获取运算结果。</p>
<p><strong>表达式</strong>：由数字、运算符、变量的组合（组成的式子）。</p>
<p>表达式最终都会有一个运算结果，我们将这个结果称为表达式的<strong>返回值</strong>。</p>
<p>比如：<code>+</code>、<code>*</code>、<code>/</code>、<code>(</code> 都是<strong>运算符</strong>，而<code>（3+5）/2</code>则是<strong>表达式</strong>。</p>
<p>比如：typeof 就是运算符，可以来获得一个值的类型。它会将该值的类型以<strong>字符串</strong>的形式返回，返回值可以是 number string boolean undefined object。</p>
<a id="more"></a>

<h3 id="运算符的分类"><a href="#运算符的分类" class="headerlink" title="运算符的分类"></a>运算符的分类</h3><p>JS 中的运算符，分类如下：</p>
<ul>
<li><p>算数运算符</p>
</li>
<li><p>自增/自减运算符</p>
</li>
<li><p>一元运算符</p>
</li>
<li><p>逻辑运算符</p>
</li>
<li><p>赋值运算符</p>
</li>
<li><p>比较运算符</p>
</li>
<li><p>三元运算符（条件运算符）</p>
</li>
</ul>
<p>下面来逐一讲解。</p>
<h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p><strong>算术运算符</strong>：用于执行两个变量或值的算术运算。</p>
<p>常见的算数运算符有以下几种：</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">+</td>
<td align="center">加、字符串连接</td>
</tr>
<tr>
<td align="left">-</td>
<td align="center">减</td>
</tr>
<tr>
<td align="left">*</td>
<td align="center">乘</td>
</tr>
<tr>
<td align="left">/</td>
<td align="center">除</td>
</tr>
<tr>
<td align="left">%</td>
<td align="center">获取余数（取余、取模）</td>
</tr>
</tbody></table>
<p><strong>求余的举例</strong>：</p>
<p>假设用户输入345，怎么分别得到3、4、5这三个数呢？</p>
<p><strong>答案</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">得到3的方法：345 除以100，得到3.45然后取整，得到3。即：parseInt(345&#x2F;100)</span><br><span class="line"></span><br><span class="line">得到4的方法：345 除以100，余数是45，除以10，得到4.5，取整。即：parseInt(345 % 100 &#x2F; 10)</span><br><span class="line"></span><br><span class="line">得到5的方法：345 除以10，余数就是5。即：345 % 10</span><br></pre></td></tr></table></figure>

<h3 id="算数运算符的运算规则"><a href="#算数运算符的运算规则" class="headerlink" title="算数运算符的运算规则"></a>算数运算符的运算规则</h3><p>（1）先算乘除、后算加减。</p>
<p>（2）小括号<code>( )</code>：能够影响计算顺序，且可以嵌套。没有中括号、没有大括号，只有小括号。</p>
<p>（3）百分号：取余。只关心余数。</p>
<p>举例1：(取余)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> % <span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<p>输出结果为3。</p>
<p>举例2：（注意运算符的优先级）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> + <span class="number">2</span> * <span class="number">3</span> % <span class="number">4</span> / <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>结果分析：</p>
<p>原式 =  1 + 6 % 4 / 3 = 1 + 2 / 3 = 1.66666666666666</p>
<p><strong>补充</strong>：关于算数运算符的注意事项，详见上一篇文章里的“<strong>数据类型转换</strong>”的知识点。</p>
<h3 id="浮点数运算的精度问题"><a href="#浮点数运算的精度问题" class="headerlink" title="浮点数运算的精度问题"></a>浮点数运算的精度问题</h3><p>浮点数值的最高精度是 17 位小数，但在进行算术计算时，会丢失精度，导致计算不够准确。比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0.1</span> + <span class="number">0.2</span>); <span class="comment">// 运算结果不是 0.3，而是 0.30000000000000004</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0.07</span> * <span class="number">100</span>); <span class="comment">// 运算结果不是 7，而是 7.000000000000001</span></span><br></pre></td></tr></table></figure>

<p>因此，<strong>不要直接判断两个浮点数是否相等</strong>。</p>
<h2 id="自增和自减"><a href="#自增和自减" class="headerlink" title="自增和自减"></a>自增和自减</h2><h3 id="自增"><a href="#自增" class="headerlink" title="自增 ++"></a>自增 <code>++</code></h3><p>自增分成两种：<code>a++</code>和<code>++a</code>。</p>
<p>（1）一个变量自增以后，原变量的值会<strong>立即</strong>自增1。也就是说，无论是 <code>a++</code> 还是<code>++a</code>，都会立即使原变量的值自增1。</p>
<p>（2）<strong>我们要注意的是</strong>：<code>a</code>是变量，而<code>a++</code>和<code>++a</code>是<strong>表达式</strong>。</p>
<p>那这两种自增，有啥区别呢？区别是：<code>a++</code> 和 <code>++a</code>的值不同：（也就是说，表达式的值不同）</p>
<ul>
<li><p><code>a++</code>这个表达式的值等于原变量的值（a自增前的值）。你可以这样理解：先把 a 的值赋值给表达式，然后 a 再自增。</p>
</li>
<li><p><code>++a</code>这个表达式的值等于新值 （a自增后的值）。 你可以这样理解：a 先自增，然后再把自增后的值赋值给表达式。</p>
</li>
</ul>
<h3 id="自减"><a href="#自减" class="headerlink" title="自减 --"></a>自减 <code>--</code></h3><p>原理同上。</p>
<p>开发时，大多使用后置的自增/自减，并且代码独占一行，例如：<code>num++</code>，或者 <code>num--</code>。</p>
<h3 id="代码举例"><a href="#代码举例" class="headerlink" title="代码举例"></a>代码举例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> n2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result1 = n1++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(n1); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(result1); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">result = ++n1;</span><br><span class="line"><span class="built_in">console</span>.log(n1); <span class="comment">//12</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result2 = n2--;</span><br><span class="line"><span class="built_in">console</span>.log(n2); <span class="comment">// 19</span></span><br><span class="line"><span class="built_in">console</span>.log(result2); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line">result2 = --n2;</span><br><span class="line"><span class="built_in">console</span>.log(n2); <span class="comment">// 18</span></span><br><span class="line"><span class="built_in">console</span>.log(result2); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure>



<h2 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h2><p>一元运算符，只需要一个操作数。</p>
<p>常见的一元运算符如下。</p>
<h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>typeof就是典型的一元运算符，因为后面只跟一个操作数。</p>
<p>举例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'123'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">// 打印结果：string</span></span><br></pre></td></tr></table></figure>


<h3 id="正号"><a href="#正号" class="headerlink" title="正号 +"></a>正号 <code>+</code></h3><p>（1）正号不会对数字产生任何影响。比如说，<code>2</code>和<code>+2</code>是一样的。</p>
<p>（2）我们可以对一个其他的数据类型使用<code>+</code>，来将其转换为number【重要的小技巧】。比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line">a = +a;   <span class="comment">// 注意这行代码的一元运算符操作</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a：'</span> + a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'-----------------'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'18'</span>;</span><br><span class="line">b = +b;   <span class="comment">// 注意这行代码的一元运算符操作</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'b：'</span> + b);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b);</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a：1</span><br><span class="line">number</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">b：18</span><br><span class="line">number</span><br></pre></td></tr></table></figure>

<h3 id="负号"><a href="#负号" class="headerlink" title="负号 -"></a>负号 <code>-</code></h3><p>负号可以对数字进行取反。</p>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符有三个：</p>
<ul>
<li><p><code>&amp;&amp;</code>     与（且）：两个都为真，结果才为真。</p>
</li>
<li><p><code>||</code>    或：只要有一个是真，结果就是真。</p>
</li>
<li><p><code>!</code>        非：对一个布尔值进行取反。</p>
</li>
</ul>
<p><strong>连比的写法：</strong></p>
<p>来看看逻辑运算符连比的写法。</p>
<p>举例1：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> &lt; <span class="number">2</span> &amp;&amp; <span class="number">2</span> &lt; <span class="number">4</span>);</span><br></pre></td></tr></table></figure>

<p>输出结果为false。</p>
<p>举例2：（判断一个人的年龄是否在18~60岁之间）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = prompt(<span class="string">"请输入您的年龄"</span>);</span><br><span class="line">alert(a&gt;=<span class="number">18</span> &amp;&amp; a&lt;= <span class="number">65</span>);</span><br></pre></td></tr></table></figure>


<p>PS：上面的这个<code>a&gt;=18 &amp;&amp; a&lt;= 65</code>千万别想当然的写成<code>18&lt;= a &lt;= 65</code>，没有这种语法。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>（1）能参与逻辑运算的，都是布尔值。</p>
<p>（2）JS中的<code>&amp;&amp;</code>属于<strong>短路</strong>的与，如果第一个值为false，则不会看第二个值。举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一个值为true，会检查第二个值</span></span><br><span class="line"><span class="literal">true</span> &amp;&amp; alert(<span class="string">"看我出不出来！！"</span>);  <span class="comment">// 可以弹出 alert 框</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个值为false，不会检查第二个值</span></span><br><span class="line"><span class="literal">false</span> &amp;&amp; alert(<span class="string">"看我出不出来！！"</span>); <span class="comment">// 不会弹出 alert 框</span></span><br></pre></td></tr></table></figure>

<p>（3）JS中的<code>||</code>属于<strong>短路</strong>的或，如果第一个值为true，则不会看第二个值。举例：</p>
<p>（4）如果对<strong>非布尔值</strong>进行逻辑运算，则会<strong>先将其转换为布尔值</strong>，然后再操作。举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">a = !a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">// boolean</span></span><br></pre></td></tr></table></figure>

<p>上面的例子，我们可以看到，对非布尔值进行<code>!</code>操作之后，返回结果为布尔值。</p>
<h3 id="非布尔值的与或运算【重要】"><a href="#非布尔值的与或运算【重要】" class="headerlink" title="非布尔值的与或运算【重要】"></a>非布尔值的与或运算【重要】</h3><blockquote>
<p>之所以重要，是因为在实际开发中，我们经常用这种代码做容错处理或者兜底处理。</p>
</blockquote>
<p>非布尔值进行<strong>与或运算</strong>时，会先将其转换为布尔值，然后再运算，但返回结果是<strong>原值</strong>。比如说：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">5</span> &amp;&amp; <span class="number">6</span>; <span class="comment">// 运算过程：true &amp;&amp; true;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'result：'</span> + result); <span class="comment">// 打印结果：6（也就是说最后面的那个值。）</span></span><br></pre></td></tr></table></figure>

<p>上方代码可以看到，虽然运算过程为布尔值的运算，但返回结果是原值。</p>
<p>那么，返回结果是哪个原值呢？我们来看一下。</p>
<p><strong>与运算</strong>的返回结果：（以两个非布尔值的运算为例）</p>
<ul>
<li><p>如果第一个值为false，则直接返回第一个值；不会再往后执行。</p>
</li>
<li><p>如果第一个值为true，则返回第二个值（如果所有的值都为true，则返回的是最后一个值）。</p>
</li>
</ul>
<p><strong>或运算</strong>的返回结果：（以两个非布尔值的运算为例）</p>
<ul>
<li><p>如果第一个值为true，则直接返回第一个值；不会再往后执行。</p>
</li>
<li><p>如果第一个值为false，则返回第二个值（（如果所有的值都为false，则返回的是最后一个值）。</p>
</li>
</ul>
<p>实际开发中，我们经常是这样来做「容错处理」的：</p>
<p>当成功调用一个接口后，返回的数据为 result 对象。这个时候，我们用变量 a 来接收 result 里的图片资源。通常的写法是这样的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (result.resultCode == <span class="number">0</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> a = result &amp;&amp; result.data &amp;&amp; result.data.imgUrl || <span class="string">'http://img.smyhvae.com/20160401_01.jpg'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上方代码的意思是，获取返回结果中的<code>result.data.imgUrl</code>这个图片资源；如果返回结果中没有 <code>result.data.imgUrl</code> 这个字段，就用 <code>http://img.smyhvae.com/20160401_01.jpg</code> 作为<strong>兜底</strong>图片。这种写法，在实际开发中经常用到。</p>
<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>可以将符号右侧的值赋值给符号左侧的变量。</p>
<p>举例：</p>
<ul>
<li><p><code>=</code> 直接赋值。比如 <code>var a = 5</code></p>
</li>
<li><p><code>+=</code>。a += 5 等价于 a = a + 5</p>
</li>
<li><p><code>-=</code>。a -= 5 等价于 a = a - 5</p>
</li>
<li><p><code>*=</code>。a *= 5 等价于 a = a * 5</p>
</li>
<li><p><code>/=</code>。a /= 5 等价于 a = a / 5</p>
</li>
<li><p><code>%=</code>。a %= 5 等价于 a = a % 5</p>
</li>
</ul>
<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>比较运算符可以比较两个值之间的大小关系，如果关系成立它会返回true，如果关系不成立则返回false。</p>
<p>比较运算符有很多种，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;	大于号</span><br><span class="line">&lt;	小于号</span><br><span class="line">&gt;&#x3D; 	大于或等于</span><br><span class="line">&lt;&#x3D;  小于或等于</span><br><span class="line">&#x3D;&#x3D; 	等于</span><br><span class="line">&#x3D;&#x3D;&#x3D; 全等于</span><br><span class="line">!&#x3D;	不等于</span><br><span class="line">!&#x3D;&#x3D; 不全等于</span><br></pre></td></tr></table></figure>

<p><strong>比较运算符，得到的结果都是布尔值：要么是true，要么是false</strong>。</p>
<p>举例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">5</span> &gt; <span class="number">10</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="非数值的比较"><a href="#非数值的比较" class="headerlink" title="非数值的比较"></a>非数值的比较</h3><p>（1）对于非数值进行比较时，会将其转换为数字然后再比较。</p>
<p>举例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> &gt; <span class="literal">true</span>); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> &gt;= <span class="literal">true</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> &gt; <span class="string">"0"</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(10 &gt; null); //true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//任何值和NaN做任何比较都是false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> &lt;= <span class="string">"hello"</span>); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> &gt; <span class="literal">false</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>（2）特殊情况：如果符号两侧的值都是字符串时，<strong>不会</strong>将其转换为数字进行比较。比较两个字符串时，比较的是字符串的<strong>Unicode编码</strong>。【非常重要，这里是个大坑，很容易踩到】</p>
<p>比较字符编码时，是一位一位进行比较。如果两位一样，则比较下一位。</p>
<p>比如说，当你尝试去比较<code>&quot;123&quot;</code>和<code>&quot;56&quot;</code>这两个字符串时，你会发现，字符串”56”竟然比字符串”123”要大。也就是说，下面这样代码的打印结果，其实是true:（这个我们一定要注意，在日常开发中，很容易忽视）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 比较两个字符串时，比较的是字符串的字符编码，所以可能会得到不可预期的结果</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"56"</span> &gt; <span class="string">"123"</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>因此</strong>：当我们在比较两个字符串型的数字时，<strong>一定一定要先转型</strong>再比较大小，比如 <code>parseInt()</code>。</p>
<p>（3）任何值和NaN做任何比较都是false。</p>
<h3 id="符号的强调"><a href="#符号的强调" class="headerlink" title="==符号的强调"></a><code>==</code>符号的强调</h3><p>注意<code>==</code>这个符号，它是<strong>判断是否等于</strong>，而不是赋值。</p>
<p>（1）<code>==</code>这个符号，还可以验证字符串是否相同。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"我爱你中国"</span> == <span class="string">"我爱你中国"</span>);		<span class="comment">// 输出结果为true</span></span><br></pre></td></tr></table></figure>

<p>（2）<code>==</code>这个符号并不严谨，会做隐式转换，将不同的数据类型，<strong>转为相同类型</strong>进行比较（大部分情况下，都是转换为数字）。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"6"</span> == <span class="number">6</span>);		<span class="comment">// 打印结果：true。这里的字符串"6"会先转换为数字6，然后再进行比较</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> == <span class="string">"1"</span>);   <span class="comment">// 打印结果：true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> == <span class="number">-0</span>);       <span class="comment">// 打印结果：true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="number">0</span>);   <span class="comment">// 打印结果：false</span></span><br></pre></td></tr></table></figure>

<p>（3）undefined 衍生自 null，所以这两个值做相等判断时，会返回true。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> == <span class="literal">null</span>);  <span class="comment">//打印结果：true。</span></span><br></pre></td></tr></table></figure>

<p>（4）NaN不和任何值相等，包括他本身。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> == <span class="literal">NaN</span>); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>问题：那如果我想判断  b的值是否为NaN，该怎么办呢？</p>
<p>答案：可以通过isNaN()函数来判断一个值是否是NaN。举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(b));</span><br></pre></td></tr></table></figure>

<p>如上方代码所示，如果 b 为 NaN，则返回true；否则返回false。</p>
<h3 id="全等符号的强调"><a href="#全等符号的强调" class="headerlink" title="===全等符号的强调"></a><code>===</code>全等符号的强调</h3><p><strong>全等在比较时，不会做类型转换</strong>。如果要保证<strong>绝对等于（完全等于），即数值和类型完全相等</strong>，我们就要用三个等号<code>===</code>。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"6"</span> === <span class="number">6</span>);		<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">6</span> === <span class="number">6</span>);		<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>上述内容分析出：</p>
<ul>
<li><p><code>==</code>两个等号，不严谨，”6”和6是true。</p>
</li>
<li><p><code>===</code>三个等号，严谨，”6”和6是false。</p>
</li>
</ul>
<p>另外还有：<strong><code>==</code>的反面是<code>!=</code>，<code>===</code>的反面是<code>!==</code></strong>。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> != <span class="number">8</span>);	<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> != <span class="string">"3"</span>);	<span class="comment">//false，因为3=="3"是true，所以反过来就是false。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> !== <span class="string">"3"</span>);	<span class="comment">//true，应为3==="3"是false，所以反过来是true。</span></span><br></pre></td></tr></table></figure>

<h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>三元运算符也叫条件运算符。</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">条件表达式 ? 语句1 : 语句2;</span><br></pre></td></tr></table></figure>

<p><strong>执行的流程</strong>：</p>
<p>条件运算符在执行时，首先对条件表达式进行求值：</p>
<ul>
<li><p>如果该值为true，则执行语句1，并返回执行结果</p>
</li>
<li><p>如果该值为false，则执行语句2，并返回执行结果</p>
</li>
</ul>
<p>如果条件的表达式的求值结果是一个非布尔值，会将其转换为布尔值然后再运算。</p>
<h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><p>运算符的优先级如下：（优先级从高到低）</p>
<ul>
<li><p><code>.</code>、<code>[]</code>、<code>new</code></p>
</li>
<li><p><code>()</code></p>
</li>
<li><p><code>++</code>、<code>--</code></p>
</li>
<li><p><code>!</code>、<code>~</code>、<code>+</code>（单目）、<code>-</code>（单目）、<code>typeof</code>、<code>void</code>、<code>delete</code></p>
</li>
<li><p><code>%</code>、<code>*</code>、<code>/</code></p>
</li>
<li><p><code>+</code>（双目）、<code>-</code>（双目）</p>
</li>
<li><p><code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>&gt;&gt;&gt;</code></p>
</li>
<li><p>关系运算符：<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code></p>
</li>
<li><p><code>==</code>、<code>!==</code>、<code>===</code>、<code>!==</code></p>
</li>
<li><p><code>&amp;</code></p>
</li>
<li><p><code>^</code></p>
</li>
<li><p><code>|</code></p>
</li>
<li><p><code>&amp;&amp;</code></p>
</li>
<li><p><code>||</code></p>
</li>
<li><p><code>?:</code></p>
</li>
<li><p><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>&lt;&lt;=</code>、<code>&gt;&gt;=</code>、<code>&gt;&gt;&gt;=</code>、<code>&amp;=</code>、<code>^=</code>、<code>|=</code></p>
</li>
<li><p><code>,</code></p>
</li>
</ul>
<p>注意：逻辑与 <code>&amp;&amp;</code> 比逻辑或 <code>||</code> 的优先级更高。</p>
<p>备注：你在实际写代码的时候，如果不清楚哪个优先级更高，可以把括号运用上。</p>
<h2 id="Unicode-编码"><a href="#Unicode-编码" class="headerlink" title="Unicode 编码"></a>Unicode 编码</h2><blockquote>
<p>这一段中，我们来讲引申的内容：Unicode编码的使用。</p>
</blockquote>
<p>各位同学可以先在网上查一下“Unicode 编码表”。</p>
<p>1、在字符串中可以使用转义字符输入Unicode编码。格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\u四位编码</span><br></pre></td></tr></table></figure>

<p>举例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"\u2600"</span>);  <span class="comment">// 这里的 2600 采用的是16进制</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"\u2602"</span>);  <span class="comment">// 这里的 2602 采用的是16进制。</span></span><br></pre></td></tr></table></figure>


<p>2、我们还可以在 HTML 网页中使用Unicode编码。格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;#四位编码;</span><br></pre></td></tr></table></figure>

<p>PS：我们知道，Unicode编码采用的是16进制，但是，这里的编码需要使用10进制。</p>
<p>举例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"font-size: 100px;"</span>&gt;</span><span class="symbol">&amp;#9860;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-Cookies</title>
    <url>/2020/04/18/08-JavaScript-Cookies/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Cookie 让您<strong>在网页中存储用户信息</strong>。</p>
<a id="more"></a>
<h2 id="什么是-cookie？"><a href="#什么是-cookie？" class="headerlink" title="什么是 cookie？"></a>什么是 cookie？</h2><p>Cookie 是在您的计算机上存储在小的文本文件中的数据。</p>
<p>当 web 服务器向浏览器发送网页后，连接被关闭，服务器会忘记用户的一切。</p>
<p><strong>Cookie 是为了解决“如何记住用户信息”而发明的：</strong></p>
<p>当用户访问网页时，他的名字可以存储在 cookie 中。<br>下次用户访问该页面时，cookie 会“记住”他的名字。</p>
<p>Cookie 保存在名称值对中，如：</p>
<p><code>username = Bill Gates</code></p>
<p>当浏览器从服务器请求一个网页时，将属于该页的 cookie 添加到该请求中。这样服务器就获得了必要的数据来“记住”用户的信息。</p>
<p>如果浏览器已关闭本地 cookie 支持，则以下实例均无法工作。</p>
<h2 id="通过-JavaScript-创建-cookie"><a href="#通过-JavaScript-创建-cookie" class="headerlink" title="通过 JavaScript 创建 cookie"></a>通过 JavaScript 创建 cookie</h2><p>JavaScript 可以用 <code>document.cookie</code> <strong>属性创建、读取、删除 cookie</strong>。</p>
<p>通过 JavaScript，可以这样创建 cookie：</p>
<p><code>document.cookie = &quot;username=Bill Gates&quot;;</code></p>
<p>您还可以添加有效日期expires（UTC 时间）。默认情况下，在浏览器关闭时会删除 cookie：Expires这个是代表当前时间的，这个属性已经逐渐被Max-Age所取代.</p>
<p><code>document.cookie = &quot;username=John Doe; expires=Sun, 31 Dec 2017 12:00:00 UTC&quot;;</code></p>
<p>通过 path 参数，您可以告诉浏览器 cookie 属于什么路径。默认情况下，cookie 属于当前页。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.cookie &#x3D; &quot;username&#x3D;Bill Gates; expires&#x3D;Sun, 31 Dec 2017 12:00:00 UTC; path&#x3D;&#x2F;&quot;;</span><br></pre></td></tr></table></figure>

<h2 id="通过-JavaScript-读取-cookie"><a href="#通过-JavaScript-读取-cookie" class="headerlink" title="通过 JavaScript 读取 cookie"></a>通过 JavaScript 读取 cookie</h2><p>通过 JavaScript，可以这样读取 cookie：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x &#x3D; document.cookie;</span><br></pre></td></tr></table></figure>

<p>document.cookie 会在一条字符串中返回所有 cookie，比如：cookie1=value; cookie2=value; cookie3=value;</p>
<h2 id="通过-JavaScript-改变-cookie"><a href="#通过-JavaScript-改变-cookie" class="headerlink" title="通过 JavaScript 改变 cookie"></a>通过 JavaScript 改变 cookie</h2><p>通过使用 JavaScript，你可以像你创建 cookie 一样改变它：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.cookie &#x3D; &quot;username&#x3D;Steve Jobs; expires&#x3D;Sun, 31 Dec 2017 12:00:00 UTC; path&#x3D;&#x2F;&quot;;</span><br></pre></td></tr></table></figure>
<p>旧 cookie 被覆盖。</p>
<h2 id="通过-JavaScript-删除-cookie"><a href="#通过-JavaScript-删除-cookie" class="headerlink" title="通过 JavaScript 删除 cookie"></a>通过 JavaScript 删除 cookie</h2><p>删除 cookie 非常简单。</p>
<p>删除 cookie 时不必指定 cookie 值：</p>
<p><strong>直接把 expires 参数设置为过去的日期即可</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.cookie &#x3D; &quot;username&#x3D;; expires&#x3D;Thu, 01 Jan 1970 00:00:00 UTC; path&#x3D;&#x2F;;&quot;;</span><br></pre></td></tr></table></figure>

<p><strong>您应该定义 cookie 路径以确保删除正确的 cookie。</strong></p>
<p>如果你不指定路径，一些浏览器不会让你删除 cookie。</p>
<h2 id="Cookie-字符串"><a href="#Cookie-字符串" class="headerlink" title="Cookie 字符串"></a>Cookie 字符串</h2><p>document.cookie 属性看起来像一个正常的文本字符串。但它不是。</p>
<p>即使你向 document.cookie 写一份完整的 cookie 字符串，当再次读取时，你只能看到它的名称-值对。</p>
<p>如果设置了新 cookie，则旧的 cookie 不会被覆盖。新的 Cookie 会被添加到 document.cookie，所以如果你读取 document.cookie，你得到的东西会像这样：</p>
<p><code>cookie1 = value; cookie2 = value;</code></p>
<p>显示所有 cookie 创建 cookie 1 创建 cookie 2 删除 cookie 1 删除 cookie 2<br>如果你想找到一个指定 cookie 的值，你必须编写 JavaScript 函数来搜索 cookie 字符串中的 cookie 值。</p>
<h2 id="JavaScript-Cookie-实例"><a href="#JavaScript-Cookie-实例" class="headerlink" title="JavaScript Cookie 实例"></a>JavaScript Cookie 实例</h2><p>在下面的示例中，我们将创建一个 cookie 来存储访问者的名称。</p>
<p>访客第一次到达网页时，会要求他填写姓名。然后将该名称存储在 cookie 中。</p>
<p>下次访客到达同一页时，他将收到一条欢迎消息。</p>
<p>例如，我们将创建 3 个JavaScript函数：</p>
<p>设置 cookie 值的函数</p>
<p>获取 cookie 值的函数</p>
<p>检查 cookie 值的函数</p>
<p>设置 cookie 的函数</p>
<p>首先，我们创建一个函数，将访问者的名字存储在 cookie 变量中：</p>
<p>实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function setCookie(cname, cvalue, exdays) &#123;</span><br><span class="line">    var d &#x3D; new Date();</span><br><span class="line">    d.setTime(d.getTime() + (exdays*24*60*60*1000));</span><br><span class="line">    var expires &#x3D; &quot;expires&#x3D;&quot;+ d.toUTCString();</span><br><span class="line">    document.cookie &#x3D; cname + &quot;&#x3D;&quot; + cvalue + &quot;;&quot; + expires + &quot;;path&#x3D;&#x2F;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例子解释：</p>
<p>上面这个函数的的参数是：cookie 的名字（cname），cookie 的值（cvalue），以及知道 cookie 过期的天数（exdays）。</p>
<p>通过把 cookie 名称、cookie 值和过期字符串相加，该函数就设置了 cookie。</p>
<h2 id="获取-cookie-的函数"><a href="#获取-cookie-的函数" class="headerlink" title="获取 cookie 的函数"></a>获取 cookie 的函数</h2><p>然后，我们创建一个函数返回指定 cookie 的值：</p>
<p>实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getCookie(cname) &#123;</span><br><span class="line">    var name &#x3D; cname + &quot;&#x3D;&quot;;</span><br><span class="line">    var decodedCookie &#x3D; decodeURIComponent(document.cookie);</span><br><span class="line">    var ca &#x3D; decodedCookie.split(&#39;;&#39;);</span><br><span class="line">    for(var i &#x3D; 0; i &lt;ca.length; i++) &#123;</span><br><span class="line">        var c &#x3D; ca[i];</span><br><span class="line">        while (c.charAt(0) &#x3D;&#x3D; &#39; &#39;) &#123;</span><br><span class="line">            c &#x3D; c.substring(1);</span><br><span class="line">         &#125;</span><br><span class="line">         if (c.indexOf(name) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            return c.substring(name.length, c.length);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    return &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数解释：</p>
<p>把 cookie 作为参数（cname）。</p>
<p>创建变量（name）与要搜索的文本（CNAME”=”）。</p>
<p>解码 cookie 字符串，处理带有特殊字符的 cookie，例如 “$”。</p>
<p>用分号把 document.cookie 拆分到名为 ca（decodedCookie.split(‘;’)）的数组中。</p>
<p>遍历 ca 数组（i = 0; i &lt; ca.length; i++），然后读出每个值 c = ca[i]。</p>
<p>如果找到 cookie（c.indexOf(name) == 0），则返回该 cookie 的值（c.substring(name.length, c.length）。</p>
<p>如果未找到 cookie，则返回 “”。</p>
<p>检测 cookie 的函数<br>最后，我们创建检查 cookie 是否设置的函数。</p>
<p>如果已设置 cookie，将显示一个问候。</p>
<p>如果未设置 cookie，会显示一个提示框，询问用户的名字，并存储用户名 cookie 365 天，通过调用 setCookie 函数：</p>
<p>实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function checkCookie() &#123;</span><br><span class="line">    var username &#x3D; getCookie(&quot;username&quot;);</span><br><span class="line">    if (username !&#x3D; &quot;&quot;) &#123;</span><br><span class="line">        alert(&quot;Welcome again &quot; + username);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        username &#x3D; prompt(&quot;Please enter your name:&quot;, &quot;&quot;);</span><br><span class="line">        if (username !&#x3D; &quot;&quot; &amp;&amp; username !&#x3D; null) &#123;</span><br><span class="line">            setCookie(&quot;username&quot;, username, 365);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在组合起来</p>
<p>实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function setCookie(cname, cvalue, exdays) &#123;</span><br><span class="line">    var d &#x3D; new Date();</span><br><span class="line">    d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));</span><br><span class="line">    var expires &#x3D; &quot;expires&#x3D;&quot;+d.toUTCString();</span><br><span class="line">    document.cookie &#x3D; cname + &quot;&#x3D;&quot; + cvalue + &quot;;&quot; + expires + &quot;;path&#x3D;&#x2F;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getCookie(cname) &#123;</span><br><span class="line">    var name &#x3D; cname + &quot;&#x3D;&quot;;</span><br><span class="line">    var ca &#x3D; document.cookie.split(&#39;;&#39;);</span><br><span class="line">    for(var i &#x3D; 0; i &lt; ca.length; i++) &#123;</span><br><span class="line">        var c &#x3D; ca[i];</span><br><span class="line">        while (c.charAt(0) &#x3D;&#x3D; &#39; &#39;) &#123;</span><br><span class="line">            c &#x3D; c.substring(1);</span><br><span class="line">         &#125;</span><br><span class="line">        if (c.indexOf(name)  &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            return c.substring(name.length, c.length);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function checkCookie() &#123;</span><br><span class="line">    var user &#x3D; getCookie(&quot;username&quot;);</span><br><span class="line">    if (user !&#x3D; &quot;&quot;) &#123;</span><br><span class="line">        alert(&quot;Welcome again &quot; + user);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        user &#x3D; prompt(&quot;Please enter your name:&quot;, &quot;&quot;);</span><br><span class="line">        if (user !&#x3D; &quot;&quot; &amp;&amp; user !&#x3D; null) &#123;</span><br><span class="line">            setCookie(&quot;username&quot;, user, 365);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>BOM</category>
      </categories>
      <tags>
        <tag>BOM</tag>
      </tags>
  </entry>
  <entry>
    <title>流程控制：选择结构(if和switch)</title>
    <url>/2020/04/18/07-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%EF%BC%9A%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84%EF%BC%88if%E5%92%8Cswitch%EF%BC%89/</url>
    <content><![CDATA[<hr>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>用<code>{}</code>包围起来的代码，就是代码块。</p>
<p>JS中的代码块，只具有<strong>分组</strong>的作用，没有其他的用途。</p>
<a id="more"></a>
<p>代码块中的内容，在外部是完全可见的。举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    alert(<span class="string">"qianguyihao"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"永不止步"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a = "</span> + a);</span><br></pre></td></tr></table></figure>

<p>打印结果：（可以看出，虽然变量 a 是定义在代码块中的，但是在外部依然可以访问）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">永不止步</span><br><span class="line">a &#x3D; 2</span><br></pre></td></tr></table></figure>


<h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><p>在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。所以，我们必须清楚每条语句的执行流程。而且，很多时候我们要通过控制语句的执行顺序来实现我们要完成的功能。</p>
<h3 id="流程控制语句分类"><a href="#流程控制语句分类" class="headerlink" title="流程控制语句分类"></a>流程控制语句分类</h3><ul>
<li><p>顺序结构</p>
</li>
<li><p>选择结构：if语句、switch语句</p>
</li>
<li><p>循环结构：while语句、for语句</p>
</li>
</ul>
<h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><p>按照代码的先后顺序，依次执行。</p>
<h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p>if语句有以下三种。</p>
<h3 id="1、条件判断语句"><a href="#1、条件判断语句" class="headerlink" title="1、条件判断语句"></a>1、条件判断语句</h3><blockquote>
<p>条件成立才执行。如果条件不成立，那就什么都不做。</p>
</blockquote>
<p>格式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">// 条件为真时，做的事情</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="2、条件分支语句"><a href="#2、条件分支语句" class="headerlink" title="2、条件分支语句"></a>2、条件分支语句</h3><p>格式1：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">// 条件为真时，做的事情</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 条件为假时，做的事情</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>格式2：（多分支的if语句）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 条件1为真时，做的事情</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 条件1不满足，条件2满足时，做的事情</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">// 条件1、2不满足，条件3满足时，做的事情</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 条件1、2、3都不满足时，做的事情</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上所有的语句体中，只执行其中一个。</p>
<h3 id="做个题目"><a href="#做个题目" class="headerlink" title="做个题目"></a>做个题目</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">根据BMI（身体质量指数）显示一个人的体型。</span><br><span class="line">BMI指数，就是体重、身高的一个计算公式。公式是：</span><br><span class="line">BMI &#x3D;体重÷身高的平方</span><br><span class="line"></span><br><span class="line">比如，老师的体重是81.6公斤，身高是1.71米。</span><br><span class="line">那么老师的BMI就是  81.6 ÷ 1.712     等于 27.906022365856163</span><br><span class="line"></span><br><span class="line">过轻：低于18.5</span><br><span class="line">正常：18.5-24.99999999</span><br><span class="line">过重：25-27.9999999</span><br><span class="line">肥胖：28-32</span><br><span class="line">非常肥胖, 高于32</span><br><span class="line"></span><br><span class="line">用JavaScript开发一个程序，让用户先输入自己的体重，然后输入自己的身高（弹出两次prompt框）。</span><br><span class="line">计算它的BMI，根据上表，弹出用户的身体情况。比如“过轻” 、 “正常” 、“过重” 、 “肥胖” 、“非常肥胖”。</span><br></pre></td></tr></table></figure>

<p><strong>答案</strong>：</p>
<p>写法1：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一步，输入身高和体重</span></span><br><span class="line"><span class="keyword">var</span> height = <span class="built_in">parseFloat</span>(prompt(<span class="string">"请输入身高，单位是米"</span>));</span><br><span class="line"><span class="keyword">var</span> weight = <span class="built_in">parseFloat</span>(prompt(<span class="string">"请输入体重，单位是公斤"</span>));</span><br><span class="line"><span class="comment">//第二步，计算BMI指数</span></span><br><span class="line"><span class="keyword">var</span> BMI = weight / <span class="built_in">Math</span>.pow(height, <span class="number">2</span>);</span><br><span class="line"><span class="comment">//第三步，if语句来判断。注意跳楼现象</span></span><br><span class="line"><span class="keyword">if</span> (BMI &lt; <span class="number">18.5</span>) &#123;</span><br><span class="line">    alert(<span class="string">"偏瘦"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (BMI &lt; <span class="number">25</span>) &#123;</span><br><span class="line">    alert(<span class="string">"正常"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (BMI &lt; <span class="number">28</span>) &#123;</span><br><span class="line">    alert(<span class="string">"过重"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (BMI &lt;= <span class="number">32</span>) &#123;</span><br><span class="line">    alert(<span class="string">"肥胖"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">"非常肥胖"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写法2：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一步，输入身高和体重</span></span><br><span class="line"><span class="keyword">var</span> height = <span class="built_in">parseFloat</span>(prompt(<span class="string">"请输入身高，单位是米"</span>));</span><br><span class="line"><span class="keyword">var</span> weight = <span class="built_in">parseFloat</span>(prompt(<span class="string">"请输入体重，单位是公斤"</span>));</span><br><span class="line"><span class="comment">//第二步，计算BMI指数</span></span><br><span class="line"><span class="keyword">var</span> BMI = weight / <span class="built_in">Math</span>.pow(height, <span class="number">2</span>);</span><br><span class="line"><span class="comment">//第三步，if语句来判断。注意跳楼现象</span></span><br><span class="line"><span class="keyword">if</span> (BMI &gt; <span class="number">32</span>) &#123;</span><br><span class="line">    alert(<span class="string">"非常肥胖"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (BMI &gt;= <span class="number">28</span>) &#123;</span><br><span class="line">    alert(<span class="string">"肥胖"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (BMI &gt;= <span class="number">25</span>) &#123;</span><br><span class="line">    alert(<span class="string">"过重"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (BMI &gt;= <span class="number">18.5</span>) &#123;</span><br><span class="line">    alert(<span class="string">"正常"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">"偏瘦"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="if语句的嵌套"><a href="#if语句的嵌套" class="headerlink" title="if语句的嵌套"></a>if语句的嵌套</h3><p>我们通过下面这个例子来引出if语句的嵌套。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个加油站为了鼓励车主多加油，所以加的多有优惠。</span><br><span class="line">92号汽油，每升6元；如果大于等于20升，那么每升5.9；</span><br><span class="line">97号汽油，每升7元；如果大于等于30升，那么每升6.95</span><br><span class="line">编写JS程序，用户输入自己的汽油编号，然后输入自己加多少升，弹出价格。</span><br></pre></td></tr></table></figure>



<p>代码实现如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">	<span class="comment">//第一步，输入</span></span><br><span class="line"><span class="keyword">var</span> bianhao = <span class="built_in">parseInt</span>(prompt(<span class="string">"您想加什么油？填写92或者97"</span>));</span><br><span class="line"><span class="keyword">var</span> sheng = <span class="built_in">parseFloat</span>(prompt(<span class="string">"您想加多少升？"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二步，判断</span></span><br><span class="line"><span class="keyword">if</span> (bianhao == <span class="number">92</span>) &#123;</span><br><span class="line">	<span class="comment">//编号是92的时候做的事情</span></span><br><span class="line">	<span class="keyword">if</span> (sheng &gt;= <span class="number">20</span>) &#123;</span><br><span class="line">		<span class="keyword">var</span> price = sheng * <span class="number">5.9</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">var</span> price = sheng * <span class="number">6</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (bianhao == <span class="number">97</span>) &#123;</span><br><span class="line">	<span class="comment">//编号是97的时候做的事情</span></span><br><span class="line">	<span class="keyword">if</span> (sheng &gt;= <span class="number">30</span>) &#123;</span><br><span class="line">		<span class="keyword">var</span> price = sheng * <span class="number">6.95</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">var</span> price = sheng * <span class="number">7</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	alert(<span class="string">"不好意思，没有这个编号的汽油！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(<span class="string">"价格是"</span> + price);</span><br></pre></td></tr></table></figure>


<h2 id="switch语句（条件分支语句）"><a href="#switch语句（条件分支语句）" class="headerlink" title="switch语句（条件分支语句）"></a>switch语句（条件分支语句）</h2><p>switch语句也叫条件分支语句。</p>
<p>格式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式) &#123;</span><br><span class="line">	<span class="keyword">case</span> 值<span class="number">1</span>：</span><br><span class="line">		语句体<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> 值<span class="number">2</span>：</span><br><span class="line">		语句体<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="keyword">default</span>：</span><br><span class="line">		语句体 n+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>注意</strong>：</p>
<ul>
<li><p>switch 可以理解为“开关、转换” 。case 可以理解为“案例、选项”。</p>
</li>
<li><p>switch 后面的<strong>括号里</strong>可以是<strong>表达式</strong>或者<strong>值</strong>， 通常是一个<strong>变量</strong>（通常做法是：先把表达式或者值存放到变量中）。</p>
</li>
<li><p>JS 是属于弱类型语言，case 后面的<code>值1</code>、<code>值2</code>可以是 <code>&#39;a&#39;</code>、<code>6</code>、<code>true</code> 等任意数据类型的值，也可以是表达式。</p>
</li>
</ul>
<h3 id="switch语句的执行流程"><a href="#switch语句的执行流程" class="headerlink" title="switch语句的执行流程"></a>switch语句的执行流程</h3><p>执行流程如下：</p>
<p>（1）首先，计算出表达式的值，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结束。</p>
<p>（2）然后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分。</p>
<h3 id="switch-语句的结束条件【非常重要】"><a href="#switch-语句的结束条件【非常重要】" class="headerlink" title="switch 语句的结束条件【非常重要】"></a>switch 语句的结束条件【非常重要】</h3><ul>
<li><p>情况a：遇到break就结束，而不是遇到default就结束。（因为break在此处的作用就是退出switch语句）</p>
</li>
<li><p>情况b：执行到程序的末尾就结束。</p>
</li>
</ul>
<p>我们来看下面的两个例子就明白了。</p>
<h3 id="case穿透的问题"><a href="#case穿透的问题" class="headerlink" title="case穿透的问题"></a>case穿透的问题</h3><p>switch 语句中的<code>break</code>可以省略，但一般不建议（对于新手而言）。否则结果可能不是你想要的，会出现一个现象：<strong>case穿透</strong>。</p>
<p><strong>举例1</strong>：（case穿透的情况）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//switch判断语句</span></span><br><span class="line"><span class="keyword">switch</span> (num) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"星期一"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"星期二"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"星期三"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"星期四"</span>);</span><br><span class="line">    <span class="comment">//break;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"星期五"</span>);</span><br><span class="line">    <span class="comment">//break;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"星期六"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"星期日"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"你输入的数据有误"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上方代码的运行结果，可能会令你感到意外：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">星期四</span><br><span class="line">星期五</span><br><span class="line">星期六</span><br></pre></td></tr></table></figure>


<p>上方代码的解释：因为在case 4和case 5中都没有break，那语句走到case 6的break才会停止。</p>
<p><strong>举例2</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//switch判断语句</span></span><br><span class="line"><span class="keyword">var</span> number = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (number) &#123;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我是defaul语句"</span>);</span><br><span class="line">        <span class="comment">// break;</span></span><br><span class="line">    <span class="keyword">case</span> (<span class="number">2</span>):</span><br><span class="line">      	<span class="built_in">console</span>.log(<span class="string">"第二个呵呵:"</span> + number);</span><br><span class="line">        <span class="comment">//break;</span></span><br><span class="line">    <span class="keyword">case</span> (<span class="number">3</span>):</span><br><span class="line">      	<span class="built_in">console</span>.log(<span class="string">"第三个呵呵:"</span> + number);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> (<span class="number">4</span>):</span><br><span class="line">      	<span class="built_in">console</span>.log(<span class="string">"第四个呵呵:"</span> + number);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上方代码的运行结果，你也许会意外：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我是defaul语句</span><br><span class="line">第二个呵呵:5</span><br><span class="line">第三个呵呵:5</span><br></pre></td></tr></table></figure>

<p>上方代码的解释：代码走到 default 时，因为没有遇到 break，所以会继续往下走，直到遇见 break 或者走到程序的末尾。 从这个例子可以看出：switch 语句的结束与 default 的顺序无关。</p>
<h3 id="switch-语句的实战举例：替换-if-语句"><a href="#switch-语句的实战举例：替换-if-语句" class="headerlink" title="switch 语句的实战举例：替换 if 语句"></a>switch 语句的实战举例：替换 if 语句</h3><p>我们实战开发中，经常需要根据接口的返回码 retCode ，来让前端做不同的展示。</p>
<p>这种场景是业务开发中经常出现的，请一定要掌握。然而，很多人估计会这么写：</p>
<p><strong>写法1</strong>：（不推荐。这种写法太挫了）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> retCode = <span class="number">1003</span>; <span class="comment">// 返回码 retCode 的值可能有很多种情况</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (retCode == <span class="number">0</span>) &#123;</span><br><span class="line">    alert(<span class="string">'接口联调成功'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (retCode == <span class="number">101</span>) &#123;</span><br><span class="line">    alert(<span class="string">'活动不存在'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (retCode == <span class="number">103</span>) &#123;</span><br><span class="line">    alert(<span class="string">'活动未开始'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (retCode == <span class="number">104</span>) &#123;</span><br><span class="line">    alert(<span class="string">'活动已结束'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (retCode == <span class="number">1001</span>) &#123;</span><br><span class="line">    alert(<span class="string">'参数错误'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (retCode == <span class="number">1002</span>) &#123;</span><br><span class="line">    alert(<span class="string">'接口频率限制'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (retCode == <span class="number">1003</span>) &#123;</span><br><span class="line">    alert(<span class="string">'未登录'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (retCode == <span class="number">1004</span>) &#123;</span><br><span class="line">    alert(<span class="string">'（风控用户）提示 活动太火爆啦~军万马都在挤，请稍后再试'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="comment">// 其他异常返回码</span></span><br><span class="line">    alert(<span class="string">'系统君失联了，请稍候再试'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你是按照上面的 <code>if else</code>的方式来写各种条件判断，说明你的代码水平太初级了，会被人喷的，千万不要这么写。那要怎么改进呢？继续往下看。</p>
<p><strong>写法2</strong>：（推荐。通过 return 的方式，将上面的写法进行改进）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> retCode = <span class="number">1003</span>; <span class="comment">// 返回码 retCode 的值可能有很多种情况</span></span><br><span class="line">handleRetCode(retCode);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法：根据接口不同的返回码，处理前端不同的显示状态</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleRetCode</span>(<span class="params">retCode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (retCode == <span class="number">0</span>) &#123;</span><br><span class="line">        alert(<span class="string">'接口联调成功'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (retCode == <span class="number">101</span>) &#123;</span><br><span class="line">        alert(<span class="string">'活动不存在'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (retCode == <span class="number">103</span>) &#123;</span><br><span class="line">        alert(<span class="string">'活动未开始'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (retCode == <span class="number">104</span>) &#123;</span><br><span class="line">        alert(<span class="string">'活动已结束'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (retCode == <span class="number">1001</span>) &#123;</span><br><span class="line">        alert(<span class="string">'参数错误'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (retCode == <span class="number">1002</span>) &#123;</span><br><span class="line">        alert(<span class="string">'接口频率限制'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (retCode == <span class="number">1003</span>) &#123;</span><br><span class="line">        alert(<span class="string">'未登录'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (retCode == <span class="number">1004</span>) &#123;</span><br><span class="line">        alert(<span class="string">'（风控用户）提示 活动太火爆啦~军万马都在挤，请稍后再试'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他异常返回码</span></span><br><span class="line">    alert(<span class="string">'系统君失联了，请稍候再试'</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>上面的写法2，是比较推荐的写法：直接通过 return 的方式，让 function 里的代码不再继续往下走，这就达到目的了。对了，因为要用到 return ，所以需要单独封装到一个 function 里面。</p>
<p>如果你以后看到有前端小白采用的是<strong>写法1</strong>，请一定要把<strong>写法2</strong>传授给他：不需要那么多的 if else，直接用 return 返回就行了。</p>
<p><strong>写法3</strong>：（推荐。将 if else 改为 switch）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> retCode = <span class="number">1003</span>; <span class="comment">// 返回码 retCode 的值可能有很多种情况</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (retCode) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        alert(<span class="string">'接口联调成功'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">101</span>:</span><br><span class="line">        alert(<span class="string">'活动不存在'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">103</span>:</span><br><span class="line">        alert(<span class="string">'活动未开始'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">104</span>:</span><br><span class="line">        alert(<span class="string">'活动已结束'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1001</span>:</span><br><span class="line">        alert(<span class="string">'参数错误'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1002</span>:</span><br><span class="line">        alert(<span class="string">'接口频率限制'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1003</span>:</span><br><span class="line">        alert(<span class="string">'未登录'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1004</span>:</span><br><span class="line">        alert(<span class="string">'（风控用户）提示 活动太火爆啦~军万马都在挤，请稍后再试'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 其他异常返回码</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        alert(<span class="string">'系统君失联了，请稍候再试'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>在实战开发中，方式3是非常推荐的写法，甚至比方式2还要好。我们尽量不要写太多的 if 语句，避免代码嵌套过深。</p>
<h3 id="switch-语句的优雅写法：适时地去掉-break"><a href="#switch-语句的优雅写法：适时地去掉-break" class="headerlink" title="switch 语句的优雅写法：适时地去掉 break"></a>switch 语句的优雅写法：适时地去掉 break</h3><p>我们先来看看下面这段代码：（不推荐）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> day = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'work'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'work'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'work'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'work'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'work'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'relax'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'relax'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>上面的代码，咋一看，好像没啥毛病。但你有没有发现，重复代码太多了？</p>
<p>实战开发中，凡是有重复的地方，我们都必须要想办法简化。写代码就是在不断重构的过程。</p>
<p>上面的代码，可以改进如下：（推荐，非常优雅）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> day = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'work'</span>);</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 在这里放一个 break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'relax'</span>);</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 在这里放一个 break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>你没看错，就是上面的这种写法，能达到同样的效果，非常优雅。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>浮动</title>
    <url>/2020/04/18/07-%E6%B5%AE%E5%8A%A8/</url>
    <content><![CDATA[<hr>
<h2 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h2><ul>
<li>标准文档流<ul>
<li>标准文档流的特性</li>
<li>行内元素和块级元素</li>
<li>行内元素和块级元素的相互转换</li>
</ul>
</li>
<li>浮动的性质</li>
<li>浮动的清除</li>
<li>浏览器的兼容性问题</li>
<li>浮动中margin相关</li>
<li>关于margin的IE6兼容问题</li>
</ul>
<a id="more"></a>
<h2 id="标准文档流"><a href="#标准文档流" class="headerlink" title="标准文档流"></a>标准文档流</h2><p>web页面的制作，是个“流”，必须从上而下，像“织毛衣”。</p>
<h3 id="标准文档流的特性"><a href="#标准文档流的特性" class="headerlink" title="标准文档流的特性"></a>标准文档流的特性</h3><p><strong>（1）空白折叠现象：</strong></p>
<p>无论多少个空格、换行、tab，都会折叠为一个空格。</p>
<p><strong>（2）高矮不齐，底边对齐：</strong></p>
<p><strong>（3）自动换行，一行写不满，换行写。</strong></p>
<h3 id="行内元素和块级元素"><a href="#行内元素和块级元素" class="headerlink" title="行内元素和块级元素"></a>行内元素和块级元素</h3><p>标准文档流等级森严。标签分为两种等级：</p>
<ul>
<li>行内元素</li>
<li>块级元素</li>
</ul>
<p><strong>行内元素和块级元素的区别：</strong>（非常重要）</p>
<p>行内元素：</p>
<ul>
<li>与其他行内元素并排；</li>
<li>不能设置宽、高。默认的宽度，就是文字的宽度。</li>
</ul>
<p>块级元素：</p>
<ul>
<li>霸占一行，不能与其他任何元素并列；</li>
<li>能接受宽、高。如果不设置宽度，那么宽度将默认变为父亲的100%。</li>
</ul>
<p><strong>行内元素和块级元素的分类：</strong></p>
<p>从HTML的角度来讲，标签分为：</p>
<ul>
<li>文本级标签：p、span、a、b、i、u、em。</li>
<li>容器级标签：div、h系列、li、dt、dd。</li>
</ul>
<blockquote>
<p>PS：为甚么说p是文本级标签呢？因为p里面只能放文字&amp;图片&amp;表单元素，p里面不能放h和ul，p里面也不能放p。</p>
</blockquote>
<p>从CSS的角度讲，CSS的分类和上面的很像，就p不一样：</p>
<ul>
<li><p>行内元素：除了p之外，所有的文本级标签，都是行内元素。p是个文本级，但是是个块级元素。</p>
</li>
<li><p>块级元素：所有的容器级标签都是块级元素，还有p标签。</p>
</li>
</ul>
<h3 id="行内元素和块级元素的相互转换"><a href="#行内元素和块级元素的相互转换" class="headerlink" title="行内元素和块级元素的相互转换"></a>行内元素和块级元素的相互转换</h3><p>我们可以通过<code>display</code>属性将块级元素和行内元素进行相互转换。display即“显示模式”。</p>
<h4 id="块级元素可以转换为行内元素："><a href="#块级元素可以转换为行内元素：" class="headerlink" title="块级元素可以转换为行内元素："></a>块级元素可以转换为行内元素：</h4><p>一旦，给一个块级元素（比如div）设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display: inline;</span><br></pre></td></tr></table></figure>

<p>那么，这个标签将立即变为行内元素，此时它和一个span无异。inline就是“行内”。也就是说：</p>
<ul>
<li>此时这个div不能设置宽度、高度；</li>
<li>此时这个div可以和别人并排了。</li>
</ul>
<h4 id="行内元素转换为块级元素："><a href="#行内元素转换为块级元素：" class="headerlink" title="行内元素转换为块级元素："></a>行内元素转换为块级元素：</h4><p>同样的道理，一旦给一个行内元素（比如span）设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display: block;</span><br></pre></td></tr></table></figure>

<p>那么，这个标签将立即变为块级元素，此时它和一个div无异。block”是“块”的意思。也就是说：</p>
<ul>
<li>此时这个span能够设置宽度、高度</li>
<li>此时这个span必须霸占一行了，别人无法和他并排</li>
<li>如果不设置宽度，将撑满父亲</li>
</ul>
<p>标准流里面的限制非常多，导致很多页面效果无法实现。如果我们现在就要并排、并且就要设置宽高，那该怎么办呢？办法是：<strong>脱离标准流</strong></p>
<p>css中一共有三种手段，使一个元素脱离标准文档流：</p>
<ul>
<li>（1）浮动</li>
<li>（2）绝对定位</li>
<li>（3）固定定位</li>
</ul>
<h2 id="浮动的性质"><a href="#浮动的性质" class="headerlink" title="浮动的性质"></a>浮动的性质</h2><blockquote>
<p>浮动是css里面布局用的最多的属性。</p>
</blockquote>
<p>现在有两个div，分别设置宽高。我们知道，它们的效果如下：</p>
<p><img src="float1.png" alt=""></p>
<p>此时，如果给这两个div增加一个浮动属性，比如<code>float: left;</code>，效果如下：</p>
<p><img src="float2.png" alt=""></p>
<p>这就达到了浮动的效果。此时，两个元素并排了，并且两个元素都能够设置宽度、高度了（这在上一段的标准流中，不能实现）。</p>
<p>浮动想学好，一定要知道三个性质。接下来讲一讲。</p>
<h3 id="性质1：浮动的元素脱标"><a href="#性质1：浮动的元素脱标" class="headerlink" title="性质1：浮动的元素脱标"></a>性质1：浮动的元素脱标</h3><p>脱标即脱离标准流。我们来看几个例子。</p>
<p>证明1：</p>
<p><img src="float3.png" alt=""></p>
<p>上图中，在默认情况下，两个div标签是上下进行排列的。现在由于float属性让上图中的第一个<code>&lt;div&gt;</code>标签出现了浮动，于是这个标签在另外一个层面上进行排列。而第二个<code>&lt;div&gt;</code>还在自己的层面上遵从标准流进行排列。</p>
<p>证明2：</p>
<p>span标签在标准流中，是不能设置宽高的（因为是行内元素）。但是，一旦设置为浮动之后，即使不转成块级元素，也能够设置宽高了。</p>
<p>所以：<strong>一旦一个元素浮动了，那么，将能够并排了，并且能够设置宽高了。无论它原来是个div还是个span</strong>。所有标签，浮动之后，已经不区分行内、块级了。</p>
<h3 id="性质2：浮动的元素互相贴靠"><a href="#性质2：浮动的元素互相贴靠" class="headerlink" title="性质2：浮动的元素互相贴靠"></a>性质2：浮动的元素互相贴靠</h3><p>我们给三个div均设置了<code>float: left;</code>属性之后，然后设置宽高。当改变浏览器窗口大小时，可以看到div的贴靠效果。</p>
<p>3号如果有足够空间，那么就会靠着2号。如果没有足够的空间，那么会靠着1号。<br>如果没有足够的空间靠着1号大哥，3号自己去贴左墙。</p>
<p>同样，float还有一个属性值是<code>right</code>，这个和属性值<code>left</code>是对称的。</p>
<h3 id="性质3：浮动的元素有“字围”效果"><a href="#性质3：浮动的元素有“字围”效果" class="headerlink" title="性质3：浮动的元素有“字围”效果"></a>性质3：浮动的元素有“字围”效果</h3><p>来看一张图就明白了。我们让div浮动，p不浮动。</p>
<p><img src="float4.png" alt=""></p>
<p>上图中，我们发现：<strong>div挡住了p，但不会挡住p中的文字</strong>，形成“字围”效果。</p>
<p>总结：<strong>标准流中的文字不会被浮动的盒子遮挡住</strong>。（文字就像水一样）</p>
<p>关于浮动我们要强调一点，浮动这个东西，为避免混乱，我们在初期一定要遵循一个原则：<strong>永远不是一个东西单独浮动，浮动都是一起浮动，要浮动，大家都浮动。</strong></p>
<h3 id="性质4：收缩"><a href="#性质4：收缩" class="headerlink" title="性质4：收缩"></a>性质4：收缩</h3><p>收缩：一个浮动的元素，如果没有设置width，那么将自动收缩为内容的宽度（这点非常像行内元素）。</p>
<p>上图中，div本身是块级元素，如果不设置width，它会单独霸占整行；但是，设置div浮动后，它会收缩</p>
<h2 id="浮动的清除"><a href="#浮动的清除" class="headerlink" title="浮动的清除"></a>浮动的清除</h2><blockquote>
<p>这里所说的清除浮动，指的是清除浮动与浮动之间的影响。</p>
</blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>通过上面这个例子，我们发现，此例中的网页就是通过浮动实现并排的。</p>
<p>比如说一个网页有header、content、footer这三部分。就拿content部分来举例，如果设置content的儿子为浮动，但是，这个儿子又是一个全新的标准流，于是儿子的儿子仍然在标准流里。</p>
<p>给里面的<code>&lt;li&gt;</code>标签加浮动。效果却成了下面这个样子：</p>
<p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">		*&#123;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		li&#123;</span><br><span class="line">			float: left;</span><br><span class="line">			width: 100px;</span><br><span class="line">			height: 20px;</span><br><span class="line">			background-color: pink;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>生命壹号1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>生命壹号2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>生命壹号3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>生命壹号4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>许嵩1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>许嵩2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>许嵩3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>许嵩4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二组中的第1个li，去贴靠第一组中的最后一个li了（我们本以为这些li会分成两排）。</p>
<p>所以要清除浮动。</p>
<h3 id="方法1：给浮动元素的祖先元素加高度"><a href="#方法1：给浮动元素的祖先元素加高度" class="headerlink" title="方法1：给浮动元素的祖先元素加高度"></a>方法1：给浮动元素的祖先元素加高度</h3><p>造成上述这个现象的根本原因是：li的<strong>父亲div没有设置高度</strong>，导致这两个div的高度均为0px（我们可以通过网页的审查元素进行查看）。div的高度为零，导致不能给自己浮动的孩子，撑起一个容器。</p>
<p>撑不起一个容器，导致自己的孩子没办法在自己的内部进行正确的浮动。</p>
<p>好，现在就算给这个div设置高度，可如果div自己的高度小于孩子的高度，也会出现不正常的现象。</p>
<p>给div设置一个正确的合适的高度（至少保证高度大于儿子的高度），就可以看到正确的现象。</p>
<p><strong>总结：</strong></p>
<p><strong>如果一个元素要浮动，那么它的祖先元素一定要有高度。</strong></p>
<p><strong>有高度的盒子，才能关住浮动</strong>。</p>
<p>只要浮动在一个有高度的盒子中，那么这个浮动就不会影响后面的浮动元素。所以就是清除浮动带来的影响了。</p>
<h3 id="方法2：clear-both"><a href="#方法2：clear-both" class="headerlink" title="方法2：clear:both;"></a>方法2：clear:both;</h3><p>网页制作中，高度height其实很少出现。为什么？因为能被内容撑高！也就是说，刚刚我们讲解的方法1，工作中用得很少。</p>
<p>那么，能不能不写height，也把浮动清除了呢？也让浮动之间，互不影响呢？</p>
<p>这个时候，我们可以使用<code>clear:both;</code>这个属性。如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">clear:both;</span><br></pre></td></tr></table></figure>

<p>clear就是清除，both指的是左浮动、右浮动都要清除。<code>clear:both</code>的意思就是：<strong>不允许左侧和右侧有浮动对象。</strong></p>
<p>这种方法有一个非常大的、致命的问题，<strong>它所在的标签，margin属性失效了</strong>。</p>
<p>margin失效的本质原因是：上图中的box1和box2，高度为零。</p>
<h3 id="方法3：隔墙法"><a href="#方法3：隔墙法" class="headerlink" title="方法3：隔墙法"></a>方法3：隔墙法</h3><p>上面这个例子中，为了防止第二个div贴靠到第二个div，我们可以在这两个div中间用一个新的div隔开，然后给这个新的div设置<code>clear: both;</code>属性；同时，既然这个新的div无法设置margin属性，我们可以给它设置height，以达到margin的效果。这便是隔墙法。</p>
<p><strong>内墙法：</strong></p>
<p>近些年，有演化出了“内墙法”：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">	&lt;p&gt;&lt;&#x2F;p&gt;  --浮动</span><br><span class="line">	&lt;p&gt;&lt;&#x2F;p&gt;  --浮动</span><br><span class="line">	&lt;div&gt;设置高度撑出高度&lt;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>记住一句重要的话：<strong>一个父亲是不能被浮动的儿子撑出高度的</strong>。举例如下：</p>
<p>与外墙法相比，内墙法的优势（本质区别）在于：内墙法可以给它所在的家撑出宽度（让box1有高）。即：<strong>可以自适应内容</strong>。</p>
<p>而外墙法，虽然一道墙可以把两个div隔开，但是这两个div没有高，也就是说，无法wrap_content。</p>
<h3 id="清除浮动方法4：overflow-hidden"><a href="#清除浮动方法4：overflow-hidden" class="headerlink" title="清除浮动方法4：overflow:hidden;"></a>清除浮动方法4：overflow:hidden;</h3><p>我们可以使用如下属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">overflow:hidden;</span><br></pre></td></tr></table></figure>


<p>overflow即“溢出”， hidden即“隐藏”。这个属性的意思是“溢出隐藏”。顾名思义：所有溢出边框的内容，都要隐藏掉。</p>
<p><code>overflow:hidden;</code>的本意是清除溢出到盒子外面的文字。但是，前端开发工程师发现了，它能做偏方。如下：</p>
<p>一个父亲不能被自己浮动的儿子，撑出高度。但是，只要给父亲加上<code>overflow:hidden</code>; 那么，父亲就能被儿子撑出高了。这是一个偏方。</p>
<h2 id="浮动清除的总结"><a href="#浮动清除的总结" class="headerlink" title="浮动清除的总结"></a>浮动清除的总结</h2><blockquote>
<p>我们在上一段讲了四种清除浮动的方法，本段来进行一个总结。</p>
</blockquote>
<p>浮动的元素，只能被有高度的盒子关住。 也就是说，如果盒子内部有浮动，这个盒子有高，那么妥妥的，浮动不会互相影响。</p>
<h3 id="1、加高法"><a href="#1、加高法" class="headerlink" title="1、加高法"></a>1、加高法</h3><p>工作上，我们绝对不会给所有的盒子加高度，这是因为麻烦，并且不能适应页面的快速变化。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>     //设置height</span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>    //设置height</span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="2、clear-both-法"><a href="#2、clear-both-法" class="headerlink" title="2、clear:both;法"></a>2、<code>clear:both;</code>法</h3><p>最简单的清除浮动的方法，就是给盒子增加clear:both；表示自己的内部元素，不受其他盒子的影响。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>   //clear:both;</span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>浮动确实被清除了，不会互相影响了。但是有一个问题，就是margin失效。两个div之间，没有任何的间隙了。</p>
<h3 id="3、隔墙法"><a href="#3、隔墙法" class="headerlink" title="3、隔墙法"></a>3、隔墙法</h3><p>在两部分浮动元素中间，建一个墙。隔开两部分浮动，让后面的浮动元素，不去追前面的浮动元素。<br>墙用自己的身体当做了间隙。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cl h10"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们发现，隔墙法好用，但是第一个div，还是没有高度。如果我们现在想让第一个div，自动根据自己的儿子撑出高度，我们就要想一些“小伎俩”。</p>
<p>内墙法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cl h10"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>内墙法的优点就是，不仅仅能够让后部分的p不去追前部分的p了，并且能把第一个div撑出高度。这样，这个div的背景、边框就能够根据p的高度来撑开了。</p>
<h3 id="4、overflow-hidden"><a href="#4、overflow-hidden" class="headerlink" title="4、overflow:hidden;"></a>4、<code>overflow:hidden;</code></h3><p>这个属性的本意，就是将所有溢出盒子的内容，隐藏掉。但是，我们发现这个东西能够用于浮动的清除。<br>我们知道，一个父亲，不能被自己浮动的儿子撑出高度，但是，如果这个父亲加上了overflow:hidden；那么这个父亲就能够被浮动的儿子撑出高度了。这个现象，不能解释，就是浏览器的偏方。<br>并且,overflow:hidden;能够让margin生效。</p>
<h2 id="浏览器的兼容性问题"><a href="#浏览器的兼容性问题" class="headerlink" title="浏览器的兼容性问题"></a>浏览器的兼容性问题</h2><blockquote>
<p>讲一下上述知识点涉及到的浏览器兼容问题。</p>
</blockquote>
<h3 id="兼容性1（微型盒子）"><a href="#兼容性1（微型盒子）" class="headerlink" title="兼容性1（微型盒子）"></a>兼容性1（微型盒子）</h3><p><strong>兼容性的第一条</strong>：IE6不支持小于12px的盒子，任何小于12px的盒子，在IE6中看都大。即：IE 6不支持微型盒子。</p>
<p>IE6留了一个<strong>后门</strong>：只要给css属性之前，加上<strong>下划线</strong>，这个属性就是IE6的专有属性。</p>
<h3 id="兼容性2"><a href="#兼容性2" class="headerlink" title="兼容性2"></a>兼容性2</h3><p><strong>兼容性的第二条：</strong>IE6不支持用<code>overflow:hidden;</code>来清除浮动。</p>
<p>解决办法，以毒攻毒。追加一条：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_zoom:1;</span><br></pre></td></tr></table></figure>

<p>完整写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">overflow: hidden;</span><br><span class="line">_zoom:1;</span><br></pre></td></tr></table></figure>

<p>实际上，<code>_zoom:1;</code>能够触发浏览器hasLayout机制。这个机制，不要深究了，因为只有IE6有。我们只需要让IE6好用，具体的实现机制，可以自行查阅。</p>
<p>需要强调的是，<code>overflow:hidden;</code>的本意，就是让溢出盒子的border的内容隐藏，这个功能是IE6兼容的。不兼容的是<code>overflow:hidden;</code>清除浮动的时候。</p>
<p><strong>总结：</strong></p>
<p>我们刚才学习的两个IE6的兼容问题，都是通过多写一条hack来解决的，这个我们称为伴生属性，即两个属性，要写一起写。</p>
<p>属性1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">height:6px;</span><br><span class="line">_font-size:0;</span><br></pre></td></tr></table></figure>

<p>属性2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">overflow:hidden;</span><br><span class="line">_zoom:1;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="margin相关"><a href="#margin相关" class="headerlink" title="margin相关"></a>margin相关</h2><blockquote>
<p>我们来讲一下浮动中和margin相关的知识。</p>
</blockquote>
<h3 id="margin塌陷-margin重叠"><a href="#margin塌陷-margin重叠" class="headerlink" title="margin塌陷/margin重叠"></a>margin塌陷/margin重叠</h3><p><strong>标准文档流中，竖直方向的margin不叠加，取较大的值作为margin(水平方向的margin是可以叠加的，即水平方向没有塌陷现象)</strong>。如下图所示：</p>
<p>如果不在标准流，比如盒子都浮动了，那么两个盒子之间是没有塌陷现象的。</p>
<h3 id="盒子居中margin-0-auto"><a href="#盒子居中margin-0-auto" class="headerlink" title="盒子居中margin:0 auto;"></a>盒子居中<code>margin:0 auto;</code></h3><p>margin的值可以为auto，表示自动。当left、right两个方向都是auto的时候，盒子居中了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">margin-left: auto;</span><br><span class="line">margin-right: auto;</span><br></pre></td></tr></table></figure>

<p>盒子居中的简写为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">margin:0 auto;</span><br></pre></td></tr></table></figure>

<p>对上方代码的理解：上下的margin为0，左右的margin都尽可能的大，于是就居中了。</p>
<p>注意：</p>
<ul>
<li>（1）只有标准流的盒子，才能使用<code>margin:0 auto;</code>居中。也就是说，当一个盒子浮动了、绝对定位了、固定定位了，都不能使用margin:0 auto;</li>
<li>（2）使用<code>margin:0 auto;</code>的盒子，必须有width，有明确的width。（可以这样理解，如果没有明确的witdh，那么它的witdh就是霸占整行，没有意义）</li>
<li>（3）<code>margin:0 auto;</code>是让盒子居中，不是让盒子里的文本居中。文本的居中，要使用<code>text-align:center;</code></li>
</ul>
<h3 id="善于使用父亲的padding，而不是儿子的margin"><a href="#善于使用父亲的padding，而不是儿子的margin" class="headerlink" title="善于使用父亲的padding，而不是儿子的margin"></a>善于使用父亲的padding，而不是儿子的margin</h3><p>我们来看一个奇怪的现象。现在有下面这样一个结构：（div中放一个p）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">	&lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>上面的结构中，我们尝试通过给儿子<code>p</code>一个<code>margin-top:50px;</code>的属性，让其与父亲保持50px的上边距。结果却看到了下面的奇怪的现象：</p>
<p><img src="margin1.png" alt=""></p>
<p>此时我们给父亲div加一个border属性，就正常了：</p>
<p><img src="margin2.png" alt=""></p>
<p>如果父亲没有border，那么儿子的margin实际上踹的是“流”，踹的是这“行”。所以，父亲整体也掉下来了。</p>
<p><strong>margin这个属性，本质上描述的是兄弟和兄弟之间的距离； 最好不要用这个marign表达父子之间的距离。</strong></p>
<p>所以，如果要表达父子之间的距离，我们一定要善于使用父亲的padding，而不是儿子的margin。</p>
<h2 id="关于margin的IE6兼容问题"><a href="#关于margin的IE6兼容问题" class="headerlink" title="关于margin的IE6兼容问题"></a>关于margin的IE6兼容问题</h2><h3 id="IE6的双倍margin的bug："><a href="#IE6的双倍margin的bug：" class="headerlink" title="IE6的双倍margin的bug："></a>IE6的双倍margin的bug：</h3><p>当出现连续浮动的元素，携带与浮动方向相同的margin时，<strong>队首的元素，会双倍marign</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">	&lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">	&lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">	&lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>


<p>解决方案：</p>
<p>（1）使浮动的方向和margin的方向，相反。</p>
<p>所以，你就会发现，我们特别喜欢，<strong>浮动的方向和margin的方向相反</strong>。并且，前端开发工程师，把这个当做习惯了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">float: left;</span><br><span class="line">margin-right: 40px;</span><br></pre></td></tr></table></figure>



<p>（2）使用hack</p>
<p>单独给队首的元素，写一个一半的margin：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;li class&#x3D;&quot;no1&quot;&gt;&lt;&#x2F;li&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ul li.no1&#123;</span><br><span class="line">	_margin-left:20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Fireworks和others"><a href="#Fireworks和others" class="headerlink" title="Fireworks和others"></a>Fireworks和others</h2><h3 id="Fireworks"><a href="#Fireworks" class="headerlink" title="Fireworks"></a>Fireworks</h3><p>fireworks是Adobe公司的一个设计软件。功能非常多。Fireworks的默认文件格式是png。</p>
<p>标尺的快捷键：Ctrl + Alt+ R</p>
<h3 id="others"><a href="#others" class="headerlink" title="others"></a>others</h3><p>首行缩进两个汉字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">text-indent: 2em;</span><br></pre></td></tr></table></figure>

<p>上方属性中，单位比较奇怪，叫做em，em就是汉字的一个宽度。indent的意思是缩进。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS属性：定位属性</title>
    <url>/2020/04/18/08-CSS%E5%B1%9E%E6%80%A7%EF%BC%9A%E5%AE%9A%E4%BD%8D%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<hr>
<h2 id="本文主要内容："><a href="#本文主要内容：" class="headerlink" title="本文主要内容："></a>本文主要内容：</h2><p>CSS的定位属性主要有三种，分别是绝对定位、相对定位、固定定位。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">position: absolute;  &lt;!-- 绝对定位 --&gt;</span><br><span class="line"></span><br><span class="line">position: relative;  &lt;!-- 相对定位 --&gt;</span><br><span class="line"></span><br><span class="line">position: fixed;     &lt;!-- 固定定位 --&gt;</span><br><span class="line"></span><br><span class="line">position: sticky;    &lt;!-- 粘性定位 --&gt;</span><br></pre></td></tr></table></figure>

<br>
<a id="more"></a>
## 相对定位

<p><strong>相对定位</strong>：让元素相对于自己原来的位置，进行位置调整（可用于盒子的位置微调）。</p>
<p>我们之前学习的背景属性中，是通过如下格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">background-position:向右偏移量 向下偏移量;</span><br></pre></td></tr></table></figure>

<p>但这回的定位属性，是通过如下格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">position: relative;</span><br><span class="line">left: 50px;</span><br><span class="line">top: 50px;</span><br></pre></td></tr></table></figure>


<h3 id="相对定位不脱标"><a href="#相对定位不脱标" class="headerlink" title="相对定位不脱标"></a>相对定位不脱标</h3><p><strong>相对定位</strong>：不脱标，老家留坑，<strong>别人不会把它原来的位置挤走</strong>。</p>
<p>也就是说，相对定位的真实位置还在老家，只不过影子出去了，可以到处飘。</p>
<h3 id="相对定位的用途"><a href="#相对定位的用途" class="headerlink" title="相对定位的用途"></a>相对定位的用途</h3><p>如果想做“压盖”效果（把一个div放到另一个div之上），我们一般<strong>不用</strong>相对定位来做。相对定位，就两个作用：</p>
<ul>
<li>（1）微调元素</li>
<li>（2）做绝对定位的参考，子绝父相</li>
</ul>
<h3 id="相对定位的定位值"><a href="#相对定位的定位值" class="headerlink" title="相对定位的定位值"></a>相对定位的定位值</h3><ul>
<li><p>left：盒子右移</p>
</li>
<li><p>right：盒子左移</p>
</li>
<li><p>top：盒子下移</p>
</li>
<li><p>bottom：盒子上移</p>
</li>
</ul>
<p>PS：负数表示相反的方向。</p>
<p>↘：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">position: relative;</span><br><span class="line">left: 40px;</span><br><span class="line">top: 10px;</span><br></pre></td></tr></table></figure>

<p>↙：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">position: relative;</span><br><span class="line">right: 100px;</span><br><span class="line">top: 100px;</span><br></pre></td></tr></table></figure>

<p>↖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">position: relative;</span><br><span class="line">right: 100px;</span><br><span class="line">bottom: 100px;</span><br></pre></td></tr></table></figure>

<p>↗：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">position: relative;</span><br><span class="line">left: 200px;</span><br><span class="line">bottom: 200px;</span><br></pre></td></tr></table></figure>


<h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><p><strong>绝对定位</strong>：定义横纵坐标。原点在父容器的左上角或左下角。横坐标用left表示，纵坐标用top或者bottom表示。</p>
<p>格式举例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">position: absolute;  &#x2F;*绝对定位*&#x2F;</span><br><span class="line">left: 10px;  &#x2F;*横坐标*&#x2F;</span><br><span class="line">top&#x2F;bottom: 20px;  &#x2F;*纵坐标*&#x2F;</span><br></pre></td></tr></table></figure>
<br>

<h3 id="绝对定位脱标"><a href="#绝对定位脱标" class="headerlink" title="绝对定位脱标"></a>绝对定位脱标</h3><p><strong>绝对定位的盒子脱离了标准文档流。</strong></p>
<p>所以，所有的标准文档流的性质，绝对定位之后都不遵守了。</p>
<p>绝对定位之后，标签就不区分所谓的行内元素、块级元素了，不需要<code>display:block</code>就可以设置宽、高了。</p>
<h3 id="绝对定位的参考点（重要）"><a href="#绝对定位的参考点（重要）" class="headerlink" title="绝对定位的参考点（重要）"></a>绝对定位的参考点（重要）</h3><p>（1）如果用<strong>top描述</strong>，那么参考点就是<strong>页面的左上角</strong>，而不是浏览器的左上角：</p>
<p><img src="top.png" alt=""></p>
<p>（2）如果用<strong>bottom描述</strong>，那么参考点就是<strong>浏览器首屏窗口尺寸</strong>（好好理解“首屏”二字），对应的页面的左下角：</p>
<p><img src="bottom.png" alt=""></p>
<h3 id="以盒子为参考点-absolute"><a href="#以盒子为参考点-absolute" class="headerlink" title="以盒子为参考点: absolute"></a>以盒子为参考点: absolute</h3><p>一个绝对定位的元素，如果父辈元素中也出现了已定位（无论是绝对定位、相对定位，还是固定定位）的元素，那么将以父辈这个元素，为参考点。</p>
<p>（1） 要听最近的已经定位的祖先元素的，不一定是父亲，可能是爷爷：</p>
<p>（2）不一定是相对定位，任何定位，都可以作为儿子的参考点：</p>
<p>子绝父绝、<strong>子绝父相</strong>、子绝父固，都是可以给儿子定位的。但是在工程上，如果子绝、父绝，没有一个盒子在标准流里面了，所以页面就不稳固，没有任何实战用途。</p>
<p><strong>工程应用：</strong></p>
<p>“<strong>子绝父相</strong>”有意义：这样可以保证父亲没有脱标，儿子脱标在父亲的范围里面移动。于是，工程上经常这样做：</p>
<blockquote>
<p>父亲浮动，设置相对定位（零偏移），然后让儿子绝对定位一定的距离。</p>
</blockquote>
<p>（3）绝对定位的儿子，无视参考的那个盒子的padding：</p>
<p><strong>工程应用：</strong></p>
<p>绝对定位非常适合用来做“压盖”效果。</p>
<h3 id="让绝对定位中的盒子在父亲里居中"><a href="#让绝对定位中的盒子在父亲里居中" class="headerlink" title="让绝对定位中的盒子在父亲里居中"></a>让绝对定位中的盒子在父亲里居中</h3><p>我们知道，如果想让一个<strong>标准流中的盒子在父亲里居中</strong>（水平方向看），可以将其设置<code>margin: 0 auto</code>属性。</p>
<p>可如果盒子是绝对定位的，此时已经脱标了，如果还想让其居中（位于父亲的正中间），可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">	width: 600px;</span><br><span class="line">	height: 60px;</span><br><span class="line">	position: absolute;  绝对定位的盒子</span><br><span class="line">	left: 50%;           首先，让左边线居中</span><br><span class="line">	top: 0;</span><br><span class="line">	margin-left: -300px;  然后，向左移动宽度（600px）的一半</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>我们可以总结成一个公式：</p>
<blockquote>
<p>left:50%; margin-left:负的宽度的一半</p>
</blockquote>
<h2 id="固定定位-fixed"><a href="#固定定位-fixed" class="headerlink" title="固定定位: fixed"></a>固定定位: fixed</h2><p><strong>固定定位</strong>：就是相对浏览器窗口进行定位。无论页面如何滚动，这个盒子显示的位置不变。</p>
<p>备注：IE6不兼容。</p>
<p><strong>用途1</strong>：网页右下角的“返回到顶部”</p>
<p>比如我们经常看到的网页右下角显示的“返回到顶部”，就可以固定定位。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.backtop</span>&#123;</span></span><br><span class="line">		position: fixed;</span><br><span class="line">		bottom: 100px;</span><br><span class="line">		right: 30px;</span><br><span class="line">		width: 60px;</span><br><span class="line">		height: 60px;</span><br><span class="line">		background-color: gray;</span><br><span class="line">		text-align: center;</span><br><span class="line"><span class="css">		<span class="selector-tag">line-height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">color</span><span class="selector-pseudo">:white</span>;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">text-decoration</span>: <span class="selector-tag">none</span>;   <span class="comment">/*去掉超链接的下划线*/</span></span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>用途2：</strong>顶部导航条</p>
<p>我们经常能看到固定在网页顶端的导航条，可以用固定定位来做。</p>
<p>需要注意的是，假设顶部导航条的高度是60px，那么，为了防止其他的内容被导航条覆盖，我们要给body标签设置60px的padding-top。</p>
<h2 id="粘性定位-sticky"><a href="#粘性定位-sticky" class="headerlink" title="粘性定位 sticky"></a>粘性定位 sticky</h2><p>元素根据正常文档流进行定位，然后<strong>相对它的最近滚动祖先（nearest scrolling ancestor）和 containing block</strong> (最近块级祖先 nearest block-level ancestor)，包括table-related元素，基于top, right, bottom, 和 left的值进行偏移。<strong>偏移值不会影响任何其他元素的位置</strong>。</p>
<p><strong>该值总是创建一个新的层叠上下文（stacking context）。注意，一个sticky元素会“固定”在离它最近的一个拥有“滚动机制”的祖先上</strong>（当该祖先的overflow 是 hidden, scroll, auto, 或 overlay时），即便这个祖先不是真的滚动祖先。这个阻止了所有“sticky”行为（详情见Github issue on W3C CSSWG）。</p>
<p><img src="sticky.gif" alt=""></p>
<h3 id="5、z-index属性："><a href="#5、z-index属性：" class="headerlink" title="5、z-index属性："></a>5、z-index属性：</h3><p><strong>z-index</strong>属性：表示谁压着谁。数值大的压盖住数值小的。</p>
<p>有如下特性：</p>
<p> （1）属性值大的位于上层，属性值小的位于下层。</p>
<p> （2）z-index值没有单位，就是一个正整数。默认的z-index值是0。</p>
<p> （3）如果大家都没有z-index值，或者z-index值一样，那么在HTML代码里写在后面，谁就在上面能压住别人。定位了的元素，永远能够压住没有定位的元素。</p>
<p> （4）<strong>只有定位了的元素，才能有z-index值</strong>。也就是说，不管相对定位、绝对定位、固定定位，都可以使用z-index值。<strong>而浮动的元素不能用</strong>。</p>
<p> （5）<strong>从父现象</strong>：由父元素z-index数值大小决定。意思是，如果父亲1比父亲2大，那么，即使儿子1比儿子2小，儿子1也能在最上层。</p>
<p>z-index属性的应用还是很广泛的。当好几个已定位的标签出现覆盖的现象时，我们可以用这个z-index属性决定，谁处于最上方。也就是<strong>层级</strong>的应用。</p>
<p><strong>层级：</strong></p>
<p>（1）必须有定位（除去static）</p>
<p>（2）用<code>z-index</code>来控制层级数。</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><table style = "text-align: center; border: 2px solid">
    <tr>
        <td>值</td>
        <td>描述</td>
    <tr>
    <tr>
        <td>absolute</td>
        <td>生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。
元素的位置通过 "left", "top", "right" 以及 "bottom" 属性进行规定。</td>
    <tr>
    <tr>
        <td>fixed</td>
        <td>生成绝对定位的元素，相对于浏览器窗口进行定位。
元素的位置通过 "left", "top", "right" 以及 "bottom" 属性进行规定。</td>
    <tr>
    <tr>
        <td>relative</td>
        <td>生成相对定位的元素，相对于其正常位置进行定位。
因此，"left:20" 会向元素的 LEFT 位置添加 20 像素。</td>
    <tr>
    <tr>
        <td>static</td>
        <td>默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。</td>
    <tr>
    <tr>
        <td>inherit</td>
        <td>规定应该从父元素继承 position 属性的值。</td>
    <tr>
</table>









]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>数值的拓展</title>
    <url>/2020/04/18/08-%E6%95%B0%E5%80%BC%E7%9A%84%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要内容：</p>
<ul>
<li>Number.isFinite(), Number.isNaN()</li>
<li>Number.parseInt(), Number.parseFloat()</li>
<li>Number.isInteger()</li>
<li>BigInt 数据类型<a id="more"></a>
<h2 id="Number-isFinite-Number-isNaN"><a href="#Number-isFinite-Number-isNaN" class="headerlink" title="Number.isFinite(), Number.isNaN()"></a>Number.isFinite(), Number.isNaN()</h2></li>
</ul>
<p>ES6 在Number对象上，新提供了<code>Number.isFinite()</code>和<code>Number.isNaN()</code>两个方法。</p>
<p><code>Number.isFinite()</code>用来检查一个数值是否为有限的（finite），即不是Infinity。</p>
<blockquote>
<p>注意，如果参数类型不是数值，Number.isFinite一律返回false。</p>
</blockquote>
<p><code>Number.isNaN()</code>用来检查一个值是否为NaN。</p>
<p>它们与传统的全局方法isFinite()和isNaN()的区别在于，传统方法先调用Number()将非数值的值转为数值，再进行判断，而这两个新方法只对数值有效，Number.isFinite()对于非数值一律返回false, Number.isNaN()只有对于NaN才返回true，非NaN一律返回false。</p>
<h2 id="Number-parseInt-Number-parseFloat"><a href="#Number-parseInt-Number-parseFloat" class="headerlink" title="Number.parseInt(), Number.parseFloat()"></a>Number.parseInt(), Number.parseFloat()</h2><p>ES6 将全局方法<code>parseInt()</code>和<code>parseFloat()</code>，移植到Number对象上面，行为完全保持不变。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; ES5的写法</span><br><span class="line">parseInt(&#39;12.34&#39;) &#x2F;&#x2F; 12</span><br><span class="line">parseFloat(&#39;123.45#&#39;) &#x2F;&#x2F; 123.45</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ES6的写法</span><br><span class="line">Number.parseInt(&#39;12.34&#39;) &#x2F;&#x2F; 12</span><br><span class="line">Number.parseFloat(&#39;123.45#&#39;) &#x2F;&#x2F; 123.45</span><br></pre></td></tr></table></figure>

<p>这样做的目的，是逐步减少全局性方法，使得语言逐步模块化。</p>
<h2 id="Number-isInteger"><a href="#Number-isInteger" class="headerlink" title="Number.isInteger()"></a>Number.isInteger()</h2><p><code>Number.isInteger()</code>用来判断一个数值是否为整数。</p>
<h2 id="BigInt-数据类型"><a href="#BigInt-数据类型" class="headerlink" title="BigInt 数据类型"></a>BigInt 数据类型</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>JavaScript 所有数字都保存成 64 位浮点数，这给数值的表示带来了两大限制。一是数值的精度只能到 53 个二进制位（相当于 16 个十进制位），大于这个范围的整数，JavaScript 是无法精确表示的，这使得 JavaScript 不适合进行科学和金融方面的精确计算。二是大于或等于2的1024次方的数值，JavaScript 无法表示，会返回Infinity。</p>
<p>ES2020 引入了一种新的数据类型 <code>BigInt</code>（大整数），来解决这个问题。<code>BigInt</code> 只用来表示整数，没有位数的限制，任何位数的整数都可以精确表示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const a &#x3D; 2172141653n;</span><br><span class="line">const b &#x3D; 15346349309n;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; BigInt 可以保持精度</span><br><span class="line">a * b &#x2F;&#x2F; 33334444555566667777n</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 普通整数无法保持精度</span><br><span class="line">Number(a) * Number(b) &#x2F;&#x2F; 33334444555566670000</span><br></pre></td></tr></table></figure>

<p>为了与 Number 类型区别，<strong>BigInt 类型的数据必须添加后缀n</strong>。</p>
<ul>
<li><p><strong>typeof运算符对于 BigInt 类型的数据返回bigint。</strong></p>
</li>
<li><p>BigInt 可以使用负号（-），但是不能使用正号（+），因为会与 asm.js 冲突。</p>
</li>
<li><p>JavaScript 以前不能计算70的阶乘（即70!），因为超出了可以表示的精度。</p>
</li>
</ul>
<h3 id="BigInt-对象"><a href="#BigInt-对象" class="headerlink" title="BigInt 对象"></a>BigInt 对象</h3><p>JavaScript 原生提供<code>BigInt</code>对象，可以用作构造函数生成 <code>BigInt</code> 类型的数值。转换规则基本与<code>Number()</code>一致，将其他类型的值转为 <code>BigInt</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BigInt(123) &#x2F;&#x2F; 123n</span><br><span class="line">BigInt(&#39;123&#39;) &#x2F;&#x2F; 123n</span><br><span class="line">BigInt(false) &#x2F;&#x2F; 0n</span><br><span class="line">BigInt(true) &#x2F;&#x2F; 1n</span><br></pre></td></tr></table></figure>

<ul>
<li><p>BigInt()构造函数必须有参数，而且参数必须可以正常转为数值，下面的用法都会报错。</p>
</li>
<li><p>参数如果是小数，也会报错。</p>
</li>
<li><p>BigInt 对象继承了 Object 对象的两个实例方法。</p>
<ul>
<li><code>BigInt.prototype.toString()</code></li>
<li><code>BigInt.prototype.valueOf()</code></li>
</ul>
</li>
</ul>
<h3 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h3><p>可以使用<code>Boolean()</code>、<code>Number()</code>和<code>String()</code>这三个方法，将 <code>BigInt</code> 可以转为布尔值、数值和字符串类型。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Boolean(0n) &#x2F;&#x2F; false</span><br><span class="line">Boolean(1n) &#x2F;&#x2F; true</span><br><span class="line">Number(1n)  &#x2F;&#x2F; 1</span><br><span class="line">String(1n)  &#x2F;&#x2F; &quot;1&quot;</span><br></pre></td></tr></table></figure>

<p>上面代码中，注意最后一个例子，转为字符串时后缀n会消失。</p>
<p>另外，取反运算符（!）也可以将 BigInt 转为布尔值。</p>
<ul>
<li>几乎所有的数值运算符都可以用在 BigInt，但是有两个例外。<ul>
<li>不带符号的右移位运算符&gt;&gt;&gt;</li>
<li>一元的求正运算符+</li>
<li>BigInt 不能与普通数值进行混合运算。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS33选择器</title>
    <url>/2020/04/18/09-CSS3%E9%80%89%E6%8B%A9%E5%99%A8%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<hr>
<h2 id="本文主要内容："><a href="#本文主要内容：" class="headerlink" title="本文主要内容："></a>本文主要内容：</h2><ul>
<li>CSS3属性选择器</li>
<li>结构伪类选择器</li>
<li>伪元素选择器<a id="more"></a>
<h2 id="CSS3介绍"><a href="#CSS3介绍" class="headerlink" title="CSS3介绍"></a>CSS3介绍</h2></li>
</ul>
<p>CSS3在CSS2基础上，<strong>增强</strong>或<strong>新增</strong>了许多特性， 弥补了CSS2的众多不足之处，使得Web开发变得更为高效和便捷。</p>
<h3 id="CSS3的现状"><a href="#CSS3的现状" class="headerlink" title="CSS3的现状"></a>CSS3的现状</h3><ul>
<li><p>浏览器支持程度不够好，有些需要添加<strong>私有前缀</strong></p>
</li>
<li><p>移动端支持优于PC端</p>
</li>
<li><p>不断改进中</p>
</li>
<li><p>应用相对广泛</p>
</li>
</ul>
<h3 id="应对的策略：渐进增强"><a href="#应对的策略：渐进增强" class="headerlink" title="应对的策略：渐进增强"></a>应对的策略：渐进增强</h3><ul>
<li>（1）坚持<strong>渐进增强</strong>的原则：<strong>让低版本浏览器能正常访问页面，高版本的浏览器用户体验更好</strong>。【重要】</li>
</ul>
<p>比如说，同样是一个头像，可能在低版本的浏览器中，头像方的；在高版本的浏览器中，头像是圆的。</p>
<ul>
<li><p>（2）考虑用户群体。</p>
</li>
<li><p>（3）遵照产品的方案。</p>
</li>
</ul>
<h3 id="浏览器的版本问题"><a href="#浏览器的版本问题" class="headerlink" title="浏览器的版本问题"></a>浏览器的版本问题</h3><p>由于CSS3普遍存在兼容性问题，为了避免因兼容性带来的干扰，浏览器的建议版本为：</p>
<ul>
<li><p>Chrome浏览器 version 46+</p>
</li>
<li><p>Firefox浏览器 firefox 42+</p>
</li>
</ul>
<h2 id="CSS3-选择器"><a href="#CSS3-选择器" class="headerlink" title="CSS3 选择器"></a>CSS3 选择器</h2><p>我们之前学过 CSS 的选择器，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div 标签选择器</span><br><span class="line"></span><br><span class="line">.box 类名选择器</span><br><span class="line"></span><br><span class="line">#box　id选择器</span><br><span class="line"></span><br><span class="line">div p 后代选择器</span><br><span class="line"></span><br><span class="line">div.box 交集选择器</span><br><span class="line"></span><br><span class="line">div,p,span 并集选择器</span><br><span class="line"></span><br><span class="line">div&gt;p 子代选择器</span><br><span class="line"></span><br><span class="line">* : 通配符</span><br><span class="line"></span><br><span class="line">div+p: 选中div后面相邻的第一个p</span><br><span class="line"></span><br><span class="line">div~p: 选中的div后面所有的p</span><br></pre></td></tr></table></figure>

<p>CSS3新增了许多<strong>灵活</strong>查找元素的方法，极大的提高了查找元素的效率和<strong>精准度</strong>。CSS3选择器与 jQuery 中所提供的<strong>绝大部分</strong>选择器兼容。</p>
<h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>属性选择器的标志性符号是 <code>[]</code>。</p>
<p>匹配含义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^：开头  $：结尾  *：包含</span><br></pre></td></tr></table></figure>

<p>格式：</p>
<ul>
<li><p><code>E[title]</code> 选中页面的E元素，并且E存在 title 属性即可。</p>
</li>
<li><p><code>E[title=&quot;abc&quot;]</code>选中页面的E元素，并且E需要带有title属性，且属性值<strong>完全等于</strong>abc。</p>
</li>
<li><p><code>E[attr~=val]</code>  选择具有 att 属性且属性值为：用空格分隔的字词列表，其中一个等于 val 的E元素。</p>
</li>
<li><p><code>E[attr|=val]</code> 表示要么是一个单独的属性值，要么这个属性值是以“-”分隔的。</p>
</li>
<li><p><code>E[title^=&quot;abc&quot;]</code> 选中页面的E元素，并且E需要带有 title 属性,属性值以 abc 开头。</p>
</li>
<li><p><code>E[title$=&quot;abc&quot;]</code> 选中页面的E元素，并且E需要带有 title 属性,属性值以 abc 结尾。</p>
</li>
<li><p><code>E[title*=&quot;abc&quot;]</code> 选中页面的E元素，并且E需要带有 title 属性,属性值任意位置包含abc。</p>
</li>
</ul>
<h3 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h3><p>伪类选择器的标志性符号是 <code>:</code>。</p>
<p>CSS中有一些伪类选择器，比如<code>:link</code>、<code>:active</code>、<code>:visited</code>、<code>:hover</code>，这些是动态伪类选择器。</p>
<p>CSS3又新增了其它的伪类选择器。这一小段，我们来学习CSS3中的<strong>结构伪类选择器</strong>：即通过<strong>结构</strong>来进行筛选。</p>
<p><strong>1、格式：（第一部分）</strong></p>
<ul>
<li><p><code>E:first-child</code> 匹配父元素的第一个子元素E。</p>
</li>
<li><p><code>E:last-child</code> 匹配父元素的最后一个子元素E。</p>
</li>
<li><p><code>E:nth-child(n)</code> 匹配父元素的第n个子元素E。<strong>注意</strong>，盒子的编号是从<code>1</code>开始算起，不是从<code>0</code>开始算起。</p>
</li>
<li><p><code>E:nth-child(odd)</code> 匹配奇数</p>
</li>
<li><p><code>E:nth-child(even)</code> 匹配偶数</p>
</li>
<li><p><code>E:nth-last-child(n)</code> 匹配父元素的倒数第n个子元素E。</p>
</li>
</ul>
<p>理解：</p>
<p>（1）这里我们要好好理解<strong>父元素</strong>的含义，它指的是：以 E 元素的父元素为参考。</p>
<p>（2）注意：以上选择器中所选到的元素的类型，必须是指定的类型E，如果选不中，则无效。这个要好好理解，具体可以看CSS参考手册中的<code>E:nth-child(n)</code>的示例。我们可以理解成：<strong>先根据选择器找到选中的全部位置，如果发现某个位置不是类型E，则该位置失效</strong>。</p>
<p>（3）另外，<code>E:nth-child(n)</code>这个属性也很有意思。</p>
<p>我们只要记住： <code>n</code> 表示 0,1,2,3,4,5,6,7,8…..就很容易明白了。</p>
<p><strong>2、格式：（第二部分）</strong></p>
<ul>
<li><p><code>E:first-of-type</code> 匹配同类型中的第一个同级兄弟元素E。</p>
</li>
<li><p><code>E:last-of-type</code> 匹配同类型中的最后一个同级兄弟元素E。</p>
</li>
<li><p><code>E:nth-of-type(n)</code> 匹配同类型中的第n个同级兄弟元素E。</p>
</li>
<li><p><code>E:nth-last-of-type(n)</code> 匹配同类型中的倒数第n个同级兄弟元素E。</p>
</li>
</ul>
<p>既然上面这几个选择器带有<code>type</code>，我们可以这样理解：先在同级里找到所有的E类型，然后根据 n 进行匹配。</p>
<p><strong>3、格式：（第三部分）</strong></p>
<ul>
<li><p><code>E:empty</code> 匹配没有任何子节点（包括空格等text节点）的元素E。</p>
</li>
<li><p><code>E:target</code> 匹配相关URL指向的E元素。要配合锚点使用。</p>
</li>
</ul>
<h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><p>伪元素选择器的标志性符号是 <code>::</code>。</p>
<p><strong>1、格式：（第一部分）</strong></p>
<ul>
<li><p><code>E::before</code> 设置在 元素E 前面（依据对象树的逻辑结构）的内容，配合content属性一起使用。</p>
</li>
<li><p><code>E::after</code> 设置在 元素E 后面（依据对象树的逻辑结构）的内容，配合content属性一起使用。</p>
</li>
</ul>
<p><code>E:after</code>、<code>E:before</code>在旧版本里是伪类，在 CSS3 这个新版本里是伪元素。新版本里，<code>E:after</code>、<code>E:before</code>会被自动识别为<code>E::after</code>、<code>E::before</code>，按伪元素来对待，这样做的目的是用来做兼容处理。</p>
<ul>
<li><p>通过伪元素选择器，就可以添加出类似于span标签的效果（记得要结合 content 属性使用）。</p>
</li>
<li><p>通过这两个属性添加的伪元素，是<strong>行内元素</strong>，需要转换成块元素才能设置宽高。</p>
</li>
</ul>
<p><strong>2、格式：（第二部分）</strong></p>
<ul>
<li><p><code>E::first-letter</code> 设置元素 E 里面的<strong>第一个字符</strong>的样式。</p>
</li>
<li><p><code>E::first-line</code> 设置元素 E 里面的<strong>第一行</strong>的样式。</p>
</li>
<li><p><code>E::selection</code> 设置元素 E 里面被鼠标选中的区域的样式（一般设置颜色和背景色）。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>流程控制：循环结构(for和while)</title>
    <url>/2020/04/18/08-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%EF%BC%9A%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84%EF%BC%88for%E5%92%8Cwhile%EF%BC%89/</url>
    <content><![CDATA[<hr>
<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><h3 id="for循环的语法"><a href="#for循环的语法" class="headerlink" title="for循环的语法"></a>for循环的语法</h3><a id="more"></a>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(①初始化表达式; ②条件表达式; ④更新表达式)&#123;</span><br><span class="line">	③语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行流程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">①执行初始化表达式，初始化变量（初始化表达式只会执行一次）</span><br><span class="line"></span><br><span class="line">②执行条件表达式，判断是否执行循环：</span><br><span class="line">	如果为true，则执行循环③</span><br><span class="line">	如果为false，终止循环</span><br><span class="line"></span><br><span class="line">④执行更新表达式，更新表达式执行完毕继续重复②</span><br></pre></td></tr></table></figure>



<p>for循环举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上方代码的解释：</p>
<p><img src="http://img.smyhvae.com/20180117_2248_2.png" alt=""></p>
<h3 id="for循环举例"><a href="#for循环举例" class="headerlink" title="for循环举例"></a>for循环举例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">13</span>; i = i + <span class="number">4</span>) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上方代码的遍历步骤：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">程序一运行，将执行var i &#x3D; 1;这条语句， 所以i的值是1。</span><br><span class="line">然后程序会验证一下i &lt; 13是否满足，1&lt;13是真，所以执行一次循环体（就是大括号里面的语句）。</span><br><span class="line">执行完循环体之后，会执行i&#x3D;i+4这条语句，所以i的值，是5。</span><br><span class="line"></span><br><span class="line">程序会会验证一下i &lt; 13是否满足，5&lt;13是真，所以执行一次循环体（就是大括号里面的语句）。</span><br><span class="line">执行完循环体之后，会执行i&#x3D;i+4这条语句，所以i的值，是9。</span><br><span class="line"></span><br><span class="line">程序会会验证一下i &lt; 13是否满足，9&lt;13是真，所以执行一次循环体（就是大括号里面的语句）。</span><br><span class="line">执行完循环体之后，会执行i&#x3D;i+4这条语句，所以i的值，是13。</span><br><span class="line"></span><br><span class="line">程序会会验证一下i &lt; 13是否满足，13&lt;13是假，所以不执行循环体了，将退出循环。</span><br><span class="line"></span><br><span class="line">最终输出输出结果为：1、5、9</span><br></pre></td></tr></table></figure>

<p>接下来做几个题目。</p>
<p><strong>题目1</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i = i + <span class="number">3</span>) &#123;</span><br><span class="line">	i = i + <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：2、6、10</p>
<p><strong>题目2</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br></pre></td></tr></table></figure>

<p>输出结果：11</p>
<p><strong>题目3</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">7</span>; i = i + <span class="number">3</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br></pre></td></tr></table></figure>

<p>输出结果：7</p>
<p><strong>题目4</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>死循环。</p>
<h2 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件表达式)&#123;</span><br><span class="line">	语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行流程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while语句在执行时，先对条件表达式进行求值判断：</span><br><span class="line"></span><br><span class="line">	如果值为true，则执行循环体：</span><br><span class="line">		循环体执行完毕以后，继续对表达式进行判断</span><br><span class="line">		如果为true，则继续执行循环体，以此类推</span><br><span class="line"></span><br><span class="line">	如果值为false，则终止循环</span><br></pre></td></tr></table></figure>


<p><strong>如果有必要的话，我们可以使用 break 来终止循环</strong>。</p>
<h3 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	语句...</span><br><span class="line">&#125;<span class="keyword">while</span>(条件表达式)</span><br></pre></td></tr></table></figure>

<p>执行流程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">do...while语句在执行时，会先执行循环体：</span><br><span class="line"></span><br><span class="line">	循环体执行完毕以后，在对while后的条件表达式进行判断：</span><br><span class="line">		如果结果为true，则继续执行循环体，执行完毕继续判断以此类推</span><br><span class="line">		如果结果为false，则终止循环</span><br></pre></td></tr></table></figure>


<h3 id="while循环和-do…while循环的区别"><a href="#while循环和-do…while循环的区别" class="headerlink" title="while循环和 do…while循环的区别"></a>while循环和 do…while循环的区别</h3><p>这两个语句的功能类似，不同的是：</p>
<ul>
<li>while是先判断后执行，而do…while是先执行后判断。</li>
</ul>
<p>也就是说，do…while可以保证循环体至少执行一次，而while不能。</p>
<h3 id="while循环举例"><a href="#while循环举例" class="headerlink" title="while循环举例"></a>while循环举例</h3><p><strong>题目</strong>：假如投资的年利率为5%，试求从1000块增长到5000块，需要花费多少年？</p>
<p><strong>代码实现</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        /*</span><br><span class="line">         * 假如投资的年利率为5%，试求从1000块增长到5000块，需要花费多少年</span><br><span class="line">         *</span><br><span class="line">         * 1000 1000*1.05</span><br><span class="line">         * 1050 1050*1.05</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//定义一个变量，表示当前的钱数</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> money = <span class="number">1000</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//定义一个计数器</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> count = <span class="number">0</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//定义一个while循环来计算每年的钱数</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">while</span> (money &lt; <span class="number">5000</span>) &#123;</span></span><br><span class="line">            money *= 1.05;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//使count自增</span></span></span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(money);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"一共需要"</span> + count + <span class="string">"年"</span>);</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5003.18854203379</span><br><span class="line"></span><br><span class="line">一共需要33年</span><br></pre></td></tr></table></figure>


<p>另外，你也可以自己算一下，假如投资的年利率为5%，从1000块增长到1万块，需要花费48年：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10401.269646942128</span><br><span class="line">一共需要48年</span><br></pre></td></tr></table></figure>


<h2 id="break-和-continue"><a href="#break-和-continue" class="headerlink" title="break 和 continue"></a>break 和 continue</h2><blockquote>
<p>这个知识点非常重要。</p>
</blockquote>
<h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><ul>
<li><p>break可以用来退出switch语句或退出<strong>整个</strong>循环语句（循环语句包括for循环、while循环。不包括if。if里不能用 break 和 continue，否则会报错）。</p>
</li>
<li><p>break会立即终止离它<strong>最近</strong>的那个循环语句。</p>
</li>
<li><p>可以为循环语句创建一个label，来标识当前的循环（格式：label:循环语句）。使用break语句时，可以在break后跟着一个label，这样break将会结束指定的循环，而不是最近的。</p>
</li>
</ul>
<p><strong>举例1</strong>：通过 break 终止循环语句</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i的值:'</span> + i);</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;  <span class="comment">// 注意，虽然在 if 里 使用了 break，但这里的 break 是服务于外面的 for 循环。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i的值:0</span><br><span class="line">i的值:1</span><br><span class="line">i的值:2</span><br></pre></td></tr></table></figure>


<p><strong>举例2</strong>：label的使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">outer:</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"外层循环 i 的值："</span> + i)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">break</span> outer; <span class="comment">// 直接跳出outer所在的外层循环（这个outer是我自定义的label）</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"内层循环 j 的值:"</span> + j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">外层循环 i 的值：0</span><br></pre></td></tr></table></figure>



<h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><ul>
<li><p>continue可以用来跳过<strong>当次</strong>循环，继续下一次循环。</p>
</li>
<li><p>同样，continue默认只会离他<strong>最近</strong>的循环起作用。</p>
</li>
</ul>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i的值:'</span> + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i的值:1</span><br><span class="line"></span><br><span class="line">i的值:3</span><br><span class="line"></span><br><span class="line">i的值:5</span><br><span class="line"></span><br><span class="line">i的值:7</span><br><span class="line"></span><br><span class="line">i的值:9</span><br></pre></td></tr></table></figure>


<h2 id="各种练习"><a href="#各种练习" class="headerlink" title="各种练习"></a>各种练习</h2><h3 id="练习一：质数相关"><a href="#练习一：质数相关" class="headerlink" title="练习一：质数相关"></a>练习一：质数相关</h3><p><strong>题目</strong>：在页面中接收一个用户输入的数字，并判断该数是否是质数。</p>
<p>代码实现：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">        /*</span><br><span class="line">            质数：只能被1和它自身整除的数，1不是质数也不是合数，质数必须是大于1的自然数。</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> num = prompt(<span class="string">"请输入一个大于1的整数:"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//判断这个值是否合法</span></span></span><br><span class="line">        if (num &lt;= 1) &#123;</span><br><span class="line"><span class="actionscript">            alert(<span class="string">"该值不合法！"</span>);</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//先用flag标志位，来保存当前的数的状态</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//默认当前num是质数</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> flag = <span class="literal">true</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//判断num是否是质数</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//获取2-num之间的数</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; num; i++) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//console.log(i);</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">//判断num是否能被i整除</span></span></span><br><span class="line">                if (num % i == 0) &#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">//一旦发现：如果num能被i整除，则说明num一定不是质数，</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//此时：设置flag为false，然后跳出 for 循环</span></span></span><br><span class="line"><span class="actionscript">                    flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//如果num是质数则输出</span></span></span><br><span class="line">            if (flag) &#123;</span><br><span class="line"><span class="actionscript">                alert(num + <span class="string">"是质数！！！"</span>);</span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">"这个不是质数"</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="练习二：质数相关"><a href="#练习二：质数相关" class="headerlink" title="练习二：质数相关"></a>练习二：质数相关</h3><p><strong>题目</strong>：打印1~100之间的所有质数</p>
<p>代码实现：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">         * 打印出1-100之间所有的质数</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//打印2-100之间所有的数</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//创建一个布尔值，用来保存结果，默认i是质数</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> flag = <span class="literal">true</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//判断i是否是质数</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//获取到2-i之间的所有的数</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">2</span>; j &lt; i; j++) &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">//判断i是否能被j整除</span></span></span><br><span class="line">                if (i % j == 0) &#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">//如果进入判断则证明i不是质数,修改flag值为false</span></span></span><br><span class="line"><span class="actionscript">                    flag = <span class="literal">false</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//如果是质数，则打印i的值</span></span></span><br><span class="line">            if (flag) &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(i);</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="练习三：99乘法表"><a href="#练习三：99乘法表" class="headerlink" title="练习三：99乘法表"></a>练习三：99乘法表</h3><p>代码实现：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            width: 2000px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        span &#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            width: 80px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">         * 1.打印99乘法表</span><br><span class="line">         *   1*1=1</span><br><span class="line">         *   1*2=2 2*2=4</span><br><span class="line">         *   1*3=3 2*3=6 3*3=9</span><br><span class="line">         *   1*4=4 2*4=8 3*4=12 4*4=16</span><br><span class="line">         *                      ....9*9=81</span><br><span class="line">         *</span><br><span class="line">         * 2.打印出1-100之间所有的质数</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//创建外层循环，用来控制乘法表的高度</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//创建一个内层循环来控制图形的宽度</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.write(<span class="string">"&lt;span&gt;"</span> + j + <span class="string">"*"</span> + i + <span class="string">"="</span> + i * j + <span class="string">"&lt;/span&gt;"</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//输出一个换行</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.write(<span class="string">"&lt;br /&gt;"</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>函数的拓展</title>
    <url>/2020/04/18/09-%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li>函数参数的默认值</li>
<li>rest 参数</li>
<li>严格模式</li>
<li>name 属性</li>
<li>箭头函数</li>
<li>尾调用优化</li>
<li>函数参数的尾逗号</li>
<li>Function.prototype.toString()</li>
<li>catch 命令的参数省略<a id="more"></a>
<h2 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h2></li>
</ul>
<h3 id="基本用法："><a href="#基本用法：" class="headerlink" title="基本用法："></a>基本用法：</h3><p><strong>ES6 允许为函数的参数设置默认值</strong>，即直接写在参数定义的后面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function log(x, y &#x3D; &#39;World&#39;) &#123;</span><br><span class="line">  console.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log(&#39;Hello&#39;) &#x2F;&#x2F; Hello World</span><br><span class="line">log(&#39;Hello&#39;, &#39;China&#39;) &#x2F;&#x2F; Hello China</span><br><span class="line">log(&#39;Hello&#39;, &#39;&#39;) &#x2F;&#x2F; Hello</span><br></pre></td></tr></table></figure>
<p>可以看到，ES6 的写法比 ES5 简洁许多，而且非常自然。下面是另一个例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Point(x &#x3D; 0, y &#x3D; 0) &#123;</span><br><span class="line">  this.x &#x3D; x;</span><br><span class="line">  this.y &#x3D; y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const p &#x3D; new Point();</span><br><span class="line">p &#x2F;&#x2F; &#123; x: 0, y: 0 &#125;</span><br></pre></td></tr></table></figure>
<p>除了简洁，ES6 的写法还有两个好处：首先，阅读代码的人，可以立刻意识到哪些参数是可以省略的，不用查看函数体或文档；其次，有利于将来的代码优化，即使未来的版本在对外接口中，彻底拿掉这个参数，也不会导致以前的代码无法运行。</p>
<p>参数变量是默认声明的，所以不能用let或const再次声明。</p>
<p><strong>使用参数默认值时，函数不能有同名参数</strong> 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 不报错</span><br><span class="line">function foo(x, x, y) &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">function foo(x, x, y &#x3D; 1) &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; SyntaxError: Duplicate parameter name not allowed in this context</span><br></pre></td></tr></table></figure>

<p>另外，一个容易忽略的地方是，参数默认值不是传值的，而是每次都重新计算默认值表达式的值。也就是说，参数默认值是惰性求值的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let x &#x3D; 99;</span><br><span class="line">function foo(p &#x3D; x + 1) &#123;</span><br><span class="line">  console.log(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo() &#x2F;&#x2F; 100</span><br><span class="line"></span><br><span class="line">x &#x3D; 100;</span><br><span class="line">foo() &#x2F;&#x2F; 101</span><br></pre></td></tr></table></figure>

<p>上面代码中，参数p的默认值是x + 1。这时，每次调用函数foo，都会重新计算x + 1，而不是默认p等于 100。</p>
<h3 id="与解构赋值默认值结合使用"><a href="#与解构赋值默认值结合使用" class="headerlink" title="与解构赋值默认值结合使用"></a>与解构赋值默认值结合使用</h3><p>参数默认值可以与解构赋值的默认值，结合起来使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function foo(&#123;x, y &#x3D; 5&#125;) &#123;</span><br><span class="line">  console.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(&#123;&#125;) &#x2F;&#x2F; undefined 5</span><br><span class="line">foo(&#123;x: 1&#125;) &#x2F;&#x2F; 1 5</span><br><span class="line">foo(&#123;x: 1, y: 2&#125;) &#x2F;&#x2F; 1 2</span><br><span class="line">foo() &#x2F;&#x2F; TypeError: Cannot read property &#39;x&#39; of undefined</span><br></pre></td></tr></table></figure>
<p>上面代码只使用了对象的解构赋值默认值，没有使用函数参数的默认值。只有当函数foo的参数是一个对象时，变量x和y才会通过解构赋值生成。如果函数foo调用时没提供参数，变量x和y就不会生成，从而报错。通过提供函数参数的默认值，就可以避免这种情况。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function foo(&#123;x, y &#x3D; 5&#125; &#x3D; &#123;&#125;) &#123;</span><br><span class="line">  console.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo() &#x2F;&#x2F; undefined 5</span><br></pre></td></tr></table></figure>
<p>上面代码指定，如果没有提供参数，函数foo的参数默认为一个空对象。</p>
<p>下面是另一个解构赋值默认值的例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function fetch(url, &#123; body &#x3D; &#39;&#39;, method &#x3D; &#39;GET&#39;, headers &#x3D; &#123;&#125; &#125;) &#123;</span><br><span class="line">  console.log(method);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetch(&#39;http:&#x2F;&#x2F;example.com&#39;, &#123;&#125;)</span><br><span class="line">&#x2F;&#x2F; &quot;GET&quot;</span><br><span class="line"></span><br><span class="line">fetch(&#39;http:&#x2F;&#x2F;example.com&#39;)</span><br><span class="line">&#x2F;&#x2F; 报错</span><br></pre></td></tr></table></figure>
<p>上面代码中，如果函数fetch的第二个参数是一个对象，就可以为它的三个属性设置默认值。这种写法不能省略第二个参数，如果结合函数参数的默认值，就可以省略第二个参数。这时，就出现了双重默认值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function fetch(url, &#123; body &#x3D; &#39;&#39;, method &#x3D; &#39;GET&#39;, headers &#x3D; &#123;&#125; &#125; &#x3D; &#123;&#125;) &#123;</span><br><span class="line">  console.log(method);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetch(&#39;http:&#x2F;&#x2F;example.com&#39;)</span><br><span class="line">&#x2F;&#x2F; &quot;GET&quot;</span><br></pre></td></tr></table></figure>

<p>上面代码中，函数fetch没有第二个参数时，函数参数的默认值就会生效，然后才是解构赋值的默认值生效，变量method才会取到默认值GET。</p>
<p>作为练习，请问下面两种写法有什么差别？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 写法一</span><br><span class="line">function m1(&#123;x &#x3D; 0, y &#x3D; 0&#125; &#x3D; &#123;&#125;) &#123;</span><br><span class="line">  return [x, y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 写法二</span><br><span class="line">function m2(&#123;x, y&#125; &#x3D; &#123; x: 0, y: 0 &#125;) &#123;</span><br><span class="line">  return [x, y];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面两种写法都对函数的参数设定了默认值，区别是写法一函数参数的默认值是空对象，但是设置了对象解构赋值的默认值；写法二函数参数的默认值是一个有具体属性的对象，但是没有设置对象解构赋值的默认值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 函数没有参数的情况</span><br><span class="line">m1() &#x2F;&#x2F; [0, 0]</span><br><span class="line">m2() &#x2F;&#x2F; [0, 0]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; x 和 y 都有值的情况</span><br><span class="line">m1(&#123;x: 3, y: 8&#125;) &#x2F;&#x2F; [3, 8]</span><br><span class="line">m2(&#123;x: 3, y: 8&#125;) &#x2F;&#x2F; [3, 8]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; x 有值，y 无值的情况</span><br><span class="line">m1(&#123;x: 3&#125;) &#x2F;&#x2F; [3, 0]</span><br><span class="line">m2(&#123;x: 3&#125;) &#x2F;&#x2F; [3, undefined]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; x 和 y 都无值的情况</span><br><span class="line">m1(&#123;&#125;) &#x2F;&#x2F; [0, 0];</span><br><span class="line">m2(&#123;&#125;) &#x2F;&#x2F; [undefined, undefined]</span><br><span class="line"></span><br><span class="line">m1(&#123;z: 3&#125;) &#x2F;&#x2F; [0, 0]</span><br><span class="line">m2(&#123;z: 3&#125;) &#x2F;&#x2F; [undefined, undefined]</span><br></pre></td></tr></table></figure>

<h3 id="参数默认值的位置"><a href="#参数默认值的位置" class="headerlink" title="参数默认值的位置"></a>参数默认值的位置</h3><p>通常情况下，定义了默认值的参数，应该是函数的尾参数。因为这样比较容易看出来，到底省略了哪些参数。如果非尾部的参数设置默认值，实际上这个参数是没法省略的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 例一</span><br><span class="line">function f(x &#x3D; 1, y) &#123;</span><br><span class="line">  return [x, y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f() &#x2F;&#x2F; [1, undefined]</span><br><span class="line">f(2) &#x2F;&#x2F; [2, undefined]</span><br><span class="line">f(, 1) &#x2F;&#x2F; 报错</span><br><span class="line">f(undefined, 1) &#x2F;&#x2F; [1, 1]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 例二</span><br><span class="line">function f(x, y &#x3D; 5, z) &#123;</span><br><span class="line">  return [x, y, z];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f() &#x2F;&#x2F; [undefined, 5, undefined]</span><br><span class="line">f(1) &#x2F;&#x2F; [1, 5, undefined]</span><br><span class="line">f(1, ,2) &#x2F;&#x2F; 报错</span><br><span class="line">f(1, undefined, 2) &#x2F;&#x2F; [1, 5, 2]</span><br></pre></td></tr></table></figure>

<p><strong>上面代码中，有默认值的参数都不是尾参数。这时，无法只省略该参数，而不省略它后面的参数，除非显式输入undefined。</strong></p>
<p>如果传入undefined，将触发该参数等于默认值，null则没有这个效果。</p>
<h3 id="函数的-length-属性"><a href="#函数的-length-属性" class="headerlink" title="函数的 length 属性"></a>函数的 length 属性</h3><p>指定了默认值以后，函数的length属性，<strong>将返回没有指定默认值的参数个数</strong>。也就是说，<strong>指定了默认值后，length属性将失真。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function (a) &#123;&#125;).length &#x2F;&#x2F; 1</span><br><span class="line">(function (a &#x3D; 5) &#123;&#125;).length &#x2F;&#x2F; 0</span><br><span class="line">(function (a, b, c &#x3D; 5) &#123;&#125;).length &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure>
<p>上面代码中，length属性的返回值，等于函数的参数个数减去指定了默认值的参数个数。比如，上面最后一个函数，定义了 3 个参数，其中有一个参数c指定了默认值，因此length属性等于3减去1，最后得到2。</p>
<p>这是因为length属性的含义是，该函数预期传入的参数个数。某个参数指定默认值以后，预期传入的参数个数就不包括这个参数了。同理，后文的 rest 参数也不会计入length属性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function (a &#x3D; 0, b, c) &#123;&#125;).length &#x2F;&#x2F; 0</span><br><span class="line">(function (a, b &#x3D; 1, c) &#123;&#125;).length &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure>
<p>如果设置了默认值的参数不是尾参数，那么length属性也不再计入后面的参数了。</p>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>一旦设置了参数的默认值，函数进行声明初始化时，<strong>参数会形成一个单独的作用域</strong>（context）。等到初始化结束，这个作用域就会消失。这种语法行为，在不设置参数默认值时，是不会出现的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x &#x3D; 1;</span><br><span class="line"></span><br><span class="line">function f(x, y &#x3D; x) &#123;</span><br><span class="line">  console.log(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(2) &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure>

<p>上面代码中，参数y的默认值等于变量x。调用函数f时，参数形成一个单独的作用域。在这个作用域里面，默认值变量x指向第一个参数x，而不是全局变量x，所以输出是2。</p>
<p>再看下面的例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let x &#x3D; 1;</span><br><span class="line"></span><br><span class="line">function f(y &#x3D; x) &#123;</span><br><span class="line">  let x &#x3D; 2;</span><br><span class="line">  console.log(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f() &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure>

<p>上面代码中，函数f调用时，参数y = x形成一个单独的作用域。这个作用域里面，变量x本身没有定义，所以指向外层的全局变量x。函数调用时，函数体内部的局部变量x影响不到默认值变量x。如果此时，全局变量x不存在，就会报错。</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>利用参数默认值，可以指定某一个参数不得省略，如果省略就抛出一个错误。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function throwIfMissing() &#123;</span><br><span class="line">  throw new Error(&#39;Missing parameter&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function foo(mustBeProvided &#x3D; throwIfMissing()) &#123;</span><br><span class="line">  return mustBeProvided;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line">&#x2F;&#x2F; Error: Missing parameter</span><br></pre></td></tr></table></figure>

<p>上面代码的foo函数，如果调用的时候没有参数，就会调用默认值throwIfMissing函数，从而抛出一个错误。</p>
<p>从上面代码还可以看到，参数mustBeProvided的默认值等于throwIfMissing函数的运行结果（注意函数名throwIfMissing之后有一对圆括号），这表明参数的默认值不是在定义时执行，而是在运行时执行。如果参数已经赋值，默认值中的函数就不会运行。</p>
<p>另外，可以将参数默认值设为undefined，表明这个参数是可以省略的。</p>
<h2 id="rest-参数"><a href="#rest-参数" class="headerlink" title="rest 参数"></a>rest 参数</h2><p>ES6 引入 <strong>rest 参数（形式为…变量名）</strong>，用于获取函数的多余参数，这样就不需要使用arguments对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function add(...values) &#123;</span><br><span class="line">  let sum &#x3D; 0;</span><br><span class="line"></span><br><span class="line">  for (var val of values) &#123;</span><br><span class="line">    sum +&#x3D; val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(2, 5, 3) &#x2F;&#x2F; 10</span><br></pre></td></tr></table></figure>

<p>上面代码的add函数是一个求和函数，利用 rest 参数，可以向该函数传入任意数目的参数。</p>
<p>下面是一个 rest 参数代替arguments变量的例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; arguments变量的写法</span><br><span class="line">function sortNumbers() &#123;</span><br><span class="line">  return Array.prototype.slice.call(arguments).sort();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; rest参数的写法</span><br><span class="line">const sortNumbers &#x3D; (...numbers) &#x3D;&gt; numbers.sort();</span><br></pre></td></tr></table></figure>

<p>上面代码的两种写法，比较后可以发现，rest 参数的写法更自然也更简洁。</p>
<p>arguments对象不是数组，而是一个类似数组的对象。所以为了使用数组的方法，必须<strong>使用Array.prototype.slice.call先将其转为数组</strong>。rest 参数就不存在这个问题，它就是一个真正的数组，数组特有的方法都可以使用。下面是一个利用 rest 参数改写数组push方法的例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function push(array, ...items) &#123;</span><br><span class="line">  items.forEach(function(item) &#123;</span><br><span class="line">    array.push(item);</span><br><span class="line">    console.log(item);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var a &#x3D; [];</span><br><span class="line">push(a, 1, 2, 3)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。</p>
</blockquote>
<h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>从 ES5 开始，函数内部可以设定为严格模式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function doSomething(a, b) &#123;</span><br><span class="line">  &#39;use strict&#39;;</span><br><span class="line">  &#x2F;&#x2F; code</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ES2016 做了一点修改，规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">function doSomething(a, b &#x3D; a) &#123;</span><br><span class="line">  &#39;use strict&#39;;</span><br><span class="line">  &#x2F;&#x2F; code</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">const doSomething &#x3D; function (&#123;a, b&#125;) &#123;</span><br><span class="line">  &#39;use strict&#39;;</span><br><span class="line">  &#x2F;&#x2F; code</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">const doSomething &#x3D; (...a) &#x3D;&gt; &#123;</span><br><span class="line">  &#39;use strict&#39;;</span><br><span class="line">  &#x2F;&#x2F; code</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const obj &#x3D; &#123;</span><br><span class="line">  &#x2F;&#x2F; 报错</span><br><span class="line">  doSomething(&#123;a, b&#125;) &#123;</span><br><span class="line">    &#39;use strict&#39;;</span><br><span class="line">    &#x2F;&#x2F; code</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这样规定的原因是，函数内部的严格模式，同时适用于函数体和函数参数。但是，函数执行的时候，先执行函数参数，然后再执行函数体。这样就有一个不合理的地方，只有从函数体之中，才能知道参数是否应该以严格模式执行，但是参数却应该先于函数体执行。</p>
<h2 id="name-属性"><a href="#name-属性" class="headerlink" title="name 属性"></a>name 属性</h2><p>函数的name属性，返回该函数的函数名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function foo() &#123;&#125;</span><br><span class="line">foo.name &#x2F;&#x2F; &quot;foo&quot;</span><br></pre></td></tr></table></figure>

<p>这个属性早就被浏览器广泛支持，但是直到 ES6，才将其写入了标准。</p>
<p>需要注意的是，ES6 对这个属性的行为做出了一些修改。如果将一个匿名函数赋值给一个变量，ES5 的name属性，会返回空字符串，而 ES6 的name属性会返回实际的函数名。</p>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>ES6 允许使用“箭头”（=&gt;）定义函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var f &#x3D; v &#x3D;&gt; v;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">var f &#x3D; function (v) &#123;</span><br><span class="line">  return v;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。</p>
</blockquote>
<blockquote>
<p>如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回。</p>
</blockquote>
<blockquote>
<p>由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">let getTempItem &#x3D; id &#x3D;&gt; &#123; id: id, name: &quot;Temp&quot; &#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 不报错</span><br><span class="line">let getTempItem &#x3D; id &#x3D;&gt; (&#123; id: id, name: &quot;Temp&quot; &#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果箭头函数只有一行语句，且不需要返回值，可以采用下面的写法，就不用写大括号了。</p>
</blockquote>
<p><code>let fn = () =&gt; void doesNotReturn();</code></p>
<blockquote>
<p>箭头函数可以与变量解构结合使用。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const full &#x3D; (&#123; first, last &#125;) &#x3D;&gt; first + &#39; &#39; + last;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">function full(person) &#123;</span><br><span class="line">  return person.first + &#39; &#39; + person.last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>箭头函数使得表达更加简洁。</p>
</blockquote>
<blockquote>
<p>箭头函数的一个用处是简化回调函数。</p>
</blockquote>
<h3 id="使用注意点"><a href="#使用注意点" class="headerlink" title="使用注意点"></a>使用注意点</h3><p>箭头函数有几个使用注意点。</p>
<ul>
<li>函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</li>
<li>不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</li>
<li>不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</li>
<li>不可以使用yield命令，因此箭头函数不能用作 Generator 函数。</li>
</ul>
<p>上面四点中，第一点尤其值得注意。<strong>this对象的指向是可变的，但是在箭头函数中，它是固定的</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;id:&#39;, this.id);</span><br><span class="line">  &#125;, 100);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var id &#x3D; 21;</span><br><span class="line"></span><br><span class="line">foo.call(&#123; id: 42 &#125;);</span><br><span class="line">&#x2F;&#x2F; id: 42</span><br></pre></td></tr></table></figure>
<p>上面代码中，setTimeout的参数是一个箭头函数，这个箭头函数的定义生效是在foo函数生成时，而它的真正执行要等到 100 毫秒后。如果是普通函数，执行时this应该指向全局对象window，这时应该输出21。但是，箭头函数导致this总是指向函数定义生效时所在的对象（本例是{id: 42}），所以输出的是42。</p>
<p>箭头函数可以让setTimeout里面的this，绑定定义时所在的作用域，而不是指向运行时所在的作用域。下面是另一个例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Timer() &#123;</span><br><span class="line">  this.s1 &#x3D; 0;</span><br><span class="line">  this.s2 &#x3D; 0;</span><br><span class="line">  &#x2F;&#x2F; 箭头函数</span><br><span class="line">  setInterval(() &#x3D;&gt; this.s1++, 1000);</span><br><span class="line">  &#x2F;&#x2F; 普通函数</span><br><span class="line">  setInterval(function () &#123;</span><br><span class="line">    this.s2++;</span><br><span class="line">  &#125;, 1000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var timer &#x3D; new Timer();</span><br><span class="line"></span><br><span class="line">setTimeout(() &#x3D;&gt; console.log(&#39;s1: &#39;, timer.s1), 3100);</span><br><span class="line">setTimeout(() &#x3D;&gt; console.log(&#39;s2: &#39;, timer.s2), 3100);</span><br><span class="line">&#x2F;&#x2F; s1: 3</span><br><span class="line">&#x2F;&#x2F; s2: 0</span><br></pre></td></tr></table></figure>

<p>上面代码中，Timer函数内部设置了两个定时器，分别使用了箭头函数和普通函数。<strong>前者的this绑定定义时所在的作用域（即Timer函数），后者的this指向运行时所在的作用域（即全局对象）</strong>。所以，3100 毫秒之后，timer.s1被更新了 3 次，而timer.s2一次都没更新。</p>
<p>箭头函数可以让this指向固定化，这种特性很有利于封装回调函数。</p>
<p>this指向的固定化，并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，导致内部的this就是外层代码块的this。正是因为它没有this，所以也就不能用作构造函数。</p>
<p>除了this，<strong>以下三个变量在箭头函数之中也是不存在的，指向外层函数的对应变量：arguments、super、new.target</strong>。</p>
<p>另外，由于箭头函数没有自己的this，所以当然也就不能用call()、apply()、bind()这些方法去改变this的指向。</p>
<p>长期以来，JavaScript 语言的this对象一直是一个令人头痛的问题，在对象方法中使用this，必须非常小心。箭头函数”绑定”this，很大程度上解决了这个困扰。</p>
<h3 id="不适用场合"><a href="#不适用场合" class="headerlink" title="不适用场合"></a>不适用场合</h3><p>由于箭头函数使得this从“动态”变成“静态”，下面两个场合不应该使用箭头函数。</p>
<ul>
<li>第一个场合是定义对象的方法，且该方法内部包括this。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const cat &#x3D; &#123;</span><br><span class="line">  lives: 9,</span><br><span class="line">  jumps: () &#x3D;&gt; &#123;</span><br><span class="line">    this.lives--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>上面代码中，cat.jumps()方法是一个箭头函数，这是错误的。调用cat.jumps()时，如果是普通函数，该方法内部的this指向cat；如果写成上面那样的箭头函数，使得this指向全局对象，因此不会得到预期结果。这是因为对象不构成单独的作用域，导致jumps箭头函数定义时的作用域就是全局作用域。</p>
<ul>
<li>第二个场合是需要动态this的时候，也不应使用箭头函数。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var button &#x3D; document.getElementById(&#39;press&#39;);</span><br><span class="line">button.addEventListener(&#39;click&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">  this.classList.toggle(&#39;on&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码运行时，点击按钮会报错，因为button的监听函数是一个箭头函数，导致里面的this就是全局对象。如果改成普通函数，this就会动态指向被点击的按钮对象。</p>
<p>另外，如果函数体很复杂，有许多行，或者函数内部有大量的读写操作，不单纯是为了计算值，这时也不应该使用箭头函数，而是要使用普通函数，这样可以提高代码可读性。</p>
<h3 id="嵌套的箭头函数"><a href="#嵌套的箭头函数" class="headerlink" title="嵌套的箭头函数"></a>嵌套的箭头函数</h3><p>箭头函数内部，还可以再使用箭头函数。下面是一个 ES5 语法的多重嵌套函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function insert(value) &#123;</span><br><span class="line">  return &#123;into: function (array) &#123;</span><br><span class="line">    return &#123;after: function (afterValue) &#123;</span><br><span class="line">      array.splice(array.indexOf(afterValue) + 1, 0, value);</span><br><span class="line">      return array;</span><br><span class="line">    &#125;&#125;;</span><br><span class="line">  &#125;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">insert(2).into([1, 3]).after(1); &#x2F;&#x2F;[1, 2, 3]</span><br></pre></td></tr></table></figure>

<p>上面这个函数，可以使用箭头函数改写。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let insert &#x3D; (value) &#x3D;&gt; (&#123;into: (array) &#x3D;&gt; (&#123;after: (afterValue) &#x3D;&gt; &#123;</span><br><span class="line">  array.splice(array.indexOf(afterValue) + 1, 0, value);</span><br><span class="line">  return array;</span><br><span class="line">&#125;&#125;)&#125;);</span><br><span class="line"></span><br><span class="line">insert(2).into([1, 3]).after(1); &#x2F;&#x2F;[1, 2, 3]</span><br></pre></td></tr></table></figure>

<h2 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h2><h3 id="什么是尾调用？"><a href="#什么是尾调用？" class="headerlink" title="什么是尾调用？"></a>什么是尾调用？</h3><p>尾调用（Tail Call）是函数式编程的一个重要概念，本身非常简单，一句话就能说清楚，就是指某个函数的最后一步是调用另一个函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function f(x)&#123;</span><br><span class="line">  return g(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，函数f的最后一步是调用函数g，这就叫尾调用。</p>
<h3 id="尾调用优化-1"><a href="#尾调用优化-1" class="headerlink" title="尾调用优化"></a>尾调用优化</h3><p>尾调用之所以与其他调用不同，就在于它的特殊的调用位置。</p>
<p>我们知道，函数调用会在内存形成一个“调用记录”，又称“调用帧”（call frame），保存调用位置和内部变量等信息。如果在函数A的内部调用函数B，那么在A的调用帧上方，还会形成一个B的调用帧。等到B运行结束，将结果返回到A，B的调用帧才会消失。如果函数B内部还调用函数C，那就还有一个C的调用帧，以此类推。所有的调用帧，就形成一个“调用栈”（call stack）。</p>
<p>尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function f() &#123;</span><br><span class="line">  let m &#x3D; 1;</span><br><span class="line">  let n &#x3D; 2;</span><br><span class="line">  return g(m + n);</span><br><span class="line">&#125;</span><br><span class="line">f();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">function f() &#123;</span><br><span class="line">  return g(3);</span><br><span class="line">&#125;</span><br><span class="line">f();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">g(3);</span><br></pre></td></tr></table></figure>

<p>上面代码中，如果函数g不是尾调用，函数f就需要保存内部变量m和n的值、g的调用位置等信息。但由于调用g之后，函数f就结束了，所以执行到最后一步，完全可以删除f(x)的调用帧，只保留g(3)的调用帧。</p>
<p>这就叫做“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。</p>
<p>注意，只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function addOne(a)&#123;</span><br><span class="line">  var one &#x3D; 1;</span><br><span class="line">  function inner(b)&#123;</span><br><span class="line">    return b + one;</span><br><span class="line">  &#125;</span><br><span class="line">  return inner(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的函数不会进行尾调用优化，因为内层函数inner用到了外层函数addOne的内部变量one。</p>
<p>注意，目前只有 Safari 浏览器支持尾调用优化，Chrome 和 Firefox 都不支持。</p>
<h3 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h3><p>函数调用自身，称为递归。如果尾调用自身，就称为尾递归。</p>
<h2 id="函数参数的尾逗号"><a href="#函数参数的尾逗号" class="headerlink" title="函数参数的尾逗号"></a>函数参数的尾逗号</h2><p>ES2017 允许函数的最后一个参数有尾逗号（trailing comma）。</p>
<p>此前，函数定义和调用时，都不允许最后一个参数后面出现逗号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function clownsEverywhere(</span><br><span class="line">  param1,</span><br><span class="line">  param2</span><br><span class="line">) &#123; &#x2F;* ... *&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">clownsEverywhere(</span><br><span class="line">  &#39;foo&#39;,</span><br><span class="line">  &#39;bar&#39;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>上面代码中，如果在param2或bar后面加一个逗号，就会报错。</p>
<p>如果像上面这样，将参数写成多行（即每个参数占据一行），以后修改代码的时候，想为函数clownsEverywhere添加第三个参数，或者调整参数的次序，就势必要在原来最后一个参数后面添加一个逗号。这对于版本管理系统来说，就会显示添加逗号的那一行也发生了变动。这看上去有点冗余，因此新的语法允许定义和调用时，尾部直接有一个逗号。</p>
<h2 id="Function-prototype-toString"><a href="#Function-prototype-toString" class="headerlink" title="Function.prototype.toString()"></a>Function.prototype.toString()</h2><p>ES2019 对函数实例的toString()方法做出了修改。</p>
<p>toString()方法返回函数代码本身，以前会省略注释和空格。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function &#x2F;* foo comment *&#x2F; foo () &#123;&#125;</span><br><span class="line"></span><br><span class="line">foo.toString()</span><br><span class="line">&#x2F;&#x2F; function foo() &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，函数foo的原始代码包含注释，函数名foo和圆括号之间有空格，但是toString()方法都把它们省略了。</p>
<p>修改后的toString()方法，明确要求返回一模一样的原始代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function &#x2F;* foo comment *&#x2F; foo () &#123;&#125;</span><br><span class="line"></span><br><span class="line">foo.toString()</span><br><span class="line">&#x2F;&#x2F; &quot;function &#x2F;* foo comment *&#x2F; foo () &#123;&#125;&quot;</span><br></pre></td></tr></table></figure>

<h2 id="catch-命令的参数省略"><a href="#catch-命令的参数省略" class="headerlink" title="catch 命令的参数省略"></a>catch 命令的参数省略</h2><p>JavaScript 语言的try…catch结构，以前明确要求catch命令后面必须跟参数，接受try代码块抛出的错误对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125; catch (err) &#123;</span><br><span class="line">  &#x2F;&#x2F; 处理错误</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，catch命令后面带有参数err。</p>
<p>很多时候，catch代码块可能用不到这个参数。但是，为了保证语法正确，还是必须写。ES2019 做出了改变，允许catch语句省略参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125; catch &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>对象简介和对象的基本操作</title>
    <url>/2020/04/18/09-%E5%AF%B9%E8%B1%A1%E7%AE%80%E4%BB%8B%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<hr>
<h2 id="对象简介"><a href="#对象简介" class="headerlink" title="对象简介"></a>对象简介</h2><h3 id="面向对象简介"><a href="#面向对象简介" class="headerlink" title="面向对象简介"></a>面向对象简介</h3><p>面向对象：可以创建自定义的类型，很好的支持继承和多态。</p>
<p>面向对象的特征：封装、继承、多态。</p>
<a id="more"></a>

<h3 id="对象的概念"><a href="#对象的概念" class="headerlink" title="对象的概念"></a>对象的概念</h3><p>在 JavaScript 中，对象是一组<strong>无序</strong>的相关属性和方法的集合。</p>
<p><strong>对象的作用是：封装信息</strong>。比如Student类里可以封装学生的姓名、年龄、成绩等。</p>
<p>对象具有<strong>特征</strong>（属性）和<strong>行为</strong>（方法）。</p>
<h3 id="为什么需要对象"><a href="#为什么需要对象" class="headerlink" title="为什么需要对象"></a>为什么需要对象</h3><p>保存一个值时，可以使用<strong>变量</strong>，保存多个值（一组值）时，可以使用<strong>数组</strong>。</p>
<p>比如，如果要保存一个人的信息，通过数组的方式可以这样保存：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'王二'</span>, <span class="number">35</span>, <span class="string">'男'</span>, <span class="string">'180'</span>];</span><br></pre></td></tr></table></figure>

<p>上面这种表达方式比较乱。而如果用JS中的<strong>对象</strong>来表达，<strong>结构会更清晰</strong>。如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">person.name = <span class="string">'王二'</span>;</span><br><span class="line">person.age = <span class="number">35</span>;</span><br><span class="line">person.sex = <span class="string">'男'</span>;</span><br><span class="line">person.height = <span class="string">'180'</span>;</span><br></pre></td></tr></table></figure>

<p>由此可见，对象里面的属性均是<strong>键值对</strong>：</p>
<ul>
<li><p>键：相当于属性名。</p>
</li>
<li><p>值：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）。</p>
</li>
</ul>
<h3 id="两条补充"><a href="#两条补充" class="headerlink" title="两条补充"></a>两条补充</h3><p><strong>补充1</strong>：对象的属性值可以是任何的数据类型，也可以是个<strong>函数</strong>：（也称之为方法）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'smyhvae'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.sayName);  <span class="comment">//没加括号，就是获取方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'-----------'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj.sayName());  <span class="comment">//加了括号，就是调用方法。即：执行函数内容，并执行函数体的内容</span></span><br></pre></td></tr></table></figure>


<p><strong>补充2</strong>：对象中的属性值，也可以是一个<strong>对象</strong>。</p>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建对象 obj1</span></span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj1.test = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建对象 obj2</span></span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj2.name = <span class="string">"smyhvae"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将整个 obj2 对象，设置为 obj1 的属性</span></span><br><span class="line">obj1.test = obj2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj1.test.name);</span><br></pre></td></tr></table></figure>

<p>打印结果为：smyhvae</p>
<h2 id="对象和数据类型之间的关系"><a href="#对象和数据类型之间的关系" class="headerlink" title="对象和数据类型之间的关系"></a>对象和数据类型之间的关系</h2><p>数据类型分类：</p>
<ul>
<li><p><strong>基本数据类型（值类型）</strong>：String 字符串、Number 数值、Boolean 布尔值、Null 空值、Undefined 未定义。</p>
</li>
<li><p><strong>引用数据类型（引用类型）</strong>：Object 对象。</p>
</li>
</ul>
<p><strong>基本数据类型</strong>：</p>
<p>基本数据类型的值直接保存在<strong>栈内存</strong>中，值与值之间是独立存在，修改一个变量不会影响其他的变量。</p>
<p><strong>对象</strong>：</p>
<p>只要不是那五种基本数据类型，就全都是对象。</p>
<p>如果使用基本数据类型的数据，我们所创建的变量都是独立，不能成为一个整体。</p>
<p>对象属于一种复合的数据类型，在对象中可以保存多个不同数据类型的属性。</p>
<p>换而言之，对象的值是保存在<strong>堆内存</strong>中的，而对象的引用（即变量）是保存在<strong>栈内存</strong>中的。</p>
<p><strong>如果两个变量保存的是同一个对象引用，当一个通过一个变量修改属性时，另一个也会受到影响</strong>。</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.name = <span class="string">"孙悟空"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改obj的name属性</span></span><br><span class="line">obj.name = <span class="string">"猪八戒"</span>;</span><br></pre></td></tr></table></figure>

<p>上面的代码中，当我修改obj的name属性后，会发现，obj2的name属性也会被修改。因为obj和obj2指向的是堆内存中的同一个地址。</p>
<h2 id="对象的分类"><a href="#对象的分类" class="headerlink" title="对象的分类"></a>对象的分类</h2><p>1.内置对象：</p>
<ul>
<li><p>由ES标准中定义的对象，在任何的ES的实现中都可以使用</p>
</li>
<li><p>比如：Math、String、Number、Boolean、Function、Object….</p>
</li>
</ul>
<p>2.宿主对象：</p>
<ul>
<li><p>由JS的运行环境提供的对象，目前来讲主要指由浏览器提供的对象。</p>
</li>
<li><p>比如 BOM DOM。比如<code>console</code>、<code>document</code>。</p>
</li>
</ul>
<p>3.自定义对象：</p>
<ul>
<li>由开发人员自己创建的对象</li>
</ul>
<h2 id="对象的基本操作"><a href="#对象的基本操作" class="headerlink" title="对象的基本操作"></a>对象的基本操作</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>使用new关键字调用的函数，是构造函数constructor。<strong>构造函数是专门用来创建对象的函数</strong>。</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure>

<p>记住，使用<code>typeof</code>检查一个对象时，会返回<code>object</code>。</p>
<h3 id="向对象中添加属性"><a href="#向对象中添加属性" class="headerlink" title="向对象中添加属性"></a>向对象中添加属性</h3><p>在对象中保存的值称为属性。</p>
<p>向对象添加属性的语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">对象.属性名 = 属性值;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//向obj中添加一个name属性</span></span><br><span class="line">obj.name = <span class="string">"孙悟空"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向obj中添加一个gender属性</span></span><br><span class="line">obj.gender = <span class="string">"男"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向obj中添加一个age属性</span></span><br><span class="line">obj.age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj)); <span class="comment">// 将 obj 以字符串的形式打印出来</span></span><br></pre></td></tr></table></figure>


<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;name&quot;:&quot;孙悟空&quot;,</span><br><span class="line">	&quot;gender&quot;:&quot;男&quot;,</span><br><span class="line">	&quot;age&quot;:18</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取对象中的属性"><a href="#获取对象中的属性" class="headerlink" title="获取对象中的属性"></a>获取对象中的属性</h3><p><strong>方式1</strong>：</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">对象.属性名</span><br></pre></td></tr></table></figure>

<p>如果获取对象中没有的属性，不会报错而是返回<code>undefined</code>。</p>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//向obj中添加一个name属性</span></span><br><span class="line">obj.name = <span class="string">"孙悟空"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向obj中添加一个gender属性</span></span><br><span class="line">obj.gender = <span class="string">"男"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向obj中添加一个age属性</span></span><br><span class="line">obj.age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取对象中的属性，并打印出来</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.gender); <span class="comment">// 打印结果：男</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.color);  <span class="comment">// 打印结果：undefined</span></span><br></pre></td></tr></table></figure>


<p><strong>方式2</strong>：可以使用<code>[]</code>这种形式去操作属性</p>
<p>对象的属性名不强制要求遵守标识符的规范，不过我们尽量要按照标识符的规范去做。</p>
<p>但如果确实要使用特殊的属性名，就不能采用<code>.</code>的方式来操作对象的属性。比如说，<code>123</code>这种属性名，如果我们直接写成<code>obj.123 = 789</code>来操作属性，是会报错的。那怎么办呢？办法如下：</p>
<p>语法格式如下：（读取时，也是采用这种方式）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意，括号里的属性名，必须要加引号</span></span><br><span class="line">对象[<span class="string">'属性名'</span>] = 属性值</span><br></pre></td></tr></table></figure>

<p>上面这种语法格式，举例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj[<span class="string">'123'</span>] = <span class="number">789</span>;</span><br></pre></td></tr></table></figure>


<p><strong>重要</strong>：使用<code>[]</code>这种形式去操作属性，更加的灵活，因为，我们可以在<code>[]</code>中直接传递一个<strong>变量</strong>。</p>
<h3 id="修改对象的属性值"><a href="#修改对象的属性值" class="headerlink" title="修改对象的属性值"></a>修改对象的属性值</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">对象.属性名 = 新值</span><br></pre></td></tr></table></figure>


<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj.name = <span class="string">"tom"</span>;</span><br></pre></td></tr></table></figure>


<h3 id="删除对象的属性"><a href="#删除对象的属性" class="headerlink" title="删除对象的属性"></a>删除对象的属性</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> obj.name;</span><br></pre></td></tr></table></figure>


<h3 id="in-运算符"><a href="#in-运算符" class="headerlink" title="in 运算符"></a>in 运算符</h3><p>通过该运算符可以检查一个对象中是否含有指定的属性。如果有则返回true，没有则返回false。</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"属性名"</span> <span class="keyword">in</span> 对象</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查obj中是否含有name属性</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"name"</span> <span class="keyword">in</span> obj);</span><br></pre></td></tr></table></figure>


<p>我们平时使用的对象不一定是自己创建的，可能是别人提供的，这个时候，in 运算符可以派上用场。</p>
<h2 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h2><p>如果要创建一个对象，我们可以使用下面这种方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure>


<p>但是上面的这种方式，比较麻烦，我们还有更简洁的方式来创建一个对象。如下。</p>
<p>使用对象字面量来创建一个对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br></pre></td></tr></table></figure>


<p>使用对象字面量，可以在创建对象时，直接指定对象中的属性。语法：{属性名:属性值,属性名:属性值….}</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line"></span><br><span class="line">	name: <span class="string">"猪八戒"</span>,</span><br><span class="line">	age: <span class="number">13</span>,</span><br><span class="line">	gender: <span class="string">"男"</span>,</span><br><span class="line">	test: &#123;</span><br><span class="line">		name: <span class="string">"沙僧"</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//我们还可以在对象中增加一个方法。以后可以通过obj2.sayName()的方式调用这个方法</span></span><br><span class="line">	sayName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'smyhvae'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<p>对象字面量的属性名可以加引号也可以不加，建议不加。如果要使用一些特殊的名字，则必须加引号。</p>
<p>属性名和属性值是一组一组的键值对结构，键和值之间使用<code>:</code>连接，多个值对之间使用<code>,</code>隔开。如果一个属性之后没有其他的属性了，就不要写<code>,</code>，因为它是对象的最后一个属性。</p>
<h2 id="遍历对象中的属性：for-…-in"><a href="#遍历对象中的属性：for-…-in" class="headerlink" title="遍历对象中的属性：for … in"></a>遍历对象中的属性：for … in</h2><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> 变量 <span class="keyword">in</span> 对象名) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：对象中有几个属性，循环体就会执行几次。每次执行时，会将对象中的<strong>每个属性的 属性名 赋值给变量</strong>。</p>
<p>语法举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(key); <span class="comment">// 这里的 key 是：对象属性的键</span></span><br><span class="line">	<span class="built_in">console</span>.log(obj[key]); <span class="comment">// 这里的 obj[key] 是：对象属性的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">		<span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="actionscript">			name: <span class="string">"smyhvae"</span>,</span></span><br><span class="line">			age: 26,</span><br><span class="line"><span class="actionscript">			gender: <span class="string">"男"</span>,</span></span><br><span class="line"><span class="actionscript">			address: <span class="string">"shenzhen"</span>,</span></span><br><span class="line"><span class="actionscript">            sayHi: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span></span><br><span class="line">            &#125;</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">		<span class="comment">// 遍历对象中的属性</span></span></span><br><span class="line"><span class="actionscript">		<span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span></span><br><span class="line"><span class="javascript">			<span class="built_in">console</span>.log(<span class="string">"属性名:"</span> + key);</span></span><br><span class="line"><span class="javascript">			<span class="built_in">console</span>.log(<span class="string">"属性值:"</span> + obj[key]); <span class="comment">// 注意，因为这里的属性名 keu 是变量，所以，如果想获取属性值，不能写成 obj.key，而是要写成 obj[key]</span></span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">属性名:name</span><br><span class="line">属性值:smyhvae</span><br><span class="line"></span><br><span class="line">属性名:age</span><br><span class="line">属性值:26</span><br><span class="line"></span><br><span class="line">属性名:gender</span><br><span class="line">属性值:男</span><br><span class="line"></span><br><span class="line">属性名:address</span><br><span class="line">属性值:shenzhen</span><br><span class="line"></span><br><span class="line">属性名:sayHi</span><br><span class="line">属性值:function() &#123;</span><br><span class="line">                    console.log(this.name);</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3属性详解1</title>
    <url>/2020/04/18/10-CSS3%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A31/</url>
    <content><![CDATA[<p>—## 本文主要内容：</p>
<ul>
<li><p>文本</p>
</li>
<li><p>盒模型中的 box-sizing 属性</p>
</li>
<li><p>处理兼容性问题：私有前缀</p>
</li>
<li><p>边框</p>
</li>
<li><p>背景属性</p>
</li>
<li><p>渐变</p>
<a id="more"></a>

</li>
</ul>
<h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><h3 id="text-shadow：设置文本的阴影"><a href="#text-shadow：设置文本的阴影" class="headerlink" title="text-shadow：设置文本的阴影"></a>text-shadow：设置文本的阴影</h3><p>格式举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">text-shadow: <span class="number">20</span>px <span class="number">27</span>px <span class="number">22</span>px pink;</span><br></pre></td></tr></table></figure>

<p>参数解释：水平位移 垂直位移 模糊程度 阴影颜色。</p>
<p>text-shadow 可以设置多个阴影，每个阴影之间使用逗号隔开。我们来看个例子。</p>
<h2 id="盒模型中的-box-sizing-属性"><a href="#盒模型中的-box-sizing-属性" class="headerlink" title="盒模型中的 box-sizing 属性"></a>盒模型中的 box-sizing 属性</h2><p>CSS3 对盒模型做出了新的定义，即允许开发人员<strong>指定盒子宽度和高度的计算方式</strong>。</p>
<p>这就需要用到 <code>box-sizing</code>属性。它的属性值可以是：<code>content-box</code>、<code>border-box</code>。解释如下。</p>
<p><strong>外加模式：</strong>（css的默认方式）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">box-sizing: content-box;</span><br></pre></td></tr></table></figure>

<p>解释：此时设置的 width 和 height 是<strong>内容区域</strong>的宽高。<code>盒子的实际宽度 = 设置的 width + padding + border</code>。此时改变 padding 和 border 的大小，也不会改变内容的宽高，而是盒子的总宽高发生变化。</p>
<p><strong>内减模式：</strong>【需要注意】</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">box-sizing: border-box;</span><br></pre></td></tr></table></figure>


<p>解释：此时设置的 width 和 height 是<strong>盒子</strong>的总宽高。<code>盒子的实际宽度 = 设置的 width</code>。此时改变 padding 和 border 的大小，会改变内容的宽高，盒子的总宽高不变。</p>
<h2 id="处理兼容性问题：私有前缀"><a href="#处理兼容性问题：私有前缀" class="headerlink" title="处理兼容性问题：私有前缀"></a>处理兼容性问题：私有前缀</h2><p>处理兼容性问题的常见方法：为属性添加<strong>私有前缀</strong>。</p>
<p>如此方法不能解决，应尽量避免使用，无需刻意去处理CSS3的兼容性问题。</p>
<p><strong>私有前缀的举例</strong>：</p>
<p>比如说，我想给指定的div设置下面这样一个属性：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">left</span>, <span class="selector-tag">green</span>, <span class="selector-tag">yellow</span>);</span><br></pre></td></tr></table></figure>

<p>上面这个属性的作用是：添加从左到右的线性渐变，颜色从绿色变为黄色。</p>
<p>此时，我们可以<strong>为浏览器添加不同的私有前缀</strong>，属性就可以生效了。</p>
<p>格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">-webkit-: 谷歌 苹果</span><br><span class="line">-moz-:火狐</span><br><span class="line">-ms-：IE</span><br><span class="line">-o-：欧朋</span><br></pre></td></tr></table></figure>

<p>格式举例如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-webkit-linear-gradient</span>(<span class="selector-tag">left</span>, <span class="selector-tag">green</span>, <span class="selector-tag">yellow</span>);</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">left</span>, <span class="selector-tag">green</span>, <span class="selector-tag">yellow</span>);</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">left</span>, <span class="selector-tag">green</span>, <span class="selector-tag">yellow</span>);</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-o-linear-gradient</span>(<span class="selector-tag">left</span>, <span class="selector-tag">green</span>, <span class="selector-tag">yellow</span>);</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">left</span>, <span class="selector-tag">green</span>, <span class="selector-tag">yellow</span>);</span><br></pre></td></tr></table></figure>


<h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><p>边框的属性很多，其中<strong>边框圆角</strong>和<strong>边框阴影</strong>这两个属性，应用十分广泛，兼容性也相对较好，且符合<strong>渐进增强</strong>的原则，需要重点熟悉。</p>
<h3 id="边框圆角：border-radius-属性"><a href="#边框圆角：border-radius-属性" class="headerlink" title="边框圆角：border-radius 属性"></a>边框圆角：<code>border-radius</code> 属性</h3><p>边框的每个圆角，本质上是一个圆，圆有<strong>水平半径</strong>和<strong>垂直半径</strong>：如果二者相等，就是圆；如果二者不等， 就是椭圆。</p>
<p>单个属性的写法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">border-top-left-radius: 60px 120px;        //参数解释：水平半径   垂直半径</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">border-top-right-radius</span>: 60<span class="selector-tag">px</span> 120<span class="selector-tag">px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">border-bottom-left-radius</span>: 60<span class="selector-tag">px</span> 120<span class="selector-tag">px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">border-bottom-right-radius</span>: 60<span class="selector-tag">px</span> 120<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure>

<p>复合写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">border-radius: 60px&#x2F;120px;             &#x2F;&#x2F;参数：水平半径&#x2F;垂直半径</span><br><span class="line"></span><br><span class="line">border-radius: 20px 60px 100px 140px;  &#x2F;&#x2F;从左上开始，顺时针赋值。如果当前角没有值，取对角的值</span><br><span class="line"></span><br><span class="line">border-radius: 20px 60px;</span><br></pre></td></tr></table></figure>

<p>最简洁的写法：（四个角的半径都相同时）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">border-radius: 60px;</span><br></pre></td></tr></table></figure>


<h3 id="边框阴影：box-shadow-属性"><a href="#边框阴影：box-shadow-属性" class="headerlink" title="边框阴影：box-shadow 属性"></a>边框阴影：<code>box-shadow</code> 属性</h3><p>格式举例：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">box-shadow: 水平偏移 垂直偏移 模糊程度 阴影大小 阴影颜色</span><br><span class="line"></span><br><span class="line">box-shadow: 15px 21px 48px -2px #666;</span><br></pre></td></tr></table></figure>

<p>参数解释：</p>
<ul>
<li><p>水平偏移：正值向右 负值向左。</p>
</li>
<li><p>垂直偏移：正值向下 负值向上。</p>
</li>
<li><p>模糊程度：不能为负值。</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">box-shadow:3px 3px 3px 3px #666 inset;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：设置边框阴影不会改变盒子的大小，即不会影响其兄弟元素的布局。</p>
<p>我们还可以设置多重边框阴影，实现更好的效果，增强立体感。</p>
<h3 id="边框图片"><a href="#边框图片" class="headerlink" title="边框图片"></a>边框图片</h3><p>边框图片有以下属性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 边框图片的路径*/</span></span><br><span class="line">border-image-source: url(<span class="string">"images/border.png"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 图片边框的裁剪*/</span></span><br><span class="line">border-image-slice: <span class="number">27</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*图片边框的宽度*/</span></span><br><span class="line">border-image-width: <span class="number">27</span>px;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*边框图片的平铺*/</span></span><br><span class="line"><span class="comment">/* repeat :正常平铺 但是可能会显示不完整*/</span></span><br><span class="line"><span class="comment">/*round: 平铺 但是保证 图片完整*/</span></span><br><span class="line"><span class="comment">/*stretch: 拉伸显示*/</span></span><br><span class="line">border-image-repeat: stretch;</span><br></pre></td></tr></table></figure>

<p>我们也可以写成一个综合属性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">border-image: url(<span class="string">"images/border.png"</span>) <span class="number">27</span>/<span class="number">20</span>px round;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>数组的拓展</title>
    <url>/2020/04/18/10-%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要内容：</p>
<ul>
<li>扩展运算符</li>
<li>Array.from()</li>
<li>Array.of()</li>
<li>数组实例的 copyWithin()</li>
<li>数组实例的 find() 和 findIndex()</li>
<li>数组实例的 fill()</li>
<li>数组实例的 entries()，keys() 和 values()</li>
<li>数组实例的 includes()</li>
<li>数组实例的 flat()，flatMap()</li>
<li>数组的空位</li>
<li>Array.prototype.sort() 的排序稳定性<a id="more"></a>
<h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2></li>
</ul>
<h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><p>扩展运算符（spread）是三个点（…）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(...[1, 2, 3])</span><br><span class="line">&#x2F;&#x2F; 1 2 3</span><br><span class="line"></span><br><span class="line">console.log(1, ...[2, 3, 4], 5)</span><br><span class="line">&#x2F;&#x2F; 1 2 3 4 5</span><br><span class="line"></span><br><span class="line">[...document.querySelectorAll(&#39;div&#39;)]</span><br><span class="line">&#x2F;&#x2F; [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]</span><br></pre></td></tr></table></figure>

<p><strong>扩展运算符与正常的函数参数可以结合使用，非常灵活</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function f(v, w, x, y, z) &#123; &#125;</span><br><span class="line">const args &#x3D; [0, 1];</span><br><span class="line">f(-1, ...args, 2, ...[3]);</span><br></pre></td></tr></table></figure>

<p>扩展运算符后面还可以放置表达式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const arr &#x3D; [</span><br><span class="line">  ...(x &gt; 0 ? [&#39;a&#39;] : []),</span><br><span class="line">  &#39;b&#39;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p><strong>如果扩展运算符后面是一个空数组，则不产生任何效果。</strong></p>
<h3 id="替代apply"><a href="#替代apply" class="headerlink" title="替代apply"></a>替代apply</h3><p>应用Math.max方法，简化求出一个数组最大元素的写法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; ES5 的写法</span><br><span class="line">Math.max.apply(null, [14, 3, 77])</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ES6 的写法</span><br><span class="line">Math.max(...[14, 3, 77])</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">Math.max(14, 3, 77);</span><br></pre></td></tr></table></figure>

<h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h2><p>Array.from方法用于<strong>将两类对象转为真正的数组</strong>：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。</p>
<p>下面是一个类似数组的对象，Array.from将它转为真正的数组。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arrayLike &#x3D; &#123;</span><br><span class="line">    &#39;0&#39;: &#39;a&#39;,</span><br><span class="line">    &#39;1&#39;: &#39;b&#39;,</span><br><span class="line">    &#39;2&#39;: &#39;c&#39;,</span><br><span class="line">    length: 3</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ES5的写法</span><br><span class="line">var arr1 &#x3D; [].slice.call(arrayLike); &#x2F;&#x2F; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ES6的写法</span><br><span class="line">let arr2 &#x3D; Array.from(arrayLike); &#x2F;&#x2F; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>只要是部署了 Iterator 接口的数据结构，Array.from都能将其转为数组。</p>
</blockquote>
<blockquote>
<p>扩展运算符（…）也可以将某些数据结构转为数组.</p>
</blockquote>
<p>对于还没有部署该方法的浏览器，可以用<code>Array.prototype.slice</code>方法替代。</p>
<p>Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array.from(arrayLike, x &#x3D;&gt; x * x);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">Array.from(arrayLike).map(x &#x3D;&gt; x * x);</span><br><span class="line"></span><br><span class="line">Array.from([1, 2, 3], (x) &#x3D;&gt; x * x)</span><br><span class="line">&#x2F;&#x2F; [1, 4, 9]</span><br></pre></td></tr></table></figure>

<h2 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h2><p>Array.of方法用于将一组值，转换为数组。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array.of(3, 11, 8) &#x2F;&#x2F; [3,11,8]</span><br><span class="line">Array.of(3) &#x2F;&#x2F; [3]</span><br><span class="line">Array.of(3).length &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure>

<p>这个方法的主要目的，是弥补数组构造函数Array()的不足。因为参数个数的不同，会导致Array()的行为有差异。</p>
<h2 id="数组实例的-copyWithin"><a href="#数组实例的-copyWithin" class="headerlink" title="数组实例的 copyWithin()"></a>数组实例的 copyWithin()</h2><p>数组实例的<code>copyWithin()</code>方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组。</p>
<p><code>Array.prototype.copyWithin(target, start = 0, end = this.length)</code></p>
<p>它接受三个参数。</p>
<ul>
<li>target（必需）：从该位置开始替换数据。如果为负值，表示倒数。</li>
<li>start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示从末尾开始计算。</li>
<li>end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示从末尾开始计算。</li>
</ul>
<h2 id="数组实例的-find-和-findIndex"><a href="#数组实例的-find-和-findIndex" class="headerlink" title="数组实例的 find() 和 findIndex()"></a>数组实例的 find() 和 findIndex()</h2><p>数组实例的find方法，用于找出<strong>第一个符合条件的数组成员</strong>。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回<code>undefined</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1, 4, -5, 10].find((n) &#x3D;&gt; n &lt; 0)</span><br><span class="line">&#x2F;&#x2F; -5</span><br></pre></td></tr></table></figure>

<p>数组实例的findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回<code>-1</code>。</p>
<p><strong>这两个方法都可以发现NaN，弥补了数组的indexOf方法的不足。</strong></p>
<h2 id="数组实例的-fill"><a href="#数组实例的-fill" class="headerlink" title="数组实例的 fill()"></a>数组实例的 fill()</h2><p><code>fill</code>方法使用给定值，填充一个数组。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;].fill(7)</span><br><span class="line">&#x2F;&#x2F; [7, 7, 7]</span><br><span class="line"></span><br><span class="line">new Array(3).fill(7)</span><br><span class="line">&#x2F;&#x2F; [7, 7, 7]</span><br></pre></td></tr></table></figure>

<p><code>fill</code>方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。</p>
<h2 id="数组实例的-entries-，keys-和-values"><a href="#数组实例的-entries-，keys-和-values" class="headerlink" title="数组实例的 entries()，keys() 和 values()"></a>数组实例的 entries()，keys() 和 values()</h2><p>ES6 提供三个新的方法——entries()，keys()和values()——用于遍历数组。它们都返回一个遍历器对象（详见《Iterator》一章），可以用for…of循环进行遍历，唯一的区别是keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历。</p>
<h2 id="数组实例的-includes"><a href="#数组实例的-includes" class="headerlink" title="数组实例的 includes()"></a>数组实例的 includes()</h2><p><code>Array.prototype.includes</code>方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。ES2016 引入了该方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1, 2, 3].includes(2)     &#x2F;&#x2F; true</span><br><span class="line">[1, 2, 3].includes(4)     &#x2F;&#x2F; false</span><br><span class="line">[1, 2, NaN].includes(NaN) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>该方法的第二个参数表示搜索的起始位置，默认为0。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为-4，但数组长度为3），则会重置为从0开始。</p>
<h2 id="数组实例的-flat-，flatMap"><a href="#数组实例的-flat-，flatMap" class="headerlink" title="数组实例的 flat()，flatMap()"></a>数组实例的 flat()，flatMap()</h2><p>数组的成员有时还是数组，<code>Array.prototype.flat()</code>用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1, 2, [3, 4]].flat()</span><br><span class="line">&#x2F;&#x2F; [1, 2, 3, 4]</span><br></pre></td></tr></table></figure>

<p>上面代码中，原数组的成员里面有一个数组，flat()方法将子数组的成员取出来，添加在原来的位置。</p>
<p><code>flat()</code>默认只会“拉平”一层，如果想要<strong>拉平多层的嵌套数组，可以将flat()方法的参数写成一个整数，表示想要拉平的层数</strong>，默认为1。</p>
<p>如果不管有多少层嵌套，都要转成一维数组，可以用<code>Infinity</code>关键字作为参数。</p>
<p><code>flatMap()</code>方法对原数组的每个成员执行一个函数（相当于执行Array.prototype.map()），然后对返回值组成的数组执行flat()方法。该方法返回一个新数组，不改变原数组。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 相当于 [[2, 4], [3, 6], [4, 8]].flat()</span><br><span class="line">[2, 3, 4].flatMap((x) &#x3D;&gt; [x, x * 2])</span><br><span class="line">&#x2F;&#x2F; [2, 4, 3, 6, 4, 8]</span><br></pre></td></tr></table></figure>

<p>flatMap()只能展开一层数组。</p>
]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>函数</title>
    <url>/2020/04/18/10-%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于函数的核心内容：</p>
<ul>
<li><p>函数有哪几种定义和调用方式</p>
</li>
<li><p>this：函数内部的 this 指向、如何改变 this 的指向。</p>
</li>
<li><p>函数的严格模式</p>
</li>
<li><p>高阶函数：函数作为参数传递、函数作为返回值传递</p>
</li>
<li><p>闭包：闭包的作用</p>
</li>
<li><p>递归：递归的两个条件</p>
</li>
<li><p>深拷贝和浅拷贝的区别</p>
<a id="more"></a>
<h2 id="函数的介绍"><a href="#函数的介绍" class="headerlink" title="函数的介绍"></a>函数的介绍</h2></li>
</ul>
<p>函数：就是将一些功能或语句进行<strong>封装</strong>，在需要的时候，通过<strong>调用</strong>的形式，执行这些语句。</p>
<ul>
<li><p><strong>函数也是一个对象</strong></p>
</li>
<li><p>使用<code>typeof</code>检查一个函数对象时，会返回function</p>
</li>
</ul>
<p><strong>函数的作用</strong>：</p>
<ul>
<li><p>将大量重复的语句抽取出来，写在函数里，以后需要这些语句的时候，可以直接调用函数，避免重复劳动。</p>
</li>
<li><p>简化编程，让编程模块化。高内聚、低耦合。</p>
</li>
</ul>
<p>来看个例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"你好"</span>);</span><br><span class="line">sayHello();	<span class="comment">// 调用函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"欢迎"</span>);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"welcome"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数的定义-声明"><a href="#函数的定义-声明" class="headerlink" title="函数的定义/声明"></a>函数的定义/声明</h2><h3 id="方式一：利用函数关键字自定义函数（命名函数）"><a href="#方式一：利用函数关键字自定义函数（命名函数）" class="headerlink" title="方式一：利用函数关键字自定义函数（命名函数）"></a>方式一：利用函数关键字自定义函数（命名函数）</h3><p>使用<code>函数声明</code>来创建一个函数（也就是 function 关键字）。语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">[形参<span class="number">1</span>,形参<span class="number">2.</span>..形参N]</span>)</span>&#123;  <span class="comment">// 备注：语法中的中括号，表示“可选”</span></span><br><span class="line">	语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释如下：</p>
<ul>
<li><p>function：是一个关键字。中文是“函数”、“功能”。</p>
</li>
<li><p>函数名字：命名规定和变量的命名规定一样。只能是字母、数字、下划线、美元符号，不能以数字开头。</p>
</li>
<li><p>参数：可选。</p>
</li>
<li><p>大括号里面，是这个函数的语句。</p>
</li>
</ul>
<p>PS：在有些编辑器中，方法写完之后，我们在方法的前面输入<code>/**</code>，然后回车，会发现，注释的格式会自动补齐。</p>
<h3 id="方式二：函数表达式（匿名函数）"><a href="#方式二：函数表达式（匿名函数）" class="headerlink" title="方式二：函数表达式（匿名函数）"></a>方式二：函数表达式（匿名函数）</h3><p>使用<code>函数表达式</code>来创建一个函数。语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名  = <span class="function"><span class="keyword">function</span>(<span class="params">[形参<span class="number">1</span>,形参<span class="number">2.</span>..形参N]</span>)</span>&#123;</span><br><span class="line">	语句....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"我是匿名函数中封装的代码"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>解释如下：</p>
<ul>
<li><p>上面的 fun2 是变量名，不是函数名。</p>
</li>
<li><p>函数表达式的声明方式跟声明变量类似，只不过变量里面存的是值，而函数表达式里面存的是函数。</p>
</li>
<li><p>函数表达式也可以传递参数。</p>
</li>
</ul>
<p>从方式二的举例中可以看出：所谓的“函数表达式”，其实就是将匿名函数赋值给一个变量。</p>
<h3 id="方式三：使用构造函数-new-Function"><a href="#方式三：使用构造函数-new-Function" class="headerlink" title="方式三：使用构造函数 new Function()"></a>方式三：使用构造函数 new Function()</h3><p>使用构造函数<code>new Function()</code>来创建一个对象。这种方式，用的少。</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名/函数名  = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'形参1'</span>, <span class="string">'形参2'</span>, <span class="string">'函数体'</span>);</span><br></pre></td></tr></table></figure>

<p>注意，Function 里面的参数都必须是<strong>字符串</strong>格式。也就是说，形参也必须放在<strong>字符串</strong>里；函数体也是放在<strong>字符串</strong>里包裹起来，放在 Function 的最后一个参数的位置。</p>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun3 = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'console.log("我是函数内部的内容");  console.log(a + b);'</span>);</span><br><span class="line"></span><br><span class="line">fun3(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 调用函数</span></span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我是函数内部的内容</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong>：</p>
<p>方式3的写法很少用，原因如下：</p>
<ul>
<li><p>不方便书写：写法过于啰嗦和麻烦。</p>
</li>
<li><p>执行效率较低：首先需要把字符串转换为 js 代码，然后再执行。</p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1、<strong>所有的函数，都是 <code>Fuction</code> 的“实例”</strong>（或者说是“实例对象”）。函数本质上都是通过 new Function 得到的。</p>
<p>2、函数既然是实例对象，那么，<strong>函数也属于“对象”</strong>。还可以通过如下特征，来佐证函数属于对象：</p>
<p>（1）我们直接打印某一个函数，比如 <code>console.log(fun2)</code>，发现它的里面有<code>__proto__</code>。</p>
<p>（2）我们还可以打印 <code>console.log(fun2 instanceof Object)</code>，发现打印结果为 <code>true</code>。这说明 fun2 函数就是属于 Object。</p>
<h2 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h2><h3 id="方式1：普通函数的调用"><a href="#方式1：普通函数的调用" class="headerlink" title="方式1：普通函数的调用"></a>方式1：普通函数的调用</h3><p>函数调用的语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">函数名();</span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数名.call();</span><br></pre></td></tr></table></figure>

<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'我是函数体里面的内容1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'我是函数体里面的内容2'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn1(); <span class="comment">// 调用函数</span></span><br><span class="line"></span><br><span class="line">fn2.call(); <span class="comment">// 调用函数</span></span><br></pre></td></tr></table></figure>

<h3 id="方式2：通过对象的方法来调用"><a href="#方式2：通过对象的方法来调用" class="headerlink" title="方式2：通过对象的方法来调用"></a>方式2：通过对象的方法来调用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	a: <span class="string">'qianguyihao'</span>,</span><br><span class="line">	fn2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'千古壹号，永不止步!'</span>);</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.fn2(); <span class="comment">// 调用函数</span></span><br></pre></td></tr></table></figure>

<p>如果一个函数是作为一个对象的属性保存，那么，我们称这个函数是这个对象的<strong>方法</strong>。</p>
<p>PS：关于函数和方法的区别，本文的后续内容里有讲到，可以往下面翻。</p>
<h3 id="方式3：立即执行函数"><a href="#方式3：立即执行函数" class="headerlink" title="方式3：立即执行函数"></a>方式3：立即执行函数</h3><p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'我是立即执行函数'</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>立即执行函数在定义后，会自动调用。</p>
<p>PS：关于立即执行函数，本文的后续内容里有讲到，可以往下面翻。</p>
<p>上面讲到的这三种方式，是用得最多的。接下来讲到的三种方式，暂时看不懂也没关系，可以等学完其他的知识点，再回过头来看。</p>
<h3 id="方式4：通过构造函数来调用"><a href="#方式4：通过构造函数来调用" class="headerlink" title="方式4：通过构造函数来调用"></a>方式4：通过构造函数来调用</h3><p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'啦啦啦啦啦'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Fun3();</span><br></pre></td></tr></table></figure>

<p>这种方式用得不多。</p>
<h3 id="方式5：绑定事件函数"><a href="#方式5：绑定事件函数" class="headerlink" title="方式5：绑定事件函数"></a>方式5：绑定事件函数</h3><p>代码举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>我是按钮，请点击我<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//2.绑定事件</span></span></span><br><span class="line"><span class="actionscript">            btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'点击按钮后，要做的事情'</span>);</span></span><br><span class="line">            &#125;;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里涉及到DOM操作和事件的知识点，后续再讲。</p>
<h3 id="方式6：定时器函数"><a href="#方式6：定时器函数" class="headerlink" title="方式6：定时器函数"></a>方式6：定时器函数</h3><p>代码举例：（每间隔一秒，将 数字 加1）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    num ++;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p>这里涉及到定时器的知识点。</p>
<h2 id="函数的参数：形参和实参"><a href="#函数的参数：形参和实参" class="headerlink" title="函数的参数：形参和实参"></a>函数的参数：形参和实参</h2><p>函数的参数包括形参和实参。</p>
<p><strong>形参：</strong></p>
<ul>
<li><p>概念：形式上的参数。定义函数时传递的参数，当时并不知道是什么值。</p>
</li>
<li><p>定义函数时，可以在函数的<code>()</code>中来指定一个或多个形参。</p>
</li>
<li><p>多个形参之间使用<code>,</code>隔开，声明形参就相当于在函数内部声明了对应的变量，但是并不赋值。</p>
</li>
</ul>
<p><strong>实参</strong>：</p>
<ul>
<li><p>概念：实际上的参数。调用函数时传递的参数，实参将会传递给函数中对应的形参。</p>
</li>
<li><p>在调用函数时，可以在函数的 <code>()</code>中指定实参。</p>
</li>
</ul>
<p>注意：实际参数和形式参数的个数，一般要相同。</p>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">sum(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">sum(<span class="string">"3"</span>,<span class="number">4</span>);</span><br><span class="line">sum(<span class="string">"Hello"</span>,<span class="string">"World"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义函数：求和</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">34</span><br><span class="line">helloworld</span><br></pre></td></tr></table></figure>

<h3 id="实参的类型"><a href="#实参的类型" class="headerlink" title="实参的类型"></a>实参的类型</h3><p>函数的实参可以是任意的数据类型。</p>
<p>调用函数时，解析器不会检查实参的类型，所以要注意，是否有可能会接收到非法的参数，如果有可能则需要对参数进行类型的检查。</p>
<h3 id="实参的数量（实参和形参的个数不匹配时）"><a href="#实参的数量（实参和形参的个数不匹配时）" class="headerlink" title="实参的数量（实参和形参的个数不匹配时）"></a>实参的数量（实参和形参的个数不匹配时）</h3><p>调用函数时，解析器也不会检查实参的数量。</p>
<ul>
<li><p>如果实参的数量多余形参的数量，多余实参不会被赋值。</p>
</li>
<li><p>如果实参的数量少于形参的数量，多余的形参会被定义为 undefined。表达式的运行结果为 NaN。</p>
</li>
</ul>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">sum(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line"></span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">NaN</span><br></pre></td></tr></table></figure>

<p>注意：在 JS 中，形参的默认值是 undefined。</p>
<h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 将函数的返回值打印出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数：求和</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>return 的作用是结束方法。</p>
<p>注意：</p>
<ul>
<li><p>return 的值将会作为函数的执行结果返回，可以定义一个变量，来接收该结果。</p>
</li>
<li><p>在函数中，return后的语句都不会执行（函数在执行完 return 语句之后停止并立即退出函数）</p>
</li>
<li><p>如果return语句后不跟任何值，就相当于返回一个undefined</p>
</li>
<li><p>如果函数中不写return，则也会返回undefined</p>
</li>
<li><p>返回值可以是任意的数据类型，可以是对象，也可以是函数。</p>
</li>
<li><p>return 只能返回一个值。如果用逗号隔开多个值，则以最后一个为准。</p>
</li>
</ul>
<h2 id="函数名、函数体和函数加载问题（重要，请记住）"><a href="#函数名、函数体和函数加载问题（重要，请记住）" class="headerlink" title="函数名、函数体和函数加载问题（重要，请记住）"></a>函数名、函数体和函数加载问题（重要，请记住）</h2><p>我们要记住：<strong>函数名 == 整个函数</strong>。举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(fn) == <span class="built_in">console</span>.log(<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">1</span>)&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义fn方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	alert(<span class="number">1</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>我们知道，当我们在调用一个函数时，通常使用<code>函数()</code>这种格式；可如果，我们是直接使用<code>函数</code>这种格式，它的作用相当于整个函数。</p>
<p><strong>函数的加载问题</strong>：JS加载的时候，只加载函数名，不加载函数体。所以如果想使用内部的成员变量，需要调用函数。</p>
<h3 id="fn-和-fn-的区别【重要】"><a href="#fn-和-fn-的区别【重要】" class="headerlink" title="fn()  和 fn 的区别【重要】"></a>fn()  和 fn 的区别【重要】</h3><ul>
<li><p><code>fn()</code>：调用函数。调用之后，还获取了函数的返回值。</p>
</li>
<li><p><code>fn</code>：函数对象。相当于直接获取了整个函数对象。</p>
</li>
</ul>
<h2 id="break、continue、return-的区别"><a href="#break、continue、return-的区别" class="headerlink" title="break、continue、return 的区别"></a>break、continue、return 的区别</h2><ul>
<li><p>break ：结束当前的循环体（如 for、while）</p>
</li>
<li><p>continue ：跳出本次循环，继续执行下次循环（如 for、while）</p>
</li>
<li><p>return ：1、退出循环。2、返回 return 语句中的值，同时结束当前的函数体内的代码，退出当前函数。</p>
</li>
</ul>
<h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><p>现有匿名函数如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"a = "</span> + a);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"b = "</span> + b);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>立即执行函数如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"a = "</span> + a);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"b = "</span> + b);</span><br><span class="line">&#125;)(<span class="number">123</span>, <span class="number">456</span>);</span><br></pre></td></tr></table></figure>

<p>立即执行函数：函数定义完，立即被调用，这种函数叫做立即执行函数。</p>
<p>立即执行函数往往只会执行一次。为什么呢？因为没有变量保存它，执行完了之后，就找不到它了。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>函数也可以成为对象的属性。<strong>如果一个函数是作为一个对象的属性保存，那么，我们称这个函数是这个对象的方法</strong>。</p>
<p>调用这个函数就说调用对象的方法（method）。函数和方法，有什么本质的区别吗？它只是名称上的区别，并没有其他的区别。</p>
<p>函数举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>

<p>方法举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">obj.fn();</span><br></pre></td></tr></table></figure>

<p>我们可以这样说，如果直接是<code>fn()</code>，那就说明是函数调用。如果是<code>XX.fn()</code>的这种形式，那就说明是<strong>方法</strong>调用。</p>
<h2 id="arguments-的使用"><a href="#arguments-的使用" class="headerlink" title="arguments 的使用"></a>arguments 的使用</h2><p>当我们不确定有多少个参数传递的时候，可以用 <strong>arguments</strong> 来获取。在 JavaScript 中，arguments 实际上是当前函数的一个<strong>内置对象</strong>。所有函数都内置了一个 arguments 对象（<strong>只有函数才有 arguments 对象</strong>），arguments 对象中存储了<strong>传递的所有实参</strong>.</p>
<p>arguments的展示形式是一个<strong>伪数组</strong>。伪数组具有以下特点：</p>
<ul>
<li><p>可以进行遍历；具有数组的 length 属性。</p>
</li>
<li><p>按索引方式存储数据。</p>
</li>
<li><p>不具有数组的 push()、pop() 等方法。</p>
</li>
</ul>
<p><strong>代码举例</strong>：利用 arguments 求函数实参中的最大值</p>
<p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMaxValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> max = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">	<span class="comment">// 通过 arguments 遍历实参</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (max &lt; <span class="built_in">arguments</span>[i]) &#123;</span><br><span class="line">			max = <span class="built_in">arguments</span>[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getMaxValue(<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>));</span><br></pre></td></tr></table></figure>

<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>箭头函数表达式的语法比函数表达式更简洁，并且没有自己的<code>this</code>，<code>arguments</code>，<code>super</code>或<code>new.target</code>。箭头函数表达式更适用于那些本来需要匿名函数的地方，并且它不能用作构造函数。</p>
<p>基本语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(param1, param2, …, paramN) &#x3D;&gt; &#123; statements &#125; </span><br><span class="line">(param1, param2, …, paramN) &#x3D;&gt; expression</span><br><span class="line">&#x2F;&#x2F;相当于：(param1, param2, …, paramN) &#x3D;&gt;&#123; return expression; &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 当只有一个参数时，圆括号是可选的：</span><br><span class="line">(singleParam) &#x3D;&gt; &#123; statements &#125;</span><br><span class="line">singleParam &#x3D;&gt; &#123; statements &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 没有参数的函数应该写成一对圆括号。</span><br><span class="line">() &#x3D;&gt; &#123; statements &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>引入箭头函数有两个方面的作用：更简短的函数并且不绑定this。</p>
</blockquote>
<h3 id="没有单独的this"><a href="#没有单独的this" class="headerlink" title="没有单独的this"></a>没有单独的this</h3><ul>
<li>在箭头函数出现之前，每一个新函数根据它是被如何调用的来定义这个函数的this值：<ul>
<li>如果是该函数是一个构造函数，this指针指向一个新的对象</li>
<li>在严格模式下的函数调用下，this指向undefined</li>
<li>如果是该函数是一个对象的方法，则它的this指针指向这个对象</li>
<li>等等</li>
</ul>
</li>
</ul>
<h3 id="不绑定arguments"><a href="#不绑定arguments" class="headerlink" title="不绑定arguments"></a>不绑定arguments</h3><p>箭头函数不绑定<code>Arguments</code> 对象。</p>
<h3 id="使用-new-操作符"><a href="#使用-new-操作符" class="headerlink" title="使用 new 操作符"></a>使用 new 操作符</h3><p>箭头函数不能用作构造器，和 new一起用会抛出错误。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var Foo &#x3D; () &#x3D;&gt; &#123;&#125;;</span><br><span class="line">var foo &#x3D; new Foo(); &#x2F;&#x2F; TypeError: Foo is not a constructor</span><br></pre></td></tr></table></figure>

<h3 id="箭头函数没有prototype属性。"><a href="#箭头函数没有prototype属性。" class="headerlink" title="箭头函数没有prototype属性。"></a>箭头函数没有prototype属性。</h3><h3 id="使用-yield-关键字"><a href="#使用-yield-关键字" class="headerlink" title="使用 yield 关键字"></a>使用 yield 关键字</h3><p> <code>yield</code> 关键字通常不能在箭头函数中使用（除非是嵌套在允许使用的函数内）。因此，箭头函数不能用作函数生成器。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3属性：动画</title>
    <url>/2020/04/18/11-CSS3%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3%EF%BC%9A%E5%8A%A8%E7%94%BB%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>—## 本文主要内容：</p>
<ul>
<li><p>过渡：transition</p>
</li>
<li><p>2D 转换 transform</p>
</li>
<li><p>3D 转换 transform</p>
</li>
<li><p>动画：animation</p>
<a id="more"></a>
<h2 id="过渡：transition"><a href="#过渡：transition" class="headerlink" title="过渡：transition"></a>过渡：transition</h2></li>
</ul>
<p><code>transition</code>的中文含义是<strong>过渡</strong>。过渡是CSS3中具有颠覆性的一个特征，可以实现元素<strong>不同状态间的平滑过渡</strong>（补间动画），经常用来制作动画效果。</p>
<ul>
<li><p>补间动画：自动完成从起始状态到终止状态的的过渡。不用管中间的状态。</p>
</li>
<li><p>帧动画：通过一帧一帧的画面按照固定顺序和速度播放。如电影胶片。</p>
</li>
</ul>
<p>transition 包括以下属性：</p>
<ul>
<li><p><code>transition-property: all;</code>  如果希望所有的属性都发生过渡，就使用all。</p>
</li>
<li><p><code>transition-duration: 1s;</code> 过渡的持续时间。</p>
</li>
<li><p><code>transition-timing-function: linear;</code>  运动曲线。属性值可以是：</p>
<ul>
<li><code>linear</code> 线性</li>
<li><code>ease</code>  减速</li>
<li><code>ease-in</code> 加速</li>
<li><code>ease-out</code> 减速</li>
<li><code>ease-in-out</code>  先加速后减速</li>
</ul>
</li>
<li><p><code>transition-delay: 1s;</code> 过渡延迟。多长时间后再执行这个过渡动画。</p>
</li>
</ul>
<p>上面的四个属性也可以写成<strong>综合属性</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">transition: 让哪些属性进行过度 过渡的持续时间 运动曲线 延迟时间;</span><br><span class="line"></span><br><span class="line">transition: all <span class="number">3</span>s linear <span class="number">0</span>s;</span><br></pre></td></tr></table></figure>

<p>其中，<code>transition-property</code>这个属性是尤其需要注意的，不同的属性值有不同的现象。我们来示范一下。</p>
<p>如果设置 <code>transition-property: width</code>，意思是只让盒子的宽度在变化时进行过渡。</p>
<p>如果设置 <code>transition-property: all</code>，意思是让盒子的所有属性（包括宽度、背景色等）在变化时都进行过渡。</p>
<h2 id="2D-转换"><a href="#2D-转换" class="headerlink" title="2D 转换"></a>2D 转换</h2><p><strong>转换</strong>是 CSS3 中具有颠覆性的一个特征，可以实现元素的<strong>位移、旋转、变形、缩放</strong>，甚至支持矩阵方式。</p>
<p>转换再配合过渡和动画，可以取代大量早期只能靠 Flash 才可以实现的效果。</p>
<p>在 CSS3 当中，通过 <code>transform</code> 转换来实现 2D 转换或者 3D 转换。</p>
<ul>
<li>2D转换包括：缩放、移动、旋转。</li>
</ul>
<p>我们依次来讲解。</p>
<h3 id="1、缩放：scale"><a href="#1、缩放：scale" class="headerlink" title="1、缩放：scale"></a>1、缩放：<code>scale</code></h3><p>格式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">transform: scale(x, y);</span><br><span class="line"></span><br><span class="line">transform: scale(<span class="number">2</span>, <span class="number">0.5</span>);</span><br></pre></td></tr></table></figure>

<p>参数解释： x：表示水平方向的缩放倍数。y：表示垂直方向的缩放倍数。如果只写一个值就是等比例缩放。</p>
<p>取值：大于1表示放大，小于1表示缩小。不能为百分比。</p>
<h3 id="2、位移：translate"><a href="#2、位移：translate" class="headerlink" title="2、位移：translate"></a>2、位移：translate</h3><p>格式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">transform: translate(水平位移, 垂直位移);</span><br><span class="line"></span><br><span class="line">transform: translate(<span class="number">-50</span>%, <span class="number">-50</span>%);</span><br></pre></td></tr></table></figure>

<p>参数解释：</p>
<ul>
<li><p>参数为百分比，相对于自身移动。</p>
</li>
<li><p>正值：向右和向下。 负值：向左和向上。如果只写一个值，则表示水平移动。</p>
</li>
</ul>
<p><strong>应用：让绝对定位中的盒子在父亲里居中</strong></p>
<p>我们知道，如果想让一个<strong>标准流中的盒子在父亲里居中</strong>（水平方向看），可以将其设置<code>margin: 0 auto</code>属性。</p>
<p>可如果盒子是绝对定位的，此时已经脱标了，如果还想让其居中（位于父亲的正中间），可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">	width: 600px;</span><br><span class="line">	height: 60px;</span><br><span class="line">	position: absolute;  绝对定位的盒子</span><br><span class="line">	left: 50%;           首先，让左边线居中</span><br><span class="line">	top: 0;</span><br><span class="line">	margin-left: -300px;  然后，向左移动宽度（600px）的一半</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>现在，我们还可以利用偏移 translate 来做，这也是比较推荐的写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    width: <span class="number">600</span>px;</span><br><span class="line">    height: <span class="number">60</span>px;</span><br><span class="line">    background-color: red;</span><br><span class="line">    position: absolute;       绝对定位的盒子</span><br><span class="line">    left: <span class="number">50</span>%;               首先，让左边线居中</span><br><span class="line">    top: <span class="number">0</span>;</span><br><span class="line">    transform: translate(<span class="number">-50</span>%);    然后，利用translate，往左走自己宽度的一半【推荐写法】</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、旋转：rotate"><a href="#3、旋转：rotate" class="headerlink" title="3、旋转：rotate"></a>3、旋转：rotate</h3><p>格式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">transform: rotate(角度);</span><br><span class="line"></span><br><span class="line">transform: rotate(<span class="number">45</span>deg);</span><br></pre></td></tr></table></figure>

<p>参数解释：正值 顺时针；负值：逆时针。</p>
<p>我们给盒子设置了 transform 中的 rotate 旋转，但同时还要给盒子设置 transition 过渡。如果没有这行过渡的代码，旋转会直接一步到位。</p>
<blockquote>
<p>rotate 旋转时，默认是以盒子的正中心为坐标原点的。如果想<strong>改变旋转的坐标原点</strong>，可以用<code>transform-origin</code>属性。格式如下：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">transform-origin: 水平坐标 垂直坐标;</span><br><span class="line"></span><br><span class="line">transform-origin: <span class="number">50</span>px <span class="number">50</span>px;</span><br><span class="line"></span><br><span class="line">transform-origin: center bottom;   <span class="comment">//旋转时，以盒子底部的中心为坐标原点</span></span><br></pre></td></tr></table></figure>
<p>：</p>
<h3 id="4、倾斜"><a href="#4、倾斜" class="headerlink" title="4、倾斜"></a>4、倾斜</h3><p>暂略。</p>
<h2 id="3D-转换"><a href="#3D-转换" class="headerlink" title="3D 转换"></a>3D 转换</h2><h3 id="1、旋转：rotateX、rotateY、rotateZ"><a href="#1、旋转：rotateX、rotateY、rotateZ" class="headerlink" title="1、旋转：rotateX、rotateY、rotateZ"></a>1、旋转：rotateX、rotateY、rotateZ</h3><p><strong>旋转的方向：（左手法则）</strong></p>
<p>左手握住旋转轴，竖起拇指指向旋转轴的<strong>正方向</strong>，正向就是<strong>其余手指卷曲的方向</strong>。</p>
<p>从上面这句话，我们也能看出：所有的3d旋转，对着正方向去看，都是顺时针旋转。</p>
<p><strong>格式：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">transform: rotateX(<span class="number">360</span>deg);    <span class="comment">//绕 X 轴旋转360度</span></span><br><span class="line"></span><br><span class="line">transform: rotateY(<span class="number">360</span>deg);    <span class="comment">//绕 Y 轴旋转360度</span></span><br><span class="line"></span><br><span class="line">transform: rotateZ(<span class="number">360</span>deg);    <span class="comment">//绕 Z 轴旋转360度</span></span><br></pre></td></tr></table></figure>



<h3 id="2、移动：translateX、translateY、translateZ"><a href="#2、移动：translateX、translateY、translateZ" class="headerlink" title="2、移动：translateX、translateY、translateZ"></a>2、移动：translateX、translateY、translateZ</h3><p><strong>格式：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">transform: translateX(<span class="number">100</span>px);    <span class="comment">//沿着 X 轴移动</span></span><br><span class="line"></span><br><span class="line">transform: translateY(<span class="number">360</span>px);    <span class="comment">//沿着 Y 轴移动</span></span><br><span class="line"></span><br><span class="line">transform: translateZ(<span class="number">360</span>px);    <span class="comment">//沿着 Z 轴移动</span></span><br></pre></td></tr></table></figure>


<h3 id="3、透视：perspective"><a href="#3、透视：perspective" class="headerlink" title="3、透视：perspective"></a>3、透视：perspective</h3><p>电脑显示屏是一个 2D 平面，图像之所以具有立体感（3D效果），其实只是一种视觉呈现，通过透视可以实现此目的。</p>
<p>透视可以将一个2D平面，在转换的过程当中，呈现3D效果。但仅仅只是视觉呈现出 3d 效果，并不是正真的3d。</p>
<p>格式有两种写法：</p>
<ul>
<li><p>作为一个属性，设置给父元素，作用于所有3D转换的子元素</p>
</li>
<li><p>作为 transform 属性的一个值，做用于元素自身。</p>
</li>
</ul>
<p>格式举例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">perspective</span>: 500<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4、3D呈现（transform-style）"><a href="#4、3D呈现（transform-style）" class="headerlink" title="4、3D呈现（transform-style）"></a>4、3D呈现（transform-style）</h3><p>3D元素构建是指某个图形是由多个元素构成的，可以给这些元素的<strong>父元素</strong>设置<code>transform-style: preserve-3d</code>来使其变成一个真正的3D图形。属性值可以如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transform-style</span>: <span class="selector-tag">preserve-3d</span>;     <span class="comment">/* 让 子盒子 位于三维空间里 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">transform-style</span>: <span class="selector-tag">flat</span>;            <span class="comment">/* 让子盒子位于此元素所在的平面内（子盒子被扁平化） */</span></span><br></pre></td></tr></table></figure>

<p><strong>案例</strong>：立方体</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 250px;</span><br><span class="line">            height: 250px;</span><br><span class="line">            border: 1px dashed red;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            position: relative;</span><br><span class="line">            border-radius: 50%;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="comment">/* 让子盒子保持3d效果*/</span></span></span><br><span class="line"></span><br><span class="line">            transform-style: preserve-3d;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="comment">/*transform:rotateX(30deg) rotateY(-30deg);*/</span></span></span><br><span class="line"></span><br><span class="line">            animation: gun 8s linear infinite;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &gt; <span class="selector-tag">div</span> &#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">            position: absolute;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 250px;</span><br><span class="line">            font-size: 60px;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#daa520</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-tag">rgba</span>(255, 0, 0, 0<span class="selector-class">.3</span>);</span></span><br><span class="line"><span class="css">            <span class="comment">/* 变换中心*/</span></span></span><br><span class="line">            transform-origin: left;</span><br><span class="line"><span class="css">            <span class="comment">/* 变换*/</span></span></span><br><span class="line">            transform: rotateY(90deg) translateX(-125px);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(0, 0, 255, 0<span class="selector-class">.3</span>);</span></span><br><span class="line">            transform-origin: right;</span><br><span class="line"><span class="css">            <span class="comment">/* 变换*/</span></span></span><br><span class="line">            transform: rotateY(90deg) translateX(125px);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.forward</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(255, 255, 0, 0<span class="selector-class">.3</span>);</span></span><br><span class="line">            transform: translateZ(125px);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.back</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(0, 255, 255, 0<span class="selector-class">.3</span>);</span></span><br><span class="line">            transform: translateZ(-125px);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.up</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(255, 0, 255, 0<span class="selector-class">.3</span>);</span></span><br><span class="line">            transform: rotateX(90deg) translateZ(125px);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.down</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(99, 66, 33, 0<span class="selector-class">.3</span>);</span></span><br><span class="line">            transform: rotateX(-90deg) translateZ(125px);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="keyword">@keyframes</span> gun &#123;</span></span><br><span class="line">            0% &#123;</span><br><span class="line">                transform: rotateX(0deg) rotateY(0deg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            100% &#123;</span><br><span class="line">                transform: rotateX(360deg) rotateY(360deg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span>上<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span>下<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"forward"</span>&gt;</span>前<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"back"</span>&gt;</span>后<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="transform-preserve-3d.png" alt=""></p>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>动画是CSS3中具有颠覆性的特征，可通过设置<strong>多个节点</strong> 来精确控制一个或一组动画，常用来实现<strong>复杂</strong>的动画效果。</p>
<h3 id="1、定义动画的步骤"><a href="#1、定义动画的步骤" class="headerlink" title="1、定义动画的步骤"></a>1、定义动画的步骤</h3><p>（1）通过@keyframes定义动画；</p>
<p>（2）将这段动画通过百分比，分割成多个节点；然后各节点中分别定义各属性；</p>
<p>（3）在指定元素里，通过 <code>animation</code> 属性调用动画。</p>
<p>之前,我们在 js 中定义一个函数的时候，是先定义，再调用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">js 定义函数：</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123; 函数体 &#125;</span><br><span class="line"></span><br><span class="line"> 调用：</span><br><span class="line"> 	fun();</span><br></pre></td></tr></table></figure>

<p>同样，我们在 CSS3 中<strong>定义动画</strong>的时候，也是<strong>先定义，再调用</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">定义动画：</span><br><span class="line">    @keyframes 动画名&#123;</span><br><span class="line">        <span class="keyword">from</span>&#123; 初始状态 &#125;</span><br><span class="line">        to&#123; 结束状态 &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> 调用：</span><br><span class="line">  animation: 动画名称 持续时间；</span><br></pre></td></tr></table></figure>

<p>其中，animation属性的格式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">animation: 定义的动画名称 持续时间  执行次数  是否反向  运动曲线 延迟执行。(infinite 表示无限次)</span><br><span class="line"></span><br><span class="line">animation: move1 <span class="number">1</span>s  alternate linear <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">animation: move2 <span class="number">4</span>s;</span><br></pre></td></tr></table></figure>


<h3 id="2、动画属性"><a href="#2、动画属性" class="headerlink" title="2、动画属性"></a>2、动画属性</h3><p>我们刚刚在调用动画时，animation属性的格式如下：</p>
<p>animation属性的格式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">animation: 定义的动画名称  持续时间  执行次数  是否反向  运动曲线 延迟执行。(infinite 表示无限次)</span><br><span class="line"></span><br><span class="line">animation: move1 <span class="number">1</span>s  alternate linear <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">animation: move2 <span class="number">4</span>s;</span><br></pre></td></tr></table></figure>


<p>可以看出，这里的 animation 是综合属性，接下来，我们把这个综合属性拆分看看。</p>
<p>（1）动画名称：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">animation-name: move;</span><br></pre></td></tr></table></figure>

<p>（2）执行一次动画的持续时间：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">animation-duration: <span class="number">4</span>s;</span><br></pre></td></tr></table></figure>

<p>备注：上面两个属性，是必选项，且顺序固定。</p>
<p>（3）动画的执行次数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">animation-iteration-count: <span class="number">1</span>;       <span class="comment">//iteration的含义表示迭代</span></span><br></pre></td></tr></table></figure>

<p>属性值<code>infinite</code>表示无数次。</p>
<p>（3）动画的方向：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">animation-direction: alternate;</span><br></pre></td></tr></table></figure>

<p>属性值：normal 正常，alternate 反向。</p>
<p>（4）动画延迟执行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">animation-delay: <span class="number">1</span>s;</span><br></pre></td></tr></table></figure>

<p>（5）设置动画结束时，盒子的状态：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">animation-fill-mode: forwards;</span><br></pre></td></tr></table></figure>

<p>属性值： forwards：保持动画结束后的状态（默认），  backwards：动画结束后回到最初的状态。</p>
<p>（6）运动曲线：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">animation-timing-function: ease-in;</span><br></pre></td></tr></table></figure>

<p>属性值可以是：linear   ease-in-out  steps()等。</p>
<p>注意，如果把属性值写成<strong><code>steps()</code></strong>，则表示动画<strong>不是连续执行</strong>，而是间断地分成几步执行。我们接下来专门讲一下属性值 <code>steps()</code>。</p>
<h3 id="steps-的效果"><a href="#steps-的效果" class="headerlink" title="steps()的效果"></a>steps()的效果</h3><p>我们还是拿上面的例子来举例，如果在调用动画时，我们写成：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">animation: move2 <span class="number">4</span>s steps(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>有了属性值 <code>steps()</code>，我们就可以作出很多不连续地动画效果。比如时钟；再比如，通过多张静态的鱼，作出一张游动的鱼。</p>
<p><strong>step()举例：时钟的简易模型</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 3px;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">            margin: 100px auto;</span><br><span class="line"><span class="css">            <span class="selector-tag">transform-origin</span>: <span class="selector-tag">center</span> <span class="selector-tag">bottom</span>;    <span class="comment">/* 旋转的中心点是底部 */</span></span></span><br><span class="line">            animation: myClock 60s steps(60) infinite;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="keyword">@keyframes</span> myClock &#123;</span></span><br><span class="line">            0% &#123;</span><br><span class="line">                transform: rotate(0deg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            100% &#123;</span><br><span class="line">                transform: rotate(360deg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上方代码，我们通过一个黑色的长条div，旋转360度，耗时60s，分成60步完成。即可实现。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>作用域和变量提升</title>
    <url>/2020/04/18/11-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</url>
    <content><![CDATA[<hr>
<h2 id="作用域（Scope）的概念"><a href="#作用域（Scope）的概念" class="headerlink" title="作用域（Scope）的概念"></a>作用域（Scope）的概念</h2><ul>
<li><p><strong>概念</strong>：通俗来讲，作用域是一个变量或函数的作用范围。作用域在<strong>函数定义</strong>时，就已经确定了。</p>
</li>
<li><p><strong>目的</strong>：为了提高程序的可靠性，同时减少命名冲突。</p>
<a id="more"></a>
<h3 id="作用域的分类"><a href="#作用域的分类" class="headerlink" title="作用域的分类"></a>作用域的分类</h3></li>
</ul>
<p>在 JS 中，一共有两种作用域：（ES6 之前）</p>
<ul>
<li><p>全局作用域：作用于整个 script 标签内部，或者作用域一个独立的 JS 文件。</p>
</li>
<li><p>函数作用域（局部作用域）：作用于函数内的代码环境。</p>
</li>
</ul>
<h3 id="作用域的访问关系"><a href="#作用域的访问关系" class="headerlink" title="作用域的访问关系"></a>作用域的访问关系</h3><p>在内部作用域中可以访问到外部作用域的变量，在外部作用域中无法访问到内部作用域的变量。</p>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'aaa'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="string">'bbb'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 打印结果：aaa。说明 内层作用域 可以访问 外层作用域 里的变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 报错：Uncaught ReferenceError: b is not defined。说明 外层作用域 无法访问 内层作用域 里的变量</span></span><br></pre></td></tr></table></figure>

<h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>根据作用域的不同，变量可以分为两类：全局变量、布局变量。</p>
<p><strong>全局变量</strong>：</p>
<ul>
<li><p>在全局作用域下声明的变量，叫「全局变量」。在全局作用域的任何一地方，都可以访问这个变量。</p>
</li>
<li><p>在全局作用域下，使用 var 声明的变量是全局变量。</p>
</li>
<li><p>特殊情况：在函数内不使用 var 声明的变量也是全局变量（不建议这么用）。</p>
</li>
</ul>
<p><strong>局部变量</strong>：</p>
<ul>
<li><p>定义在函数作用域的变量，叫「局部变量」。</p>
</li>
<li><p>在函数内部，使用 var 声明的变量是局部变量。</p>
</li>
<li><p>函数的<strong>形参</strong>也是属于局部变量。</p>
</li>
</ul>
<p>从执行效率来看全局变量和局部变量：</p>
<ul>
<li><p>全局变量：只有浏览器关闭时才会被销毁，比较占内存。</p>
</li>
<li><p>局部变量：当其所在的代码块运行结束后，就会被销毁，比较节约内存空间。</p>
</li>
</ul>
<h3 id="作用域的上下级关系"><a href="#作用域的上下级关系" class="headerlink" title="作用域的上下级关系"></a>作用域的上下级关系</h3><p>当在函数作用域操作一个变量时，它会先在自身作用域中寻找，如果有就直接使用（<strong>就近原则</strong>）。如果没有则向上一级作用域中寻找，直到找到全局作用域；如果全局作用域中依然没有找到，则会报错 ReferenceError。</p>
<p>在函数中要访问全局变量可以使用window对象。（比如说，全局作用域和函数作用域都定义了变量a，如果想访问全局变量，可以使用<code>window.a</code>）</p>
<h2 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h2><p><strong>直接编写在script标签中的JS代码，都在全局作用域</strong>。</p>
<ul>
<li><p>全局作用域在页面打开时创建，在页面关闭时销毁。</p>
</li>
<li><p>在全局作用域中有一个全局对象window，它代表的是一个浏览器的窗口，由浏览器创建，我们可以直接使用。</p>
</li>
</ul>
<p>在全局作用域中：</p>
<ul>
<li><p>创建的<strong>变量</strong>都会作为window对象的属性保存。比如在全局作用域内写 <code>var a = 100</code>，这里的 <code>a</code> 等价于 <code>window.a</code>。</p>
</li>
<li><p>创建的<strong>函数</strong>都会作为window对象的方法保存。</p>
</li>
</ul>
<h3 id="变量的声明提前（变量提升）"><a href="#变量的声明提前（变量提升）" class="headerlink" title="变量的声明提前（变量提升）"></a>变量的声明提前（变量提升）</h3><p>使用var关键字声明的变量（ 比如 <code>var a = 1</code>），<strong>会在所有的代码执行之前被声明</strong>（但是不会赋值），但是如果声明变量时不是用var关键字（比如直接写<code>a = 1</code>），则变量不会被声明提前。</p>
<p><strong>举例1</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>

<p>打印结果：undefined。注意，打印结果并没有报错，而是 undefined，说明变量 a 被提前声明了，只是尚未被赋值。</p>
<p><strong>举例2</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">a = <span class="number">123</span>;   <span class="comment">//此时a相当于window.a</span></span><br></pre></td></tr></table></figure>

<p>程序会报错：<code>Uncaught ReferenceError: a is not defined</code>。</p>
<p><strong>举例3</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a = <span class="number">123</span>;   <span class="comment">//此时a相当于window.a</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>

<p>打印结果：123。</p>
<p><strong>举例4</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">foo();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">123</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印结果：undefined。注意，打印结果并没有报错，而是 undefined。这个例子，再次说明了：变量 i 在函数执行前，就被提前声明了，只是尚未被赋值。</p>
<h3 id="函数的声明提前"><a href="#函数的声明提前" class="headerlink" title="函数的声明提前"></a>函数的声明提前</h3><p><strong>函数声明</strong>：</p>
<p>使用<code>函数声明</code>的形式创建的函数<code>function foo(){}</code>，<strong>会被声明提前</strong>。</p>
<p>也就是说，<strong>整个函数会在所有的代码执行之前就被创建完成</strong>。所以，在代码顺序里，我们可以先调用函数，再定义函数。</p>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fn1();  <span class="comment">// 虽然 函数 fn1 的定义是在后面，但是因为被提前声明了， 所以此处可以调用函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我是函数 fn1'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>函数表达式</strong>：</p>
<p>使用<code>函数表达式</code>创建的函数<code>var foo = function(){}</code>，<strong>不会被声明提前</strong>，所以不能在声明前调用。</p>
<p>很好理解，因为此时foo被声明了（这里只是变量声明），且为undefined，并没有把 <code>function(){}</code> 赋值给 foo。</p>
<h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><p><strong>提醒1</strong>：在函数作用域中，也有声明提前的特性：</p>
<ul>
<li><p>函数中，使用var关键字声明的变量，会在函数中所有的代码执行之前被声明。</p>
</li>
<li><p>函数中，没有var声明的变量都是<strong>全局变量</strong>，而且并不会提前声明。</p>
</li>
</ul>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    a = <span class="number">2</span>;     <span class="comment">// 此处的a相当于window.a</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br><span class="line"><span class="built_in">console</span>.log(a);   <span class="comment">//打印结果是2</span></span><br></pre></td></tr></table></figure>

<p>上方代码中，执行foo()后，函数里面的打印结果是<code>1</code>。如果去掉第一行代码，执行foo()后，函数里面的打印结果是<code>Uncaught ReferenceError: a is not defined</code>。</p>
<p><strong>提醒2</strong>：定义形参就相当于在函数作用域中声明了变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun6</span>(<span class="params">e</span>) </span>&#123; <span class="comment">// 这个函数中，因为有了形参 e，此时就相当于在函数内部的第一行代码里，写了 var e;</span></span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun6();  <span class="comment">//打印结果为 undefined</span></span><br><span class="line">fun6(<span class="number">123</span>);<span class="comment">//打印结果为123</span></span><br></pre></td></tr></table></figure>

<h2 id="JavaScript-没有块级作用域（ES6之前）"><a href="#JavaScript-没有块级作用域（ES6之前）" class="headerlink" title="JavaScript 没有块级作用域（ES6之前）"></a>JavaScript 没有块级作用域（ES6之前）</h2><p>在其他编程语言中（如 Java、C#等），存在块级作用域，由<code>{}</code>包括起来。比如在 Java 语言中，if 语句里创建的变量，只能在if语句内部使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">123</span>;</span><br><span class="line">    system.out.print(num); <span class="comment">// 123</span></span><br><span class="line">&#125;</span><br><span class="line">system.out.print(num); <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>

<p>但是，在 JS 中没有块级作用域（ES6之前）。举例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">123</span>); <span class="comment">//123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span>); <span class="comment">//123（可以正常打印）</span></span><br></pre></td></tr></table></figure>

<h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>引入：</p>
<ul>
<li><p>只要是代码，就至少有一个作用域</p>
</li>
<li><p>写在函数内部的局部作用域</p>
</li>
<li><p>如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域</p>
</li>
</ul>
<p>基于上面几条内容，我们可以得出作用域链的概念。</p>
<p><strong>作用域链</strong>：内部函数访问外部函数的变量，采用的是链式查找的方式来决定取哪个值，这种结构称之为作用域链。查找时，采用的是<strong>就近原则</strong>。</p>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 外部函数</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 内部函数</span></span><br><span class="line">        <span class="built_in">console</span>.log(num);</span><br><span class="line">    &#125;</span><br><span class="line">    fun();</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>

<p>打印结果：20。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>对象的拓展</title>
    <url>/2020/04/18/11-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要内容：</p>
<ul>
<li>属性的简洁表示法</li>
<li>属性名表达式</li>
<li>方法的 name 属性</li>
<li>属性的可枚举性和遍历</li>
<li><code>super</code> 关键字</li>
<li>对象的扩展运算符</li>
<li>链判断运算符</li>
<li>Null 判断运算符<a id="more"></a>
<h2 id="属性的简洁表示法"><a href="#属性的简洁表示法" class="headerlink" title="属性的简洁表示法"></a>属性的简洁表示法</h2></li>
</ul>
<p><strong>ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法</strong>。这样的书写更加简洁。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const foo &#x3D; &#39;bar&#39;;</span><br><span class="line">const baz &#x3D; &#123;foo&#125;;</span><br><span class="line">baz &#x2F;&#x2F; &#123;foo: &quot;bar&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">const baz &#x3D; &#123;foo: foo&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<strong>变量foo直接写在大括号里面。这时，属性名就是变量名, 属性值就是变量值</strong>。下面是另一个例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function f(x, y) &#123;</span><br><span class="line">  return &#123;x, y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line"></span><br><span class="line">function f(x, y) &#123;</span><br><span class="line">  return &#123;x: x, y: y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(1, 2) &#x2F;&#x2F; Object &#123;x: 1, y: 2&#125;</span><br></pre></td></tr></table></figure>

<p>除了属性简写，方法也可以简写。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const o &#x3D; &#123;</span><br><span class="line">  method() &#123;</span><br><span class="line">    return &quot;Hello!&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line"></span><br><span class="line">const o &#x3D; &#123;</span><br><span class="line">  method: function() &#123;</span><br><span class="line">    return &quot;Hello!&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>下面是一个实际的例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let birth &#x3D; &#39;2000&#x2F;01&#x2F;01&#39;;</span><br><span class="line"></span><br><span class="line">const Person &#x3D; &#123;</span><br><span class="line"></span><br><span class="line">  name: &#39;张三&#39;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;等同于birth: birth</span><br><span class="line">  birth,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 等同于hello: function ()...</span><br><span class="line">  hello() &#123; console.log(&#39;我的名字是&#39;, this.name); &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">这种写法用于函数的返回值，将会非常方便。</span><br><span class="line"></span><br><span class="line">function getPoint() &#123;</span><br><span class="line">  const x &#x3D; 1;</span><br><span class="line">  const y &#x3D; 10;</span><br><span class="line">  return &#123;x, y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getPoint()</span><br><span class="line">&#x2F;&#x2F; &#123;x:1, y:10&#125;</span><br><span class="line">CommonJS 模块输出一组变量，就非常合适使用简洁写法。</span><br><span class="line"></span><br><span class="line">let ms &#x3D; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">function getItem (key) &#123;</span><br><span class="line">  return key in ms ? ms[key] : null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function setItem (key, value) &#123;</span><br><span class="line">  ms[key] &#x3D; value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function clear () &#123;</span><br><span class="line">  ms &#x3D; &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123; getItem, setItem, clear &#125;;</span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  getItem: getItem,</span><br><span class="line">  setItem: setItem,</span><br><span class="line">  clear: clear</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>属性的赋值器（setter）和取值器（getter），事实上也是采用这种写法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const cart &#x3D; &#123;</span><br><span class="line">  _wheels: 4,</span><br><span class="line"></span><br><span class="line">  get wheels () &#123;</span><br><span class="line">    return this._wheels;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  set wheels (value) &#123;</span><br><span class="line">    if (value &lt; this._wheels) &#123;</span><br><span class="line">      throw new Error(&#39;数值太小了！&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">    this._wheels &#x3D; value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简洁写法在打印对象时也很有用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let user &#x3D; &#123;</span><br><span class="line">  name: &#39;test&#39;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let foo &#x3D; &#123;</span><br><span class="line">  bar: &#39;baz&#39;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(user, foo)</span><br><span class="line">&#x2F;&#x2F; &#123;name: &quot;test&quot;&#125; &#123;bar: &quot;baz&quot;&#125;</span><br><span class="line">console.log(&#123;user, foo&#125;)</span><br><span class="line">&#x2F;&#x2F; &#123;user: &#123;name: &quot;test&quot;&#125;, foo: &#123;bar: &quot;baz&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，console.log直接输出user和foo两个对象时，就是两组键值对，可能会混淆。把它们放在大括号里面输出，就变成了对象的简洁表示法，每组键值对前面会打印对象名，这样就比较清晰了。</p>
<p><strong>注意，简写的对象方法不能用作构造函数，会报错。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const obj &#x3D; &#123;</span><br><span class="line">  f() &#123;</span><br><span class="line">    this.foo &#x3D; &#39;bar&#39;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">new obj.f() &#x2F;&#x2F; 报错</span><br></pre></td></tr></table></figure>
<p>上面代码中，f是一个简写的对象方法，所以obj.f不能当作构造函数使用。</p>
<h2 id="属性名表达式"><a href="#属性名表达式" class="headerlink" title="属性名表达式"></a>属性名表达式</h2><p>JavaScript 定义对象的属性，有两种方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 方法一</span><br><span class="line">obj.foo &#x3D; true;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方法二</span><br><span class="line">obj[&#39;a&#39; + &#39;bc&#39;] &#x3D; 123;</span><br></pre></td></tr></table></figure>

<p>上面代码的方法一是直接用标识符作为属性名，方法二是用表达式作为属性名，这时要将表达式放在方括号之内。</p>
<p>但是，如果使用字面量方式定义对象（使用大括号），在 ES5 中只能使用方法一（标识符）定义属性。</p>
<p>var obj = {<br>  foo: true,<br>  abc: 123<br>};<br>ES6 允许字面量定义对象时，用方法二（表达式）作为对象的属性名，即把表达式放在方括号内。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let lastWord &#x3D; &#39;last word&#39;;</span><br><span class="line"></span><br><span class="line">const a &#x3D; &#123;</span><br><span class="line">  &#39;first word&#39;: &#39;hello&#39;,</span><br><span class="line">  [lastWord]: &#39;world&#39;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">a[&#39;first word&#39;] &#x2F;&#x2F; &quot;hello&quot;</span><br><span class="line">a[lastWord] &#x2F;&#x2F; &quot;world&quot;</span><br><span class="line">a[&#39;last word&#39;] &#x2F;&#x2F; &quot;world&quot;</span><br><span class="line">表达式还可以用于定义方法名。</span><br><span class="line"></span><br><span class="line">let obj &#x3D; &#123;</span><br><span class="line">  [&#39;h&#39; + &#39;ello&#39;]() &#123;</span><br><span class="line">    return &#39;hi&#39;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.hello() &#x2F;&#x2F; hi</span><br></pre></td></tr></table></figure>

<p>注意，属性名表达式与简洁表示法，不能同时使用，会报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">const foo &#x3D; &#39;bar&#39;;</span><br><span class="line">const bar &#x3D; &#39;abc&#39;;</span><br><span class="line">const baz &#x3D; &#123; [foo] &#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 正确</span><br><span class="line">const foo &#x3D; &#39;bar&#39;;</span><br><span class="line">const baz &#x3D; &#123; [foo]: &#39;abc&#39;&#125;;</span><br></pre></td></tr></table></figure>

<p>注意，属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串<code>[object Object]</code>，这一点要特别小心。</p>
<h2 id="方法的-name-属性"><a href="#方法的-name-属性" class="headerlink" title="方法的 name 属性"></a>方法的 name 属性</h2><p><strong>函数的name属性，返回函数名。对象方法也是函数，因此也有name属性</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const person &#x3D; &#123;</span><br><span class="line">  sayName() &#123;</span><br><span class="line">    console.log(&#39;hello!&#39;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.sayName.name   &#x2F;&#x2F; &quot;sayName&quot;</span><br></pre></td></tr></table></figure>

<p>上面代码中，方法的<code>name</code>属性返回函数名（即方法名）。</p>
<p><strong>如果对象的方法使用了取值函数（getter）和存值函数（setter），则name属性不是在该方法上面，而是该方法的属性的描述对象的get和set属性上面，返回值是方法名前加上get和set。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const obj &#x3D; &#123;</span><br><span class="line">  get foo() &#123;&#125;,</span><br><span class="line">  set foo(x) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.foo.name</span><br><span class="line">&#x2F;&#x2F; TypeError: Cannot read property &#39;name&#39; of undefined</span><br><span class="line"></span><br><span class="line">const descriptor &#x3D; Object.getOwnPropertyDescriptor(obj, &#39;foo&#39;);</span><br><span class="line"></span><br><span class="line">descriptor.get.name &#x2F;&#x2F; &quot;get foo&quot;</span><br><span class="line">descriptor.set.name &#x2F;&#x2F; &quot;set foo&quot;</span><br></pre></td></tr></table></figure>

<p>有两种特殊情况：<strong>bind方法创造的函数，name属性返回bound加上原函数的名字；Function构造函数创造的函数，name属性返回anonymous</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(new Function()).name &#x2F;&#x2F; &quot;anonymous&quot;</span><br><span class="line"></span><br><span class="line">var doSomething &#x3D; function() &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;;</span><br><span class="line">doSomething.bind().name &#x2F;&#x2F; &quot;bound doSomething&quot;</span><br></pre></td></tr></table></figure>

<p>如果对象的方法是一个 Symbol 值，那么name属性返回的是这个 Symbol 值的描述。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const key1 &#x3D; Symbol(&#39;description&#39;);</span><br><span class="line">const key2 &#x3D; Symbol();</span><br><span class="line">let obj &#x3D; &#123;</span><br><span class="line">  [key1]() &#123;&#125;,</span><br><span class="line">  [key2]() &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj[key1].name &#x2F;&#x2F; &quot;[description]&quot;</span><br><span class="line">obj[key2].name &#x2F;&#x2F; &quot;&quot;</span><br></pre></td></tr></table></figure>

<p>上面代码中，key1对应的 <code>Symbol</code> 值有描述，key2没有。</p>
<h2 id="属性的可枚举性和遍历"><a href="#属性的可枚举性和遍历" class="headerlink" title="属性的可枚举性和遍历"></a>属性的可枚举性和遍历</h2><h3 id="可枚举性"><a href="#可枚举性" class="headerlink" title="可枚举性"></a>可枚举性</h3><p>对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。<code>Object.getOwnPropertyDescriptor</code>方法可以获取该属性的描述对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let obj &#x3D; &#123; foo: 123 &#125;;</span><br><span class="line">Object.getOwnPropertyDescriptor(obj, &#39;foo&#39;)</span><br><span class="line">&#x2F;&#x2F;  &#123;</span><br><span class="line">&#x2F;&#x2F;    value: 123,</span><br><span class="line">&#x2F;&#x2F;    writable: true,</span><br><span class="line">&#x2F;&#x2F;    enumerable: true,</span><br><span class="line">&#x2F;&#x2F;    configurable: true</span><br><span class="line">&#x2F;&#x2F;  &#125;</span><br></pre></td></tr></table></figure>

<p>描述对象的<code>enumerable</code>属性，称为“可枚举性”，如果该属性为false，就表示某些操作会忽略当前属性。</p>
<p>目前，有四个操作会忽略enumerable为false的属性。</p>
<ul>
<li><code>for...in</code>循环：只遍历对象自身的和继承的可枚举的属性。</li>
<li><code>Object.keys()</code>：返回对象自身的所有可枚举的属性的键名。</li>
<li><code>JSON.stringify()</code>：只串行化对象自身的可枚举的属性。</li>
<li><code>Object.assign()</code>： 忽略<code>enumerable</code>为<code>false</code>的属性，只拷贝对象自身的可枚举的属性。</li>
</ul>
<p>这四个操作之中，前三个是 ES5 就有的，最后一个<strong>Object.assign()是 ES6 新增的</strong>。其中，只有for…in会返回继承的属性，其他三个方法都会忽略继承的属性，只处理对象自身的属性。实际上，引入“可枚举”（enumerable）这个概念的最初目的，<strong>就是让某些属性可以规避掉for…in操作，不然所有内部属性和方法都会被遍历到</strong>。比如，对象原型的toString方法，以及数组的length属性，就通过“可枚举性”，从而避免被for…in遍历到。</p>
<h2 id="属性的遍历"><a href="#属性的遍历" class="headerlink" title="属性的遍历"></a>属性的遍历</h2><p>ES6 一共有 5 种方法可以遍历对象的属性。</p>
<ul>
<li>（1）<code>for...in</code></li>
</ul>
<p><code>for...in</code>循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。</p>
<ul>
<li>（2）<code>Object.keys(obj)</code></li>
</ul>
<p><code>Object.keys</code>返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。</p>
<ul>
<li>（3）<code>Object.getOwnPropertyNames(obj)</code></li>
</ul>
<p><code>Object.getOwnPropertyNames</code>返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。</p>
<ul>
<li>（4）Object.getOwnPropertySymbols(obj)</li>
</ul>
<p><code>Object.getOwnPropertySymbols</code>返回一个数组，包含对象自身的所有 Symbol 属性的键名。</p>
<ul>
<li>（5）<code>Reflect.ownKeys(obj)</code></li>
</ul>
<p><code>Reflect.ownKeys</code>返回一个数组，包含对象自身的所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。</p>
<p>以上的 5 种方法遍历对象的键名，都遵守同样的属性遍历的次序规则。</p>
<ul>
<li>首先遍历所有数值键，按照数值升序排列。</li>
<li>其次遍历所有字符串键，按照加入时间升序排列。</li>
<li>最后遍历所有<code>Symbol</code>键，按照加入时间升序排列。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Reflect.ownKeys(&#123; [Symbol()]:0, b:0, 10:0, 2:0, a:0 &#125;)</span><br><span class="line">&#x2F;&#x2F; [&#39;2&#39;, &#39;10&#39;, &#39;b&#39;, &#39;a&#39;, Symbol()]</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>Reflect.ownKeys</code>方法返回一个数组，包含了参数对象的所有属性。这个数组的属性次序是这样的，首先是数值属性2和10，其次是字符串属性b和a，最后是 Symbol 属性。</p>
<h2 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a>super 关键字</h2><p>我们知道，<code>this</code>关键字总是指向函数所在的当前对象，ES6 又新增了另一个类似的关键字<strong>super，指向当前对象的原型对象</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const proto &#x3D; &#123;</span><br><span class="line">  foo: &#39;hello&#39;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const obj &#x3D; &#123;</span><br><span class="line">  foo: &#39;world&#39;,</span><br><span class="line">  find() &#123;</span><br><span class="line">    return super.foo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Object.setPrototypeOf(obj, proto);</span><br><span class="line">obj.find() &#x2F;&#x2F; &quot;hello&quot;</span><br></pre></td></tr></table></figure>

<p>上面代码中，对象obj.find()方法之中，通过super.foo引用了原型对象proto的foo属性。</p>
<p>注意，<strong>super关键字表示原型对象时，只能用在对象的方法之中，用在其他地方都会报错</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">const obj &#x3D; &#123;</span><br><span class="line">  foo: super.foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">const obj &#x3D; &#123;</span><br><span class="line">  foo: () &#x3D;&gt; super.foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">const obj &#x3D; &#123;</span><br><span class="line">  foo: function () &#123;</span><br><span class="line">    return super.foo</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面三种super的用法都会报错，因为对于 JavaScript 引擎来说，这里的super都没有用在对象的方法之中。第一种写法是super用在属性里面，第二种和第三种写法是super用在一个函数里面，然后赋值给foo属性。目前，只有对象方法的简写法可以让 JavaScript 引擎确认，定义的是对象的方法。</p>
<p>JavaScript 引擎内部，<code>super.foo</code>等同于<code>Object.getPrototypeOf(this).foo</code>（属性）或<code>Object.getPrototypeOf(this).foo.call(this)</code>（方法）。</p>
<h2 id="对象的扩展运算符"><a href="#对象的扩展运算符" class="headerlink" title="对象的扩展运算符"></a>对象的扩展运算符</h2><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>对象的解构赋值用于从一个对象取值，相当于将目标对象自身的所有可遍历的（enumerable）、但尚未被读取的属性，分配到指定的对象上面。所有的键和它们的值，都会拷贝到新对象上面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let &#123; x, y, ...z &#125; &#x3D; &#123; x: 1, y: 2, a: 3, b: 4 &#125;;</span><br><span class="line">x &#x2F;&#x2F; 1</span><br><span class="line">y &#x2F;&#x2F; 2</span><br><span class="line">z &#x2F;&#x2F; &#123; a: 3, b: 4 &#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，变量z是解构赋值所在的对象。它获取等号右边的所有尚未读取的键（a和b），将它们连同值一起拷贝过来。</p>
<blockquote>
<p>由于解构赋值要求等号右边是一个对象，所以如果等号右边是<code>undefined或null，</code>就会报错，因为它们无法转为对象。</p>
</blockquote>
<blockquote>
<p>解构赋值必须是最后一个参数，否则会报错。</p>
</blockquote>
<blockquote>
<p>注意，解构赋值的拷贝是<strong>浅拷贝</strong>，即如果一个键的值是复合类型的值（数组、对象、函数）、那么解构赋值拷贝的是这个值的引用，而不是这个值的副本。</p>
</blockquote>
<blockquote>
<p>另外，扩展运算符的解构赋值，不能复制继承自原型对象的属性。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let o1 &#x3D; &#123; a: 1 &#125;;</span><br><span class="line">let o2 &#x3D; &#123; b: 2 &#125;;</span><br><span class="line">o2.__proto__ &#x3D; o1;</span><br><span class="line">let &#123; ...o3 &#125; &#x3D; o2;</span><br><span class="line">o3 &#x2F;&#x2F; &#123; b: 2 &#125;</span><br><span class="line">o3.a &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure>

<p>上面代码中，对象o3复制了o2，但是只复制了o2自身的属性，没有复制它的原型对象o1的属性。</p>
<h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><ul>
<li>对象的扩展运算符（…）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let z &#x3D; &#123; a: 3, b: 4 &#125;;</span><br><span class="line">let n &#x3D; &#123; ...z &#125;;</span><br><span class="line">n &#x2F;&#x2F; &#123; a: 3, b: 4 &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>由于数组是特殊的对象，所以对象的扩展运算符也可以用于数组。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let foo &#x3D; &#123; ...[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;] &#125;;</span><br><span class="line">foo</span><br><span class="line">&#x2F;&#x2F; &#123;0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果扩展运算符后面是一个空对象，则没有任何效果。</li>
</ul>
<ul>
<li>如果扩展运算符后面不是对象，则会自动将其转为对象。</li>
</ul>
<ul>
<li>如果扩展运算符后面是字符串，它会自动转成一个类似数组的对象，因此返回的不是空对象。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;...&#39;hello&#39;&#125;</span><br><span class="line">&#x2F;&#x2F; &#123;0: &quot;h&quot;, 1: &quot;e&quot;, 2: &quot;l&quot;, 3: &quot;l&quot;, 4: &quot;o&quot;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>对象的扩展运算符等同于使用<code>Object.assign()</code>方法。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let aClone &#x3D; &#123; ...a &#125;;</span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">let aClone &#x3D; Object.assign(&#123;&#125;, a);</span><br></pre></td></tr></table></figure>

<p>上面的例子只是拷贝了对象实例的属性，如果想完整克隆一个对象，还拷贝对象原型的属性.</p>
<ul>
<li><p>扩展运算符可以用于合并两个对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ab &#x3D; &#123; ...a, ...b &#125;;</span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">let ab &#x3D; Object.assign(&#123;&#125;, a, b);</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。</p>
</li>
</ul>
<h2 id="链判断运算符"><a href="#链判断运算符" class="headerlink" title="链判断运算符"></a>链判断运算符</h2><h2 id="Null判断运算符"><a href="#Null判断运算符" class="headerlink" title="Null判断运算符"></a><code>Null</code>判断运算符</h2>]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3属性：Flex布局</title>
    <url>/2020/04/18/12-CSS3%E5%B1%9E%E6%80%A7%EF%BC%9AFlex%E5%B8%83%E5%B1%80%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<hr>
<h3 id="flex-布局的优势"><a href="#flex-布局的优势" class="headerlink" title="flex 布局的优势"></a>flex 布局的优势</h3><p>1、<strong>flex 布局的子元素不会脱离文档流</strong>，很好地遵从了“流的特性”。</p>
<p>但你如果用 float 来做布局，float 属性的元素会脱离文档流，而且会涉及到各种 BFC、清除浮动的问题。浮动相关的问题，比较麻烦，所以也成了面试必问的经典题目。但有了 flex 布局之后，这些问题都不存在的。</p>
<p>2、<strong>flex 是一种现代的布局方式，是 W3C 第一次提供真正用于布局的 CSS 规范</strong>。 flex 非常提供了丰富的属性，非常灵活，让布局的实现更佳多样化，且方便易用。</p>
<p>flex 唯一的缺点就在于，它不支持低版本的 IE 浏览器。</p>
<a id="more"></a>
<h3 id="flex-的兼容性问题"><a href="#flex-的兼容性问题" class="headerlink" title="flex 的兼容性问题"></a>flex 的兼容性问题</h3><p>flex 布局不支持 IE9 及以下的版本；IE10及以上也只是部分支持。如果你的页面不需要处理 IE浏览器的兼容性问题，则可以放心大胆地使用 flex 布局。</p>
<h3 id="概念：弹性盒子、子元素"><a href="#概念：弹性盒子、子元素" class="headerlink" title="概念：弹性盒子、子元素"></a>概念：弹性盒子、子元素</h3><p>在讲 flex 的知识点之前，我们事先约定两个概念：</p>
<ul>
<li><p><strong>弹性盒子</strong>：指的是使用 <code>display:flex</code> 或 <code>display:inline-flex</code> 声明的<strong>父容器</strong>。</p>
</li>
<li><p><strong>子元素/弹性元素</strong>：指的是父容器里面的子元素们（父容器被声明为 flex 盒子的情况下）。</p>
</li>
</ul>
<h3 id="概念：主轴和侧轴"><a href="#概念：主轴和侧轴" class="headerlink" title="概念：主轴和侧轴"></a>概念：主轴和侧轴</h3><ul>
<li><p>主轴：flex容器的主轴，默认是水平方向，从左向右。</p>
</li>
<li><p>侧轴：与主轴垂直的轴称作侧轴，默认是垂直方向，从上往下。</p>
</li>
</ul>
<blockquote>
<p>主轴和侧轴并不是固定不变的，可以通过 <code>flex-direction</code> 更换方向。</p>
</blockquote>
<h2 id="弹性盒子"><a href="#弹性盒子" class="headerlink" title="弹性盒子"></a>弹性盒子</h2><h3 id="声明定义"><a href="#声明定义" class="headerlink" title="声明定义"></a>声明定义</h3><p>使用 <code>display:flex</code> 或 <code>display:inline-flex</code> 声明一个<strong>父容器</strong>为弹性盒子。此时，这个父容器里的子元素们，会遵循弹性布局。</p>
<blockquote>
<p>一般是用 <code>display:flex</code>这个属性。<code>display:inline-flex</code>用得较少。</p>
</blockquote>
<h3 id="flex-direction-属性"><a href="#flex-direction-属性" class="headerlink" title="flex-direction 属性"></a>flex-direction 属性</h3><p><code>flex-direction</code>：用于设置盒子中<strong>子元素</strong>的排列方向。属性值可以是：</p>
<table>
<thead>
<tr>
<th align="left">属性值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">row</td>
<td align="left">从左到右水平排列子元素（默认值）</td>
</tr>
<tr>
<td align="left">column</td>
<td align="left">从上到下垂直排列子元素</td>
</tr>
<tr>
<td align="left">row-reverse</td>
<td align="left">从右向左排列子元素</td>
</tr>
<tr>
<td align="left">column-reverse</td>
<td align="left">从下到上垂直排列子元素</td>
</tr>
<tr>
<td align="left"><br></td>
<td align="left"></td>
</tr>
</tbody></table>
<blockquote>
<p>如果我们不给父容器写<code>flex-direction</code>这个属性，那么，子元素默认就是从左到右排列的。</p>
</blockquote>
<h3 id="flex-wrap-属性"><a href="#flex-wrap-属性" class="headerlink" title="flex-wrap 属性"></a>flex-wrap 属性</h3><p><code>flex-wrap</code>：控制子元素溢出时的换行处理。</p>
<h3 id="justify-content-属性"><a href="#justify-content-属性" class="headerlink" title="justify-content 属性"></a>justify-content 属性</h3><p><code>justify-content</code>：控制子元素在主轴上的排列方式。</p>
<h2 id="弹性元素"><a href="#弹性元素" class="headerlink" title="弹性元素"></a>弹性元素</h2><h3 id="justify-content-属性-1"><a href="#justify-content-属性-1" class="headerlink" title="justify-content 属性"></a>justify-content 属性</h3><ul>
<li><code>justify-content: flex-start;</code> 设置子元素在<strong>主轴上的对齐方式</strong>。属性值可以是：<ul>
<li><code>flex-start</code> 从主轴的起点对齐（默认值）</li>
<li><code>flex-end</code> 从主轴的终点对齐</li>
<li><code>center</code> 居中对齐</li>
<li><code>space-around</code> 在父盒子里平分</li>
<li><code>space-between</code> 两端对齐 平分</li>
</ul>
</li>
</ul>
<h3 id="align-items-属性"><a href="#align-items-属性" class="headerlink" title="align-items 属性"></a>align-items 属性</h3><p><code>align-items</code>：设置子元素在<strong>侧轴上的对齐方式</strong>。属性值可以是：<br>    - <code>flex-start</code> 从侧轴开始的方向对齐<br>    - <code>flex-end</code> 从侧轴结束的方向对齐<br>    - <code>baseline</code> 基线 默认同flex-start<br>    - <code>center</code> 中间对齐<br>    - <code>stretch</code> 拉伸</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table>
<thead>
<tr>
<th align="left">属性值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">flex-direction</td>
<td align="left">设置主轴方向，确定弹性子元素排列方式。</td>
</tr>
<tr>
<td align="left">flex-wrap</td>
<td align="left">当弹性子元素超出弹性容器范围时是否换行。</td>
</tr>
<tr>
<td align="left">flex-flow</td>
<td align="left">flex-direction和flex-wrap属性的快捷方式，复合属性。</td>
</tr>
<tr>
<td align="left">justify-content</td>
<td align="left">主轴上的对齐方式。</td>
</tr>
<tr>
<td align="left">align-items</td>
<td align="left">侧轴上的对齐方式。</td>
</tr>
<tr>
<td align="left">align-content</td>
<td align="left">侧轴上有空白时，侧轴的对齐方式。</td>
</tr>
</tbody></table>
<p><strong>多列属性</strong></p>
<table>
<thead>
<tr>
<th align="left">属性值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">columns</td>
<td align="left">复合属性，设置宽度和列数</td>
</tr>
<tr>
<td align="left">column-width</td>
<td align="left">设置每列的宽度</td>
</tr>
<tr>
<td align="left">column-count</td>
<td align="left">设置列数</td>
</tr>
<tr>
<td align="left">column-gap</td>
<td align="left">设置列之间的间隙</td>
</tr>
<tr>
<td align="left">column-rule</td>
<td align="left">复合属性(column-rule-width,column-rule-style,column-rule-color)，设置列之间的边框样式</td>
</tr>
<tr>
<td align="left">column-fill</td>
<td align="left">设置列的高度是否统一</td>
</tr>
<tr>
<td align="left">column-span</td>
<td align="left">设置是否横跨所有列</td>
</tr>
</tbody></table>
<p>column-width：<code>&lt;length&gt;</code> | auto</p>
<p>column-count：<code>&lt;integer&gt;</code> | auto</p>
<p>columns：<code>[column-width]</code> || <code>[column-count]</code></p>
<p>column-gap: <code>&lt;integer&gt;</code> | nomal</p>
<p>column-fill: auto | balance</p>
<p>column-span: none | all</p>
<p><strong>flex 属性可以指定1个，2个或3个值</strong>。</p>
<p><strong>单值语法</strong>: 值必须为以下其中之一:</p>
<ul>
<li>一个无单位数(<number>): 它会被当作<flex-grow>的值。</li>
<li>一个有效的宽度(width)值: 它会被当作 <flex-basis>的值。</li>
<li>关键字none，auto或initial.</li>
</ul>
<p><strong>双值语法</strong>: </p>
<ul>
<li><p>第一个值必须为一个无单位数，并且它会被当作 <flex-grow> 的值。</p>
</li>
<li><p>第二个值必须为以下之一：</p>
</li>
<li><p>一个无单位数：它会被当作 <flex-shrink> 的值。</p>
</li>
<li><p>一个有效的宽度值: 它会被当作 <flex-basis> 的值。</p>
</li>
</ul>
<p><strong>三值语法</strong>:</p>
<ul>
<li>第一个值必须为一个无单位数，并且它会被当作 <flex-grow> 的值。</li>
<li>第二个值必须为一个无单位数，并且它会被当作  <flex-shrink> 的值。</li>
<li>第三个值必须为一个有效的宽度值， 并且它会被当作 <flex-basis> 的值。</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>对象的新增方法</title>
    <url>/2020/04/18/12-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要内容：</p>
<ul>
<li>Object.is()</li>
<li>Object.assign()</li>
<li><code>__proto__</code>属性，<code>Object.setPrototypeOf()</code>，<code>Object.getPrototypeOf()</code></li>
<li><code>Object.keys()</code>，<code>Object.values()</code>，<code>Object.entries()</code><a id="more"></a>
<h2 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h2></li>
</ul>
<p><code>Object.is</code>用来比较两个值是否严格相等，与严格比较运算符<code>（===）</code>的行为基本一致。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object.is(&#39;foo&#39;, &#39;foo&#39;)</span><br><span class="line">&#x2F;&#x2F; true</span><br><span class="line">Object.is(&#123;&#125;, &#123;&#125;)</span><br><span class="line">&#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>

<p>不同之处只有两个：<strong>一是+0不等于-0，二是NaN等于自身</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+0 &#x3D;&#x3D;&#x3D; -0 &#x2F;&#x2F;true</span><br><span class="line">NaN &#x3D;&#x3D;&#x3D; NaN &#x2F;&#x2F; false</span><br><span class="line"></span><br><span class="line">Object.is(+0, -0) &#x2F;&#x2F; false</span><br><span class="line">Object.is(NaN, NaN) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>
<h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p><code>Object.assign</code>方法用于对象的合并，<strong>将源对象（source）的所有可枚举属性，复制到目标对象（target）</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const target &#x3D; &#123; a: 1 &#125;;</span><br><span class="line"></span><br><span class="line">const source1 &#x3D; &#123; b: 2 &#125;;</span><br><span class="line">const source2 &#x3D; &#123; c: 3 &#125;;</span><br><span class="line"></span><br><span class="line">Object.assign(target, source1, source2);</span><br><span class="line">target &#x2F;&#x2F; &#123;a:1, b:2, c:3&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Object.assign</code>方法的第一个参数是目标对象，后面的参数都是源对象。</li>
</ul>
<blockquote>
<p>注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。</p>
</blockquote>
<blockquote>
<p>如果只有一个参数，Object.assign会直接返回该参数。</p>
</blockquote>
<blockquote>
<p>如果该参数不是对象，则会先转成对象，然后返回。</p>
</blockquote>
<blockquote>
<p>由于undefined和null无法转成对象，所以如果它们作为参数，就会报错。</p>
</blockquote>
<blockquote>
<p>其他类型的值（即数值、字符串和布尔值）不在首参数，也不会报错。但是，除了<strong>字符串会以数组形式，拷贝入目标对象</strong>，其他值都不会产生效果。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const v1 &#x3D; &#39;abc&#39;;</span><br><span class="line">const v2 &#x3D; true;</span><br><span class="line">const v3 &#x3D; 10;</span><br><span class="line"></span><br><span class="line">const obj &#x3D; Object.assign(&#123;&#125;, v1, v2, v3);</span><br><span class="line">console.log(obj); &#x2F;&#x2F; &#123; &quot;0&quot;: &quot;a&quot;, &quot;1&quot;: &quot;b&quot;, &quot;2&quot;: &quot;c&quot; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>Object.assign拷贝</code>的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。</p>
</li>
<li><p>属性名为 <code>Symbol</code> 值的属性，也会被<code>Object.assign</code>拷贝。</p>
</li>
</ul>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul>
<li>（1）浅拷贝</li>
</ul>
<p><code>Object.assign</code>方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。</p>
<ul>
<li>（2）同名属性的替换</li>
</ul>
<p>对于这种嵌套的对象，一旦遇到同名属性，Object.assign的处理方法是替换，而不是添加。</p>
<ul>
<li>（3）数组的处理</li>
</ul>
<p><code>Object.assign</code>可以用来处理数组，但是会<strong>把数组视为对象</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object.assign([1, 2, 3], [4, 5])</span><br><span class="line">&#x2F;&#x2F; [4, 5, 3]</span><br></pre></td></tr></table></figure>
<p>上面代码中，<code>Object.assign</code>把数组视为属性名为 0、1、2 的对象，因此源数组的 0 号属性4覆盖了目标数组的 0 号属性1。</p>
<ul>
<li>（4）取值函数的处理</li>
</ul>
<p><code>Object.assign</code>只能进行值的复制，如果要复制的值是一个取值函数，那么将求值后再复制。</p>
<h2 id="proto-属性，Object-setPrototypeOf-，Object-getPrototypeOf"><a href="#proto-属性，Object-setPrototypeOf-，Object-getPrototypeOf" class="headerlink" title="__proto__属性，Object.setPrototypeOf()，Object.getPrototypeOf()"></a><code>__proto__</code>属性，<code>Object.setPrototypeOf()</code>，<code>Object.getPrototypeOf()</code></h2><h3 id="proto属性"><a href="#proto属性" class="headerlink" title="proto属性"></a><strong>proto</strong>属性</h3><p><code>__proto__</code>属性（前后各两个下划线），用来<strong>读取或设置当前对象的原型对象（prototype）</strong>。目前，所有浏览器（包括 IE11）都部署了这个属性。</p>
<ul>
<li>对象具有属性<code>__proto__</code>，可称为隐式原型，一个对象的隐式原型指向构造该对象的构造函数的原型.</li>
<li>对象有<code>__proto__</code>属性，函数有<code>prototype</code>属性；</li>
<li>对象由函数生成;</li>
<li>生成对象时，对象的<code>__proto__</code>属性指向函数的<code>prototype</code>属性。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; es5 的写法</span><br><span class="line">const obj &#x3D; &#123;</span><br><span class="line">  method: function() &#123; ... &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.__proto__ &#x3D; someOtherObj;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; es6 的写法</span><br><span class="line">var obj &#x3D; Object.create(someOtherObj);</span><br><span class="line">obj.method &#x3D; function() &#123; ... &#125;;</span><br></pre></td></tr></table></figure>

<p>实现上，<code>__proto__</code>调用的是<code>Object.prototype.__proto__</code>。</p>
<ul>
<li>如果一个对象本身部署了<strong>proto</strong>属性，该属性的值就是对象的原型。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object.getPrototypeOf(&#123; __proto__: null &#125;)</span><br><span class="line">&#x2F;&#x2F; null</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf()"></a>Object.setPrototypeOf()</h3><p><code>Object.setPrototypeOf</code>方法的作用与<code>__proto__</code>相同，用来设置一个对象的原型对象（prototype），返回参数对象本身。它是 ES6 正式推荐的设置原型对象的方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 格式</span><br><span class="line">Object.setPrototypeOf(object, prototype)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 用法</span><br><span class="line">const o &#x3D; Object.setPrototypeOf(&#123;&#125;, null);</span><br><span class="line">该方法等同于下面的函数。</span><br><span class="line"></span><br><span class="line">function setPrototypeOf(obj, proto) &#123;</span><br><span class="line">  obj.__proto__ &#x3D; proto;</span><br><span class="line">  return obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面是一个例子。</span><br><span class="line"></span><br><span class="line">let proto &#x3D; &#123;&#125;;</span><br><span class="line">let obj &#x3D; &#123; x: 10 &#125;;</span><br><span class="line">Object.setPrototypeOf(obj, proto);</span><br><span class="line"></span><br><span class="line">proto.y &#x3D; 20;</span><br><span class="line">proto.z &#x3D; 40;</span><br><span class="line"></span><br><span class="line">obj.x &#x2F;&#x2F; 10</span><br><span class="line">obj.y &#x2F;&#x2F; 20</span><br><span class="line">obj.z &#x2F;&#x2F; 40</span><br></pre></td></tr></table></figure>

<p>上面代码将proto对象设为obj对象的原型，所以从obj对象可以读取proto对象的属性。</p>
<blockquote>
<p>如果第一个参数不是对象，会自动转为对象。但是由于返回的还是第一个参数，所以这个操作不会产生任何效果。</p>
</blockquote>
<h3 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf()"></a>Object.getPrototypeOf()</h3><p>该方法与<code>Object.setPrototypeOf</code>方法配套，用于读取一个对象的原型对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object.getPrototypeOf(obj);</span><br><span class="line">下面是一个例子。</span><br><span class="line"></span><br><span class="line">function Rectangle() &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const rec &#x3D; new Rectangle();</span><br><span class="line"></span><br><span class="line">Object.getPrototypeOf(rec) &#x3D;&#x3D;&#x3D; Rectangle.prototype</span><br><span class="line">&#x2F;&#x2F; true</span><br><span class="line"></span><br><span class="line">Object.setPrototypeOf(rec, Object.prototype);</span><br><span class="line">Object.getPrototypeOf(rec) &#x3D;&#x3D;&#x3D; Rectangle.prototype</span><br><span class="line">&#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果参数不是对象，会被自动转为对象。</p>
</blockquote>
<h2 id="Object-keys-，Object-values-，Object-entries"><a href="#Object-keys-，Object-values-，Object-entries" class="headerlink" title="Object.keys()，Object.values()，Object.entries()"></a>Object.keys()，Object.values()，Object.entries()</h2><h3 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h3><p>ES5 引入了<code>Object.keys</code>方法，<strong>返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var obj &#x3D; &#123; foo: &#39;bar&#39;, baz: 42 &#125;;</span><br><span class="line">Object.keys(obj)</span><br><span class="line">&#x2F;&#x2F; [&quot;foo&quot;, &quot;baz&quot;]</span><br></pre></td></tr></table></figure>

<p>ES2017 引入了跟<code>Object.key</code>s配套的<code>Object.values和Object.entries</code>，作为遍历一个对象的补充手段，供<code>for...of</code>循环使用。</p>
<h3 id="Object-values"><a href="#Object-values" class="headerlink" title="Object.values()"></a>Object.values()</h3><p><code>Object.values</code>方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的<strong>键值</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const obj &#x3D; &#123; foo: &#39;bar&#39;, baz: 42 &#125;;</span><br><span class="line">Object.values(obj)</span><br><span class="line">&#x2F;&#x2F; [&quot;bar&quot;, 42]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Object.values只返回对象自身的可遍历属性。</p>
</blockquote>
<blockquote>
<p>如果Object.values方法的参数是一个字符串，会返回各个字符组成的一个数组。</p>
</blockquote>
<blockquote>
<p>如果参数不是对象，<code>Object.values</code>会先将其转为对象。由于数值和布尔值的包装对象，都不会为实例添加非继承的属性。所以，<code>Object.values</code>会返回空数组。</p>
</blockquote>
<h3 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a>Object.entries()</h3><p><code>Object.entries()</code>方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的<strong>键值对数组</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const obj &#x3D; &#123; foo: &#39;bar&#39;, baz: 42 &#125;;</span><br><span class="line">Object.entries(obj)</span><br><span class="line">&#x2F;&#x2F; [ [&quot;foo&quot;, &quot;bar&quot;], [&quot;baz&quot;, 42] ]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果原对象的属性名是一个 Symbol 值，该属性会被忽略。</p>
</blockquote>
<blockquote>
<p>Object.entries方法的另一个用处是，将对象转为真正的Map结构。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const obj &#x3D; &#123; foo: &#39;bar&#39;, baz: 42 &#125;;</span><br><span class="line">const map &#x3D; new Map(Object.entries(obj));</span><br><span class="line">map &#x2F;&#x2F; Map &#123; foo: &quot;bar&quot;, baz: 42 &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>预编译</title>
    <url>/2020/04/18/12-%E9%A2%84%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<hr>
<h2 id="JavaScript-运行三部曲"><a href="#JavaScript-运行三部曲" class="headerlink" title="JavaScript 运行三部曲"></a>JavaScript 运行三部曲</h2><ul>
<li><p>语法分析</p>
</li>
<li><p>预编译</p>
</li>
<li><p>解释执行</p>
<a id="more"></a>
<h2 id="预编译前奏"><a href="#预编译前奏" class="headerlink" title="预编译前奏"></a>预编译前奏</h2></li>
</ul>
<blockquote>
<p>在讲预编译前，我们先来普及下面两个规律。</p>
</blockquote>
<h3 id="两个规律"><a href="#两个规律" class="headerlink" title="两个规律"></a>两个规律</h3><p><strong>规律1：任何变量，如果未经声明就赋值，此变量是属于 window 的属性</strong>，而且不会做变量提升。（注意，无论在哪个作用域内赋值）</p>
<p>比如说，如果我们直接在代码里写 <code>console.log(a)</code>，这肯定会报错的，提示找不到 <code>a</code>。但如果我直接写 <code>a = 100</code>，这就不会报错，此时，这个 <code>a</code> 就是 <code>window.a</code>。</p>
<p><strong>规律2：一切声明的全局变量，全是window的属性</strong>。（注意，我说的是在全局作用域内声明的全局变量，不是说局部变量）</p>
<p>比如说，当我定义 <code>var a = 200</code> 时，这此时这个 <code>a</code> 就是 <code>window.a</code>。</p>
<p>由此，我们可以看出：<strong>window 代表了全局作用域</strong>（是说「代表」，没说「等于」）。</p>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>掌握了上面两句话之后，我们再来看看下面的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = b = <span class="number">100</span>; <span class="comment">// 连续赋值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.b); <span class="comment">// 在全局范围内访问 b</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 在全局范围内访问 b，但是前面没有加 window 这个关键字</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">// 在全局范围内访问 a</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 在全局范围内访问 a，但是前面没有加 window 这个关键字</span></span><br></pre></td></tr></table></figure>

<p>上方代码的打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">100</span><br><span class="line"></span><br><span class="line">100</span><br><span class="line"></span><br><span class="line">undefined</span><br><span class="line"></span><br><span class="line">（会报错，提示 Uncaught ReferenceError: a is not defined）</span><br></pre></td></tr></table></figure>

<p><strong>解释</strong>：</p>
<p>当执行了<code>foo()</code>函数之后， <code>var a = b = 100</code> 这行<strong>连续赋值</strong>的代码等价于 <code>var a = (b = 100)</code>，其执行顺序是：</p>
<p>（1）先把 100 赋值给 b；</p>
<p>（2）再声明变量 a；</p>
<p>（3）再把 b 的值赋值给 a。</p>
<p>我们可以看到，b 是未经声明的变量就被赋值了，此时，根据规律1，这个 b 是属于 <code>window.b</code>；而 a 的作用域仅限于 foo() 函数内部，不属于 window。所以也就有了这样的打印结果。</p>
<h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h2><h3 id="函数预编译的步骤"><a href="#函数预编译的步骤" class="headerlink" title="函数预编译的步骤"></a>函数预编译的步骤</h3><blockquote>
<p>函数预编译，发生在函数执行的前一刻。</p>
</blockquote>
<p>（1）创建AO对象。AO即 Activation Object 活跃对象，其实就是「执行期上下文」。</p>
<p>（2）找形参和变量声明，将形参名和变量作为 AO 的属性名，值为undefined。</p>
<p>（3）将实参值和形参统一，实参的值赋给形参。</p>
<p>（4）查找函数声明，函数名作为 AO 对象的属性名，值为整个函数体。</p>
<p>这个地方比较难理解。但只有了解了函数的预编译，才能理解明白函数的执行顺序。</p>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">666</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ƒ a() &#123;&#125;</span><br><span class="line">666</span><br><span class="line">666</span><br><span class="line">ƒ () &#123;&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS属性详解：web字体</title>
    <url>/2020/04/18/13-CSS3%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3%EF%BC%9AWeb%E5%AD%97%E4%BD%93/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开发人员可以为自已的网页指定特殊的字体（将指定字体提前下载到站点中），无需考虑用户电脑上是否安装了此特殊字体。从此，把特殊字体处理成图片的方式便成为了过去。</p>
<p>支持程度比较好，甚至 IE 低版本的浏览器也能支持。</p>
<a id="more"></a>
<h2 id="字体的常见格式"><a href="#字体的常见格式" class="headerlink" title="字体的常见格式"></a>字体的常见格式</h2><blockquote>
<p>不同浏览器所支持的字体格式是不一样的，我们有必要了解一下字体格式的知识。</p>
</blockquote>
<h4 id="TureTpe格式：-ttf"><a href="#TureTpe格式：-ttf" class="headerlink" title="TureTpe格式：(.ttf)"></a>TureTpe格式：(<strong>.ttf</strong>)</h4><p>.ttf 字体是Windows和Mac的最常见的字体，是一种RAW格式。</p>
<p>支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome4+、Safari3+、Opera10+、iOS Mobile、Safari4.2+。</p>
<h4 id="OpenType格式：-otf"><a href="#OpenType格式：-otf" class="headerlink" title="OpenType格式：(.otf)"></a>OpenType格式：(<strong>.otf</strong>)</h4><p>.otf 字体被认为是一种原始的字体格式，其内置在TureType的基础上。</p>
<p>支持这种字体的浏览器有Firefox3.5+、Chrome4.0+、Safari3.1+、Opera10.0+、iOS Mobile、Safari4.2+。</p>
<h4 id="Web-Open-Font-Format格式：-woff"><a href="#Web-Open-Font-Format格式：-woff" class="headerlink" title="Web Open Font Format格式：(.woff)"></a>Web Open Font Format格式：(<strong>.woff</strong>)</h4><p>woff字体是Web字体中最佳格式，他是一个开放的TrueType/OpenType的压缩版本，同时也支持元数据包的分离。</p>
<p>支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome6+、Safari3.6+、Opera11.1+。</p>
<h4 id="Embedded-Open-Type格式：-eot"><a href="#Embedded-Open-Type格式：-eot" class="headerlink" title="Embedded Open Type格式：(.eot)"></a>Embedded Open Type格式：(<strong>.eot</strong>)</h4><p>.eot字体是IE专用字体，可以从TrueType创建此格式字体，支持这种字体的浏览器有IE4+。</p>
<h4 id="SVG格式：-svg"><a href="#SVG格式：-svg" class="headerlink" title="SVG格式：(.svg)"></a>SVG格式：(<strong>.svg</strong>)</h4><p>.svg字体是基于SVG字体渲染的一种格式。</p>
<p>支持这种字体的浏览器有Chrome4+、Safari3.1+、Opera10.0+、iOS Mobile Safari3.2+。</p>
<p><strong>总结：</strong></p>
<p>了解了上面的知识后，<strong>我们就需要为不同的浏览器准备不同格式的字体</strong>。通常我们会通过字体生成工具帮我们生成各种格式的字体，因此无需过于在意字体格式之间的区别。</p>
<p>下载字体的网站推荐：</p>
<ul>
<li><p><a href="http://www.zhaozi.cn/" target="_blank" rel="noopener">http://www.zhaozi.cn/</a></p>
</li>
<li><p><a href="http://www.youziku.com/" target="_blank" rel="noopener">http://www.youziku.com/</a></p>
</li>
</ul>
<h2 id="WebFont-的使用步骤"><a href="#WebFont-的使用步骤" class="headerlink" title="WebFont 的使用步骤"></a>WebFont 的使用步骤</h2><p>打开网站<a href="http://iconfont.cn/webfont#!/webfont/index" target="_blank" rel="noopener">http://iconfont.cn/webfont#!/webfont/index</a>，如下：</p>
<p><img src="http://img.smyhvae.com/20180220_1328.png" alt=""></p>
<p>上图中，比如我想要「思源黑体-粗」这个字体，那我就点击红框中的「本地下载」。</p>
<p>下载完成后是一个压缩包，压缩包链接：<a href="http://download.csdn.net/download/smyhvae/10253561" target="_blank" rel="noopener">http://download.csdn.net/download/smyhvae/10253561</a></p>
<p>解压后如下：</p>
<p><img src="http://img.smyhvae.com/20180220_1336.png" alt=""></p>
<p>上图中， 我们把箭头处的html文件打开，里面告诉了我们 webfont 的<strong>使用步骤</strong>：</p>
<p><img src="http://img.smyhvae.com/20180220_1338.png" alt=""></p>
<p>（1）第一步：使用font-face声明字体</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;<span class="attribute">font-family</span>: <span class="string">'webfont'</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'webfont.eot'</span>); <span class="comment">/* IE9*/</span></span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'webfont.eot?#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>), <span class="comment">/* IE6-IE8 */</span></span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'webfont.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>), <span class="comment">/* chrome、firefox */</span></span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'webfont.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>), <span class="comment">/* chrome、firefox、opera、Safari, Android, iOS 4.2+*/</span></span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'webfont.svg#webfont'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>); <span class="comment">/* iOS 4.1- */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>（2）第二步：定义使用webfont的样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.web-font</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>:<span class="string">"webfont"</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">16px</span>;<span class="attribute">font-style</span>:normal;</span><br><span class="line">    <span class="attribute">-webkit-font-smoothing</span>: antialiased;</span><br><span class="line">    <span class="attribute">-webkit-text-stroke-width</span>: <span class="number">0.2px</span>;</span><br><span class="line">    <span class="attribute">-moz-osx-font-smoothing</span>: grayscale;&#125;</span><br></pre></td></tr></table></figure>


<p>（3）第三步：为文字加上对应的样式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"web-font"</span>&gt;</span>这一分钟，你和我在一起，因为你，我会记得那一分钟。从现在开始，我们就是一分钟的朋友。这是事实，你改变不了，因为已经完成了。<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>举例：</strong></p>
<p>我们按照上图中的步骤来，引入这个字体。完整版代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        p&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">font-size</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*  如果要在网页中使用web字体（用户电脑上没有这种字体）*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* 第一步：声明字体*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* 告诉浏览器 去哪找这个字体*/</span></span></span><br><span class="line"><span class="css">        <span class="keyword">@font-face</span> &#123;<span class="attribute">font-family</span>: <span class="string">'my-web-font'</span>;</span></span><br><span class="line">            src: url('font/webfont.eot'); /* IE9*/</span><br><span class="line">            src: url('font/webfont.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */</span><br><span class="line">            url('font/webfont.woff') format('woff'), /* chrome、firefox */</span><br><span class="line">            url('font/webfont.ttf') format('truetype'), /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/</span><br><span class="line">            url('font/webfont.svg#webfont') format('svg'); /* iOS 4.1- */</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/* 第二步：定义一个类名，谁加这类名，就会使用 webfont 字体*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.webfont</span>&#123;</span></span><br><span class="line">            font-family: 'my-web-font';</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第三步：引用 webfont 字体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"webfont"</span>&gt;</span>生命壹号，永不止步<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>代码解释：</p>
<p>（1）<code>my-web-font</code>这个名字是随便起的，只要保证第一步和第二步中的名字一样就行。</p>
<p>（2）因为我把字体文件单独放在了font文件夹中，所以在src中引用字体资源时，写的路径是 <code>font/...</code></p>
<h2 id="字体图标（阿里的-iconfont-网站举例）"><a href="#字体图标（阿里的-iconfont-网站举例）" class="headerlink" title="字体图标（阿里的 iconfont 网站举例）"></a>字体图标（阿里的 iconfont 网站举例）</h2><p>我们其实可以把图片制作成字体。常见的做法是：把网页中一些小的图标，借助工具生成一个字体包，然后就可以像使用文字一样使用图标了。这样做的优点是：</p>
<ul>
<li><p>将所有图标打包成字体库，减少请求；</p>
</li>
<li><p>具有矢量性，可保证清晰度；</p>
</li>
<li><p>使用灵活，便于维护。</p>
</li>
</ul>
<p>也就是说，我们可以把这些图标当作字体来看待，凡是字体拥有的属性（字体大小、颜色等），均适用于图标。</p>
<p><strong>使用步骤如下：</strong>（和上一段的使用步骤是一样的）</p>
<p>打开网站<a href="http://iconfont.cn/" target="_blank" rel="noopener">http://iconfont.cn/</a>，找到想要的图标，加入购物车。然后下载下来：</p>
<p><img src="http://img.smyhvae.com/20180220_1750.png" alt=""></p>
<p>压缩包下载之后，解压，打开里面的demo.html，里面告诉了我们怎样引用这些图标。</p>
<p><img src="http://img.smyhvae.com/20180220_1755.png" alt=""></p>
<p><strong>举例1</strong>：（图标字体引用）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*申明字体*/</span></span></span><br><span class="line"><span class="css">        <span class="keyword">@font-face</span> &#123;<span class="attribute">font-family</span>: <span class="string">'iconfont'</span>;</span></span><br><span class="line">            src: url('font/iconfont.eot'); /* IE9*/</span><br><span class="line">            src: url('font/iconfont.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */</span><br><span class="line">            url('font/iconfont.woff') format('woff'), /* chrome、firefox */</span><br><span class="line">            url('font/iconfont.ttf') format('truetype'), /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/</span><br><span class="line">            url('font/iconfont.svg#iconfont') format('svg'); /* iOS 4.1- */</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.iconfont</span>&#123;</span></span><br><span class="line">            font-family: iconfont;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p&#123;</span><br><span class="line">            width: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">            line-height: 60px;</span><br><span class="line"><span class="css">            <span class="selector-tag">font-size</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:100px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p span&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 【重要】编码代表图标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"iconfont"</span>&gt;</span><span class="symbol">&amp;#xe628;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>扫码付款<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>举例2</strong>：（伪元素的方式使用图标字体）</p>
<p>如果想要在文字的前面加图标字体，我们更习惯采用<strong>伪元素</strong>的方式进行添加。</p>
<p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*申明字体*/</span></span></span><br><span class="line"><span class="css">        <span class="keyword">@font-face</span> &#123;<span class="attribute">font-family</span>: <span class="string">'iconfont'</span>;</span></span><br><span class="line">            src: url('font/iconfont.eot'); /* IE9*/</span><br><span class="line">            src: url('font/iconfont.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */</span><br><span class="line">            url('font/iconfont.woff') format('woff'), /* chrome、firefox */</span><br><span class="line">            url('font/iconfont.ttf') format('truetype'), /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/</span><br><span class="line">            url('font/iconfont.svg#iconfont') format('svg'); /* iOS 4.1- */</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        p&#123;</span><br><span class="line">            width: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">            line-height: 60px;</span><br><span class="line"><span class="css">            <span class="selector-tag">font-size</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:100px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line">            text-align: center;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.icon</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*&amp;#xe628;*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">content</span><span class="selector-pseudo">:"</span>\<span class="selector-tag">e628</span>";</span></span><br><span class="line"><span class="css">            <span class="comment">/*position: absolute;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*left:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*top:0px;*/</span></span></span><br><span class="line">            font-family: iconfont;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        span&#123;</span><br><span class="line">            position: relative;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span>扫码付款<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon"</span> &gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span>divvvvvvvvvvv<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="其他相相关网站介绍"><a href="#其他相相关网站介绍" class="headerlink" title="其他相相关网站介绍"></a>其他相相关网站介绍</h2><ul>
<li>Font Awesome 使用介绍：<a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">http://fontawesome.dashgame.com/</a></li>
</ul>
<p>定制自已的字体图标库：</p>
<ul>
<li><p><a href="http://iconfont.cn/" target="_blank" rel="noopener">http://iconfont.cn/</a></p>
</li>
<li><p><a href="https://icomoon.io/" target="_blank" rel="noopener">https://icomoon.io/</a></p>
</li>
</ul>
<p>SVG素材：</p>
<ul>
<li><a href="http://www.iconsvg.com/" target="_blank" rel="noopener">http://www.iconsvg.com/</a></li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Symbol</title>
    <url>/2020/04/18/13-Symbol/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要内容：</p>
<ul>
<li>概述</li>
<li>作为属性名的 Symbol</li>
<li>属性名的遍历</li>
<li>Symbol.for()，Symbol.keyFor()<a id="more"></a>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2></li>
</ul>
<p>ES5 的对象属性名都是字符串，这容易造成属性名的冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入<code>Symbol</code>的原因。</p>
<p>ES6 引入了一种新的原始数据类型<code>Symbol</code>，表示独一无二的值。它是 JavaScript 语言的<strong>第七种数据类型</strong>，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。</p>
<p><strong><code>Symbol</code>值通过<code>Symbol</code>函数生成</strong>。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 <code>Symbol</code> 类型。凡是属性名属于 <code>Symbol</code> 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let s &#x3D; Symbol();</span><br><span class="line"></span><br><span class="line">typeof s</span><br><span class="line">&#x2F;&#x2F; &quot;symbol&quot;</span><br></pre></td></tr></table></figure>

<p>上面代码中，变量s就是一个独一无二的值。typeof运算符的结果，表明变量s是 Symbol 数据类型，而不是字符串之类的其他类型。</p>
<blockquote>
<p>注意，<strong><code>Symbol</code>函数前不能使用new命令</strong>，否则会报错。这是因为生成的 <code>Symbol</code> 是一个原始类型的值，不是对象。也就是说，由于 <code>Symbol</code> 值不是对象，所以不能添加属性。基本上，它是一种类似于字符串的数据类型。</p>
</blockquote>
<ul>
<li><code>Symbol</code>函数可以接受一个字符串作为参数，表示对 <code>Symbol</code> 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。</li>
</ul>
<ul>
<li>如果 <code>Symbol</code> 的参数是一个对象，就会调用该对象的<code>toString</code>方法，将其转为字符串，然后才生成一个 <code>Symbol</code> 值。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const obj &#x3D; &#123;</span><br><span class="line">  toString() &#123;</span><br><span class="line">    return &#39;abc&#39;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const sym &#x3D; Symbol(obj);</span><br><span class="line">sym &#x2F;&#x2F; Symbol(abc)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，Symbol函数的参数只是表示对当前 <code>Symbol</code> 值的描述，因此相同参数的<code>Symbol</code>函数的返回值是不相等的。</p>
</blockquote>
<ul>
<li>Symbol 值不能与其他类型的值进行运算，会报错。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let sym &#x3D; Symbol(&#39;My symbol&#39;);</span><br><span class="line"></span><br><span class="line">&quot;your symbol is &quot; + sym</span><br><span class="line">&#x2F;&#x2F; TypeError: can&#39;t convert symbol to string</span><br><span class="line">&#96;your symbol is $&#123;sym&#125;&#96;</span><br><span class="line">&#x2F;&#x2F; TypeError: can&#39;t convert symbol to string</span><br></pre></td></tr></table></figure>

<p>但是，<code>Symbol</code> 值可以显式转为字符串。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let sym &#x3D; Symbol(&#39;My symbol&#39;);</span><br><span class="line"></span><br><span class="line">String(sym) &#x2F;&#x2F; &#39;Symbol(My symbol)&#39;</span><br><span class="line">sym.toString() &#x2F;&#x2F; &#39;Symbol(My symbol)&#39;</span><br></pre></td></tr></table></figure>
<ul>
<li>另外，Symbol 值也可以转为布尔值，但是不能转为数值。</li>
</ul>
<h2 id="作为属性名的-Symbol"><a href="#作为属性名的-Symbol" class="headerlink" title="作为属性名的 Symbol"></a>作为属性名的 Symbol</h2><p><strong>由于每一个 <code>Symbol</code> 值都是不相等的</strong>，这意味着 <code>Symbol</code> 值可以作为标识符，用于对象的属性名，就能保证不会出现同名的属性。这对于一个对象由多个模块构成的情况非常有用，能防止某一个键被不小心改写或覆盖。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let mySymbol &#x3D; Symbol();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 第一种写法</span><br><span class="line">let a &#x3D; &#123;&#125;;</span><br><span class="line">a[mySymbol] &#x3D; &#39;Hello!&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 第二种写法</span><br><span class="line">let a &#x3D; &#123;</span><br><span class="line">  [mySymbol]: &#39;Hello!&#39;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 第三种写法</span><br><span class="line">let a &#x3D; &#123;&#125;;</span><br><span class="line">Object.defineProperty(a, mySymbol, &#123; value: &#39;Hello!&#39; &#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 以上写法都得到同样结果</span><br><span class="line">a[mySymbol] &#x2F;&#x2F; &quot;Hello!&quot;</span><br></pre></td></tr></table></figure>

<p>上面代码通过方括号结构和<code>Object.defineProperty</code>，将对象的属性名指定为一个 Symbol 值。</p>
<blockquote>
<p>注意，Symbol 值作为对象属性名时，不能用点运算符。</p>
</blockquote>
<blockquote>
<p>同理，在对象的内部，使用<code>Symbol</code>值定义属性时，<code>Symbol</code> 值必须放在方括号之中。</p>
</blockquote>
<blockquote>
<p>还有一点需要注意，<code>Symbol</code> 值作为属性名时，该属性还是公开属性，不是私有属性。</p>
</blockquote>
<h2 id="属性名的遍历"><a href="#属性名的遍历" class="headerlink" title="属性名的遍历"></a>属性名的遍历</h2><p><code>Symbol</code> 作为属性名，遍历对象的时候，该属性<strong>不会</strong>出现在<code>for...in、for...of</code>循环中，也不会被<code>Object.keys()</code>、<code>Object.getOwnPropertyNames()</code>、<code>JSON.stringify()</code>返回。</p>
<p>但是，它也<strong>不是私有属性</strong>，有一个<code>Object.getOwnPropertySymbols()</code>方法，可以获取指定对象的所有 <code>Symbol</code> 属性名。该方法返回一个数组，成员是当前对象的所有用作属性名的 <code>Symbol</code> 值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const obj &#x3D; &#123;&#125;;</span><br><span class="line">let a &#x3D; Symbol(&#39;a&#39;);</span><br><span class="line">let b &#x3D; Symbol(&#39;b&#39;);</span><br><span class="line"></span><br><span class="line">obj[a] &#x3D; &#39;Hello&#39;;</span><br><span class="line">obj[b] &#x3D; &#39;World&#39;;</span><br><span class="line"></span><br><span class="line">const objectSymbols &#x3D; Object.getOwnPropertySymbols(obj);</span><br><span class="line"></span><br><span class="line">objectSymbols</span><br><span class="line">&#x2F;&#x2F; [Symbol(a), Symbol(b)]</span><br></pre></td></tr></table></figure>

<p>上面代码是<code>Object.getOwnPropertySymbols()</code>方法的示例，可以获取所有 <code>Symbol</code> 属性名。</p>
<h2 id="Symbol-for-，Symbol-keyFor"><a href="#Symbol-for-，Symbol-keyFor" class="headerlink" title="Symbol.for()，Symbol.keyFor()"></a>Symbol.for()，Symbol.keyFor()</h2><p>有时，我们希望重新使用同一个 <code>Symbol</code> 值，<code>Symbol.for()</code>方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 <code>Symbol</code> 值。如果有，就返回这个<code>Symbol</code>值，否则就新建一个以该字符串为名称的 <code>Symbol</code> 值，并将其注册到全局。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let s1 &#x3D; Symbol.for(&#39;foo&#39;);</span><br><span class="line">let s2 &#x3D; Symbol.for(&#39;foo&#39;);</span><br><span class="line"></span><br><span class="line">s1 &#x3D;&#x3D;&#x3D; s2 &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>上面代码中，s1和s2都是 <code>Symbol</code> 值，但是它们都是由同样参数的<code>Symbol.for</code>方法生成的，所以实际上是同一个值。</p>
<p><code>Symbol.keyFor()</code>方法返回一个已登记的 <code>Symbol</code>类型值的key。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let s1 &#x3D; Symbol.for(&quot;foo&quot;);</span><br><span class="line">Symbol.keyFor(s1) &#x2F;&#x2F; &quot;foo&quot;</span><br><span class="line"></span><br><span class="line">let s2 &#x3D; Symbol(&quot;foo&quot;);</span><br><span class="line">Symbol.keyFor(s2) &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure>

<p>上面代码中，变量s2属于未登记的 <code>Symbol</code> 值，所以返回<code>undefined</code>。</p>
<p>注意，<code>Symbol.for()</code>为 Symbol 值登记的名字，是全局环境的，不管有没有在全局环境运行。</p>
]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>Set和Map数据结构</title>
    <url>/2020/04/18/14-Set%E5%92%8CMap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要内容：</p>
<ul>
<li>Set</li>
<li>WeakSet</li>
<li>Map<a id="more"></a>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2></li>
</ul>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>ES6 提供了新的数据结构 <strong>Set</strong>。它类似于数组，但是<strong>成员的值都是唯一的</strong>，没有重复的值。</p>
<ul>
<li><strong>Set本身是一个构造函数</strong>，用来生成 Set 数据结构。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const s &#x3D; new Set();</span><br><span class="line"></span><br><span class="line">[2, 3, 5, 4, 5, 2, 2].forEach(x &#x3D;&gt; s.add(x));</span><br><span class="line"></span><br><span class="line">for (let i of s) &#123;</span><br><span class="line">  console.log(i);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 2 3 5 4</span><br></pre></td></tr></table></figure>

<p>上面代码<strong>通过<code>add()</code>方法向 Set 结构加入成员</strong>，结果表明 Set 结构不会添加重复的值。</p>
<ul>
<li>Set函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 例一</span><br><span class="line">const set &#x3D; new Set([1, 2, 3, 4, 4]);</span><br><span class="line">[...set]</span><br><span class="line">&#x2F;&#x2F; [1, 2, 3, 4]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 例二</span><br><span class="line">const items &#x3D; new Set([1, 2, 3, 4, 5, 5, 5, 5]);</span><br><span class="line">items.size &#x2F;&#x2F; 5</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 例三</span><br><span class="line">const set &#x3D; new Set(document.querySelectorAll(&#39;div&#39;));</span><br><span class="line">set.size &#x2F;&#x2F; 56</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 类似于</span><br><span class="line">const set &#x3D; new Set();</span><br><span class="line">document</span><br><span class="line"> .querySelectorAll(&#39;div&#39;)</span><br><span class="line"> .forEach(div &#x3D;&gt; set.add(div));</span><br><span class="line">set.size &#x2F;&#x2F; 56</span><br></pre></td></tr></table></figure>

<ul>
<li><p>上面代码也展示了一种去除数组重复成员的方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 去除数组的重复成员</span><br><span class="line">[...new Set(array)]</span><br></pre></td></tr></table></figure>
</li>
<li><p>上面的方法也可以用于，去除字符串里面的重复字符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[...new Set(&#39;ababbc&#39;)].join(&#39;&#39;)</span><br><span class="line">&#x2F;&#x2F; &quot;abc&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>向 <code>Set</code> 加入值的时候，不会发生类型转换，所以5和”5”是两个不同的值。</p>
</li>
<li><p>另外，两个对象总是不相等的。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let set &#x3D; new Set();</span><br><span class="line"></span><br><span class="line">set.add(&#123;&#125;);</span><br><span class="line">set.size &#x2F;&#x2F; 1</span><br><span class="line"></span><br><span class="line">set.add(&#123;&#125;);</span><br><span class="line">set.size &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure>

<p>上面代码表示，由于两个空对象不相等，所以它们被视为两个值。</p>
<h3 id="Set-实例的属性和方法"><a href="#Set-实例的属性和方法" class="headerlink" title="Set 实例的属性和方法"></a>Set 实例的属性和方法</h3><p>Set 结构的实例有以下属性。</p>
<ul>
<li><code>Set.prototype.constructor</code>：构造函数，默认就是Set函数。</li>
<li><code>Set.prototype.size</code>：返回Set实例的成员总数。</li>
</ul>
<p>Set 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。下面先介绍四个操作方法。</p>
<ul>
<li><code>Set.prototype.add(value)</code>：添加某个值，返回 Set 结构本身。</li>
<li><code>Set.prototype.delete(value)</code>：删除某个值，返回一个布尔值，表示删除是否成功。</li>
<li><code>Set.prototype.has(value)</code>：返回一个布尔值，表示该值是否为Set的成员。</li>
<li><code>Set.prototype.clear()</code>：清除所有成员，没有返回值。</li>
</ul>
<ul>
<li><code>Array.from</code>方法可以将 Set 结构转为数组。这就提供了去除数组重复成员的另一种方法。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function dedupe(array) &#123;</span><br><span class="line">  return Array.from(new Set(array));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dedupe([1, 1, 2, 3]) &#x2F;&#x2F; [1, 2, 3]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="遍历操作"><a href="#遍历操作" class="headerlink" title="遍历操作"></a>遍历操作</h3><p>Set 结构的实例有四个遍历方法，可以用于遍历成员。</p>
<ul>
<li><code>Set.prototype.keys()</code>：返回键名的遍历器</li>
<li><code>Set.prototype.values()</code>：返回键值的遍历器</li>
<li><code>Set.prototype.entries()</code>：返回键值对的遍历器</li>
<li><code>Set.prototype.forEach()</code>：使用回调函数遍历每个成员</li>
</ul>
<p>需要特别指出的是，<strong>Set的遍历顺序就是插入顺序</strong>。这个特性有时非常有用，比如使用 Set 保存一个回调函数列表，调用时就能保证按照添加顺序调用。</p>
<ul>
<li>（1）keys()，values()，entries()</li>
</ul>
<p>keys方法、values方法、entries方法返回的都是遍历器对象（详见《Iterator 对象》一章）。由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以keys方法和values方法的行为完全一致。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let set &#x3D; new Set([&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;]);</span><br><span class="line"></span><br><span class="line">for (let item of set.keys()) &#123;</span><br><span class="line">  console.log(item);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; red</span><br><span class="line">&#x2F;&#x2F; green</span><br><span class="line">&#x2F;&#x2F; blue</span><br><span class="line"></span><br><span class="line">for (let item of set.values()) &#123;</span><br><span class="line">  console.log(item);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; red</span><br><span class="line">&#x2F;&#x2F; green</span><br><span class="line">&#x2F;&#x2F; blue</span><br></pre></td></tr></table></figure>

<ul>
<li>（2）forEach()</li>
</ul>
<p>Set 结构的实例与数组一样，也拥有<code>forEach</code>方法，用于对每个成员执行某种操作，没有返回值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let set &#x3D; new Set([1, 4, 9]);</span><br><span class="line">set.forEach((value, key) &#x3D;&gt; console.log(key + &#39; : &#39; + value))</span><br><span class="line">&#x2F;&#x2F; 1 : 1</span><br><span class="line">&#x2F;&#x2F; 4 : 4</span><br><span class="line">&#x2F;&#x2F; 9 : 9</span><br></pre></td></tr></table></figure>

<p>上面代码说明，<code>forEach</code>方法的参数就是一个处理函数。该函数的参数与数组的forEach一致，依次为键值、键名、集合本身（上例省略了该参数）。这里需要注意，Set 结构的键名就是键值（两者是同一个值），因此第一个参数与第二个参数的值永远都是一样的。</p>
<p>另外，<code>forEach</code>方法还可以有第二个参数，表示绑定处理函数内部的this对象。</p>
<ul>
<li>（3）遍历的应用</li>
</ul>
<p>扩展运算符（…）内部使用for…of循环，所以也可以用于 Set 结构。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let set &#x3D; new Set([1, 2, 3]);</span><br><span class="line">set &#x3D; new Set([...set].map(x &#x3D;&gt; x * 2));</span><br><span class="line">&#x2F;&#x2F; 返回Set结构：&#123;2, 4, 6&#125;</span><br><span class="line"></span><br><span class="line">let set &#x3D; new Set([1, 2, 3, 4, 5]);</span><br><span class="line">set &#x3D; new Set([...set].filter(x &#x3D;&gt; (x % 2) &#x3D;&#x3D; 0));</span><br><span class="line">&#x2F;&#x2F; 返回Set结构：&#123;2, 4&#125;</span><br></pre></td></tr></table></figure>

<h2 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h2><p><code>WeakSet</code> 结构与 Set 类似，也是不重复的值的集合。但是，它与 <code>Set</code> 有两个区别。</p>
<ul>
<li>首先，<code>WeakSet</code> 的成员只能是对象，而不能是其他类型的值.</li>
<li>其次，<code>WeakSet</code> 中的对象都是弱引用，即垃圾回收机制不考虑 <code>WeakSet</code> 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 <code>WeakSet</code> 之中。</li>
</ul>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="含义和基本用法"><a href="#含义和基本用法" class="headerlink" title="含义和基本用法"></a>含义和基本用法</h3><p>JavaScript 的对象（Object），本质上是<strong>键值对的集合</strong>（<strong>Hash 结构</strong>），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。</p>
<p>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，<strong>但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键</strong>。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。</p>
<ul>
<li>Map构造函数接受数组作为参数，实际上执行的是下面的算法。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const items &#x3D; [</span><br><span class="line">  [&#39;name&#39;, &#39;张三&#39;],</span><br><span class="line">  [&#39;title&#39;, &#39;Author&#39;]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">const map &#x3D; new Map();</span><br><span class="line"></span><br><span class="line">items.forEach(</span><br><span class="line">  ([key, value]) &#x3D;&gt; map.set(key, value)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>事实上，不仅仅是数组，任何具有 <code>Iterator</code> 接口、且每个成员都是一个双元素的数组的数据结构（详见《Iterator》一章）都可以当作Map构造函数的参数。这就是说，Set和Map都可以用来生成新的 Map。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const set &#x3D; new Set([</span><br><span class="line">  [&#39;foo&#39;, 1],</span><br><span class="line">  [&#39;bar&#39;, 2]</span><br><span class="line">]);</span><br><span class="line">const m1 &#x3D; new Map(set);</span><br><span class="line">m1.get(&#39;foo&#39;) &#x2F;&#x2F; 1</span><br><span class="line"></span><br><span class="line">const m2 &#x3D; new Map([[&#39;baz&#39;, 3]]);</span><br><span class="line">const m3 &#x3D; new Map(m2);</span><br><span class="line">m3.get(&#39;baz&#39;) &#x2F;&#x2F; 3</span><br></pre></td></tr></table></figure>


<ul>
<li>如果对同一个键多次赋值，后面的值将覆盖前面的值。</li>
</ul>
<ul>
<li><p>如果读取一个未知的键，则返回undefined。</p>
</li>
<li><p><strong>只有对同一个对象的引用，Map 结构才将其视为同一个键。这一点要非常小心</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const map &#x3D; new Map();</span><br><span class="line"></span><br><span class="line">map.set([&#39;a&#39;], 555);</span><br><span class="line">map.get([&#39;a&#39;]) &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>上面代码的<code>set和get</code>方法，表面是针对同一个键，但实际上这是两个不同的数组实例，内存地址是不一样的，因此get方法无法读取该键，返回<code>undefined</code>。</p>
<ul>
<li><p><strong>Map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。</strong>这就解决了同名属性碰撞（clash）的问题，我们扩展别人的库的时候，如果使用对象作为键名，就不用担心自己的属性与原作者的属性同名。</p>
</li>
<li><p>如果 Map 的键是一个<strong>简单类型的值</strong>（数字、字符串、布尔值），则<strong>只要两个值严格相等，Map 将其视为一个键，</strong>比如0和-0就是一个键，<strong>布尔值true和字符串true则是两个不同的键</strong>。另外，<strong>undefined和null也是两个不同的键。虽然NaN不严格相等于自身，但 Map 将其视为同一个键</strong>。</p>
</li>
</ul>
<h3 id="实例的属性和操作方法"><a href="#实例的属性和操作方法" class="headerlink" title="实例的属性和操作方法"></a>实例的属性和操作方法</h3><p>Map 结构的实例有以下属性和操作方法。</p>
<ul>
<li>（1）size 属性</li>
</ul>
<p>size属性返回 Map 结构的成员总数。</p>
<ul>
<li>（2）<code>Map.prototype.set(key, value)</code></li>
</ul>
<p>set方法设置键名key对应的键值为value，然后返回整个 Map 结构。如果key已经有值，则键值会被更新，否则就新生成该键。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const m &#x3D; new Map();</span><br><span class="line"></span><br><span class="line">m.set(&#39;edition&#39;, 6)        &#x2F;&#x2F; 键是字符串</span><br><span class="line">m.set(262, &#39;standard&#39;)     &#x2F;&#x2F; 键是数值</span><br><span class="line">m.set(undefined, &#39;nah&#39;)    &#x2F;&#x2F; 键是 undefined</span><br></pre></td></tr></table></figure>

<p>set方法返回的是当前的Map对象，因此可以采用链式写法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let map &#x3D; new Map()</span><br><span class="line">  .set(1, &#39;a&#39;)</span><br><span class="line">  .set(2, &#39;b&#39;)</span><br><span class="line">  .set(3, &#39;c&#39;);</span><br></pre></td></tr></table></figure>

<ul>
<li>（3）<code>Map.prototype.get(key)</code></li>
</ul>
<p>get方法读取key对应的键值，如果找不到key，返回undefined。</p>
<ul>
<li>（4）<code>Map.prototype.has(key)</code></li>
</ul>
<p><code>has</code>方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。</p>
<ul>
<li>（5）<code>Map.prototype.delete(key)</code></li>
</ul>
<p><code>delete</code>方法删除某个键，返回true。如果删除失败，返回false。</p>
<ul>
<li>（6）<code>Map.prototype.clear()</code></li>
</ul>
<p>clear方法清除所有成员，没有返回值。</p>
<h3 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h3><p>Map 结构原生提供三个遍历器生成函数和一个遍历方法。</p>
<ul>
<li><code>Map.prototype.keys()</code>：返回键名的遍历器。</li>
<li><code>Map.prototype.values()</code>：返回键值的遍历器。</li>
<li><code>Map.prototype.entries()</code>：返回所有成员的遍历器。</li>
<li><code>Map.prototype.forEach()</code>：遍历 Map 的所有成员。</li>
</ul>
<p>需要特别注意的是，Map 的遍历顺序就是插入顺序。</p>
<h3 id="与其他数据结构的互相转换"><a href="#与其他数据结构的互相转换" class="headerlink" title="与其他数据结构的互相转换"></a>与其他数据结构的互相转换</h3><ul>
<li>（1）Map 转为数组</li>
</ul>
<p>前面已经提过，Map 转为数组最方便的方法，就是使用扩展运算符（…）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const myMap &#x3D; new Map()</span><br><span class="line">  .set(true, 7)</span><br><span class="line">  .set(&#123;foo: 3&#125;, [&#39;abc&#39;]);</span><br><span class="line">[...myMap]</span><br><span class="line">&#x2F;&#x2F; [ [ true, 7 ], [ &#123; foo: 3 &#125;, [ &#39;abc&#39; ] ] ]</span><br></pre></td></tr></table></figure>
<ul>
<li>（2）数组 转为 Map</li>
</ul>
<p>将数组传入 Map 构造函数，就可以转为 Map。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Map([</span><br><span class="line">  [true, 7],</span><br><span class="line">  [&#123;foo: 3&#125;, [&#39;abc&#39;]]</span><br><span class="line">])</span><br><span class="line">&#x2F;&#x2F; Map &#123;</span><br><span class="line">&#x2F;&#x2F;   true &#x3D;&gt; 7,</span><br><span class="line">&#x2F;&#x2F;   Object &#123;foo: 3&#125; &#x3D;&gt; [&#39;abc&#39;]</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>（3）Map 转为对象</li>
</ul>
<p>如果所有 Map 的键都是字符串，它可以无损地转为对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function strMapToObj(strMap) &#123;</span><br><span class="line">  let obj &#x3D; Object.create(null);</span><br><span class="line">  for (let [k,v] of strMap) &#123;</span><br><span class="line">    obj[k] &#x3D; v;</span><br><span class="line">  &#125;</span><br><span class="line">  return obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const myMap &#x3D; new Map()</span><br><span class="line">  .set(&#39;yes&#39;, true)</span><br><span class="line">  .set(&#39;no&#39;, false);</span><br><span class="line">strMapToObj(myMap)</span><br><span class="line">&#x2F;&#x2F; &#123; yes: true, no: false &#125;</span><br></pre></td></tr></table></figure>

<p>如果有非字符串的键名，那么这个键名会被转成字符串，再作为对象的键名。</p>
<ul>
<li>（4）对象转为 Map</li>
</ul>
<p>对象转为 Map 可以通过<code>Object.entries()</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let obj &#x3D; &#123;&quot;a&quot;:1, &quot;b&quot;:2&#125;;</span><br><span class="line">let map &#x3D; new Map(Object.entries(obj));</span><br></pre></td></tr></table></figure>

<ul>
<li>（5）Map 转为 JSON</li>
</ul>
<p>Map 转为 JSON 要区分两种情况。一种情况是，Map 的键名都是字符串，这时可以选择转为对象 JSON。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function strMapToJson(strMap) &#123;</span><br><span class="line">  return JSON.stringify(strMapToObj(strMap));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let myMap &#x3D; new Map().set(&#39;yes&#39;, true).set(&#39;no&#39;, false);</span><br><span class="line">strMapToJson(myMap)</span><br><span class="line">&#x2F;&#x2F; &#39;&#123;&quot;yes&quot;:true,&quot;no&quot;:false&#125;&#39;</span><br></pre></td></tr></table></figure>

<p>另一种情况是，Map 的键名有非字符串，这时可以选择转为数组 JSON。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function mapToArrayJson(map) &#123;</span><br><span class="line">  return JSON.stringify([...map]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let myMap &#x3D; new Map().set(true, 7).set(&#123;foo: 3&#125;, [&#39;abc&#39;]);</span><br><span class="line">mapToArrayJson(myMap)</span><br><span class="line">&#x2F;&#x2F; &#39;[[true,7],[&#123;&quot;foo&quot;:3&#125;,[&quot;abc&quot;]]]&#39;</span><br></pre></td></tr></table></figure>

<ul>
<li>（6）JSON 转为 Map</li>
</ul>
<p>JSON 转为 Map，正常情况下，所有键名都是字符串。</p>
]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器兼容问题</title>
    <url>/2020/04/18/14-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<hr>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>this</title>
    <url>/2020/04/18/13-this/</url>
    <content><![CDATA[<hr>
<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>解析器在调用函数每次都会向函数内部传递进一个隐含的参数，这个隐含的参数就是this，<strong>this指向的是一个对象</strong>，这个对象我们称为函数执行的 上下文对象。</p>
<p><strong>根据函数的调用方式的不同，this会指向不同的对象</strong>：【重要】</p>
<ul>
<li><p>1.以函数的形式调用时，this永远都是window。比如<code>fun();</code>相当于<code>window.fun();</code></p>
</li>
<li><p>2.以方法的形式调用时，this是调用方法的那个对象</p>
</li>
<li><p>3.以构造函数的形式调用时，this是新创建的那个对象</p>
</li>
<li><p>4.使用call和apply调用时，this是指定的那个对象</p>
</li>
<li><p>5.在函数中，严格模式下，this 是 undefined。</p>
</li>
<li><p>6.在事件中，this 指的是接收事件的元素。</p>
<a id="more"></a>

</li>
</ul>
<p><strong>针对第1条的举例</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    name: <span class="string">"smyh"</span>,</span><br><span class="line">    sayName: fun</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    name: <span class="string">"vae"</span>,</span><br><span class="line">    sayName: fun</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"全局的name属性"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以函数形式调用，this是window</span></span><br><span class="line">fun();       <span class="comment">//可以理解成 window.fun()</span></span><br></pre></td></tr></table></figure>


<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Window</span><br><span class="line">全局的name属性</span><br></pre></td></tr></table></figure>


<p>上面的举例可以看出，this指向的是window对象，所以 this.name 指的是全局的name。</p>
<p><strong>第2条的举例</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    name: <span class="string">"smyh"</span>,</span><br><span class="line">    sayName: fun</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    name: <span class="string">"vae"</span>,</span><br><span class="line">    sayName: fun</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"全局的name属性"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以方法的形式调用，this是调用方法的对象</span></span><br><span class="line">obj2.sayName();</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object</span><br><span class="line">vae</span><br></pre></td></tr></table></figure>

<p>上面的举例可以看出，this指向的是 对象 obj2 ，所以 this.name 指的是 obj2.name。</p>
<p><strong>箭头函数中this的指向</strong>：</p>
<p>ES6中的箭头函数并不会使用上面四条标准的绑定规则，而是会继承外层函数调用的this绑定（无论this绑定到什么）。</p>
<h2 id="类数组-arguments"><a href="#类数组-arguments" class="headerlink" title="类数组 arguments"></a>类数组 arguments</h2><p>在调用函数时，浏览器每次都会传递进两个隐含的参数：</p>
<ul>
<li><p>1.函数的上下文对象 this</p>
</li>
<li><p>2.<strong>封装实参的对象</strong> arguments</p>
</li>
</ul>
<p><code>arguments</code>对象是所有（非箭头）函数中都可用的局部变量。你可以使用<code>arguments</code>对象在函数中引用函数的参数。此对象包含传递给函数的每个参数，第一个参数在索引0处。</p>
<p><code>arguments</code>对象不是一个 <code>Array</code> 。它类似于<code>Array</code>，但除了<code>length</code>属性和索引元素之外没有任何<code>Array</code>属性。</p>
<p>您还可以使用<code>Array.from()</code>方法或扩展运算符将参数转换为真实数组.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var args &#x3D; Array.from(arguments);</span><br><span class="line">var args &#x3D; [...arguments];</span><br></pre></td></tr></table></figure>


<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure>


<p>arguments是一个<strong>类数组对象</strong>，它可以通过索引来操作数据，也可以获取长度。</p>
<p><strong>arguments代表的是实参</strong>。在调用函数时，我们所传递的实参都会在arguments中保存。有个讲究的地方是：arguments<strong>只在函数中使用</strong>。</p>
<h3 id="1、返回函数实参的个数：arguments-length"><a href="#1、返回函数实参的个数：arguments-length" class="headerlink" title="1、返回函数实参的个数：arguments.length"></a>1、返回函数<strong>实参</strong>的个数：arguments.length</h3><p>arguments.length可以用来获取<strong>实参的长度</strong>。</p>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fn(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">fn(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>);</span><br><span class="line">fn(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(fn.length);         <span class="comment">//获取形参的个数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);  <span class="comment">//获取实参的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"----------------"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>我们即使不定义形参，也可以通过arguments来使用实参（只不过比较麻烦）：arguments[0] 表示第一个实参、arguments[1] 表示第二个实参…</p>
<h3 id="2、返回正在执行的函数：arguments-callee"><a href="#2、返回正在执行的函数：arguments-callee" class="headerlink" title="2、返回正在执行的函数：arguments.callee"></a>2、返回正在执行的函数：arguments.callee</h3><p>arguments里边有一个属性叫做callee，这个属性对应一个函数对象，就是当前正在指向的函数对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee == fun); <span class="comment">//打印结果为true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun(<span class="string">"hello"</span>);</span><br></pre></td></tr></table></figure>

<p>在使用函数<strong>递归</strong>调用时，推荐使用arguments.callee代替函数名本身。</p>
<h3 id="3、arguments可以修改元素"><a href="#3、arguments可以修改元素" class="headerlink" title="3、arguments可以修改元素"></a>3、arguments可以修改元素</h3><p>之所以说arguments是伪数组，是因为：<strong>arguments可以修改元素，但不能改变数组的长短</strong>。举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fn(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">fn(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>);</span><br><span class="line">fn(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">99</span>;  <span class="comment">//将实参的第一个数改为99</span></span><br><span class="line">    <span class="built_in">arguments</span>.push(<span class="number">8</span>);  <span class="comment">//此方法不通过，因为无法增加元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="call-bind-apply-的区别"><a href="#call-bind-apply-的区别" class="headerlink" title="call bind apply 的区别"></a>call bind apply 的区别</h2><p><strong>简单说一下bind、call、apply的区别</strong></p>
<p><strong>三者都是用于改变函数体内this的指向</strong>.</p>
<p>但是<strong>bind与apply和call的最大的区别</strong>是：</p>
<p><strong>bind不会立即调用，而是返回一个新函数，称为绑定函数</strong>，其内的this指向为创建它时传入bind的第一个参数，而传入bind的第二个及以后的参数作为原函数的参数来调用原函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var obj &#x3D; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">function test() &#123;</span><br><span class="line">    console.log(this &#x3D;&#x3D;&#x3D; obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(); &#x2F;&#x2F;false</span><br><span class="line"></span><br><span class="line">var testObj &#x3D; test.bind(obj);</span><br><span class="line">testObj();  &#x2F;&#x2F;true</span><br></pre></td></tr></table></figure>
<p>apply和call都是为了改变某个函数运行时的上下文而存在的（就是为了改变函数内部this的指向）；apply和call的调用返回函数执行结果；</p>
<p>　如果使用apply或call方法，那么this指向他们的第一个参数，apply的第二个参数是一个参数数组，call的第二个及其以后的参数都是数组里面的元素，就是说要全部列举出来；</p>
<p><strong>以下是MDN文档</strong>：</p>
<p><strong>bind语法</strong>：</p>
<p>func.bind(thisArg, [arg1[, arg2[, …]]])</p>
<p>thisArg 当绑定函数被调用时，该参数会作为原函数运行时的this指向。当使用new 操作符调用绑定函数时，该参数无效。<br>arg1, arg2, … 当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。</p>
<p><strong>call语法</strong>：</p>
<p>fun.call(thisArg, arg1, arg2, …)</p>
<p>thisArg:：在fun函数运行时指定的this值。需要注意的是，指定的this值并不一定是该函数执行时真正的this值，如果这个函数处于非严格模式下，则指定为null和undefined的this值会自动指向全局对象(浏览器中就是window对象)，同时值为原始值(数字，字符串，布尔值)的this会指向该原始值的自动包装对象。<br>arg1, arg2, … 指定的参数列表。</p>
<p><strong>apply语法</strong>：</p>
<p>fun.apply(thisArg, [argsArray])</p>
<p>thisArg： 在 fun 函数运行时指定的 this 值。需要注意的是，指定的 this 值并不一定是该函数执行时真正的 this 值，如果这个函数处于非严格模式下，则指定为 null 或 undefined 时会自动指向全局对象（浏览器中就是window对象），同时值为原始值（数字，字符串，布尔值）的 this 会指向该原始值的自动包装对象。</p>
<p>argsArray: 一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 fun 函数。如果该参数的值为null 或 undefined，则表示不需要传入任何参数。从ECMAScript 5 开始可以使用类数组对象。</p>
<p><strong>区别总结</strong>：</p>
<p>当我们使用一个函数需要改变this指向的时候才会用到call,apply,bind</p>
<ul>
<li><p>如果你要传递的参数不多，则可以使用fn.call(thisObj, arg1, arg2 …)</p>
</li>
<li><p>如果你要传递的参数很多，则可以用数组将参数整理好调用fn.apply(thisObj, [arg1, arg2 …])</p>
</li>
<li><p>如果你想生成一个新的函数长期绑定某个函数给某个对象使用，则可以使用<code>const newFn = fn.bind(thisObj)</code>;<code>newFn(arg1, arg2...)</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>闭包</title>
    <url>/2020/04/18/14-%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<hr>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><blockquote>
<p>函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起构成闭包（closure）。也就是说，<strong>闭包可以让你从内部函数访问外部函数作用域</strong>。在 <code>JavaScript</code> 中，每当函数被创建，就会在函数生成时生成闭包。</p>
</blockquote>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function makeAdder(x) &#123;</span><br><span class="line">  return function(y) &#123;</span><br><span class="line">    return x + y;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var add5 &#x3D; makeAdder(5);</span><br><span class="line">var add10 &#x3D; makeAdder(10);</span><br><span class="line"></span><br><span class="line">console.log(add5(2));  &#x2F;&#x2F; 7</span><br><span class="line">console.log(add10(2)); &#x2F;&#x2F; 12</span><br></pre></td></tr></table></figure>
<p>在这个示例中，我们定义了 makeAdder(x) 函数，它接受一个参数 x ，并返回一个新的函数。返回的函数接受一个参数 y，并返回x+y的值。</p>
<p>从本质上讲，makeAdder 是一个函数工厂 — 他创建了将指定的值和它的参数相加求和的函数。在上面的示例中，我们使用函数工厂创建了两个新函数 — 一个将其参数和 5 求和，另一个和 10 求和。</p>
<p>add5 和 add10 都是闭包。它们共享相同的函数定义，但是保存了不同的词法环境。在 add5 的环境中，x 为 5。而在 add10 中，x 则为 10。</p>
<p><strong>必刷题</strong></p>
<blockquote>
<p>当在函数作用域操作一个变量时，它会先在自身作用域中寻找，如果有就直接使用（<strong>就近原则</strong>）。如果没有则向上一级作用域中寻找，直到找到全局作用域；如果全局作用域中依然没有找到，则会报错ReferenceError。</p>
</blockquote>
<p>接下来，看这道刷题必刷，面试必考的闭包题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var data &#x3D; [];</span><br><span class="line"></span><br><span class="line">for (var i &#x3D; 0; i &lt; 3; i++) &#123;</span><br><span class="line">  data[i] &#x3D; function () &#123;</span><br><span class="line">    console.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data[0]();</span><br><span class="line">data[1]();</span><br><span class="line">data[2]();</span><br></pre></td></tr></table></figure>
<p><strong>答案是都是 3，让我们分析一下原因</strong>：</p>
<p>当执行到 data[0] 函数之前，此时全局上下文的 VO 为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">globalContext &#x3D; &#123;</span><br><span class="line">    VO: &#123;</span><br><span class="line">        data: [...],</span><br><span class="line">        i: 3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当执行 data[0] 函数的时候，data[0] 函数的作用域链为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data[0]Context &#x3D; &#123;</span><br><span class="line">    Scope: [AO, globalContext.VO]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>data[0]Context</code> 的<code>AO</code>并没有 <code>i</code> 值，所以会从 <code>globalContext.VO</code> 中查找，<code>i</code>为 <code>3</code>，所以打印的结果就是<code>3</code>。</p>
<p><code>data[1] 和 data[2]</code> 是一样的道理。</p>
<p>改成闭包：</p>
<figure class="highlight plain"><figcaption><span>data </span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">for (var i &#x3D; 0; i &lt; 3; i++) &#123;</span><br><span class="line">  data[i] &#x3D; (function (i) &#123;</span><br><span class="line">        return function()&#123;</span><br><span class="line">            console.log(i);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data[0]();</span><br><span class="line">data[1]();</span><br><span class="line">data[2]();</span><br></pre></td></tr></table></figure>
<p>答案是都是 3，让我们分析一下原因：</p>
<p>当执行到 data[0] 函数之前，此时全局上下文的 VO 为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">globalContext &#x3D; &#123;</span><br><span class="line">    VO: &#123;</span><br><span class="line">        data: [...],</span><br><span class="line">        i: 3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟没改之前一模一样。</p>
<p>当执行 <code>data[0]</code> 函数的时候，<code>data[0]</code> 函数的作用域链发生了改变：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data[0]Context &#x3D; &#123;</span><br><span class="line">    Scope: [AO, 匿名函数Context.AO globalContext.VO]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>匿名函数执行上下文的AO为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">匿名函数Context &#x3D; &#123;</span><br><span class="line">    AO: &#123;</span><br><span class="line">        arguments: &#123;</span><br><span class="line">            0: 0,</span><br><span class="line">            length: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        i: 0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>data[0]Context</code> 的 AO 并没有 i 值，所以会沿着作用域链从匿名函数 <code>Context.AO</code>中查找，这时候就会找 i 为 0，找到了就不会往 globalContext.VO 中查找了，即使 globalContext.VO 也有 i 的值(值为3)，所以打印的结果就是0。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS常见边框举例</title>
    <url>/2020/04/18/15-CSS3%E7%9A%84%E5%B8%B8%E8%A7%81%E8%BE%B9%E6%A1%86%E4%B8%BE%E4%BE%8B/</url>
    <content><![CDATA[<hr>
<h2 id="CSS3-常见边框汇总"><a href="#CSS3-常见边框汇总" class="headerlink" title="CSS3 常见边框汇总"></a>CSS3 常见边框汇总</h2><a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS3 边框<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body, ul, li, dl, dt, dd, h1, h2, h3, h4, h5 &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        body &#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#F7F7F7</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line">            width: 1000px;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            padding: 20px;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        header &#123;</span><br><span class="line">            padding: 20px 0;</span><br><span class="line">            margin-bottom: 20px;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        header h3 &#123;</span><br><span class="line">            line-height: 1;</span><br><span class="line">            font-weight: normal;</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*overflow: hidden;*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.main</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">            content: '';</span><br><span class="line">            clear: both;</span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line">            width: 210px;</span><br><span class="line">            height: 210px;</span><br><span class="line">            margin: 0 30px 30px 0;</span><br><span class="line">            display: flex;</span><br><span class="line">            position: relative;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#FFF</span>;</span></span><br><span class="line">            float: left;</span><br><span class="line"><span class="css">            <span class="selector-tag">box-shadow</span>: 2<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> <span class="selector-id">#CCC</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> <span class="selector-class">.item</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">            content: attr(data-brief);</span><br><span class="line">            display: block;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 210px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#FFF</span>;</span></span><br><span class="line">            font-family: '微软雅黑';</span><br><span class="line">            font-size: 18px;</span><br><span class="line">            background-color: rgba(170, 170, 170, 0);</span><br><span class="line">            z-index: -1;</span><br><span class="line"><span class="css">            <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 0<span class="selector-class">.3s</span> <span class="selector-tag">ease-in</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> <span class="selector-class">.item</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-tag">rgba</span>(170, 170, 170, 0<span class="selector-class">.6</span>);</span></span><br><span class="line">            z-index: 100;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(4n)</span> &#123;</span></span><br><span class="line">            margin-right: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /*.main .item:nth-last-child(-n+5) &#123;</span><br><span class="line">            margin-bottom: 0;</span><br><span class="line">        &#125;*/</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 以上是骨架样式 */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* 1、2、3、4 顺时针 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 180px;</span><br><span class="line">            margin: auto;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line"><span class="css">            <span class="comment">/*border-radius: 50% 30% 20%;*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.square</span> &#123;</span></span><br><span class="line">            border-radius: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*拱形*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(1)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            border-radius: 90px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*拱形*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(2)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            border-radius: 90px 90px 0 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*半圆*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(3)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            height: 90px;</span><br><span class="line">            border-radius: 90px 90px 0 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*左上角*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(4)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*height: 90px;*/</span></span></span><br><span class="line">            border-radius: 90px 0 0 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*四分之一圆*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(5)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            width: 90px;</span><br><span class="line">            height: 90px;</span><br><span class="line">            border-radius: 90px 0 0 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*横着的椭圆*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(6)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            height: 90px;</span><br><span class="line"><span class="css">            <span class="comment">/*border-radius: 50%;*/</span></span></span><br><span class="line">            border-radius: 90px 90px 90px 90px / 45px 45px 45px 45px;</span><br><span class="line"><span class="css">            <span class="comment">/*border-radius: 45px / 90px;*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*竖着的椭圆*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(7)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            width: 90px;</span><br><span class="line">            border-radius: 45px 45px 45px 45px / 90px 90px 90px 90px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*半个横着的椭圆*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(8)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            height: 45px;</span><br><span class="line">            border-radius: 90px 90px 0 0 / 45px 45px 0 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*半个竖着的椭圆*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(9)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            width: 45px;</span><br><span class="line">            border-radius: 45px 0 0 45px / 90px 0 0 90px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*四分之一竖着的椭圆*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(10)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            width: 45px;</span><br><span class="line">            height: 90px;</span><br><span class="line">            border-radius: 45px 0 0 0 / 90px 0 0 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*饼环*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(11)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            border: 70px solid red;</span><br><span class="line">            border-radius: 90px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*圆饼*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(12)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            border: 70px solid red;</span><br><span class="line">            border-radius: 60px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*左上角圆饼*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(13)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            width: 60px;</span><br><span class="line">            height: 60px;</span><br><span class="line">            border: 60px solid red;</span><br><span class="line">            border-radius: 90px 0 0 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*对角圆饼*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(14)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            width: 60px;</span><br><span class="line">            height: 60px;</span><br><span class="line">            border: 60px solid red;</span><br><span class="line">            border-radius: 90px 0 90px 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*四边不同色*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(15)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            width: 0px;</span><br><span class="line">            height: 0px;</span><br><span class="line">            border-width: 90px;</span><br><span class="line">            border-style: solid;</span><br><span class="line">            border-color: red green yellow blue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*右透明色*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(16)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            width: 0px;</span><br><span class="line">            height: 0px;</span><br><span class="line">            border-width: 90px;</span><br><span class="line">            border-style: solid;</span><br><span class="line">            border-color: red green yellow blue;</span><br><span class="line">            border-right-color: transparent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*圆右透明色*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(17)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            width: 0px;</span><br><span class="line">            height: 0px;</span><br><span class="line">            border-width: 90px;</span><br><span class="line">            border-style: solid;</span><br><span class="line">            border-color: red;</span><br><span class="line">            border-right-color: transparent;</span><br><span class="line">            border-radius: 90px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*圆右红透明色*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(18)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            width: 0px;</span><br><span class="line">            height: 0px;</span><br><span class="line">            border-width: 90px;</span><br><span class="line">            border-style: solid;</span><br><span class="line">            border-color: transparent;</span><br><span class="line">            border-right-color: red;</span><br><span class="line">            border-radius: 90px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*阴阳图前世*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(19)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 0px;</span><br><span class="line">            border-top-width: 90px;</span><br><span class="line">            border-bottom-width: 90px;</span><br><span class="line">            border-style: solid;</span><br><span class="line">            border-top-color: red;</span><br><span class="line">            border-bottom-color: green;</span><br><span class="line"><span class="css">            <span class="comment">/*border-right-color: red;*/</span></span></span><br><span class="line">            border-radius: 90px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*阴阳图前世2*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(20)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 90px;</span><br><span class="line">            border-bottom-width: 90px;</span><br><span class="line">            border-style: solid;</span><br><span class="line">            border-bottom-color: green;</span><br><span class="line">            background-color: red;</span><br><span class="line"><span class="css">            <span class="comment">/*border-right-color: red;*/</span></span></span><br><span class="line">            border-radius: 90px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*阴阳图今生*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(21)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 90px;</span><br><span class="line">            border-bottom-width: 90px;</span><br><span class="line">            border-style: solid;</span><br><span class="line">            border-bottom-color: green;</span><br><span class="line">            background-color: red;</span><br><span class="line">            border-radius: 90px;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(21)</span> <span class="selector-class">.border-radius</span><span class="selector-pseudo">::after</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(21)</span> <span class="selector-class">.border-radius</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">            content: '';</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 50%;</span><br><span class="line">            width: 20px;</span><br><span class="line">            height: 20px;</span><br><span class="line"><span class="css">            <span class="comment">/*margin: -10px 0 0 0;*/</span></span></span><br><span class="line">            border-width: 35px;</span><br><span class="line">            border-style: solid;</span><br><span class="line">            border-radius: 45px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*左阴阳*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(21)</span> <span class="selector-class">.border-radius</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">            background-color: red;</span><br><span class="line">            border-color: green;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*右阴阳*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(21)</span> <span class="selector-class">.border-radius</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">            background-color: green;</span><br><span class="line">            border-color: red;</span><br><span class="line">            right: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*右阴阳*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(22)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 90px;</span><br><span class="line">            border-bottom-width: 90px;</span><br><span class="line">            border-bottom-color: green;</span><br><span class="line">            border-bottom-style: solid;</span><br><span class="line">            background-color: red;</span><br><span class="line">            border-radius: 90px;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(22)</span> <span class="selector-class">.border-radius</span><span class="selector-pseudo">::after</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(22)</span> <span class="selector-class">.border-radius</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">            content: '';</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 50%;</span><br><span class="line">            width: 20px;</span><br><span class="line">            height: 20px;</span><br><span class="line">            border-width: 35px;</span><br><span class="line">            border-style: solid;</span><br><span class="line">            border-radius: 45px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(22)</span> <span class="selector-class">.border-radius</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">            border-color: green;</span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(22)</span> <span class="selector-class">.border-radius</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">            right: 0;</span><br><span class="line">            border-color: red;</span><br><span class="line">            background-color: green;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*消息框*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(23)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            width: 160px;</span><br><span class="line">            height: 80px;</span><br><span class="line">            background-color: red;</span><br><span class="line">            border-radius: 6px;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(23)</span> <span class="selector-class">.border-radius</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">            content: '';</span><br><span class="line">            width: 0;</span><br><span class="line">            height: 0;</span><br><span class="line">            border-width: 10px;</span><br><span class="line">            border-style: solid;</span><br><span class="line">            border-color: transparent;</span><br><span class="line">            border-right-color: red;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 16px;</span><br><span class="line">            left: -20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*奇怪的图形*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(24)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            border-width: 45px 0 45px 70px;</span><br><span class="line">            border-style: solid;</span><br><span class="line">            border-radius: 0 0 60px 0;</span><br><span class="line">            border-color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*奇怪的图形2*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(25)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            border-width: 45px 20px 45px 70px;</span><br><span class="line">            border-style: solid;</span><br><span class="line">            border-radius: 60px;</span><br><span class="line">            border-color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*QQ对话*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(26)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            width: 160px;</span><br><span class="line">            height: 80px;</span><br><span class="line">            background-color: red;</span><br><span class="line">            border-radius: 6px;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(26)</span> <span class="selector-class">.border-radius</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">            content: '';</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            right: -20px;</span><br><span class="line">            width: 30px;</span><br><span class="line">            height: 30px;</span><br><span class="line">            border-width: 0 0 30px 30px;</span><br><span class="line">            border-style: solid;</span><br><span class="line">            border-bottom-color: red;</span><br><span class="line">            border-left-color: transparent;</span><br><span class="line">            border-radius: 0 0 60px 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*圆角的百分比设置 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(27)</span> <span class="selector-class">.border-radius</span> &#123;</span></span><br><span class="line">            width: 180px;</span><br><span class="line"><span class="css">            <span class="comment">/*height: 180px;*/</span></span></span><br><span class="line">            height: 90px;</span><br><span class="line">            border-radius: 50%;</span><br><span class="line">            border-radius: 90px/45px;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="comment">/*百分比是按横竖两个对应的方向的长度进行计算*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>CSS3 边框圆角<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"整圆"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"拱形"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"半圆"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"左上角"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"四分之一圆"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"横着的椭圆"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"竖着的椭圆"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"半个横着的椭圆"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"半个竖着的椭圆"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"四分之一竖着的椭圆"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"饼环"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"圆饼"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"左上角圆饼"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"对角圆饼"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"四边不同色"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"右透明色"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"圆右透明色"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"圆右红透明色"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"阴阳图前世"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"阴阳图前世2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"阴阳图今生"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"阴阳图今生2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"消息框"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"奇怪的图形"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"奇怪的图形2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"QQ对话"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-brief</span>=<span class="string">"圆角百分比"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-radius"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>效果如下：</p>
<p><img src="CSS%E8%BE%B9%E6%A1%861.png" alt=""><br><img src="CSS%E8%BE%B9%E6%A1%862.png" alt=""><br><img src="CSS%E8%BE%B9%E6%A1%863.png" alt=""><br><img src="CSS%E8%BE%B9%E6%A1%864.png" alt=""></p>
<h2 id="爱心"><a href="#爱心" class="headerlink" title="爱心"></a>爱心</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.heart</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 300px;</span><br><span class="line"><span class="css">            <span class="comment">/*border: 1px solid #000;*/</span></span></span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.heart</span><span class="selector-pseudo">::before</span>, <span class="selector-class">.heart</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">            content: "左一半";</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">            position: absolute;</span><br><span class="line">            background-color: red;</span><br><span class="line">            left: 0;</span><br><span class="line">            top: 0;</span><br><span class="line"></span><br><span class="line">            border-radius: 100px 100px 0 0;</span><br><span class="line">            transform: rotate(-45deg);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 100px;</span><br><span class="line">            color: yellow;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            font-family: "MIcrosoft Yahei";</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.heart</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">            content: "右一半";</span><br><span class="line">            left: 71px;</span><br><span class="line">            transform: rotate(45deg);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"heart"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>效果如下：</p>
<p><img src="heart.png" alt=""></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Proxy</title>
    <url>/2020/04/18/15-Proxy/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要内容：</p>
<ul>
<li>概述</li>
<li>this 问题<a id="more"></a>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2></li>
</ul>
<p><strong><code>Proxy</code> 用于修改某些操作的默认行为</strong>，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。</p>
<p><strong><code>Proxy</code> 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。</strong><code>Proxy</code> 这个词的原意是<strong>代理</strong>，用在这里表示由它来“代理”某些操作，可以译为“代理器”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var obj &#x3D; new Proxy(&#123;&#125;, &#123;</span><br><span class="line">  get: function (target, propKey, receiver) &#123;</span><br><span class="line">    console.log(&#96;getting $&#123;propKey&#125;!&#96;);</span><br><span class="line">    return Reflect.get(target, propKey, receiver);</span><br><span class="line">  &#125;,</span><br><span class="line">  set: function (target, propKey, value, receiver) &#123;</span><br><span class="line">    console.log(&#96;setting $&#123;propKey&#125;!&#96;);</span><br><span class="line">    return Reflect.set(target, propKey, value, receiver);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码对一个空对象架设了一层拦截，重定义了属性的读取（get）和设置（set）行为。这里暂时先不解释具体的语法，只看运行结果。对设置了拦截行为的对象obj，去读写它的属性，就会得到下面的结果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">obj.count &#x3D; 1</span><br><span class="line">&#x2F;&#x2F;  setting count!</span><br><span class="line">++obj.count</span><br><span class="line">&#x2F;&#x2F;  getting count!</span><br><span class="line">&#x2F;&#x2F;  setting count!</span><br><span class="line">&#x2F;&#x2F;  2</span><br></pre></td></tr></table></figure>

<p>上面代码说明，<code>Proxy</code> 实际上重载（overload）了点运算符，即用自己的定义覆盖了语言的原始定义。</p>
<ul>
<li>ES6 原生提供 Proxy 构造函数，用来生成 Proxy 实例。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var proxy &#x3D; new Proxy(target, handler);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>Proxy 对象的所有用法，都是上面这种形式，不同的只是handler参数的写法。其中，<strong><code>new Proxy()</code>表示生成一个Proxy实例，target参数表示所要拦截的目标对象，handler参数也是一个对象，用来定制拦截行为</strong>。</p>
<p>下面是另一个拦截读取属性行为的例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var proxy &#x3D; new Proxy(&#123;&#125;, &#123;</span><br><span class="line">  get: function(target, propKey) &#123;</span><br><span class="line">    return 35;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.time &#x2F;&#x2F; 35</span><br><span class="line">proxy.name &#x2F;&#x2F; 35</span><br><span class="line">proxy.title &#x2F;&#x2F; 35</span><br></pre></td></tr></table></figure>

<p>上面代码中，作为构造函数，Proxy接受两个参数。第一个参数是所要代理的目标对象（上例是一个空对象），即如果没有Proxy的介入，操作原来要访问的就是这个对象；<strong>第二个参数是一个配置对象，对于每一个被代理的操作，需要提供一个对应的处理函数，该函数将拦截对应的操作</strong>。比如，上面代码中，配置对象有一个get方法，用来拦截对目标对象属性的访问请求。get方法的两个参数分别是目标对象和所要访问的属性。可以看到，由于拦截函数总是返回35，所以访问任何属性都得到35。</p>
<blockquote>
<p>注意，要使得Proxy起作用，必须针对Proxy实例（上例是proxy对象）进行操作，而不是针对目标对象（上例是空对象）进行操作。</p>
</blockquote>
<blockquote>
<p>如果handler没有设置任何拦截，那就等同于直接通向原对象。</p>
</blockquote>
<blockquote>
<p><strong>一个技巧是将 Proxy 对象，设置到object.proxy属性，从而可以在object对象上调用</strong>。</p>
</blockquote>
<p><code>var object = { proxy: new Proxy(target, handler) };</code></p>
<ul>
<li>Proxy 实例也可以作为其他对象的原型对象。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var proxy &#x3D; new Proxy(&#123;&#125;, &#123;</span><br><span class="line">  get: function(target, propKey) &#123;</span><br><span class="line">    return 35;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">let obj &#x3D; Object.create(proxy);</span><br><span class="line">obj.time &#x2F;&#x2F; 35</span><br></pre></td></tr></table></figure>

<p>上面代码中，proxy对象是obj对象的原型，obj对象本身并没有time属性，所以根据原型链，会在proxy对象上读取该属性，导致被拦截。</p>
<p>下面是 Proxy 支持的拦截操作一览，一共 13 种。</p>
<ul>
<li><code>get(target, propKey, receiver)</code>：拦截对象属性的读取，比如proxy.foo和proxy[‘foo’]。</li>
<li><code>set(target, propKey, value, receiver)</code>：拦截对象属性的设置，比如proxy.foo = v或proxy[‘foo’] = v，返回一个布尔值。</li>
<li><code>has(target, propKey)</code>：拦截propKey in proxy的操作，返回一个布尔值。</li>
<li><code>deleteProperty(target, propKey)</code>：拦截delete proxy[propKey]的操作，返回一个布尔值。</li>
<li><code>ownKeys(target)</code>：拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for…in循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而Object.keys()的返回结果仅包括目标对象自身的可遍历属性。</li>
<li><code>getOwnPropertyDescriptor(target, propKey)</code>：拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象。</li>
<li><code>defineProperty(target, propKey, propDesc)</code>：拦截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一个布尔值。</li>
<li><code>preventExtensions(target)</code>：拦截Object.preventExtensions(proxy)，返回一个布尔值。</li>
<li><code>getPrototypeOf(target)</code>：拦截Object.getPrototypeOf(proxy)，返回一个对象。</li>
<li><code>isExtensible(target)</code>：拦截Object.isExtensible(proxy)，返回一个布尔值。</li>
<li><code>setPrototypeOf(target, proto)</code>：拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。</li>
<li><code>apply(target, object, args)</code>：拦截 Proxy 实例作为函数调用的操作，比如proxy(…args)、proxy.call(object, …args)、proxy.apply(…)。</li>
<li><code>construct(target, args)</code>：拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(…args)。</li>
</ul>
<h2 id="this-问题"><a href="#this-问题" class="headerlink" title="this 问题"></a>this 问题</h2><p>虽然 <code>Proxy</code>可以代理针对目标对象的访问，但它不是目标对象的透明代理，即不做任何拦截的情况下，也无法保证与目标对象的行为一致。<strong>主要原因就是在 Proxy 代理的情况下，目标对象内部的this关键字会指向 Proxy 代理。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const target &#x3D; &#123;</span><br><span class="line">  m: function () &#123;</span><br><span class="line">    console.log(this &#x3D;&#x3D;&#x3D; proxy);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const handler &#x3D; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">const proxy &#x3D; new Proxy(target, handler);</span><br><span class="line"></span><br><span class="line">target.m() &#x2F;&#x2F; false</span><br><span class="line">proxy.m()  &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>上面代码中，<strong>一旦proxy代理target.m，后者内部的this就是指向proxy，而不是target</strong>。</p>
<ul>
<li>此外，有些原生对象的内部属性，只有通过正确的this才能拿到，所以 Proxy 也无法代理这些原生对象的属性。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const target &#x3D; new Date();</span><br><span class="line">const handler &#x3D; &#123;&#125;;</span><br><span class="line">const proxy &#x3D; new Proxy(target, handler);</span><br><span class="line"></span><br><span class="line">proxy.getDate();</span><br><span class="line">&#x2F;&#x2F; TypeError: this is not a Date object.</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>上面代码中，getDate方法只能在Date对象实例上面拿到，如果this不是Date对象实例就会报错。这时，this绑定原始对象，就可以解决这个问题。</p>
]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>对象的创建&amp;构造函数</title>
    <url>/2020/04/18/15-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA&amp;%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<hr>
<h2 id="创建自定义对象的几种方法"><a href="#创建自定义对象的几种方法" class="headerlink" title="创建自定义对象的几种方法"></a>创建自定义对象的几种方法</h2><h3 id="方式一：对象字面量"><a href="#方式一：对象字面量" class="headerlink" title="方式一：对象字面量"></a>方式一：对象字面量</h3><p><strong>对象的字面量</strong>就是一个{}。里面的属性和方法均是<strong>键值对</strong>：</p>
<ul>
<li><p>键：相当于属性名。</p>
</li>
<li><p>值：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）。</p>
<a id="more"></a>
<p>例如：</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">            name: <span class="string">"hello"</span>,</span><br><span class="line">            age: <span class="number">26</span>,</span><br><span class="line">            isBoy: <span class="literal">true</span>,</span><br><span class="line">            sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br></pre></td></tr></table></figure>


<h3 id="方式二：工厂模式"><a href="#方式二：工厂模式" class="headerlink" title="方式二：工厂模式"></a>方式二：工厂模式</h3><p>通过该方法可以大批量的创建对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 使用工厂方法创建对象</span></span><br><span class="line"><span class="comment">    *  通过该方法可以大批量的创建对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, gender</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个新的对象</span></span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    <span class="comment">//向对象中添加属性</span></span><br><span class="line">    obj.name = name;</span><br><span class="line">    obj.age = age;</span><br><span class="line">    obj.gender = gender;</span><br><span class="line">    obj.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//将新的对象返回</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = createPerson(<span class="string">"猪八戒"</span>, <span class="number">28</span>, <span class="string">"男"</span>);</span><br><span class="line"><span class="keyword">var</span> obj3 = createPerson(<span class="string">"白骨精"</span>, <span class="number">16</span>, <span class="string">"女"</span>);</span><br><span class="line"><span class="keyword">var</span> obj4 = createPerson(<span class="string">"蜘蛛精"</span>, <span class="number">18</span>, <span class="string">"女"</span>);</span><br></pre></td></tr></table></figure>

<p>第一次看到这种工厂模式时，你可能会觉得陌生。如果简化一下，可以写成下面这种形式，更容易理解：（也就是，利用new Object创建对象）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Obect();</span><br><span class="line">obj.name = <span class="string">'猪八戒'</span>;</span><br><span class="line">obj.age = <span class="number">28</span>;</span><br><span class="line">obj.gender = <span class="string">'男'</span>;</span><br><span class="line">obj.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<p><strong>弊端：</strong></p>
<p>使用工厂方法创建的对象，使用的构造函数都是Object。<strong>所以创建的对象都是Object这个类型，就导致我们无法区分出多种不同类型的对象</strong>。</p>
<h3 id="方式三：利用构造函数"><a href="#方式三：利用构造函数" class="headerlink" title="方式三：利用构造函数"></a>方式三：利用构造函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用构造函数自定义对象</span></span><br><span class="line"><span class="keyword">var</span> stu1 = <span class="keyword">new</span> Student(<span class="string">"smyh"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(stu1);</span><br><span class="line">stu1.sayHi();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu2 = <span class="keyword">new</span> Student(<span class="string">"vae"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(stu2);</span><br><span class="line">stu2.sayHi();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;    <span class="comment">//this指的是当前对象实例【重要】</span></span><br><span class="line">    <span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"厉害了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>接下来，我们专门来讲一下构造函数。</p>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><h3 id="代码引入"><a href="#代码引入" class="headerlink" title="代码引入"></a>代码引入</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个构造函数，专门用来创建Person对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, gender</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.gender = gender;</span><br><span class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person(<span class="string">"孙悟空"</span>, <span class="number">18</span>, <span class="string">"男"</span>);</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person(<span class="string">"玉兔精"</span>, <span class="number">16</span>, <span class="string">"女"</span>);</span><br><span class="line"><span class="keyword">var</span> per3 = <span class="keyword">new</span> Person(<span class="string">"奔波霸"</span>, <span class="number">38</span>, <span class="string">"男"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个构造函数，专门用来创建 Dog 对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog();</span><br></pre></td></tr></table></figure>

<h3 id="构造函数的概念"><a href="#构造函数的概念" class="headerlink" title="构造函数的概念"></a>构造函数的概念</h3><p><strong>构造函数</strong>：是一种特殊的函数，主要用来创建和初始化对象，也就是为对象的成员变量赋初始值。它与 <code>new</code> 一起使用才有意义。</p>
<p>我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个构造函数里面。</p>
<h3 id="构造函数和普通函数的区别"><a href="#构造函数和普通函数的区别" class="headerlink" title="构造函数和普通函数的区别"></a>构造函数和普通函数的区别</h3><p>构造函数的创建方式和普通函数没有区别，不同的是<strong>构造函数习惯上首字母大写</strong>。</p>
<p>构造函数和普通函数的区别就是<strong>调用方式</strong>的不同：普通函数是直接调用，而构造函数需要使用new关键字来调用。</p>
<p><strong>this的指向也有所不同</strong>：</p>
<ul>
<li><p>1.以函数的形式调用时，this永远都是window。比如<code>fun();</code>相当于<code>window.fun();</code></p>
</li>
<li><p>2.以方法的形式调用时，this是调用方法的那个对象</p>
</li>
<li><p>3.以构造函数的形式调用时，this是新创建的实例对象</p>
</li>
</ul>
<h3 id="new-一个构造函数的执行流程"><a href="#new-一个构造函数的执行流程" class="headerlink" title="new 一个构造函数的执行流程"></a>new 一个构造函数的执行流程</h3><p><font style="color: red; font-weight: bold">new 在执行时，会做下面这四件事：</font></p>
<p>（1）开辟内存空间，在内存中创建一个新的空对象。</p>
<p>（2）将这个空对象的原型，指向构造函数的prototype属性。</p>
<p>（3）让 this 指向这个新的对象。</p>
<p>（4）执行构造函数里面的代码，给这个新对象添加属性和方法。</p>
<p>（5）返回这个新对象（所以构造函数里面不需要return）。</p>
<p>因为this指的是new一个Object之后的对象实例。于是，下面这段代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStudent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> student = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    student.name = name;      <span class="comment">//第一个name指的是student对象定义的变量。第二个name指的是createStudent函数的参数。二者不一样</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以改进为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;       <span class="comment">//this指的是构造函数中的对象实例,即Student</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="类、实例"><a href="#类、实例" class="headerlink" title="类、实例"></a>类、实例</h3><p>使用同一个构造函数创建的对象，我们称为一类对象，也将一个构造函数称为一个<strong>类</strong>。</p>
<p>通过一个构造函数创建的对象，称为该类的<strong>实例</strong>。</p>
<h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p>使用 instanceof 可以检查<strong>一个对象是否为一个类的实例</strong>。</p>
<p><strong>语法如下</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">对象 <span class="keyword">instanceof</span> 构造函数</span><br></pre></td></tr></table></figure>

<p>如果是，则返回true；否则返回false。</p>
<p><strong>代码举例</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog1 = <span class="keyword">new</span> Dog();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> Person); <span class="comment">// 打印结果： true</span></span><br><span class="line"><span class="built_in">console</span>.log(dog1 <span class="keyword">instanceof</span> Person); <span class="comment">// 打印结果：false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dog1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// 所有的对象都是Object的后代。因此，打印结果为：true</span></span><br></pre></td></tr></table></figure>

<p>根据上方代码中的最后一行，需要补充一点：<strong>所有的对象都是Object的后代，因此 <code>任何对象 instanceof Object</code> 的返回结果都是true</strong>。</p>
<h2 id="others"><a href="#others" class="headerlink" title="others"></a>others</h2><h3 id="json的介绍"><a href="#json的介绍" class="headerlink" title="json的介绍"></a>json的介绍</h3><blockquote>
<p>对象字面量和json比较像，这里我们对json做一个简单介绍。</p>
</blockquote>
<p>JSON：JavaScript Object Notation（JavaScript对象表示形式）。</p>
<p>JSON和对象字面量的区别：JSON的属性必须用双引号引号引起来，对象字面量可以省略。</p>
<p>json举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      &quot;name&quot; : &quot;zs&quot;,</span><br><span class="line">      &quot;age&quot; : 18,</span><br><span class="line">      &quot;sex&quot; : true,</span><br><span class="line">      &quot;sayHi&quot; : function() &#123;</span><br><span class="line">          console.log(this.name);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

<p>注：json里一般放常量、数组、对象等，但很少放function。</p>
<p>另外，对象和json没有长度，json.length的打印结果是undefined。于是乎，自然也就不能用for循环遍历（因为遍历时需要获取长度length）。</p>
<p><strong>json遍历的方法：</strong></p>
<p>json 采用 <code>for...in...</code>进行遍历，和数组的遍历方式不同。如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> myJson = &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="string">"name"</span>: <span class="string">"smyhvae"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"aaa"</span>: <span class="number">111</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"bbb"</span>: <span class="number">222</span></span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//json遍历的方法：for...in...</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> myJson) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(key);   <span class="comment">//获取 键</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(myJson[key]); <span class="comment">//获取 值（第二种属性绑定和获取值的方法）</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"------"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Reflect</title>
    <url>/2020/04/18/16-Reflect/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要内容：</p>
<ul>
<li>概述</li>
<li>静态方法<a id="more"></a>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2></li>
</ul>
<p><code>Reflect</code>对象与<code>Proxy</code>对象一样，也是 ES6 为了<strong>操作对象</strong>而提供的新 API。Reflect对象的设计目的有这样几个。</p>
<p>（1） 将Object对象的一些明显属于语言内部的方法（比如<code>Object.defineProperty</code>），放到Reflect对象上。现阶段，某些方法同时在Object和Reflect对象上部署，未来的新方法将只部署在Reflect对象上。也就是说，从Reflect对象上可以拿到语言内部的方法。</p>
<p>（2） 修改某些Object方法的返回结果，让其变得更合理。比如，<code>Object.defineProperty(obj, name, desc)</code>在无法定义属性时，会抛出一个错误，而<code>Reflect.defineProperty(obj, name, desc)</code>则会返回false。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 老写法</span><br><span class="line">try &#123;</span><br><span class="line">  Object.defineProperty(target, property, attributes);</span><br><span class="line">  &#x2F;&#x2F; success</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">  &#x2F;&#x2F; failure</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 新写法</span><br><span class="line">if (Reflect.defineProperty(target, property, attributes)) &#123;</span><br><span class="line">  &#x2F;&#x2F; success</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  &#x2F;&#x2F; failure</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3） 让Object操作都变成函数行为。某些Object操作是命令式，比如<code>name in obj</code>和<code>delete obj[name]</code>，而<code>Reflect.has(obj, name)</code>和<code>Reflect.deleteProperty(obj, name)</code>让它们变成了函数行为。</p>
<p>（4）Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。这就让Proxy对象可以方便地调用对应的Reflect方法，完成默认行为，作为修改行为的基础。也就是说，<strong>不管Proxy怎么修改默认行为，你总可以在Reflect上获取默认行为</strong>。</p>
<h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>Reflect对象一共有 13 个静态方法。</p>
<ul>
<li><code>Reflect.apply(target, thisArg, args)</code></li>
<li><code>Reflect.construct(target, args)</code></li>
<li><code>Reflect.get(target, name, receiver)</code></li>
<li><code>Reflect.set(target, name, value, receiver)</code></li>
<li><code>Reflect.defineProperty(target, name, desc)</code></li>
<li><code>Reflect.deleteProperty(target, name)</code></li>
<li><code>Reflect.has(target, name)</code></li>
<li><code>Reflect.ownKeys(target)</code></li>
<li><code>Reflect.isExtensible(target)</code></li>
<li><code>Reflect.preventExtensions(target)</code></li>
<li><code>Reflect.getOwnPropertyDescriptor(target, name)</code></li>
<li><code>Reflect.getPrototypeOf(target)</code></li>
<li><code>Reflect.setPrototypeOf(target, prototype)</code></li>
</ul>
<p>上面这些方法的作用，大部分与Object对象的同名方法的作用都是相同的，而且它与Proxy对象的方法是一一对应的。下面是对它们的解释。</p>
]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>原型对象</title>
    <url>/2020/04/18/16-%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<hr>
<h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><h3 id="原型的引入"><a href="#原型的引入" class="headerlink" title="原型的引入"></a>原型的引入</h3><a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, gender</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    <span class="comment">//向对象中添加一个方法</span></span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我是"</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个Person的实例</span></span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person(<span class="string">"孙悟空"</span>, <span class="number">18</span>, <span class="string">"男"</span>);</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person(<span class="string">"猪八戒"</span>, <span class="number">28</span>, <span class="string">"男"</span>);</span><br><span class="line">per.sayName();</span><br><span class="line">per2.sayName();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(per.sayName == per2.sayName);  <span class="comment">//打印结果为false</span></span><br></pre></td></tr></table></figure>

<p><strong>分析如下</strong>：</p>
<p>上方代码中，我们的sayName方法是写在构造函数 Person 内部的，然后在两个实例中进行了调用。造成的结果是，<strong>构造函数每执行一次，就会给每个实例创建一个新的 sayName 方法</strong>。也就是说，每个实例的sayName都是唯一的。因此，最后一行代码的打印结果为false。</p>
<p>按照上面这种写法，假设创建10000个对象实例，就会创建10000个 sayName 方法。这种写法肯定是不合适的。我们为何不让所有的对象共享同一个方法呢？</p>
<p>还有一种方式是，将sayName方法在全局作用域中定义：（不建议。原因看注释）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, gender</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    <span class="comment">//向对象中添加一个方法</span></span><br><span class="line">    <span class="keyword">this</span>.sayName = fun;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将sayName方法在全局作用域中定义</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 将函数定义在全局作用域，污染了全局作用域的命名空间</span></span><br><span class="line"><span class="comment"> *  而且定义在全局作用域中也很不安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"Hello大家好，我是:"</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>比较好的方式是，在原型中添加sayName方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"Hello大家好，我是:"</span>+<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这也就引入了我们本文要讲的「原型」。</p>
<h3 id="prototype-属性：继承成员被定义的地方"><a href="#prototype-属性：继承成员被定义的地方" class="headerlink" title="prototype 属性：继承成员被定义的地方"></a>prototype 属性：继承成员被定义的地方</h3><p><strong>认识1</strong>：</p>
<p>我们所创建的每一个函数，解析器都会向函数中添加一个属性 <code>prototype</code>。这个属性对应着一个对象，这个对象就是我们所谓的原型对象。</p>
<p>如果函数作为普通函数调用<code>prototype</code>没有任何作用，当函数以构造函数的形式调用时，它所创建的实例对象中都会有一个隐含的属性，指向该构造函数的原型，我们可以通过<code>__proto__</code>来访问该属性。</p>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> per1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype); <span class="comment">// 打印结果：[object object]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(per1.__proto__ == Person.prototype); <span class="comment">// 打印结果：true</span></span><br></pre></td></tr></table></figure>

<p>上方代码的最后一行：打印结果表明，<code>实例.__proto__</code> 和 <code>构造函数.prototype</code>都指的是原型对象。</p>
<p><strong>认识2</strong>：</p>
<p>原型对象就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象，我们可以将对象中共有的内容，统一设置到原型对象中。</p>
<p>以后我们创建构造函数时，可以将这些对象共有的属性和方法，统一添加到构造函数的原型对象中，这样就不用分别为每一个对象添加，也不会影响到全局作用域，就可以使每个对象都具有这些属性和方法了。</p>
<p><strong>认识3</strong>：</p>
<p>使用 <code>in</code> 检查对象中是否含有某个属性时，如果对象中没有但是<strong>原型中</strong>有，也会返回true。</p>
<p>可以使用对象的<code>hasOwnProperty()</code>来检查<strong>对象自身中</strong>是否含有该属性。</p>
<h3 id="create"><a href="#create" class="headerlink" title="create"></a>create</h3><p><code>Object.create()</code>方法创建一个新对象，使用现有的对象来提供新创建的对象的<code>__proto__</code>。</p>
<p>在 JavaScript 控制台中输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var person2 &#x3D; Object.create(person1);</span><br></pre></td></tr></table></figure>
<p><code>create()</code>实际做的是从指定原型对象创建一个新的对象。这里以 <code>person1</code>为原型对象创建了 person2 对象。在控制台输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">person2.__proto__</span><br></pre></td></tr></table></figure>

<p>结果返回对象person1。</p>
<h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>每个实例对象都从原型中继承了一个<code>constructor</code>属性，<strong>该属性指向了用于构造此实例对象的构造函数</strong>。</p>
<p>例如，在控制台中尝试下面的指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">person1.constructor</span><br><span class="line">person2.constructor</span><br></pre></td></tr></table></figure>
<p>都将返回 <code>Person()</code> 构造器，因为该构造器包含这些实例的原始定义。</p>
<p>一个小技巧是，你可以在 <code>constructor</code> 属性的末尾添加一对圆括号（括号中包含所需的参数），从而用这个构造器创建另一个对象实例。毕竟构造器是一个函数，故可以通过圆括号调用；只需在前面添加 new 关键字，便能将此函数作为构造器使用。</p>
<p>在控制台中输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var person3 &#x3D; new person1.constructor(&#39;Karen&#39;, &#39;Stephenson&#39;, 26, &#39;female&#39;, [&#39;playing drums&#39;, &#39;mountain climbing&#39;]);</span><br></pre></td></tr></table></figure>
<p>现在尝试访问新建对象的属性，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">person3.name.first</span><br><span class="line">person3.age</span><br><span class="line">person3.bio()</span><br></pre></td></tr></table></figure>

<p>正常工作。通常你不会去用这种方法创建新的实例；但如果你刚好因为某些原因没有原始构造器的引用，那么这种方法就很有用了。</p>
<p>此外，<code>constructor</code>属性还有其他用途。比如，想要获得某个对象实例的构造器的名字，可以这么用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">instanceName.constructor.name</span><br></pre></td></tr></table></figure>
<p>具体地，像这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">person1.constructor.name</span><br></pre></td></tr></table></figure>






<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>原型对象也是对象，所以它也有原型，当我们使用或访问一个对象的属性或方法时：</p>
<ul>
<li><p>它会先在对象自身中寻找，如果有则直接使用；</p>
</li>
<li><p>如果没有则会去原型对象中寻找，如果找到则直接使用；</p>
</li>
<li><p>如果没有则去原型的原型中寻找，直到找到Object对象的原型。</p>
</li>
<li><p>Object对象的原型没有原型，如果在Object原型中依然没有找到，则返回 null</p>
</li>
</ul>
<h2 id="对象的-toString-方法"><a href="#对象的-toString-方法" class="headerlink" title="对象的 toString() 方法"></a>对象的 toString() 方法</h2><p>我们先来看下面这段代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, gender</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> per1 = <span class="keyword">new</span> Person(<span class="string">"vae"</span>, <span class="number">26</span>, <span class="string">"男"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"per1 = "</span> + per1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"per1 = "</span> + per1.toString());</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">per1 &#x3D; [object Object]</span><br><span class="line">per1 &#x3D; [object Object]</span><br></pre></td></tr></table></figure>

<p>上面的代码中，我们尝试打印实例 per1 的内部信息，但是发现，无论是打印 <code>per1</code> 还是打印 <code>per1.toString()</code>，结果都是<code>object</code>，这是为啥呢？分析如下：</p>
<ul>
<li><p>当我们直接在页面中打印一个对象时，其实是输出了对象的toString()方法的返回值。</p>
</li>
<li><p>如果我们希望在打印对象时，不输出[object Object]，可以手动为对象添加一个toString()方法。意思是，重写 toString() 方法。</p>
</li>
</ul>
<p>重写 toString() 方法，具体做法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, gender</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式一：重写 Person 原型的toString方法。针对 Person 的所有实例生效</span></span><br><span class="line">Person.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">	  <span class="string">"Person[name="</span> +</span><br><span class="line">	  <span class="keyword">this</span>.name +</span><br><span class="line">	  <span class="string">",age="</span> +</span><br><span class="line">	  <span class="keyword">this</span>.age +</span><br><span class="line">	  <span class="string">",gender="</span> +</span><br><span class="line">	  <span class="keyword">this</span>.gender +</span><br><span class="line">	  <span class="string">"]"</span></span><br><span class="line">	);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：仅重写实例 per1 的 toString方法。但是这种写法，只对 per1 生效， 对 per2 无效</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">per1.toString = function() &#123;</span></span><br><span class="line"><span class="comment">	return (</span></span><br><span class="line"><span class="comment">	  "Person[name=" +</span></span><br><span class="line"><span class="comment">	  this.name +</span></span><br><span class="line"><span class="comment">	  ",age=" +</span></span><br><span class="line"><span class="comment">	  this.age +</span></span><br><span class="line"><span class="comment">	  ",gender=" +</span></span><br><span class="line"><span class="comment">	  this.gender +</span></span><br><span class="line"><span class="comment">	  "]"</span></span><br><span class="line"><span class="comment">	);</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> per1 = <span class="keyword">new</span> Person(<span class="string">"smyh"</span>, <span class="number">26</span>, <span class="string">"男"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person(<span class="string">"vae"</span>, <span class="number">30</span>, <span class="string">"男"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"per1 = "</span> + per1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"per2 = "</span> + per2.toString());</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">per1 = Person[name=smyh,age=<span class="number">26</span>,gender=男]</span><br><span class="line">per2 = Person[name=vae,age=<span class="number">30</span>,gender=男]</span><br></pre></td></tr></table></figure>

<p>代码分析：</p>
<p>上面的代码中，仔细看注释。我们重写了 Person 原型的 toString()，这样的话，可以保证对 Person 的所有实例生效。</p>
<p>从这个例子，我们可以看出 <code>prototype</code> 的作用。</p>
<h2 id="JS的垃圾回收（GC）机制"><a href="#JS的垃圾回收（GC）机制" class="headerlink" title="JS的垃圾回收（GC）机制"></a>JS的垃圾回收（GC）机制</h2><p>程序运行过程中会产生垃圾，这些垃圾积攒过多以后，会导致程序运行的速度过慢。所以我们需要一个垃圾回收的机制，来处理程序运行过程中产生垃圾。</p>
<p>当一个对象没有任何的变量或属性对它进行引用时，此时我们将永远无法操作该对象，此时这种对象就是一个垃圾，这种对象过多会占用大量的内存空间，导致程序运行变慢，所以这种垃圾必须进行清理。</p>
<p>上面这句话，也可以这样理解：<strong>如果堆内存中的对象，没有任何变量指向它时，这个堆内存里的对象就会成为垃圾</strong>。</p>
<p><strong>JS拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁</strong>。我们不需要也不能进行垃圾回收的操作。我们仅仅需要做的是：如果你不再使用该对象，那么，将改对象的引用设置为 null 即可。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS中的非布局样式</title>
    <url>/2020/04/18/16-CSS%E4%B8%AD%E7%9A%84%E9%9D%9E%E5%B8%83%E5%B1%80%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<hr>
<h2 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h2><p>CSS中，有很多<strong>非布局样式</strong>，这些样式（属性）和与布局无关，包括：</p>
<ul>
<li>字体、字重、颜色、大小、行高</li>
<li>背景、边框</li>
<li>滚动、换行</li>
<li>装饰性属性（粗体、斜体、下划线）等。</li>
</ul>
<a id="more"></a>

<h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><h2 id="文字换行"><a href="#文字换行" class="headerlink" title="文字换行"></a>文字换行</h2><ul>
<li><p>overflow-wrap：通用的属性。用来说明当一个不能被分开的字符串（单词）太长而不能填充其包裹盒时，为防止其溢出，浏览器是否允许这样的单词<strong>中断换行</strong>。</p>
</li>
<li><p>word-break：指定了怎样在单词内断行。这里涉及到CJK（中文/日文/韩文）的文字换行。</p>
</li>
<li><p>white-space：空白处是否换行。</p>
</li>
</ul>
<p>上面这三个 css 属性进行组合，可以设置各种不同的属性。</p>
<p>当然，如果想让一段很长的文本不换行，可以直接设置<code>white-space: nowrap</code> 这一个属性即可。</p>
<h2 id="CSS-Hack"><a href="#CSS-Hack" class="headerlink" title="CSS Hack"></a>CSS Hack</h2><ul>
<li><p>CSS Hack 的方式：不合法但可以生效的写法。</p>
</li>
<li><p>可以用来解决一些浏览器的兼容性问题。</p>
</li>
<li><p>缺点：难理解、难维护、易失效（比如浏览器升级后，hack可能会失效）。</p>
</li>
<li><p>替代方案：特性检测。</p>
</li>
<li><p>替代方案：针对性加 class</p>
</li>
</ul>
<h2 id="CSS-效果"><a href="#CSS-效果" class="headerlink" title="CSS 效果"></a>CSS 效果</h2><p>我们可以利用 CSS 实现各种效果，常见的效果属性有：</p>
<ul>
<li><p>box-shadow：盒子的阴影</p>
</li>
<li><p>text-shadow：文本的阴影</p>
</li>
<li><p>border-radius</p>
</li>
<li><p>background</p>
</li>
<li><p>clip-path</p>
</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Iterator和for...of 循环</title>
    <url>/2020/04/18/18-Iterator%E5%92%8Cfor...of%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要内容：</p>
<ul>
<li>Iterator（遍历器）的概念</li>
<li>默认 Iterator 接口</li>
<li>调用 Iterator 接口的场合</li>
<li>字符串的 Iterator 接口</li>
<li>Iterator 接口与 Generator 函数</li>
<li>遍历器对象的 return()，throw()</li>
<li>for…of 循环<a id="more"></a>
<h2 id="Iterator（遍历器）的概念"><a href="#Iterator（遍历器）的概念" class="headerlink" title="Iterator（遍历器）的概念"></a>Iterator（遍历器）的概念</h2></li>
</ul>
<p>JavaScript 原有的表示“集合”的数据结构，主要是数组（Array）和对象（Object），ES6 又添加了Map和Set。这样就有了四种数据集合，用户还可以组合使用它们，定义自己的数据结构，比如数组的成员是Map，Map的成员是对象。这样就需要一种统一的接口机制，来处理所有不同的数据结构。</p>
<p>遍历器（Iterator）就是这样一种机制。<strong>它是一种接口，为各种不同的数据结构提供统一的访问机制</strong>。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。</p>
<p>Iterator 的作用有三个：一是为各种数据结构，提供一个统一的、简便的访问接口；二是使得数据结构的成员能够按某种次序排列；三是 ES6 创造了一种新的遍历命令for…of循环，Iterator 接口主要供for…of消费。</p>
<blockquote>
<p>Iterator 的遍历过程是这样的。</p>
</blockquote>
<blockquote>
<p>（1）创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。</p>
</blockquote>
<blockquote>
<p>（2）第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。</p>
</blockquote>
<blockquote>
<p>（3）第二次调用指针对象的next方法，指针就指向数据结构的第二个成员。</p>
</blockquote>
<blockquote>
<p>（4）不断调用指针对象的next方法，直到它指向数据结构的结束位置。</p>
</blockquote>
<blockquote>
<p>每一次调用next方法，都会返回数据结构的当前成员的信息。具体来说，就是返回一个包含value和done两个属性的对象。其中，value属性是当前成员的值，done属性是一个布尔值，表示遍历是否结束。</p>
</blockquote>
<h2 id="默认-Iterator-接口"><a href="#默认-Iterator-接口" class="headerlink" title="默认 Iterator 接口"></a>默认 Iterator 接口</h2><p>Iterator 接口的目的，就是为所有数据结构，提供了一种统一的访问机制，即for…of循环（详见下文）。当使用<code>for...of</code>循环遍历某种数据结构时，该循环会自动去寻找 Iterator 接口。</p>
<p>一种数据结构只要部署了 Iterator 接口，我们就称这种数据结构是“可遍历的”（iterable）。</p>
<p>ES6 规定，默认的 Iterator 接口部署在数据结构的<code>Symbol.iterator</code>属性，或者说，一个数据结构只要具有<code>Symbol.iterator</code>属性，就可以认为是“可遍历的”（iterable）。<code>Symbol.iterator</code>属性本身是一个函数，就是当前数据结构默认的遍历器生成函数。执行这个函数，就会返回一个遍历器。至于属性名<code>Symbol.iterator</code>，它是一个表达式，返回Symbol对象的iterator属性，这是一个预定义好的、类型为 Symbol 的特殊值，所以要放在方括号内（参见《Symbol》一章）。</p>
<p>ES6 的有些数据结构原生具备 Iterator 接口（比如数组），即不用任何处理，就可以被<code>for...of</code>循环遍历。原因在于，这些数据结构原生部署了<code>Symbol.iterator</code>属性（详见下文），另外一些数据结构没有（比如对象）。凡是部署了<code>Symbol.iterator</code>属性的数据结构，就称为部署了遍历器接口。调用这个接口，就会返回一个遍历器对象。</p>
<p>原生具备 Iterator 接口的数据结构如下。</p>
<ul>
<li>Array</li>
<li>Map</li>
<li>Set</li>
<li>String</li>
<li>TypedArray</li>
<li>函数的 arguments 对象</li>
<li>NodeList 对象</li>
</ul>
<p>为对象添加 Iterator 接口的例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let obj &#x3D; &#123;</span><br><span class="line">  data: [ &#39;hello&#39;, &#39;world&#39; ],</span><br><span class="line">  [Symbol.iterator]() &#123;</span><br><span class="line">    const self &#x3D; this;</span><br><span class="line">    let index &#x3D; 0;</span><br><span class="line">    return &#123;</span><br><span class="line">      next() &#123;</span><br><span class="line">        if (index &lt; self.data.length) &#123;</span><br><span class="line">          return &#123;</span><br><span class="line">            value: self.data[index++],</span><br><span class="line">            done: false</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          return &#123; value: undefined, done: true &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>对于类似数组的对象（存在数值键名和length属性），部署 Iterator 接口，有一个简便方法，就是Symbol.iterator方法直接引用数组的 Iterator 接口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NodeList.prototype[Symbol.iterator] &#x3D; Array.prototype[Symbol.iterator];</span><br><span class="line">&#x2F;&#x2F; 或者</span><br><span class="line">NodeList.prototype[Symbol.iterator] &#x3D; [][Symbol.iterator];</span><br><span class="line"></span><br><span class="line">[...document.querySelectorAll(&#39;div&#39;)] &#x2F;&#x2F; 可以执行了</span><br></pre></td></tr></table></figure>

<h2 id="调用-Iterator-接口的场合"><a href="#调用-Iterator-接口的场合" class="headerlink" title="调用 Iterator 接口的场合"></a>调用 Iterator 接口的场合</h2><p>有一些场合会默认调用 Iterator 接口（即Symbol.iterator方法），除了下文会介绍的<code>for...of</code>循环，还有几个别的场合。</p>
<ul>
<li>（1）解构赋值</li>
</ul>
<p>对数组和 Set 结构进行解构赋值时，会默认调用Symbol.iterator方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let set &#x3D; new Set().add(&#39;a&#39;).add(&#39;b&#39;).add(&#39;c&#39;);</span><br><span class="line"></span><br><span class="line">let [x,y] &#x3D; set;</span><br><span class="line">&#x2F;&#x2F; x&#x3D;&#39;a&#39;; y&#x3D;&#39;b&#39;</span><br><span class="line"></span><br><span class="line">let [first, ...rest] &#x3D; set;</span><br><span class="line">&#x2F;&#x2F; first&#x3D;&#39;a&#39;; rest&#x3D;[&#39;b&#39;,&#39;c&#39;];</span><br></pre></td></tr></table></figure>
<ul>
<li>（2）扩展运算符</li>
</ul>
<p>扩展运算符（…）也会调用默认的 Iterator 接口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 例一</span><br><span class="line">var str &#x3D; &#39;hello&#39;;</span><br><span class="line">[...str] &#x2F;&#x2F;  [&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 例二</span><br><span class="line">let arr &#x3D; [&#39;b&#39;, &#39;c&#39;];</span><br><span class="line">[&#39;a&#39;, ...arr, &#39;d&#39;]</span><br><span class="line">&#x2F;&#x2F; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]</span><br></pre></td></tr></table></figure>

<p>上面代码的扩展运算符内部就调用 Iterator 接口。</p>
<p>实际上，这提供了一种简便机制，可以将任何部署了 Iterator 接口的数据结构，转为数组。也就是说，只要某个数据结构部署了 Iterator 接口，就可以对它使用扩展运算符，将其转为数组。</p>
<p><code>let arr = [...iterable];</code></p>
<ul>
<li>（3）yield*</li>
</ul>
<p>yield*后面跟的是一个可遍历的结构，它会调用该结构的遍历器接口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let generator &#x3D; function* () &#123;</span><br><span class="line">  yield 1;</span><br><span class="line">  yield* [2,3,4];</span><br><span class="line">  yield 5;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var iterator &#x3D; generator();</span><br><span class="line"></span><br><span class="line">iterator.next() &#x2F;&#x2F; &#123; value: 1, done: false &#125;</span><br><span class="line">iterator.next() &#x2F;&#x2F; &#123; value: 2, done: false &#125;</span><br><span class="line">iterator.next() &#x2F;&#x2F; &#123; value: 3, done: false &#125;</span><br><span class="line">iterator.next() &#x2F;&#x2F; &#123; value: 4, done: false &#125;</span><br><span class="line">iterator.next() &#x2F;&#x2F; &#123; value: 5, done: false &#125;</span><br><span class="line">iterator.next() &#x2F;&#x2F; &#123; value: undefined, done: true &#125;</span><br></pre></td></tr></table></figure>
<p>（4）其他场合</p>
<p>由于数组的遍历会调用遍历器接口，所以任何接受数组作为参数的场合，其实都调用了遍历器接口。下面是一些例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for...of</span><br><span class="line">Array.from()</span><br><span class="line">Map(), Set(), WeakMap(), WeakSet()（比如new Map([[&#39;a&#39;,1],[&#39;b&#39;,2]])）</span><br><span class="line">Promise.all()</span><br><span class="line">Promise.race()</span><br></pre></td></tr></table></figure>

<h2 id="字符串的-Iterator-接口"><a href="#字符串的-Iterator-接口" class="headerlink" title="字符串的 Iterator 接口"></a>字符串的 Iterator 接口</h2><p>字符串是一个类似数组的对象，也原生具有 Iterator 接口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var someString &#x3D; &quot;hi&quot;;</span><br><span class="line">typeof someString[Symbol.iterator]</span><br><span class="line">&#x2F;&#x2F; &quot;function&quot;</span><br><span class="line"></span><br><span class="line">var iterator &#x3D; someString[Symbol.iterator]();</span><br><span class="line"></span><br><span class="line">iterator.next()  &#x2F;&#x2F; &#123; value: &quot;h&quot;, done: false &#125;</span><br><span class="line">iterator.next()  &#x2F;&#x2F; &#123; value: &quot;i&quot;, done: false &#125;</span><br><span class="line">iterator.next()  &#x2F;&#x2F; &#123; value: undefined, done: true &#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，调用<code>Symbol.iterator</code>方法返回一个遍历器对象，在这个遍历器上可以调用 <code>next</code> 方法，实现对于字符串的遍历。</p>
<p>可以覆盖原生的<code>Symbol.iterator</code>方法，达到修改遍历器行为的目的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var str &#x3D; new String(&quot;hi&quot;);</span><br><span class="line"></span><br><span class="line">[...str] &#x2F;&#x2F; [&quot;h&quot;, &quot;i&quot;]</span><br><span class="line"></span><br><span class="line">str[Symbol.iterator] &#x3D; function() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    next: function() &#123;</span><br><span class="line">      if (this._first) &#123;</span><br><span class="line">        this._first &#x3D; false;</span><br><span class="line">        return &#123; value: &quot;bye&quot;, done: false &#125;;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        return &#123; done: true &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    _first: true</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[...str] &#x2F;&#x2F; [&quot;bye&quot;]</span><br><span class="line">str &#x2F;&#x2F; &quot;hi&quot;</span><br></pre></td></tr></table></figure>

<p>上面代码中，字符串 str 的Symbol.iterator方法被修改了，所以扩展运算符（…）返回的值变成了bye，而字符串本身还是hi。</p>
<h2 id="遍历器对象的-return-，throw"><a href="#遍历器对象的-return-，throw" class="headerlink" title="遍历器对象的 return()，throw()"></a>遍历器对象的 return()，throw()</h2><p>遍历器对象除了具有<code>next</code>方法，还可以具有<code>return</code>方法和<code>throw</code>方法。如果你自己写遍历器对象生成函数，那么next方法是必须部署的，<code>return</code>方法和<code>throw</code>方法是否部署是可选的。</p>
<p><code>return</code>方法的使用场合是，如果<code>for...of</code>循环提前退出（通常是因为出错，或者有break语句），就会调用return方法。如果一个对象在完成遍历前，需要清理或释放资源，就可以部署<code>return</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function readLinesSync(file) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    [Symbol.iterator]() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        next() &#123;</span><br><span class="line">          return &#123; done: false &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        return() &#123;</span><br><span class="line">          file.close();</span><br><span class="line">          return &#123; done: true &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，函数<code>readLinesSync</code>接受一个文件对象作为参数，返回一个遍历器对象，其中除了next方法，还部署了return方法。下面的两种情况，都会触发执行return方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 情况一</span><br><span class="line">for (let line of readLinesSync(fileName)) &#123;</span><br><span class="line">  console.log(line);</span><br><span class="line">  break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 情况二</span><br><span class="line">for (let line of readLinesSync(fileName)) &#123;</span><br><span class="line">  console.log(line);</span><br><span class="line">  throw new Error();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，情况一输出文件的第一行以后，就会执行return方法，关闭这个文件；情况二会在执行return方法关闭文件之后，再抛出错误。</p>
<p>注意，<code>return</code>方法必须返回一个对象，这是 <code>Generator</code>规格决定的。</p>
<p>throw方法主要是配合 Generator 函数使用，一般的遍历器对象用不到这个方法。请参阅《Generator 函数》一章。</p>
<h2 id="for…of-循环"><a href="#for…of-循环" class="headerlink" title="for…of 循环"></a>for…of 循环</h2><p>ES6 借鉴 C++、Java、C# 和 Python 语言，引入了<code>for...of</code>循环，作为遍历所有数据结构的统一的方法。</p>
<p>一个数据结构只要部署了<code>Symbol.iterator</code>属性，就被视为具有 <code>iterator</code>接口，就可以用<code>for...of</code>循环遍历它的成员。也就是说，<code>for...of</code>循环内部调用的是数据结构的<code>Symbol.iterator</code>方法。</p>
<p><code>for...of</code>循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象（比如arguments对象、DOM NodeList 对象）、后文的 Generator 对象，以及字符串。</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>原生具备iterator接口（即默认部署了Symbol.iterator属性），for…of循环本质上就是调用这个接口产生的遍历器，可以用下面的代码证明。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const arr &#x3D; [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;];</span><br><span class="line"></span><br><span class="line">for(let v of arr) &#123;</span><br><span class="line">  console.log(v); &#x2F;&#x2F; red green blue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const obj &#x3D; &#123;&#125;;</span><br><span class="line">obj[Symbol.iterator] &#x3D; arr[Symbol.iterator].bind(arr);</span><br><span class="line"></span><br><span class="line">for(let v of obj) &#123;</span><br><span class="line">  console.log(v); &#x2F;&#x2F; red green blue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，空对象obj部署了数组arr的<code>Symbol.iterator</code>属性，结果obj的<code>for...of</code>循环，产生了与arr完全一样的结果。</p>
<p><code>for...of</code>循环可以代替数组实例的forEach方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const arr &#x3D; [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;];</span><br><span class="line"></span><br><span class="line">arr.forEach(function (element, index) &#123;</span><br><span class="line">  console.log(element); &#x2F;&#x2F; red green blue</span><br><span class="line">  console.log(index);   &#x2F;&#x2F; 0 1 2</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>JavaScript 原有的<code>for...in</code>循环，只能获得对象的键名，不能直接获取键值。ES6 提供<code>for...of</code>循环，允许遍历获得键值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var arr &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;];</span><br><span class="line"></span><br><span class="line">for (let a in arr) &#123;</span><br><span class="line">  console.log(a); &#x2F;&#x2F; 0 1 2 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (let a of arr) &#123;</span><br><span class="line">  console.log(a); &#x2F;&#x2F; a b c d</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码表明，<code>for...in</code>循环读取键名，<code>for...of</code>循环读取键值。如果要通过<code>for...of</code>循环，获取数组的索引，可以借助数组实例的entries方法和keys方法（参见《数组的扩展》一章）。</p>
<p><code>for...of</code>循环调用遍历器接口，数组的遍历器接口只返回具有数字索引的属性。这一点跟<code>for...in</code>循环也不一样。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arr &#x3D; [3, 5, 7];</span><br><span class="line">arr.foo &#x3D; &#39;hello&#39;;</span><br><span class="line"></span><br><span class="line">for (let i in arr) &#123;</span><br><span class="line">  console.log(i); &#x2F;&#x2F; &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;foo&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (let i of arr) &#123;</span><br><span class="line">  console.log(i); &#x2F;&#x2F;  &quot;3&quot;, &quot;5&quot;, &quot;7&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，for…of循环不会返回数组arr的foo属性。</p>
<h2 id="Set-和-Map-结构"><a href="#Set-和-Map-结构" class="headerlink" title="Set 和 Map 结构"></a>Set 和 Map 结构</h2><p>Set 和 Map 结构也原生具有 Iterator 接口，可以直接使用<code>for...of</code>循环。</p>
<h2 id="计算生成的数据结构"><a href="#计算生成的数据结构" class="headerlink" title="计算生成的数据结构"></a>计算生成的数据结构</h2><p>有些数据结构是在现有数据结构的基础上，计算生成的。比如，ES6 的数组、Set、Map 都部署了以下三个方法，调用后都返回遍历器对象。</p>
<ul>
<li><p>entries() </p>
<p>返回一个遍历器对象，用来遍历[键名, 键值]组成的数组。对于数组，键名就是索引值；对于 Set，键名与键值相同。Map 结构的 Iterator 接口，默认就是调用entries方法。</p>
</li>
<li><p>keys() </p>
<p>返回一个遍历器对象，用来遍历所有的键名。</p>
</li>
<li><p>values()</p>
<p>返回一个遍历器对象，用来遍历所有的键值。</p>
</li>
</ul>
<p>这三个方法调用后生成的遍历器对象，所遍历的都是计算生成的数据结构。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arr &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];</span><br><span class="line">for (let pair of arr.entries()) &#123;</span><br><span class="line">  console.log(pair);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; [0, &#39;a&#39;]</span><br><span class="line">&#x2F;&#x2F; [1, &#39;b&#39;]</span><br><span class="line">&#x2F;&#x2F; [2, &#39;c&#39;]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS布局</title>
    <url>/2020/04/18/17-CSS%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<hr>
<h2 id="常见的布局属性"><a href="#常见的布局属性" class="headerlink" title="常见的布局属性"></a>常见的布局属性</h2><p>（1）<code>display</code> 确定元素的显示类型：</p>
<ul>
<li><p>block：块级元素。</p>
</li>
<li><p>inline：行内元素。</p>
</li>
<li><p>inline-block：对外的表现是行内元素（不会独占一行），对内的表现是块级元素（可以设置宽高）。</p>
<a id="more"></a>
<p>（2）<code>positon</code> 确定元素的位置：</p>
</li>
<li><p>static：默认属性值。</p>
</li>
<li><p>relative：相对定位。相对于元素本身进行偏移，<strong>不会改变它所占据的空间</strong>。</p>
</li>
<li><p>absolute：绝对定位。相对于父元素中最近的 relative/absolute 进行偏移，会脱离文档流。音标：[ˈæbsəluːt]。</p>
</li>
<li><p>fixed：固定定位。相对于可视区域固定，会脱离文档流。</p>
</li>
</ul>
<p><code>relative</code>、<code>absolute</code>、<code>fixed</code>这三个属性，可以结合 z-index 来设置层级。</p>
<h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><p>前端开发中，静态网页通常需要适应不同分辨率的设备，常用的自适应解决方案包括<strong>媒体查询</strong>、<strong>百分比</strong>、<strong>rem和vw/vh</strong>等。本文从px单位出发，分析px在移动端布局中的不足，接着介绍几种不同的自适应解决方案。</p>
<ul>
<li>px和视口</li>
<li>媒体查询</li>
<li>百分比</li>
<li>自适应场景下的rem解决方案</li>
<li>通过vw/vh来实现自适应</li>
</ul>
<h3 id="px和视口"><a href="#px和视口" class="headerlink" title="px和视口"></a>px和视口</h3><p>在静态网页中，我们经常用像素（px）作为单位，来描述一个元素的宽高以及定位信息。在pc端，通常认为css中,1px所表示的真实长度是固定的。</p>
<blockquote>
<p>那么，px真的是一个设备无关，跟长度单位米和分米一样是固定大小的吗？<br>并不是。</p>
</blockquote>
<blockquote>
<p>那么css中的1px的真实长度到底由什么决定呢？<br>为了理清楚这个概念我们首先介绍像素和视口的概念</p>
</blockquote>
<h3 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h3><p>像素是网页布局的基础，一个像素表示了计算机屏幕所能显示的最小区域，像素分为两种类型：css像素和物理像素。</p>
<p>我们在js或者css代码中使用的px单位就是指的是css像素，物理像素也称设备像素，只与设备或者说硬件有关，同样尺寸的屏幕，设备的密度越高，物理像素也就越多。下表表示css像素和物理像素的具体区别：</p>
<table>
<thead>
<tr>
<th align="left">css像素</th>
<th align="left">为web开发者提供，在css中使用的一个抽象单位</th>
</tr>
</thead>
<tbody><tr>
<td align="left">物理像素</td>
<td align="left">只与设备的硬件密度有关，任何设备的物理像素都是固定的</td>
</tr>
</tbody></table>
<h3 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h3><p>广义的视口，是指浏览器显示内容的屏幕区域，狭义的视口包括了布局视口、视觉视口和理想视口。</p>
<p>(1) <strong>布局视口（layout viewport）</strong></p>
<p>布局视口定义了pc网页在移动端的默认布局行为，因为通常pc的分辨率较大，布局视口默认为980px。也就是说在不设置网页的viewport的情况下，pc端的网页默认会以布局视口为基准，在移动端进行展示。因此我们可以明显看出来，默认为布局视口时，根植于pc端的网页在移动端展示很模糊。</p>
<p>(2) <strong>视觉视口（visual viewport）</strong></p>
<p>视觉视口表示浏览器内看到的网站的显示区域，用户可以通过缩放来查看网页的显示内容，从而改变视觉视口。视觉视口的定义，就像拿着一个放大镜分别从不同距离观察同一个物体，视觉视口仅仅类似于放大镜中显示的内容，因此视觉视口不会影响布局视口的宽度和高度。</p>
<p>(3) <strong>理想视口（ideal viewport）</strong></p>
<p>理想视口或者应该全称为“理想的布局视口”，在移动设备中就是指设备的分辨率。换句话说，理想视口或者说分辨率就是给定设备物理像素的情况下，最佳的“布局视口”。</p>
<p>上述视口中，最重要的是要明确理想视口的概念，在移动端中，理想视口或者说分辨率跟物理像素之间有什么关系呢？</p>
<p>为了理清分辨率和物理像素之间的联系，我们介绍一个用<strong>DPR（Device pixel ratio）设备像素比</strong>来表示，则可以写成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 DPR &#x3D; 物理像素／分辨率</span><br></pre></td></tr></table></figure>
<p>在不缩放的情况下，一个css像素就对应一个dpr，也就是说，在不缩放:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 CSS像素 &#x3D; 物理像素／分辨率</span><br></pre></td></tr></table></figure>
<p>此外，在移动端的布局中，我们可以通过viewport元标签来控制布局，比如一般情况下，我们可以通过下述标签使得移动端在理想视口下布局：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta id&#x3D;&quot;viewport&quot; name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width; initial-scale&#x3D;1.0; maximum-scale&#x3D;1; user-scalable&#x3D;no;&quot;&gt;</span><br></pre></td></tr></table></figure>
<br>

<p>上述meta标签的每一个属性的详细介绍如下：</p>
<table>
<thead>
<tr>
<th align="left">属性名</th>
<th align="left">取值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">width</td>
<td align="left">正整数</td>
<td align="left">定义布局视口的宽度，单位为像素</td>
</tr>
<tr>
<td align="left">height</td>
<td align="left">正整数</td>
<td align="left">定义布局视口的高度，单位为像素，很少使用</td>
</tr>
<tr>
<td align="left">initial-scale</td>
<td align="left">[0,10]</td>
<td align="left">初始缩放比例，1表示不缩放</td>
</tr>
<tr>
<td align="left">minimum-scale</td>
<td align="left">[0,10]</td>
<td align="left">最小缩放比例</td>
</tr>
<tr>
<td align="left">maximum-scale</td>
<td align="left">[0,10]</td>
<td align="left">最大缩放比例</td>
</tr>
<tr>
<td align="left">user-scalable</td>
<td align="left">yes／no</td>
<td align="left">是否允许手动缩放页面，默认值为yes</td>
</tr>
</tbody></table>
<p>其中我们来看width属性，在移动端布局时，在meta标签中我们会将width设置称为device-width，device-width一般是表示分辨率的宽，通过width=device-width的设置我们就将布局视口设置成了理想的视口。</p>
<h3 id="px与自适应"><a href="#px与自适应" class="headerlink" title="px与自适应"></a>px与自适应</h3><p>当通过viewport元标签，设置布局视口为理想视口时，1个css像素可以表示成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 CSS像素 &#x3D; 物理像素／分辨率</span><br></pre></td></tr></table></figure>


<p>我们知道，在pc端的布局视口通常情况下为980px，移动端以iphone6为例，分辨率为375 * 667，也就是说布局视口在理想的情况下为375px。比如现在我们有一个750px * 1134px的视觉稿，那么在pc端，一个css像素可以如下计算：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC端： 1 CSS像素 &#x3D; 物理像素／分辨率 &#x3D; 750 ／ 980 &#x3D;0.76 px</span><br></pre></td></tr></table></figure>
<p>而在iphone6下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iphone6：1 CSS像素 &#x3D; 物理像素 ／分辨率 &#x3D; 750 ／ 375 &#x3D; 2 px</span><br></pre></td></tr></table></figure>
<p>也就是说在PC端，一个CSS像素可以用0.76个物理像素来表示，而iphone6中 一个CSS像素表示了2个物理像素。此外不同的移动设备分辨率不同，也就是1个CSS像素可以表示的物理像素是不同的，因此如果在css中仅仅通过px作为长度和宽度的单位，造成的结果就是无法通过一套样式，实现各端的自适应。</p>
<h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><p>在前面我们说到，不同端的设备下，在css文件中，1px所表示的物理像素的大小是不同的，因此通过一套样式，是无法实现各端的自适应。由此我们联想：</p>
<blockquote>
<p>如果一套样式不行，那么能否给每一种设备各一套不同的样式来实现自适应的效果？</p>
</blockquote>
<blockquote>
<p>答案是肯定的。</p>
</blockquote>
<p>使用<font style="color: blue; font-weight: bold">@media</font>媒体查询可以针对不同的媒体类型定义不同的样式，特别是响应式页面，可以针对不同屏幕的大小，编写多套样式，从而达到自适应的效果。举例来说：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@media screen and (max-width: 960px)&#123;</span><br><span class="line">    body&#123;</span><br><span class="line">      background-color:#FF6699</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (max-width: 768px)&#123;</span><br><span class="line">    body&#123;</span><br><span class="line">      background-color:#00FF66;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (max-width: 550px)&#123;</span><br><span class="line">    body&#123;</span><br><span class="line">      background-color:#6633FF;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (max-width: 320px)&#123;</span><br><span class="line">    body&#123;</span><br><span class="line">      background-color:#FFFF00;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述的代码通过媒体查询定义了几套样式，通过max-width设置样式生效时的最大分辨率，上述的代码分别对分辨率在0～320px，320px～550px，550px～768px以及768px～960px的屏幕设置了不同的背景颜色。</p>
<p>通过媒体查询，可以通过给不同分辨率的设备编写不同的样式来实现响应式的布局，比如我们为不同分辨率的屏幕，设置不同的背景图片。比如给小屏幕手机设置@2x图，为大屏幕手机设置@3x图，通过媒体查询就能很方便的实现。</p>
<p>但是媒体查询的缺点也很明显，如果在浏览器大小改变时，需要改变的样式太多，那么多套样式代码会很繁琐。</p>
<p><strong>总结</strong></p>
<p><strong>逻辑操作符：not、and和only等</strong></p>
<ul>
<li>and操作符用来把多个媒体属性组合成一条媒体查询，对成链式的特征进行请求，只有当每个属性都为真时，结果才为真。</li>
<li>not操作符用来对一条媒体查询的结果进行取反。</li>
<li>only操作符仅在媒体查询匹配成功的情况下被用于应用一个样式，这对于防止让选中的样式在老式浏览器中被应用到。</li>
<li>若使用了not或only操作符，必须明确指定一个媒体类型。</li>
<li>你也可以将多个媒体查询以逗号分隔放在一起；只要其中任何一个为真，整个媒体语句就返回真。相当于or操作符。</li>
</ul>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries" target="_blank" rel="noopener"><strong>媒体类型</strong></a></p>
<h3 id="百分比"><a href="#百分比" class="headerlink" title="百分比"></a>百分比</h3><p>除了用px结合媒体查询实现响应式布局外，我们也可以通过<strong>百分比单位 “ % “  来</strong>实现响应式的效果。</p>
<blockquote>
<p>比如当浏览器的宽度或者高度发生变化时，通过百分比单位，通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。</p>
</blockquote>
<p>为了了解百分比布局，首先要了解的问题是：</p>
<p><strong>css中的子元素中的百分比（%）到底是谁的百分比</strong>？</p>
<blockquote>
<p>直观的理解，我们可能会认为子元素的百分比完全相对于直接父元素，height百分比相对于height，width百分比相对于width。当然这种理解是正确的，但是根据css的盒式模型，除了height、width属性外，还具有padding、border、margin等等属性。那么这些属性设置成百分比，是根据父元素的那些属性呢？此外还有border-radius和translate等属性中的百分比，又是相对于什么呢？下面来具体分析。</p>
</blockquote>
<br>

<ol>
<li><strong>百分比的具体分析</strong></li>
</ol>
<p>（1）子元素height和width的百分比</p>
<p><strong>子元素的height或width中使用百分比，是相对于子元素的直接父元素，width相对于父元素的width，height相对于父元素的height</strong>。</p>
<p>比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;parent&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;child&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>如果设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.father&#123;</span><br><span class="line">width:200px;</span><br><span class="line">height:100px;</span><br><span class="line">&#125;</span><br><span class="line">.child&#123;</span><br><span class="line">width:50%;</span><br><span class="line">height:50%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>展示的效果为：</p>
<p><img src="41773411-91e22044-764e-11e8-8ad4-9066db87166f.png" alt=""></p>
<p>(2)<strong>top和bottom 、left和right</strong></p>
<p><strong>子元素的top和bottom如果设置百分比，则相对于直接非static定位(默认定位)的父元素的高度，同样</strong></p>
<p><strong>子元素的left和right如果设置百分比，则相对于直接非static定位(默认定位的)父元素的宽度。</strong></p>
<p>展示的效果为：</p>
<p><img src="41774950-67423bfc-7654-11e8-9947-aa1621fe39f9.png" alt=""></p>
<p>(3) <strong>padding</strong></p>
<p>子元素的padding如果设置百分比，不论是垂直方向或者是水平方向，<strong>都相对于直接父亲元素的width，而与父元素的height无关。</strong></p>
<p>举例来说：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.parent&#123;</span><br><span class="line">  width:200px;</span><br><span class="line">  height:100px;</span><br><span class="line">  background:green;</span><br><span class="line">&#125;</span><br><span class="line">.child&#123;</span><br><span class="line">  width:0px;</span><br><span class="line">  height:0px;</span><br><span class="line">  background:blue;</span><br><span class="line">  color:white;</span><br><span class="line">  padding-top:50%;</span><br><span class="line">  padding-left:50%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>展示的效果为：</p>
<p><img src="41775365-36a0b0da-7656-11e8-8495-bd58f7ab0bf2.png" alt=""></p>
<p>子元素的初始宽高为0，<strong>通过padding可以将父元素撑大</strong>，上图的蓝色部分是一个正方形，且边长为100px,说明padding不论宽高，如果设置成百分比都相对于父元素的width。</p>
<p>（4）margin</p>
<p>跟padding一样，margin也是如此，<strong>子元素的margin如果设置成百分比，不论是垂直方向还是水平方向，都相对于直接父元素的width</strong>。这里就不具体举例。</p>
<p>（5）border-radius</p>
<p>border-radius不一样，<strong>如果设置border-radius为百分比，则是相对于自身的宽度</strong>，举例来说：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &lt;div class&#x3D;&quot;trangle&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">设置border-radius为百分比：</span><br><span class="line"></span><br><span class="line">.trangle&#123;</span><br><span class="line">  width:100px;</span><br><span class="line">  height:100px;</span><br><span class="line">  border-radius:50%;</span><br><span class="line">  background:blue;</span><br><span class="line">  margin-top:10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><strong>百分比单位布局应用</strong></li>
</ol>
<p>百分比单位在布局上应用还是很广泛的，这里介绍一种应用。</p>
<p>比如我们要实现一个固定长宽比的长方形，比如要实现一个长宽比为4:3的长方形,我们可以根据padding属性来实现，因为padding不管是垂直方向还是水平方向，百分比单位都相对于父元素的宽度，因此我们可以设置padding-top为百分比来实现，长宽自适应的长方形：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;trangle&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>设置样式让其自适应：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.trangle&#123;</span><br><span class="line">  height:0;</span><br><span class="line">  width:100%;</span><br><span class="line">  padding-top:75%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过设置padding-top：75%，相对比宽度的75%，因此这样就设置了一个长宽高恒定比例的长方形，具体效果展示如下：</p>
<p><img src="41851698-52d2bd2c-78bb-11e8-97cb-26f985195809.gif" alt=""></p>
<ol start="3">
<li><strong>百分比单位缺点</strong></li>
</ol>
<p>从上述对于百分比单位的介绍我们很容易看出如果全部使用百分比单位来实现响应式的布局，有明显的以下两个缺点：</p>
<p>（1）计算困难，如果我们要定义一个元素的宽度和高度，按照设计稿，必须换算成百分比单位。<br>（2）从小节1可以看出，各个属性中如果使用百分比，相对父元素的属性并不是唯一的。比如width和height相对于父元素的width和height，而margin、padding不管垂直还是水平方向都相对比父元素的宽度、border-radius则是相对于元素自身等等，造成我们使用百分比单位容易使布局问题变得复杂。</p>
<h3 id="自适应场景下的rem解决方案"><a href="#自适应场景下的rem解决方案" class="headerlink" title="自适应场景下的rem解决方案"></a>自适应场景下的rem解决方案</h3><ol>
<li><strong>rem单位</strong></li>
</ol>
<p>首先来看，什么是rem单位。<strong>rem是一个灵活的、可扩展的单位</strong>，由浏览器转化像素并显示。与em单位不同，<strong>rem单位无论嵌套层级如何，都只相对于浏览器的根元素（HTML元素）的font-size</strong>。<strong>默认情况下，html元素的font-size为16px</strong>，所以：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 rem &#x3D; 16px</span><br></pre></td></tr></table></figure>
<p>为了计算方便，通常可以将html的font-size设置成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html&#123; font-size: 62.5% &#125;</span><br></pre></td></tr></table></figure>

<p>这种情况下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 rem &#x3D; 10px</span><br></pre></td></tr></table></figure>
<br>

<ol start="2">
<li><strong>通过rem来实现响应式布局</strong></li>
</ol>
<p>rem单位都是相对于根元素html的font-size来决定大小的,根元素的font-size相当于提供了一个基准，当页面的size发生变化时，只需要改变font-size的值，那么以rem为固定单位的元素的大小也会发生响应的变化。</p>
<p>因此，如果通过rem来实现响应式的布局，只需要根据视图容器的大小，动态的改变font-size即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function refreshRem() &#123;</span><br><span class="line">    var docEl &#x3D; doc.documentElement;</span><br><span class="line">    var width &#x3D; docEl.getBoundingClientRect().width;</span><br><span class="line">    var rem &#x3D; width &#x2F; 10;</span><br><span class="line">    docEl.style.fontSize &#x3D; rem + &#39;px&#39;;</span><br><span class="line">    flexible.rem &#x3D; win.rem &#x3D; rem;</span><br><span class="line">&#125;</span><br><span class="line">win.addEventListener(&#39;resize&#39;, refreshRem);</span><br></pre></td></tr></table></figure>
<p>上述代码中将视图容器分为10份，font-size用十分之一的宽度来表示，最后在header标签中执行这段代码，就可以动态定义font-size的大小，从而1rem在不同的视觉容器中表示不同的大小，用rem固定单位可以实现不同容器内布局的自适应。</p>
<ol start="3">
<li><strong>rem2px和px2rem</strong></li>
</ol>
<p>如果在响应式布局中使用rem单位，那么存在一个单位换算的问题，rem2px表示从rem换算成px，这个就不说了，只要rem乘以相应的font-size中的大小，就能换算成px。更多的应用是px2rem，表示的是从px转化为rem。</p>
<p>比如给定的视觉稿为750px（物理像素），如果我们要将所有的布局单位都用rem来表示，一种比较笨的办法就是对所有的height和width等元素，乘以相应的比例，现将视觉稿换算成rem单位，然后一个个的用rem来表示。</p>
<p>另一种比较方便的解决方法就是，在css中我们还是用px来表示元素的大小，最后编写完css代码之后，将css文件中的所有px单位，转化成rem单位。</p>
<p>px2rem的原理也很简单，重点在于预处理以px为单位的css文件，处理后将所有的px变成rem单位。可以通过两种方式来实现：</p>
<p>1） webpack loader的形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install px2rem-loader</span><br></pre></td></tr></table></figure>
<p>在webpack的配置文件中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: &#x2F;\.css$&#x2F;,</span><br><span class="line">      use: [&#123;</span><br><span class="line">        loader: &#39;style-loader&#39;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        loader: &#39;css-loader&#39;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        loader: &#39;px2rem-loader&#39;,</span><br><span class="line">        &#x2F;&#x2F; options here</span><br><span class="line">        options: &#123;</span><br><span class="line">          remUni: 75,</span><br><span class="line">          remPrecision: 8</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2）webpack中使用postcss plugin</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install postcss-loader</span><br></pre></td></tr></table></figure>
<p>在webpack的plugin中:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var px2rem &#x3D; require(&#39;postcss-px2rem&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.css$&#x2F;,</span><br><span class="line">        loader: &quot;style-loader!css-loader!postcss-loader&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  postcss: function() &#123;</span><br><span class="line">    return [px2rem(&#123;remUnit: 75&#125;)];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>rem 布局的缺点</strong></li>
</ol>
<p>通过rem单位，可以实现响应式的布局，特别是引入相应的postcss相关插件，免去了设计稿中的px到rem的计算。</p>
<p>rem单位在国外的一些网站也有使用，这里所说的rem来实现布局的缺点，或者说是小缺陷是：</p>
<blockquote>
<p>在响应式布局中，必须通过js来动态控制根元素font-size的大小。</p>
</blockquote>
<p>也就是说css样式和js代码有一定的耦合性。且必须将改变font-size的代码放在css样式之前。</p>
<h3 id="通过vw-vh来实现自适应"><a href="#通过vw-vh来实现自适应" class="headerlink" title="通过vw/vh来实现自适应"></a>通过vw/vh来实现自适应</h3><ol>
<li><strong>什么是vw/vh</strong> ?</li>
</ol>
<p>css3中引入了一个新的单位vw/vh，与<strong>视图窗口有关</strong>，<strong>vw表示相对于视图窗口的宽度，vh表示相对于视图窗口高度</strong>，除了vw和vh外，还有vmin和vmax两个相关的单位。</p>
<p>各个单位具体的含义如下：</p>
<table>
<thead>
<tr>
<th align="left">单位</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">vw</td>
<td align="left">相对于视窗的宽度，视窗宽度是100vw</td>
</tr>
<tr>
<td align="left">vh</td>
<td align="left">相对于视窗的高度，视窗高度是100vh</td>
</tr>
<tr>
<td align="left">vmin</td>
<td align="left">vw和vh中的较小值</td>
</tr>
<tr>
<td align="left">vmax</td>
<td align="left">vw和vh中的较大值</td>
</tr>
</tbody></table>
<p>这里我们发现视窗宽高都是100vw／100vh，那么vw或者vh，下简称vw，很类似百分比单位。</p>
<p><strong>vw和%的区别为</strong>：</p>
<table>
<thead>
<tr>
<th align="left">单位</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">%</td>
<td align="left">大部分相对于祖先元素，也有相对于自身的情况比如（border-radius、translate等)</td>
</tr>
<tr>
<td align="left">vw/vh</td>
<td align="left">相对于视窗的尺寸</td>
</tr>
</tbody></table>
<p>从对比中我们可以发现，vw单位与百分比类似，但却有区别，前面我们介绍了百分比单位的换算困难，这里的vw更像”理想的百分比单位”。</p>
<p><strong>任意层级元素，在使用vw单位的情况下，1vw都等于视图宽度的百分之一</strong>。</p>
<ol start="2">
<li>vw单位换算</li>
</ol>
<p>同样的，如果要将px换算成vw单位，很简单，只要确定视图的窗口大小（布局视口），如果我们将布局视口设置成分辨率大小，比如对于iphone6/7 375*667的分辨率，</p>
<p>那么px可以通过如下方式换算成vw：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1px &#x3D; （1&#x2F;375）*100 vw</span><br></pre></td></tr></table></figure>
<p>通过指定视窗的宽度和高度，以及换算精度，就能将px转化成vw。</p>
<ol start="3">
<li>vw/vh单位的兼容性</li>
</ol>
<p>可以在<a href="https://caniuse.com/" target="_blank" rel="noopener">https://caniuse.com/</a> 查看各个版本的浏览器对vw单位的支持性。</p>
<p>我们发现，绝大多数的浏览器支持vw单位，但是ie9-11不支持vmin和vmax，考虑到vmin和vmax单位不常用，vw单位在绝大部分高版本浏览器内的支持性很好，但是opera浏览器整体不支持vw单位，如果需要兼容opera浏览器的布局，不推荐使用vw。</p>
<h3 id="三栏式布局"><a href="#三栏式布局" class="headerlink" title="三栏式布局"></a>三栏式布局</h3><blockquote>
<p>涉及浮动和清除浮动，主要讲解“圣杯”和“双飞翼”两种解决方法。这两种方法实现的都是三栏布局，两边的盒子宽度固定，中间盒子自适应，它们实现的效果是一样的，差别在于其实现的思想。</p>
</blockquote>
<p><strong>圣杯布局</strong></p>
<blockquote>
<p>圣杯：父盒子包含三个子盒子（左，中，右）</p>
</blockquote>
<ul>
<li>上部和下部各自占领屏幕所有宽度。</li>
<li>上下部之间的部分是一个三栏布局。</li>
<li>三栏布局两侧宽度不变，中间部分自动填充整个区域。</li>
<li>中间部分的高度是三栏中最高的区域的高度。</li>
</ul>
<p>本文会用三种方法来实现圣杯布局，分别是浮动，flexbox以及css grid。</p>
<ol>
<li><strong>浮动实现</strong></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;header&quot;&gt;这里是头部&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;middle&quot;&gt;中间部分&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;left&quot;&gt;左边&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;right&quot;&gt;右边&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;footer&quot;&gt;这里是底部&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.header,.footer&#123;</span><br><span class="line">    height:40px;</span><br><span class="line">    width:100%;</span><br><span class="line">    background:red;</span><br><span class="line">&#125;</span><br><span class="line">.footer&#123;</span><br><span class="line">    clear:both;</span><br><span class="line">&#125;</span><br><span class="line">.container&#123;</span><br><span class="line">    padding-left:200px;</span><br><span class="line">    padding-right:300px;</span><br><span class="line">&#125;</span><br><span class="line">.container div&#123;</span><br><span class="line">    postion:relative;</span><br><span class="line">    float:left;</span><br><span class="line">&#125;</span><br><span class="line">.middle&#123;</span><br><span class="line">    width:100%;</span><br><span class="line">    background:yellow;</span><br><span class="line">&#125;</span><br><span class="line">.left&#123;</span><br><span class="line">    width:200px;</span><br><span class="line">    background:pink;</span><br><span class="line">    margin-left:-100%;</span><br><span class="line">    right:200px;</span><br><span class="line">&#125;</span><br><span class="line">.right&#123;</span><br><span class="line">    width:300px;</span><br><span class="line">    background:aqua;</span><br><span class="line">    margin-right:-300px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>总结</strong></p>
<ul>
<li>中间盒子的宽度设置为 width: 100%; 独占一行；</li>
<li>使用负边距(均是 margin-left)把左右两边的盒子都拉上去和中间盒子同一行；</li>
</ul>
<ol start="2">
<li><strong>flexbox弹性盒子实现</strong></li>
</ol>
<blockquote>
<p>弹性盒子用来实现圣杯布局特别简单。只需要把中间的部分用flex布局即可。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;style&gt;</span><br><span class="line">		div&#123;</span><br><span class="line">			outline: 2px solid;</span><br><span class="line">			margin: 5px;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		&#x2F;* 以下为整个页面的布局 *&#x2F;</span><br><span class="line">		.main&#123;</span><br><span class="line">			display:flex;</span><br><span class="line">			flex-direction: column;</span><br><span class="line"></span><br><span class="line">			height:100%;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		.top, .footer&#123;</span><br><span class="line">			height: 50px;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		&#x2F;* 以下为中间的body布局 *&#x2F;</span><br><span class="line">		.body&#123;</span><br><span class="line">			flex:1;</span><br><span class="line"></span><br><span class="line">			display: flex;	</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		.body-main&#123;</span><br><span class="line">			flex: 1;</span><br><span class="line">			background-color: yellow;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		.body-left, .body-right&#123;</span><br><span class="line">			width: 100px;</span><br><span class="line">		&#125;</span><br><span class="line">	&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;div class&#x3D;&quot;main&quot;&gt;</span><br><span class="line">		&lt;div class&#x3D;&quot;top&quot;&gt;标题栏&lt;&#x2F;div&gt;</span><br><span class="line">		&lt;div class&#x3D;&quot;body&quot;&gt;</span><br><span class="line">			&lt;div class&#x3D;&quot;body-left&quot;&gt;左边导航栏&lt;&#x2F;div&gt;</span><br><span class="line">			&lt;div class&#x3D;&quot;body-main&quot;&gt;主内容，自动伸缩&lt;&#x2F;div&gt;</span><br><span class="line">			&lt;div class&#x3D;&quot;body-right&quot;&gt;右边提示栏&lt;&#x2F;div&gt;</span><br><span class="line">		&lt;&#x2F;div&gt;</span><br><span class="line">		&lt;div class&#x3D;&quot;footer&quot;&gt;页脚栏，使用flex布局&lt;&#x2F;div&gt;</span><br><span class="line">	&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>双飞翼布局</strong></p>
<blockquote>
<p>双飞翼：父盒子包含三个子盒子（左，中，右），中间的子盒子里再加一个子盒子。</p>
</blockquote>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>原型链</title>
    <url>/2020/04/18/17-%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<hr>
<h2 id="常见概念"><a href="#常见概念" class="headerlink" title="常见概念"></a>常见概念</h2><ul>
<li><p>构造函数</p>
</li>
<li><p>构造函数-扩展</p>
</li>
<li><p>原型规则和示例</p>
</li>
<li><p>原型链</p>
</li>
<li><p>instanceof</p>
<a id="more"></a>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2></li>
</ul>
<p>任何一个函数都可以被new，new了之后，就成了构造方法。</p>
<p>如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="comment">//retrun this;   //默认有这一行。new一个构造函数，返回一个对象</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn1 = <span class="keyword">new</span> Foo(<span class="string">'smyhvae'</span>, <span class="number">26</span>);</span><br><span class="line"><span class="keyword">var</span> fn2 = <span class="keyword">new</span> Foo(<span class="string">'vae'</span>,<span class="number">30</span>);    <span class="comment">//new 多个实例对象</span></span><br></pre></td></tr></table></figure>

<p>与普通函数相比，构造函数有以下明显特点：</p>
<ul>
<li><p>用new关键字调用。</p>
</li>
<li><p>不需要用return显式返回值的，默认会返回this，也就是新的实例对象。</p>
</li>
<li><p>建议函数名的首字母大写，与普通函数区分开。</p>
</li>
</ul>
<p>当new之后，this会先变成一个空对象，然后通过<code>this.name = name</code>来赋值。</p>
<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><ol>
<li><code>prototype</code>和<code>__proto__</code>和<code>constructor</code></li>
</ol>
<p>当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象<code>object</code>都有一个私有属性（称之为 <code>__proto__</code>）指向它的构造函数的原型对象（<code>prototype</code> ）。</p>
<p>该原型对象也有一个自己的原型对象( <code>__proto__</code>) ，层层向上直到一个对象的原型对象为<code>null</code>。根据定义，<code>null</code> 没有原型，并作为这个原型链中的最后一个环节。</p>
<p><code>constructor</code>，每个原型都有一个 constructor 属性指向关联的构造函数。实例的构造函数属性（<code>constructor</code>）指向构造函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function doSomething()&#123;&#125;</span><br><span class="line">console.log( doSomething.prototype );</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 和声明函数的方式无关，</span><br><span class="line">&#x2F;&#x2F; JavaScript 中的函数永远有一个默认原型属性。</span><br><span class="line"></span><br><span class="line">var doSomething &#x3D; function()&#123;&#125;;</span><br><span class="line">console.log( doSomething.prototype );</span><br></pre></td></tr></table></figure>
<p>在控制台显示的<code>JavaScript</code>代码块中，我们可以看到<code>doSomething</code>函数的一个默认属性<code>prototype</code>。而这段代码运行之后，控制台应该显示类似如下的结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    constructor: ƒ doSomething(),</span><br><span class="line">    __proto__: &#123;</span><br><span class="line">        constructor: ƒ Object(),</span><br><span class="line">        hasOwnProperty: ƒ hasOwnProperty(),</span><br><span class="line">        isPrototypeOf: ƒ isPrototypeOf(),</span><br><span class="line">        propertyIsEnumerable: ƒ propertyIsEnumerable(),</span><br><span class="line">        toLocaleString: ƒ toLocaleString(),</span><br><span class="line">        toString: ƒ toString(),</span><br><span class="line">        valueOf: ƒ valueOf()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>原型链：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.name &#x3D; &#39;Kevin&#39;;</span><br><span class="line"></span><br><span class="line">var person &#x3D; new Person();</span><br><span class="line"></span><br><span class="line">person.name &#x3D; &#39;Daisy&#39;;</span><br><span class="line">console.log(person.name) &#x2F;&#x2F; Daisy</span><br><span class="line"></span><br><span class="line">delete person.name;</span><br><span class="line">console.log(person.name) &#x2F;&#x2F; Kevin</span><br></pre></td></tr></table></figure>

<p><img src="prototype5.png" alt=""></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>display详解</title>
    <url>/2020/04/18/18-display%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<hr>
<h3 id="opacity-visibility-display-隐藏的区别"><a href="#opacity-visibility-display-隐藏的区别" class="headerlink" title="opacity visibility display 隐藏的区别"></a>opacity visibility display 隐藏的区别</h3><ul>
<li><p>opacity=0，该元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定一些事件，如click事件，那么点击该区域，也能触发点击事件的。</p>
</li>
<li><p>visibility=hidden，该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已经绑定的事件，设置为gone时，不保留控件空间。</p>
</li>
<li><p>display=none，把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素删除掉一样。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>数组简介</title>
    <url>/2020/04/18/18-%E6%95%B0%E7%BB%84%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<hr>
<h2 id="数组简介"><a href="#数组简介" class="headerlink" title="数组简介"></a>数组简介</h2><p>数组（Array）是属于<strong>内置对象</strong>，我们可以在<a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener">MDN</a>网站上查询各种方法。</p>
<a id="more"></a>
<p>数组和普通对象的功能类似，也是用来存储一些值的。不同的是：</p>
<ul>
<li>普通对象是使用字符串作为属性名的，而数组是使用数字来作为<strong>索引</strong>来操作元素。索引：从0开始的整数就是索引。</li>
</ul>
<p>数组的存储性能比普通对象要好。在实际开发中我们经常使用数组来存储一些数据，使用频率非常高。</p>
<p>数组中的元素可以是任意的数据类型，也可以是对象，也可以是函数，也可以是数组。数组的元素中，如果存放的是数组，我们就称这种数组为二维数组。</p>
<p>接下来，我们讲一讲数组的基本操作。</p>
<h2 id="创建数组对象"><a href="#创建数组对象" class="headerlink" title="创建数组对象"></a>创建数组对象</h2><h3 id="方式一：使用数组字面量创建数组"><a href="#方式一：使用数组字面量创建数组" class="headerlink" title="方式一：使用数组字面量创建数组"></a>方式一：使用数组字面量创建数组</h3><p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = []; <span class="comment">// 创建一个空的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; <span class="comment">// 创建带初始值的数组</span></span><br></pre></td></tr></table></figure>

<p>方式一最简单，也用得最多。</p>
<h3 id="方式二：使用构造函数创建数组"><a href="#方式二：使用构造函数创建数组" class="headerlink" title="方式二：使用构造函数创建数组"></a>方式二：使用构造函数创建数组</h3><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var arr &#x3D; new Array(参数);</span><br></pre></td></tr></table></figure>

<p>如果<strong>参数为空</strong>，则表示创建一个空数组；如果参数是<strong>一个数值</strong>时，表示数组的长度；参数位置是<strong>多个数值</strong>时，表示数组中的元素。</p>
<p>来举个例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">// 参数为空</span></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>); <span class="comment">// 参数为一个数值</span></span><br><span class="line"><span class="keyword">var</span> arr4 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>); <span class="comment">// 参数为多个数值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr1);  <span class="comment">// 打印结果：object</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr1 = "</span> + <span class="built_in">JSON</span>.stringify(arr1));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr2 = "</span> + <span class="built_in">JSON</span>.stringify(arr2));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr3 = "</span> + <span class="built_in">JSON</span>.stringify(arr3));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr4 = "</span> + <span class="built_in">JSON</span>.stringify(arr4));</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">object</span><br><span class="line"></span><br><span class="line">arr1 = [<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>]</span><br><span class="line">arr2 = []</span><br><span class="line">arr3 = [<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>]</span><br><span class="line">arr4 = [<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>]</span><br></pre></td></tr></table></figure>

<p>从上方打印结果的第一行里，可以看出，数组的类型其实也是属于<strong>对象</strong>。</p>
<h3 id="数组中的元素的类型"><a href="#数组中的元素的类型" class="headerlink" title="数组中的元素的类型"></a>数组中的元素的类型</h3><p>数组中可以存放<strong>任意类型</strong>的数据，例如字符串、数字、布尔值、对象等。</p>
<p>比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'qianguyihao'</span>, <span class="number">28</span>, <span class="literal">true</span>, &#123;<span class="attr">name</span>: <span class="string">'qianguyihao'</span>&#125;];</span><br></pre></td></tr></table></figure>

<h2 id="数组的基本操作"><a href="#数组的基本操作" class="headerlink" title="数组的基本操作"></a>数组的基本操作</h2><h3 id="数组的索引"><a href="#数组的索引" class="headerlink" title="数组的索引"></a>数组的索引</h3><p><strong>索引</strong> (下标) ：用来访问数组元素的序号，代表的是数组中的元素在数组中的位置（下标从 0 开始算起）。</p>
<p>数组可以通过索引来访问、设置、修改对应的数组元素。我们继续看看。</p>
<h3 id="向数组中添加元素"><a href="#向数组中添加元素" class="headerlink" title="向数组中添加元素"></a>向数组中添加元素</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">数组[索引] = 值</span><br></pre></td></tr></table></figure>

<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向数组中添加元素</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">20</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">30</span>;</span><br><span class="line">arr[<span class="number">3</span>] = <span class="number">40</span>;</span><br><span class="line">arr[<span class="number">5</span>] = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(arr));</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[10,20,30,40,null,50]</span><br></pre></td></tr></table></figure>

<h3 id="获取数组中的元素"><a href="#获取数组中的元素" class="headerlink" title="获取数组中的元素"></a>获取数组中的元素</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">数组[索引]</span><br></pre></td></tr></table></figure>

<p>如果读取不存在的索引（比如元素没那么多），系统不会报错，而是返回undefined。</p>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]); <span class="comment">// 打印结果：21</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">5</span>]); <span class="comment">// 打印结果：undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度"></a>获取数组的长度</h3><p>可以使用<code>length</code>属性来获取数组的长度(即“元素的个数”)。</p>
<p>数组的长度是元素个数，不要跟索引号混淆。</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">数组的长度 = 数组名.length；</span><br></pre></td></tr></table></figure>

<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.length); <span class="comment">// 打印结果：3</span></span><br></pre></td></tr></table></figure>

<p>补充：</p>
<p>对于连续的数组，使用length可以获取到数组的长度（元素的个数）；对于非连续的数组，使用length会获取到数组的最大的索引+1。因此，尽量不要创建非连续的数组。</p>
<h3 id="修改数组的长度（修改length）"><a href="#修改数组的长度（修改length）" class="headerlink" title="修改数组的长度（修改length）"></a>修改数组的长度（修改length）</h3><ul>
<li><p>如果修改的length大于原长度，则多出部分会空出来，置为 null。</p>
</li>
<li><p>如果修改的length小于原长度，则多出的元素会被删除，数组将从后面删除元素。</p>
</li>
<li><p>（特例：伪数组arguments的长度可以修改，但是不能修改里面的元素，后面单独讲。）</p>
</li>
</ul>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改数组 arr1 的 length</span></span><br><span class="line">arr1.length = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(arr1));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改数组 arr2 的 length</span></span><br><span class="line">arr2.length = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(arr2));</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">11</span>]</span><br><span class="line"></span><br><span class="line">[<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="literal">null</span>,<span class="literal">null</span>]</span><br></pre></td></tr></table></figure>

<h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><p><strong>遍历</strong>: 就是把数组中的每个元素从头到尾都访问一次。</p>
<p>最简单的做法是通过 for 循环，遍历数组中的每一项。举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]); <span class="comment">// 打印出数组中的每一项</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下一篇文章，会学习数组的各种方法，到时候，会有更多的做法去遍历数组。</p>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="例1：翻转数组"><a href="#例1：翻转数组" class="headerlink" title="例1：翻转数组"></a>例1：翻转数组</h3><p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]; <span class="comment">// 原始数组</span></span><br><span class="line"><span class="keyword">var</span> newArr = []; <span class="comment">// 翻转后的数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    newArr[i] = arr[arr.length - i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(newArr));</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[50,40,30,20,10]</span><br></pre></td></tr></table></figure>

<h3 id="例2：冒泡排序"><a href="#例2：冒泡排序" class="headerlink" title="例2：冒泡排序"></a>例2：冒泡排序</h3><p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">20</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">30</span>, <span class="number">40</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">            arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(arr));</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[10,20,30,40,50]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise对象</title>
    <url>/2020/04/18/17-Promise%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要内容</p>
<ul>
<li>Promise 的含义</li>
<li>基本用法</li>
<li>Promise.prototype.then()</li>
<li>Promise.prototype.catch()</li>
<li>Promise.prototype.finally()</li>
<li>Promise.all()</li>
<li>Promise.race()</li>
<li>Promise.allSettled()</li>
<li>Promise.any()</li>
<li>Promise.resolve()</li>
<li>Promise.reject()</li>
<li>应用</li>
<li>Promise.try()<a id="more"></a>
<h2 id="Promise-的含义"><a href="#Promise-的含义" class="headerlink" title="Promise 的含义"></a>Promise 的含义</h2></li>
</ul>
<p>Promise 是异步编程的一种解决方案，比传统的解决方案——<strong>回调函数和事件</strong>——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。</p>
<p>所谓Promise，简单说就是一个容器，里面<strong>保存着某个未来才会结束的事件（通常是一个异步操作）的结果</strong>。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p>
<p><strong>Promise对象有以下两个特点</strong>。</p>
<p>（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：<strong>pending（进行中）</strong>、<strong>fulfilled（已成功）</strong>和<strong>rejected（已失败）</strong>。<strong>只有异步操作的结果，可以决定当前是哪一种状态</strong>，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p>
<p>（2）<strong>一旦状态改变，就不会再变</strong>，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p>
<blockquote>
<p>注意，为了行文方便，本章后面的resolved统一只指fulfilled状态，不包含rejected状态。</p>
</blockquote>
<p>有了Promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供统一的接口，使得控制异步操作更加容易。</p>
<p>Promise也有一些缺点。首先，无法取消Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。第三，当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>ES6 规定，Promise对象是一个构造函数，用来生成Promise实例。</p>
<p>下面代码创造了一个Promise实例。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const promise &#x3D; new Promise(function(resolve, reject) &#123;</span><br><span class="line">  &#x2F;&#x2F; ... some code</span><br><span class="line"></span><br><span class="line">  if (&#x2F;* 异步操作成功 *&#x2F;)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。</p>
<p><strong>resolve函数</strong>的作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在<strong>异步操作成功时调用</strong>，并将异步操作的结果，作为参数传递出去；<strong>reject函数</strong>的作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在<strong>异步操作失败时调用</strong>，并将异步操作报出的错误，作为参数传递出去。</p>
<p>Promise实例生成以后，可以用<code>then</code>方法分别指定resolved状态和rejected状态的回调函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">promise.then(function(value) &#123;</span><br><span class="line">  &#x2F;&#x2F; success</span><br><span class="line">&#125;, function(error) &#123;</span><br><span class="line">  &#x2F;&#x2F; failure</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>then</code>方法可以接受<strong>两个回调函数作为参数</strong>。第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。</p>
<p>Promise 新建后就会立即执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let promise &#x3D; new Promise(function(resolve, reject) &#123;</span><br><span class="line">  console.log(&#39;Promise&#39;);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(function() &#123;</span><br><span class="line">  console.log(&#39;resolved.&#39;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(&#39;Hi!&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Promise</span><br><span class="line">&#x2F;&#x2F; Hi!</span><br><span class="line">&#x2F;&#x2F; resolved</span><br></pre></td></tr></table></figure>

<p>上面代码中，Promise 新建后立即执行，所以首先输出的是Promise。然后，then方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行，所以resolved最后输出。</p>
<p>调用<code>resolve</code>或<code>reject</code>并不会终结 Promise 的参数函数的执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">  resolve(1);</span><br><span class="line">  console.log(2);</span><br><span class="line">&#125;).then(r &#x3D;&gt; &#123;</span><br><span class="line">  console.log(r);</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 2</span><br><span class="line">&#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure>
<p>上面代码中，调用<code>resolve(1)</code>以后，后面的<code>console.log(2)</code>还是会执行，并且会首先打印出来。这是因为立即 <code>resolved</code> 的 <code>Promise</code> 是在本轮事件循环的末尾执行，总是晚于本轮循环的同步任务。</p>
<p>一般来说，调用<code>resolve</code>或<code>reject</code>以后，Promise 的使命就完成了，后继操作应该放到<code>then</code>方法里面，而不应该直接写在<code>resolve</code>或<code>reject</code>的后面。所以，最好在它们前面加上<code>return</code>语句，这样就不会有意外。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">  return resolve(1);</span><br><span class="line">  &#x2F;&#x2F; 后面的语句不会执行</span><br><span class="line">  console.log(2);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h2><p>Promise 实例具有<code>then</code>方法，也就是说，<code>then</code>方法是定义在原型对象<code>Promise prototype</code>上的。它的作用是为<code>Promise</code> 实例添加状态改变时的回调函数。前面说过，<code>then</code>方法的第一个参数是<code>resolved</code>状态的回调函数，第二个参数（可选）是<code>rejected</code>状态的回调函数。</p>
<p><strong>then方法返回的是一个新的Promise实例</strong>（注意，不是原来那个Promise实例）。因此可以采用<strong>链式写法</strong>，即<code>then</code>方法后面再调用另一个<code>then</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getJSON(&quot;&#x2F;posts.json&quot;).then(function(json) &#123;</span><br><span class="line">  return json.post;</span><br><span class="line">&#125;).then(function(post) &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面的代码使用then方法，依次指定了两个回调函数。第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。</p>
<p>采用链式的then，可以指定一组按照次序调用的回调函数。这时，前一个回调函数，有可能返回的还是一个Promise对象（即有异步操作），这时后一个回调函数，就会等待该Promise对象的状态发生变化，才会被调用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getJSON(&quot;&#x2F;post&#x2F;1.json&quot;).then(function(post) &#123;</span><br><span class="line">  return getJSON(post.commentURL);</span><br><span class="line">&#125;).then(function (comments) &#123;</span><br><span class="line">  console.log(&quot;resolved: &quot;, comments);</span><br><span class="line">&#125;, function (err)&#123;</span><br><span class="line">  console.log(&quot;rejected: &quot;, err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，第一个then方法指定的回调函数，<strong>返回的是另一个Promise对象</strong>。这时，第二个then方法指定的回调函数，就会等待这个新的Promise对象状态发生变化。如果变为resolved，就调用第一个回调函数，如果状态变为rejected，就调用第二个回调函数。</p>
<h2 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h2><p><code>Promise.prototype.catch</code>方法是<code>.then(null, rejection)</code>或<code>.then(undefined, rejection)</code>的别名，用于<strong>指定发生错误时的回调函数</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getJSON(&#39;&#x2F;posts.json&#39;).then(function(posts) &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;).catch(function(error) &#123;</span><br><span class="line">  &#x2F;&#x2F; 处理 getJSON 和 前一个回调函数运行时发生的错误</span><br><span class="line">  console.log(&#39;发生错误！&#39;, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，getJSON方法返回一个 Promise 对象，如果该对象状态变为resolved，则会调用then方法指定的回调函数；如果异步操作抛出错误，状态就会变为rejected，就会调用catch方法指定的回调函数，处理这个错误。另外，then方法指定的回调函数，如果运行中抛出错误，也会被catch方法捕获。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const promise &#x3D; new Promise(function(resolve, reject) &#123;</span><br><span class="line">  throw new Error(&#39;test&#39;);</span><br><span class="line">&#125;);</span><br><span class="line">promise.catch(function(error) &#123;</span><br><span class="line">  console.log(error);</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; Error: test</span><br></pre></td></tr></table></figure>

<p>上面代码中，promise抛出一个错误，就被catch方法指定的回调函数捕获。</p>
<p>reject方法的作用，等同于抛出错误。</p>
<p>如果 Promise 状态已经变成resolved，再抛出错误是无效的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const promise &#x3D; new Promise(function(resolve, reject) &#123;</span><br><span class="line">  resolve(&#39;ok&#39;);</span><br><span class="line">  throw new Error(&#39;test&#39;);</span><br><span class="line">&#125;);</span><br><span class="line">promise</span><br><span class="line">  .then(function(value) &#123; console.log(value) &#125;)</span><br><span class="line">  .catch(function(error) &#123; console.log(error) &#125;);</span><br><span class="line">&#x2F;&#x2F; ok</span><br></pre></td></tr></table></figure>

<p>上面代码中，Promise 在resolve语句后面，再抛出错误，不会被捕获，等于没有抛出。因为 Promise 的状态一旦改变，就永久保持该状态，不会再变了。</p>
<p>Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，<strong>错误总是会被下一个catch语句捕获</strong>。</p>
<p>一般来说，不要在then方法里面定义 Reject 状态的回调函数（即then的第二个参数），总是使用catch方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const promise &#x3D; new Promise(function (resolve, reject) &#123;</span><br><span class="line">  resolve(&#39;ok&#39;);</span><br><span class="line">  setTimeout(function () &#123; throw new Error(&#39;test&#39;) &#125;, 0)</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(function (value) &#123; console.log(value) &#125;);</span><br><span class="line">&#x2F;&#x2F; ok</span><br><span class="line">&#x2F;&#x2F; Uncaught Error: test</span><br></pre></td></tr></table></figure>

<p>上面代码中，Promise 指定在下一轮“事件循环”再抛出错误。到了那个时候，Promise 的运行已经结束了，所以这个错误是在 Promise 函数体外抛出的，会冒泡到最外层，成了未捕获的错误。</p>
<h2 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally()"></a>Promise.prototype.finally()</h2><p>finally方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">promise</span><br><span class="line">.then(result &#x3D;&gt; &#123;···&#125;)</span><br><span class="line">.catch(error &#x3D;&gt; &#123;···&#125;)</span><br><span class="line">.finally(() &#x3D;&gt; &#123;···&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，不管promise最后的状态，在执行完then或catch指定的回调函数以后，<strong>都会执行finally方法指定的回调函数</strong>。</p>
<p><code>finally</code>方法里面的操作，应该是与状态无关的，不依赖于 <code>Promise</code> 的执行结果。</p>
<h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h2><p><strong><code>Promise.all()</code>方法用于将多个 Promise 实例，包装成一个新的 <code>Promise</code> 实例</strong>。</p>
<p><code>const p = Promise.all([p1, p2, p3]);</code></p>
<p>上面代码中，<code>Promise.all()</code>方法接受一个数组作为参数，p1、p2、p3都是 <code>Promise</code> 实例，如果不是，就会先调用下面讲到的<code>Promise.resolve</code>方法，将参数转为 Promise 实例，再进一步处理。另外，Promise.all()方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。</p>
<p><strong>p的状态由p1、p2、p3决定，分成两种情况</strong>。</p>
<ul>
<li><p>只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</p>
</li>
<li><p>只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</p>
</li>
</ul>
<p>下面是一个具体的例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 生成一个Promise对象的数组</span><br><span class="line">const promises &#x3D; [2, 3, 5, 7, 11, 13].map(function (id) &#123;</span><br><span class="line">  return getJSON(&#39;&#x2F;post&#x2F;&#39; + id + &quot;.json&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Promise.all(promises).then(function (posts) &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;).catch(function(reason)&#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，promises是包含 6 个 <code>Promise</code> 实例的数组，只有这 6 个实例的状态都变成<code>fulfilled</code>，或者其中有一个变为<code>rejected</code>，才会调用<code>Promise.all</code>方法后面的回调函数。</p>
<h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h2><p><code>Promise.race()</code>方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p>
<p><code>const p = Promise.race([p1, p2, p3]);</code></p>
<p>上面代码中，<strong>只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数</strong>。</p>
<p><code>Promise.race()</code>方法的参数与<code>Promise.all()</code>方法一样，如果不是 Promise 实例，就会先调用下面讲到的<code>Promise.resolve()</code>方法，将参数转为 Promise 实例，再进一步处理。</p>
<p>下面是一个例子，如果指定时间内没有获得结果，就将<code>Promise</code>的状态变为<code>reject</code>，否则变为<code>resolve</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const p &#x3D; Promise.race([</span><br><span class="line">  fetch(&#39;&#x2F;resource-that-may-take-a-while&#39;),</span><br><span class="line">  new Promise(function (resolve, reject) &#123;</span><br><span class="line">    setTimeout(() &#x3D;&gt; reject(new Error(&#39;request timeout&#39;)), 5000)</span><br><span class="line">  &#125;)</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">p</span><br><span class="line">.then(console.log)</span><br><span class="line">.catch(console.error);</span><br></pre></td></tr></table></figure>
<p>上面代码中，如果 5 秒之内fetch方法无法返回结果，变量p的状态就会变为rejected，从而触发catch方法指定的回调函数。</p>
<h2 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled()"></a>Promise.allSettled()</h2><p><code>Promise.allSettled()</code>方法接受一组 <code>Promise</code> 实例作为参数，包装成一个新的 <code>Promise</code> 实例。<strong>只有等到所有这些参数实例都返回结果</strong>，不管是<code>fulfilled</code>还是<code>rejected</code>，包装实例才会结束。该方法由 ES2020 引入。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const promises &#x3D; [</span><br><span class="line">  fetch(&#39;&#x2F;api-1&#39;),</span><br><span class="line">  fetch(&#39;&#x2F;api-2&#39;),</span><br><span class="line">  fetch(&#39;&#x2F;api-3&#39;),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">await Promise.allSettled(promises);</span><br><span class="line">removeLoadingIndicator();</span><br></pre></td></tr></table></figure>
<p>上面代码对服务器发出三个请求，等到三个请求都结束，不管请求成功还是失败，加载的滚动图标就会消失。</p>
<p>该方法返回的新的 Promise 实例，一旦结束，状态总是<code>fulfilled</code>，不会变成<code>rejected</code>。状态变成<code>fulfilled</code>后，<code>Promise</code> 的监听函数接收到的参数是一个数组，每个成员对应一个传入<code>Promise.allSettled()</code>的 Promise 实例.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const resolved &#x3D; Promise.resolve(42);</span><br><span class="line">const rejected &#x3D; Promise.reject(-1);</span><br><span class="line"></span><br><span class="line">const allSettledPromise &#x3D; Promise.allSettled([resolved, rejected]);</span><br><span class="line"></span><br><span class="line">allSettledPromise.then(function (results) &#123;</span><br><span class="line">  console.log(results);</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; [</span><br><span class="line">&#x2F;&#x2F;    &#123; status: &#39;fulfilled&#39;, value: 42 &#125;,</span><br><span class="line">&#x2F;&#x2F;    &#123; status: &#39;rejected&#39;, reason: -1 &#125;</span><br><span class="line">&#x2F;&#x2F; ]</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>Promise.allSettled()</code>的返回值<code>allSettledPromise</code>，状态只可能变成<code>fulfilled</code>。它的监听函数接收到的参数是数组<code>results</code>。该数组的每个成员都是一个对象，对应传入<code>Promise.allSettled()</code>的两个 Promise 实例。每个对象都有status属性，该属性的值只可能是字符串<code>fulfilled</code>或字符串<code>rejected</code>。<code>fulfilled</code>时，对象有<code>value</code>属性，<code>rejected</code>时有<code>reason</code>属性，对应两种状态的返回值。</p>
<h2 id="Promise-any"><a href="#Promise-any" class="headerlink" title="Promise.any()"></a>Promise.any()</h2><p><code>Promise.any()</code>方法接受一组 <code>Promise</code> 实例作为参数，包装成一个新的 Promise 实例。只要参数实例有一个变成<code>fulfilled</code>状态，包装实例就会变成<code>fulfilled</code>状态；如果所有参数实例都变成<code>rejected</code>状态，包装实例就会变成<code>rejected</code>状态。该方法目前是一个第三阶段的提案 。</p>
<p><code>Promise.any()</code>跟<code>Promise.race()</code>方法很像，只有一点不同，就是不会因为某个 <code>Promise</code>变成<code>rejected</code>状态而结束。</p>
<h2 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h2><p>有时需要将现有对象转为 Promise 对象，<code>Promise.resolve()</code>方法就起到这个作用。</p>
<p><code>const jsPromise = Promise.resolve($.ajax(&#39;/whatever.json&#39;));</code></p>
<p>上面代码将 <code>jQuery</code> 生成的<code>deferred</code>对象，转为一个新的 <code>Promise</code> 对象。</p>
<h3 id="Promise-resolve方法的参数分成四种情况。"><a href="#Promise-resolve方法的参数分成四种情况。" class="headerlink" title="Promise.resolve方法的参数分成四种情况。"></a>Promise.resolve方法的参数分成四种情况。</h3><ul>
<li>（1）参数是一个 Promise 实例</li>
</ul>
<p>如果参数是 <code>Promise</code> 实例，那么<code>Promise.resolve</code>将不做任何修改、原封不动地返回这个实例。</p>
<ul>
<li>（2）参数是一个thenable对象</li>
</ul>
<p>thenable对象指的是具有then方法的对象，比如下面这个对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let thenable &#x3D; &#123;</span><br><span class="line">  then: function(resolve, reject) &#123;</span><br><span class="line">    resolve(42);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>Promise.resolve</code>方法会将这个对象转为 <code>Promise</code> 对象，然后就立即执行<code>thenable</code>对象的<code>then</code>方法。</p>
<ul>
<li>（3）参数不是具有then方法的对象，或根本就不是对象</li>
</ul>
<p>如果参数是一个原始值，或者是一个不具有then方法的对象，则Promise.resolve方法返回一个新的 Promise 对象，状态为resolved。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const p &#x3D; Promise.resolve(&#39;Hello&#39;);</span><br><span class="line"></span><br><span class="line">p.then(function (s)&#123;</span><br><span class="line">  console.log(s)</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; Hello</span><br></pre></td></tr></table></figure>

<p>上面代码生成一个新的 Promise 对象的实例p。由于字符串Hello不属于异步操作（判断方法是字符串对象不具有 then 方法），返回 Promise 实例的状态从一生成就是resolved，所以回调函数会立即执行。Promise.resolve方法的参数，会同时传给回调函数。</p>
<ul>
<li>（4）不带有任何参数</li>
</ul>
<p>Promise.resolve()方法允许调用时不带参数，直接返回一个resolved状态的 Promise 对象。</p>
<p>所以，如果希望得到一个 Promise 对象，比较方便的方法就是直接调用Promise.resolve()方法。</p>
<p>需要注意的是，<strong>立即resolve()的 Promise 对象，是在本轮“事件循环”（event loop）的结束时执行，而不是在下一轮“事件循环”的开始时</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setTimeout(function () &#123;</span><br><span class="line">  console.log(&#39;three&#39;);</span><br><span class="line">&#125;, 0);</span><br><span class="line"></span><br><span class="line">Promise.resolve().then(function () &#123;</span><br><span class="line">  console.log(&#39;two&#39;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(&#39;one&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; one</span><br><span class="line">&#x2F;&#x2F; two</span><br><span class="line">&#x2F;&#x2F; three</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>setTimeout(fn, 0)</code>在下一轮“事件循环”开始时执行，<code>Promise.resolve()</code>在本轮“事件循环”结束时执行，<code>console.log(&#39;one&#39;)</code>则是立即执行，因此最先输出。</p>
<h2 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h2><p><code>Promise.reject(reason)</code>方法也会返回一个新的 <code>Promise</code> 实例，该实例的状态为<code>rejected</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const p &#x3D; Promise.reject(&#39;出错了&#39;);</span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">const p &#x3D; new Promise((resolve, reject) &#x3D;&gt; reject(&#39;出错了&#39;))</span><br><span class="line"></span><br><span class="line">p.then(null, function (s) &#123;</span><br><span class="line">  console.log(s)</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 出错了</span><br></pre></td></tr></table></figure>

<p>上面代码生成一个 Promise 对象的实例p，状态为rejected，回调函数会立即执行。</p>
<blockquote>
<p>注意，<code>Promise.reject()</code>方法的参数，会原封不动地作为<code>reject</code>的理由，变成后续方法的参数。这一点与<code>Promise.resolve</code>方法不一致。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const thenable &#x3D; &#123;</span><br><span class="line">  then(resolve, reject) &#123;</span><br><span class="line">    reject(&#39;出错了&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Promise.reject(thenable)</span><br><span class="line">.catch(e &#x3D;&gt; &#123;</span><br><span class="line">  console.log(e &#x3D;&#x3D;&#x3D; thenable)</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>Promise.reject</code>方法的参数是一个<code>thenable</code>对象，执行以后，后面<code>catch</code>方法的参数不是<code>reject</code>抛出的“出错了”这个字符串，而是<code>thenable</code>对象。</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="加载图片"><a href="#加载图片" class="headerlink" title="加载图片"></a>加载图片</h3><p>我们可以将图片的加载写成一个<code>Promise</code>，一旦加载完成，<code>Promise</code>的状态就发生变化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const preloadImage &#x3D; function (path) &#123;</span><br><span class="line">  return new Promise(function (resolve, reject) &#123;</span><br><span class="line">    const image &#x3D; new Image();</span><br><span class="line">    image.onload  &#x3D; resolve;</span><br><span class="line">    image.onerror &#x3D; reject;</span><br><span class="line">    image.src &#x3D; path;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Generator-函数与-Promise-的结合"><a href="#Generator-函数与-Promise-的结合" class="headerlink" title="Generator 函数与 Promise 的结合"></a>Generator 函数与 Promise 的结合</h3><p>使用 Generator 函数管理流程，遇到异步操作的时候，通常返回一个Promise对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getFoo () &#123;</span><br><span class="line">  return new Promise(function (resolve, reject)&#123;</span><br><span class="line">    resolve(&#39;foo&#39;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const g &#x3D; function* () &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const foo &#x3D; yield getFoo();</span><br><span class="line">    console.log(foo);</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    console.log(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function run (generator) &#123;</span><br><span class="line">  const it &#x3D; generator();</span><br><span class="line"></span><br><span class="line">  function go(result) &#123;</span><br><span class="line">    if (result.done) return result.value;</span><br><span class="line"></span><br><span class="line">    return result.value.then(function (value) &#123;</span><br><span class="line">      return go(it.next(value));</span><br><span class="line">    &#125;, function (error) &#123;</span><br><span class="line">      return go(it.throw(error));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  go(it.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run(g);</span><br></pre></td></tr></table></figure>

<p>上面代码的 <code>Generator</code> 函数<code>g</code>之中，有一个异步操作<code>getFoo</code>，它返回的就是一个<code>Promise</code>对象。函数run用来处理这个<code>Promise</code>对象，并调用下一个<code>next</code>方法。</p>
<h2 id="Promise-try"><a href="#Promise-try" class="headerlink" title="Promise.try()"></a>Promise.try()</h2><p>实际开发中，经常遇到一种情况：不知道或者不想区分，函数f是同步函数还是异步操作，但是想用 Promise 来处理它。因为这样就可以不管f是否包含异步操作，都用then方法指定下一步流程，用catch方法处理f抛出的错误。一般就会采用下面的写法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面的写法有一个缺点，就是如果f是同步函数，那么它会在**本轮事件循环的末尾执行**。</span><br></pre></td></tr></table></figure>
<p>const f = () =&gt; console.log(‘now’);<br>Promise.resolve().then(f);<br>console.log(‘next’);<br>// next<br>// now</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，函数f是同步的，但是用 Promise 包装了以后，就变成异步执行了。</span><br><span class="line"></span><br><span class="line">那么有没有一种方法，让同步函数同步执行，异步函数异步执行，并且让它们具有统一的 API 呢？回答是可以的，并且还有两种写法。第一种写法是用async函数来写。</span><br></pre></td></tr></table></figure>
<p>const f = () =&gt; console.log(‘now’);<br>(async () =&gt; f())();<br>console.log(‘next’);<br>// now<br>// next</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">上面代码中，第二行是一个立即执行的匿名函数，会立即执行里面的async函数，因此如果f是同步的，就会得到同步的结果；如果f是异步的，就可以用then指定下一步，就像下面的写法。</span><br></pre></td></tr></table></figure>
<p>(async () =&gt; f())()<br>.then(…)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">需要注意的是，async () &#x3D;&gt; f()会吃掉f()抛出的错误。所以，如果想捕获错误，要使用promise.catch方法。</span><br></pre></td></tr></table></figure>
<p>(async () =&gt; f())()<br>.then(…)<br>.catch(…)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">第二种写法是使用new Promise()。</span><br></pre></td></tr></table></figure>
<p>const f = () =&gt; console.log(‘now’);<br>(<br>  () =&gt; new Promise(<br>    resolve =&gt; resolve(f())<br>  )<br>)();<br>console.log(‘next’);<br>// now<br>// next</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码也是使用立即执行的匿名函数，执行new Promise()。这种情况下，同步函数也是同步执行的。</span><br><span class="line"></span><br><span class="line">鉴于这是一个很常见的需求，所以现在有一个提案，提供&#96;Promise.try&#96;方法替代上面的写法。</span><br></pre></td></tr></table></figure>
<p>const f = () =&gt; console.log(‘now’);<br>Promise.try(f);<br>console.log(‘next’);<br>// now<br>// next</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">事实上，&#96;Promise.try&#96;存在已久，Promise 库Bluebird、Q和when，早就提供了这个方法。</span><br><span class="line"></span><br><span class="line">由于&#96;Promise.try&#96;为所有操作提供了统一的处理机制，所以如果想用then方法管理流程，最好都用&#96;Promise.try&#96;包装一下。这样有许多好处，其中一点就是可以更好地管理异常。</span><br></pre></td></tr></table></figure>
<p>function getUsername(userId) {<br>  return database.users.get({id: userId})<br>  .then(function(user) {<br>    return user.name;<br>  });<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，&#96;database.users.get()&#96;返回一个 &#96;Promise&#96; 对象，如果抛出异步错误，可以用&#96;catch&#96;方法捕获，就像下面这样写。</span><br></pre></td></tr></table></figure>
<p>database.users.get({id: userId})<br>.then(…)<br>.catch(…)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">但是&#96;database.users.get()&#96;可能还会抛出同步错误（比如数据库连接错误，具体要看实现方法），这时你就不得不用&#96;try...catch&#96;去捕获。</span><br></pre></td></tr></table></figure>
<p>try {<br>  database.users.get({id: userId})<br>  .then(…)<br>  .catch(…)<br>} catch (e) {<br>  // …<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">上面这样的写法就很笨拙了，这时就可以统一用promise.catch()捕获所有同步和异步的错误。</span><br></pre></td></tr></table></figure>
<p>Promise.try(() =&gt; database.users.get({id: userId}))<br>  .then(…)<br>  .catch(…)</p>
<p> ```<br>事实上，<code>Promise.try</code>就是模拟<code>try</code>代码块，就像<code>promise.catch</code>模拟的是<code>catch</code>代码块。</p>
]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>Generator函数</title>
    <url>/2020/04/18/19-Generator%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li>简介</li>
<li>next 方法的参数</li>
<li>for…of 循环</li>
<li>Generator.prototype.throw()</li>
<li>Generator.prototype.return()</li>
<li>next()、throw()、return() 的共同点</li>
<li>yield* 表达式</li>
<li>作为对象属性的 Generator 函数</li>
<li>Generator 函数的this</li>
<li>含义</li>
<li>应用<a id="more"></a>

</li>
</ul>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><code>Generator 函数</code>是 ES6 提供的一种<strong>异步编程解决方案</strong>，语法行为与传统函数完全不同。</p>
<p><code>Generator</code>函数有多种理解角度。语法上，首先可以把它理解成，<code>Generator</code> 函数是一个<strong>状态机，封装了多个内部状态</strong>。</p>
<p><strong>执行 Generator 函数会返回一个遍历器对象</strong>，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。</p>
<p>形式上，Generator 函数是一个普通函数，但是有两个特征。</p>
<ul>
<li>一是，<code>function</code>关键字与函数名之间有一个<strong>星号</strong>；</li>
<li>二是，<strong>函数体内部使用yield表达式，定义不同的内部状态</strong>（yield在英语里的意思就是“产出”）。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* helloWorldGenerator() &#123;</span><br><span class="line">  yield &#39;hello&#39;;</span><br><span class="line">  yield &#39;world&#39;;</span><br><span class="line">  return &#39;ending&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var hw &#x3D; helloWorldGenerator();</span><br></pre></td></tr></table></figure>

<p>上面代码定义了一个 Generator 函数<code>helloWorldGenerator</code>，它内部有两个<code>yield</code>表达式（hello和world），即<em>该函数有三个状态：hello，world 和 return 语句（结束执行）</em>。</p>
<p>然后，Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。<font style="color: blue; font-weight: bold">不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，也就是上一章介绍的遍历器对象（Iterator Object）。</font></p>
<p>下一步，必须调用遍历器对象的<code>next</code>方法，使得指针移向下一个状态。也就是说，每次调用<code>next</code>方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个<strong>yield表达式（或return语句）为止</strong>。换言之，<strong>Generator 函数是分段执行的，yield表达式是暂停执行的标记，而next方法可以恢复执行</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hw.next()</span><br><span class="line">&#x2F;&#x2F; &#123; value: &#39;hello&#39;, done: false &#125;</span><br><span class="line"></span><br><span class="line">hw.next()</span><br><span class="line">&#x2F;&#x2F; &#123; value: &#39;world&#39;, done: false &#125;</span><br><span class="line"></span><br><span class="line">hw.next()</span><br><span class="line">&#x2F;&#x2F; &#123; value: &#39;ending&#39;, done: true &#125;</span><br><span class="line"></span><br><span class="line">hw.next()</span><br><span class="line">&#x2F;&#x2F; &#123; value: undefined, done: true &#125;</span><br></pre></td></tr></table></figure>

<p>上面代码一共调用了四次next方法。</p>
<blockquote>
<p>第一次调用，Generator 函数开始执行，直到遇到第一个<code>yield</code>表达式为止。<code>next</code>方法返回一个对象，它的<code>value</code>属性就是当前<code>yield</code>表达式的值<code>hello</code>，<code>done</code>属性的值<code>false</code>，表示遍历还没有结束。</p>
</blockquote>
<blockquote>
<p>第二次调用，Generator 函数从上次<code>yield</code>表达式停下的地方，一直执行到下一个<code>yield</code>表达式。<code>next</code>方法返回的对象的<code>value</code>属性就是当前<code>yield</code>表达式的值world，<code>done</code>属性的值false，表示遍历还没有结束。</p>
</blockquote>
<blockquote>
<p>第三次调用，Generator 函数从上次<code>yield</code>表达式停下的地方，一直执行到<code>return</code>语句（如果没有<code>return</code>语句，就执行到函数结束）。<code>next</code>方法返回的对象的<code>value</code>属性，就是紧跟在<code>return</code>语句后面的表达式的值（如果没有<code>return</code>语句，则<code>value</code>属性的值为<code>undefined</code>），<code>done</code>属性的值true，表示遍历已经结束。</p>
</blockquote>
<blockquote>
<p>第四次调用，此时 Generator 函数已经运行完毕，<code>next</code>方法返回对象的<code>value</code>属性为<code>undefined</code>，<code>done</code>属性为true。以后再调用<code>next</code>方法，返回的都是这个值。</p>
</blockquote>
<p>总结一下，调用 Generator 函数，返回一个遍历器对象，代表 Generator 函数的内部指针。以后，每次调用遍历器对象的<code>next</code>方法，就会返回一个有着<code>value和done</code>两个属性的对象。<code>value</code>属性表示当前的内部状态的值，是<code>yield</code>表达式后面那个表达式的值；<code>done</code>属性是一个布尔值，表示是否遍历结束。</p>
<p>ES6 没有规定，function关键字与函数名之间的星号，写在哪个位置。这导致下面的写法都能通过。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function * foo(x, y) &#123; ··· &#125;</span><br><span class="line">function *foo(x, y) &#123; ··· &#125;</span><br><span class="line">function* foo(x, y) &#123; ··· &#125;</span><br><span class="line">function*foo(x, y) &#123; ··· &#125;</span><br></pre></td></tr></table></figure>

<p>由于 Generator 函数仍然是普通函数，所以一般的写法是上面的第三种，即星号紧跟在<code>function</code>关键字后面。</p>
<h3 id="yield-表达式"><a href="#yield-表达式" class="headerlink" title="yield 表达式"></a>yield 表达式</h3><p>由于 Generator 函数返回的遍历器对象，只有调用<code>next</code>方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数。<strong>yield表达式就是暂停标志</strong>。</p>
<h4 id="遍历器对象的next方法的运行逻辑如下。"><a href="#遍历器对象的next方法的运行逻辑如下。" class="headerlink" title="遍历器对象的next方法的运行逻辑如下。"></a>遍历器对象的next方法的运行逻辑如下。</h4><ul>
<li><p>遇到<code>yield</code>表达式，就暂停执行后面的操作，并将紧跟在<code>yield</code>后面的那个表达式的值，作为返回的对象的<code>value</code>属性值。</p>
</li>
<li><p>下一次调用<code>next</code>方法时，再继续往下执行，直到遇到下一个<code>yield</code>表达式。</p>
</li>
<li><p>如果没有再遇到新的<code>yield</code>表达式，就一直运行到函数结束，直到<code>return</code>语句为止，并将<code>return</code>语句后面的表达式的值，作为返回的对象的<code>value</code>属性值。</p>
</li>
<li><p>如果该函数没有<code>return</code>语句，则返回的对象的<code>value</code>属性值为<code>undefined</code>。</p>
</li>
</ul>
<p>需要注意的是，yield表达式后面的表达式，只有当调用<code>next</code>方法、内部指针指向该语句时才会执行，因此等于为 JavaScript 提供了手动的“惰性求值”（Lazy Evaluation）的语法功能。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* gen() &#123;</span><br><span class="line">  yield  123 + 456;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>yield</code>后面的表达式123 + 456，不会立即求值，只会在next方法将指针移到这一句时，才会求值。</p>
<p>yield表达式与return语句既有相似之处，也有区别。相似之处在于，都能返回紧跟在语句后面的那个表达式的值。区别在于每次遇到<code>yield</code>，函数暂停执行，下一次再从该位置继续向后执行，而<code>return</code>语句不具备位置记忆的功能。一个函数里面，只能执行一次（或者说一个）<code>return</code>语句，但是可以执行多次（或者说多个）<code>yield</code>表达式。正常函数只能返回一个值，因为只能执行一次<code>return</code>；Generator 函数可以返回一系列的值，因为可以有任意多个<code>yield</code>。从另一个角度看，也可以说 <code>Generator</code> 生成了一系列的值，这也就是它的名称的来历（英语中，<code>generator</code> 这个词是“生成器”的意思）。</p>
<p>Generator 函数可以不用<code>yield</code>表达式，这时就变成了一个单纯的暂缓执行函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* f() &#123;</span><br><span class="line">  console.log(&#39;执行了！&#39;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var generator &#x3D; f();</span><br><span class="line"></span><br><span class="line">setTimeout(function () &#123;</span><br><span class="line">  generator.next()</span><br><span class="line">&#125;, 2000);</span><br></pre></td></tr></table></figure>

<p>上面代码中，函数f如果是普通函数，在为变量generator赋值时就会执行。但是，函数f是一个 Generator 函数，就变成只有调用next方法时，函数f才会执行。</p>
<p>另外需要注意，<font style="color: blue; font-weight: bold">yield表达式只能用在 Generator 函数</font>里面，用在其他地方都会报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function ()&#123;</span><br><span class="line">  yield 1;</span><br><span class="line">&#125;)()</span><br><span class="line">&#x2F;&#x2F; SyntaxError: Unexpected number</span><br></pre></td></tr></table></figure>
<p>上面代码在一个普通函数中使用yield表达式，结果产生一个句法错误。</p>
<p>下面是另外一个例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var arr &#x3D; [1, [[2, 3], 4], [5, 6]];</span><br><span class="line"></span><br><span class="line">var flat &#x3D; function* (a) &#123;</span><br><span class="line">  a.forEach(function (item) &#123;</span><br><span class="line">    if (typeof item !&#x3D;&#x3D; &#39;number&#39;) &#123;</span><br><span class="line">      yield* flat(item);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      yield item;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">for (var f of flat(arr))&#123;</span><br><span class="line">  console.log(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码也会产生句法错误，因为<strong>forEach方法的参数是一个普通函数</strong>，但是在里面使用了yield表达式（这个函数里面还使用了yield*表达式，详细介绍见后文）。一种修改方法是改用for循环。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var arr &#x3D; [1, [[2, 3], 4], [5, 6]];</span><br><span class="line"></span><br><span class="line">var flat &#x3D; function* (a) &#123;</span><br><span class="line">  var length &#x3D; a.length;</span><br><span class="line">  for (var i &#x3D; 0; i &lt; length; i++) &#123;</span><br><span class="line">    var item &#x3D; a[i];</span><br><span class="line">    if (typeof item !&#x3D;&#x3D; &#39;number&#39;) &#123;</span><br><span class="line">      yield* flat(item);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      yield item;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">for (var f of flat(arr)) &#123;</span><br><span class="line">  console.log(f);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 1, 2, 3, 4, 5, 6</span><br></pre></td></tr></table></figure>

<p>另外，yield表达式如果用在另一个表达式之中，必须放在圆括号里面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* demo() &#123;</span><br><span class="line">  console.log(&#39;Hello&#39; + yield); &#x2F;&#x2F; SyntaxError</span><br><span class="line">  console.log(&#39;Hello&#39; + yield 123); &#x2F;&#x2F; SyntaxError</span><br><span class="line"></span><br><span class="line">  console.log(&#39;Hello&#39; + (yield)); &#x2F;&#x2F; OK</span><br><span class="line">  console.log(&#39;Hello&#39; + (yield 123)); &#x2F;&#x2F; OK</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>yield表达式用作函数参数或放在赋值表达式的右边，可以不加括号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* demo() &#123;</span><br><span class="line">  foo(yield &#39;a&#39;, yield &#39;b&#39;); &#x2F;&#x2F; OK</span><br><span class="line">  let input &#x3D; yield; &#x2F;&#x2F; OK</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="与-Iterator-接口的关系"><a href="#与-Iterator-接口的关系" class="headerlink" title="与 Iterator 接口的关系"></a>与 Iterator 接口的关系</h3><p>上一章说过，任意一个对象的<code>Symbol.iterator</code>方法，等于该对象的遍历器生成函数，调用该函数会返回该对象的一个遍历器对象。</p>
<p>由于 <strong>Generator 函数就是遍历器生成函数</strong>，因此可以把 Generator 赋值给对象的<code>Symbol.iterator</code>属性，从而使得该对象具有 <code>Iterator</code> 接口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var myIterable &#x3D; &#123;&#125;;</span><br><span class="line">myIterable[Symbol.iterator] &#x3D; function* () &#123;</span><br><span class="line">  yield 1;</span><br><span class="line">  yield 2;</span><br><span class="line">  yield 3;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[...myIterable] &#x2F;&#x2F; [1, 2, 3]</span><br></pre></td></tr></table></figure>

<p>上面代码中，Generator 函数赋值给<code>Symbol.iterator</code>属性，从而使得myIterable对象具有了 Iterator 接口，可以被<code>...</code>运算符遍历了。</p>
<p>Generator 函数执行后，返回一个遍历器对象。该对象本身也具有<code>Symbol.iterator</code>属性，执行后返回自身。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* gen()&#123;</span><br><span class="line">  &#x2F;&#x2F; some code</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var g &#x3D; gen();</span><br><span class="line"></span><br><span class="line">g[Symbol.iterator]() &#x3D;&#x3D;&#x3D; g</span><br><span class="line">&#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>上面代码中，gen是一个 Generator 函数，调用它会生成一个遍历器对象g。它的<code>Symbol.iterator</code>属性，也是一个遍历器对象生成函数，执行后返回它自己。</p>
<h2 id="next-方法的参数"><a href="#next-方法的参数" class="headerlink" title="next 方法的参数"></a>next 方法的参数</h2><p><strong><code>yield</code>表达式本身没有返回值，或者说总是返回<code>undefined</code>。<code>next</code>方法可以带一个参数，该参数就会被当作上一个<code>yield</code>表达式的返回值。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* f() &#123;</span><br><span class="line">  for(var i &#x3D; 0; true; i++) &#123;</span><br><span class="line">    var reset &#x3D; yield i;</span><br><span class="line">    if(reset) &#123; i &#x3D; -1; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var g &#x3D; f();</span><br><span class="line"></span><br><span class="line">g.next() &#x2F;&#x2F; &#123; value: 0, done: false &#125;</span><br><span class="line">g.next() &#x2F;&#x2F; &#123; value: 1, done: false &#125;</span><br><span class="line">g.next(true) &#x2F;&#x2F; &#123; value: 0, done: false &#125;</span><br></pre></td></tr></table></figure>

<p>上面代码先定义了一个可以无限运行的 Generator 函数f，如果<code>next</code>方法没有参数，每次运行到<code>yield</code>表达式，变量<code>reset</code>的值总是<code>undefined</code>。当<code>next</code>方法带一个参数<code>true</code>时，变量<code>reset</code>就被重置为这个参数（即true），因此i会等于-1，下一轮循环就会从-1开始递增。</p>
<p>这个功能有很重要的语法意义。<strong>Generator 函数从暂停状态到恢复运行，它的上下文状态（context）是不变的</strong>。通过<code>next</code>方法的参数，就有办法在 Generator 函数开始运行之后，继续向函数体内部注入值。也就是说，可以在 Generator 函数运行的不同阶段，从外部向内部注入不同的值，从而调整函数行为。</p>
<p>再看一个例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* foo(x) &#123;</span><br><span class="line">  var y &#x3D; 2 * (yield (x + 1));</span><br><span class="line">  var z &#x3D; yield (y &#x2F; 3);</span><br><span class="line">  return (x + y + z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var a &#x3D; foo(5);</span><br><span class="line">a.next() &#x2F;&#x2F; Object&#123;value:6, done:false&#125;</span><br><span class="line">a.next() &#x2F;&#x2F; Object&#123;value:NaN, done:false&#125;</span><br><span class="line">a.next() &#x2F;&#x2F; Object&#123;value:NaN, done:true&#125;</span><br><span class="line"></span><br><span class="line">var b &#x3D; foo(5);</span><br><span class="line">b.next() &#x2F;&#x2F; &#123; value:6, done:false &#125;</span><br><span class="line">b.next(12) &#x2F;&#x2F; &#123; value:8, done:false &#125;</span><br><span class="line">b.next(13) &#x2F;&#x2F; &#123; value:42, done:true &#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，第二次运行<code>next</code>方法的时候不带参数，导致 y 的值等于<code>2 * undefined</code>（即NaN），除以 3 以后还是NaN，因此返回对象的value属性也等于NaN。第三次运行<code>Next</code>方法的时候不带参数，所以z等于undefined，返回对象的value属性等于5 + NaN + undefined，即NaN。</p>
<p>如果向<code>next</code>方法提供参数，返回结果就完全不一样了。上面代码第一次调用b的<code>next</code>方法时，返回<code>x+1的</code>值6；第二次调用<code>next</code>方法，将上一次<code>yield</code>表达式的值设为12，因此y等于24，返回<code>y / 3</code>的值8；第三次调用<code>next</code>方法，将上一次yield表达式的值设为13，因此z等于13，这时x等于5，y等于24，所以<code>return</code>语句的值等于42。</p>
<blockquote>
<p>注意，由于next方法的参数表示上一个yield表达式的返回值，所以在第一次使用next方法时，传递参数是无效的。V8 引擎直接忽略第一次使用next方法时的参数，只有从第二次使用next方法开始，参数才是有效的。从语义上讲，<strong>第一个next方法用来启动遍历器对象，所以不用带有参数。</strong></p>
</blockquote>
<p>再看一个通过<code>next</code>方法的参数，向 Generator 函数内部输入值的例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* dataConsumer() &#123;</span><br><span class="line">  console.log(&#39;Started&#39;);</span><br><span class="line">  console.log(&#96;1. $&#123;yield&#125;&#96;);</span><br><span class="line">  console.log(&#96;2. $&#123;yield&#125;&#96;);</span><br><span class="line">  return &#39;result&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let genObj &#x3D; dataConsumer();</span><br><span class="line">genObj.next();</span><br><span class="line">&#x2F;&#x2F; Started</span><br><span class="line">genObj.next(&#39;a&#39;)</span><br><span class="line">&#x2F;&#x2F; 1. a</span><br><span class="line">genObj.next(&#39;b&#39;)</span><br><span class="line">&#x2F;&#x2F; 2. b</span><br></pre></td></tr></table></figure>

<p>上面代码是一个很直观的例子，每次通过<code>next</code>方法向 Generator 函数输入值，然后打印出来。</p>
<p>如果想要第一次调用<code>next</code>方法时，就能够输入值，可以在 Generator 函数外面再包一层。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function wrapper(generatorFunction) &#123;</span><br><span class="line">  return function (...args) &#123;</span><br><span class="line">    let generatorObject &#x3D; generatorFunction(...args);</span><br><span class="line">    generatorObject.next();</span><br><span class="line">    return generatorObject;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const wrapped &#x3D; wrapper(function* () &#123;</span><br><span class="line">  console.log(&#96;First input: $&#123;yield&#125;&#96;);</span><br><span class="line">  return &#39;DONE&#39;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">wrapped().next(&#39;hello!&#39;)</span><br><span class="line">&#x2F;&#x2F; First input: hello!</span><br></pre></td></tr></table></figure>

<p>上面代码中，Generator 函数如果不用wrapper先包一层，是无法第一次调用next方法，就输入参数的。</p>
<h2 id="for…of-循环"><a href="#for…of-循环" class="headerlink" title="for…of 循环"></a>for…of 循环</h2><p><strong><code>for...of</code>循环可以自动遍历 Generator 函数运行时生成的Iterator对象，且此时不再需要调用next方法。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* foo() &#123;</span><br><span class="line">  yield 1;</span><br><span class="line">  yield 2;</span><br><span class="line">  yield 3;</span><br><span class="line">  yield 4;</span><br><span class="line">  yield 5;</span><br><span class="line">  return 6;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (let v of foo()) &#123;</span><br><span class="line">  console.log(v);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 1 2 3 4 5</span><br></pre></td></tr></table></figure>

<p>上面代码使用<code>for...of</code>循环，依次显示 5 个yield表达式的值。这里需要注意，<strong>一旦next方法的返回对象的done属性为true，<code>for...of</code>循环就会中止，且不包含该返回对象，所以上面代码的return语句返回的6，不包括在<code>for...of</code>循环之中。</strong></p>
<p>下面是一个利用 Generator 函数和for…of循环，实现斐波那契数列的例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* fibonacci() &#123;</span><br><span class="line">  let [prev, curr] &#x3D; [0, 1];</span><br><span class="line">  for (;;) &#123;</span><br><span class="line">    yield curr;</span><br><span class="line">    [prev, curr] &#x3D; [curr, prev + curr];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (let n of fibonacci()) &#123;</span><br><span class="line">  if (n &gt; 1000) break;</span><br><span class="line">  console.log(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面代码可见，使用<code>for...of</code>语句时不需要使用next方法。</p>
<p>利用<code>for...of</code>循环，可以写出遍历任意对象（object）的方法。原生的 JavaScript 对象没有遍历接口，无法使用<code>for...of</code>循环，通过 Generator 函数为它加上这个接口，就可以用了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* objectEntries(obj) &#123;</span><br><span class="line">  let propKeys &#x3D; Reflect.ownKeys(obj);</span><br><span class="line"></span><br><span class="line">  for (let propKey of propKeys) &#123;</span><br><span class="line">    yield [propKey, obj[propKey]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let jane &#x3D; &#123; first: &#39;Jane&#39;, last: &#39;Doe&#39; &#125;;</span><br><span class="line"></span><br><span class="line">for (let [key, value] of objectEntries(jane)) &#123;</span><br><span class="line">  console.log(&#96;$&#123;key&#125;: $&#123;value&#125;&#96;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; first: Jane</span><br><span class="line">&#x2F;&#x2F; last: Doe</span><br></pre></td></tr></table></figure>

<p>上面代码中，对象jane原生不具备 Iterator 接口，无法用<code>for...of</code>遍历。这时，我们通过 Generator 函数objectEntries为它加上遍历器接口，就可以用<code>for...of</code>遍历了。加上遍历器接口的另一种写法是，将 Generator 函数加到对象的<code>Symbol.iterator</code>属性上面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* objectEntries() &#123;</span><br><span class="line">  let propKeys &#x3D; Object.keys(this);</span><br><span class="line"></span><br><span class="line">  for (let propKey of propKeys) &#123;</span><br><span class="line">    yield [propKey, this[propKey]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let jane &#x3D; &#123; first: &#39;Jane&#39;, last: &#39;Doe&#39; &#125;;</span><br><span class="line"></span><br><span class="line">jane[Symbol.iterator] &#x3D; objectEntries;</span><br><span class="line"></span><br><span class="line">for (let [key, value] of jane) &#123;</span><br><span class="line">  console.log(&#96;$&#123;key&#125;: $&#123;value&#125;&#96;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; first: Jane</span><br><span class="line">&#x2F;&#x2F; last: Doe</span><br></pre></td></tr></table></figure>

<p>除了<code>for...of</code>循环以外，扩展运算符<code>（...）</code>、解构赋值和<code>Array.from</code>方法内部调用的，都是遍历器接口。这意味着，它们都可以将 Generator 函数返回的 Iterator 对象，作为参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* numbers () &#123;</span><br><span class="line">  yield 1</span><br><span class="line">  yield 2</span><br><span class="line">  return 3</span><br><span class="line">  yield 4</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 扩展运算符</span><br><span class="line">[...numbers()] &#x2F;&#x2F; [1, 2]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Array.from 方法</span><br><span class="line">Array.from(numbers()) &#x2F;&#x2F; [1, 2]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 解构赋值</span><br><span class="line">let [x, y] &#x3D; numbers();</span><br><span class="line">x &#x2F;&#x2F; 1</span><br><span class="line">y &#x2F;&#x2F; 2</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; for...of 循环</span><br><span class="line">for (let n of numbers()) &#123;</span><br><span class="line">  console.log(n)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 1</span><br><span class="line">&#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure>

<h2 id="Generator-prototype-throw"><a href="#Generator-prototype-throw" class="headerlink" title="Generator.prototype.throw()"></a>Generator.prototype.throw()</h2><p>Generator 函数返回的遍历器对象，都有一个<code>throw</code>方法，可以在<strong>函数体外抛出错误</strong>，然后在 Generator 函数体内捕获。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var g &#x3D; function* () &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    yield;</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    console.log(&#39;内部捕获&#39;, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var i &#x3D; g();</span><br><span class="line">i.next();</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">  i.throw(&#39;a&#39;);</span><br><span class="line">  i.throw(&#39;b&#39;);</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">  console.log(&#39;外部捕获&#39;, e);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 内部捕获 a</span><br><span class="line">&#x2F;&#x2F; 外部捕获 b</span><br></pre></td></tr></table></figure>
<p>上面代码中，遍历器对象i连续抛出两个错误。第一个错误被 Generator 函数体内的<code>catch</code>语句捕获。i第二次抛出错误，由于 Generator 函数内部的<code>catch</code>语句已经执行过了，不会再捕捉到这个错误了，所以这个错误就被抛出了 Generator 函数体，被函数体外的<code>catch</code>语句捕获。</p>
<p><code>throw</code>方法可以接受一个参数，该参数会被<code>catch</code>语句接收，建议抛出<code>Error</code>对象的实例。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var g &#x3D; function* () &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    yield;</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    console.log(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var i &#x3D; g();</span><br><span class="line">i.next();</span><br><span class="line">i.throw(new Error(&#39;出错了！&#39;));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Error: 出错了！(…)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，不要混淆遍历器对象的<code>throw</code>方法和全局的<code>throw</code>命令。上面代码的错误，是用遍历器对象的<code>throw</code>方法抛出的，而不是用<code>throw</code>命令抛出的。后者只能被函数体外的<code>catch</code>语句捕获。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var g &#x3D; function* () &#123;</span><br><span class="line">  while (true) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      yield;</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">      if (e !&#x3D; &#39;a&#39;) throw e;</span><br><span class="line">      console.log(&#39;内部捕获&#39;, e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var i &#x3D; g();</span><br><span class="line">i.next();</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">  throw new Error(&#39;a&#39;);</span><br><span class="line">  throw new Error(&#39;b&#39;);</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">  console.log(&#39;外部捕获&#39;, e);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 外部捕获 [Error: a]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面代码之所以只捕获了a，是因为函数体外的<code>catch</code>语句块，捕获了抛出的a错误以后，就不会再继续<code>try</code>代码块里面剩余的语句了。</p>
</blockquote>
<p>如果 Generator 函数内部没有部署<code>try...catch</code>代码块，那么<code>throw</code>方法抛出的错误，将被外部<code>try...catch</code>代码块捕获。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var g &#x3D; function* () &#123;</span><br><span class="line">  while (true) &#123;</span><br><span class="line">    yield;</span><br><span class="line">    console.log(&#39;内部捕获&#39;, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var i &#x3D; g();</span><br><span class="line">i.next();</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">  i.throw(&#39;a&#39;);</span><br><span class="line">  i.throw(&#39;b&#39;);</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">  console.log(&#39;外部捕获&#39;, e);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 外部捕获 a</span><br></pre></td></tr></table></figure>

<p>上面代码中，Generator 函数g内部没有部署<code>try...catch</code>代码块，所以抛出的错误直接被外部<code>catch</code>代码块捕获。</p>
<p>如果 Generator 函数内部和外部，都没有部署<code>try...catch</code>代码块，那么程序将报错，直接中断执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var gen &#x3D; function* gen()&#123;</span><br><span class="line">  yield console.log(&#39;hello&#39;);</span><br><span class="line">  yield console.log(&#39;world&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var g &#x3D; gen();</span><br><span class="line">g.next();</span><br><span class="line">g.throw();</span><br><span class="line">&#x2F;&#x2F; hello</span><br><span class="line">&#x2F;&#x2F; Uncaught undefined</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>g.throw</code>抛出错误以后，没有任何<code>try...catch</code>代码块可以捕获这个错误，导致程序报错，中断执行。</p>
<p><code>throw</code>方法抛出的错误要被内部捕获，前提是必须至少执行过一次next方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* gen() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    yield 1;</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    console.log(&#39;内部捕获&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var g &#x3D; gen();</span><br><span class="line">g.throw(1);</span><br><span class="line">&#x2F;&#x2F; Uncaught 1</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>g.throw(1)</code>执行时，next方法一次都没有执行过。这时，抛出的错误不会被内部捕获，而是直接在外部抛出，导致程序出错。这种行为其实很好理解，因为第一次执行next方法，等同于启动执行 Generator 函数的内部代码，否则 Generator 函数还没有开始执行，这时throw方法抛错只可能抛出在函数外部。</p>
<p><strong><code>throw</code>方法被捕获以后，会附带执行下一条<code>yield</code>表达式。也就是说，会附带执行一次<code>next</code>方法。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var gen &#x3D; function* gen()&#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    yield console.log(&#39;a&#39;);</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">  &#125;</span><br><span class="line">  yield console.log(&#39;b&#39;);</span><br><span class="line">  yield console.log(&#39;c&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var g &#x3D; gen();</span><br><span class="line">g.next() &#x2F;&#x2F; a</span><br><span class="line">g.throw() &#x2F;&#x2F; b</span><br><span class="line">g.next() &#x2F;&#x2F; c</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>g.throw</code>方法被捕获以后，自动执行了一次next方法，所以会打印b。另外，也可以看到，<strong>只要 Generator 函数内部部署了try…catch代码块，那么遍历器的throw方法抛出的错误，不影响下一次遍历</strong>。</p>
<p>另外，throw命令与g.throw方法是无关的，两者互不影响。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var gen &#x3D; function* gen()&#123;</span><br><span class="line">  yield console.log(&#39;hello&#39;);</span><br><span class="line">  yield console.log(&#39;world&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var g &#x3D; gen();</span><br><span class="line">g.next();</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">  throw new Error();</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">  g.next();</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; hello</span><br><span class="line">&#x2F;&#x2F; world</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>throw</code>命令抛出的错误不会影响到遍历器的状态，所以两次执行<code>next</code>方法，都进行了正确的操作。</p>
<p>这种函数体内捕获错误的机制，大大方便了对错误的处理。多个<code>yield</code>表达式，可以只用一个<code>try...catch</code>代码块来捕获错误。如果使用回调函数的写法，想要捕获多个错误，就不得不为每个函数内部写一个错误处理语句，现在只在 Generator 函数内部写一次<code>catch</code>语句就可以了。</p>
<p>Generator 函数体外抛出的错误，可以在函数体内捕获；反过来，Generator 函数体内抛出的错误，也可以被函数体外的<code>catch</code>捕获。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* foo() &#123;</span><br><span class="line">  var x &#x3D; yield 3;</span><br><span class="line">  var y &#x3D; x.toUpperCase();</span><br><span class="line">  yield y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var it &#x3D; foo();</span><br><span class="line"></span><br><span class="line">it.next(); &#x2F;&#x2F; &#123; value:3, done:false &#125;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">  it.next(42);</span><br><span class="line">&#125; catch (err) &#123;</span><br><span class="line">  console.log(err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，第二个next方法向函数体内传入一个参数 42，数值是没有toUpperCase方法的，所以会抛出一个 TypeError 错误，被函数体外的catch捕获。</p>
<p>一旦 Generator 执行过程中抛出错误，且没有被内部捕获，就不会再执行下去了。如果此后还调用next方法，将返回一个value属性等于undefined、done属性等于true的对象，即 JavaScript 引擎认为这个 Generator 已经运行结束了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* g() &#123;</span><br><span class="line">  yield 1;</span><br><span class="line">  console.log(&#39;throwing an exception&#39;);</span><br><span class="line">  throw new Error(&#39;generator broke!&#39;);</span><br><span class="line">  yield 2;</span><br><span class="line">  yield 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function log(generator) &#123;</span><br><span class="line">  var v;</span><br><span class="line">  console.log(&#39;starting generator&#39;);</span><br><span class="line">  try &#123;</span><br><span class="line">    v &#x3D; generator.next();</span><br><span class="line">    console.log(&#39;第一次运行next方法&#39;, v);</span><br><span class="line">  &#125; catch (err) &#123;</span><br><span class="line">    console.log(&#39;捕捉错误&#39;, v);</span><br><span class="line">  &#125;</span><br><span class="line">  try &#123;</span><br><span class="line">    v &#x3D; generator.next();</span><br><span class="line">    console.log(&#39;第二次运行next方法&#39;, v);</span><br><span class="line">  &#125; catch (err) &#123;</span><br><span class="line">    console.log(&#39;捕捉错误&#39;, v);</span><br><span class="line">  &#125;</span><br><span class="line">  try &#123;</span><br><span class="line">    v &#x3D; generator.next();</span><br><span class="line">    console.log(&#39;第三次运行next方法&#39;, v);</span><br><span class="line">  &#125; catch (err) &#123;</span><br><span class="line">    console.log(&#39;捕捉错误&#39;, v);</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(&#39;caller done&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log(g());</span><br><span class="line">&#x2F;&#x2F; starting generator</span><br><span class="line">&#x2F;&#x2F; 第一次运行next方法 &#123; value: 1, done: false &#125;</span><br><span class="line">&#x2F;&#x2F; throwing an exception</span><br><span class="line">&#x2F;&#x2F; 捕捉错误 &#123; value: 1, done: false &#125;</span><br><span class="line">&#x2F;&#x2F; 第三次运行next方法 &#123; value: undefined, done: true &#125;</span><br><span class="line">&#x2F;&#x2F; caller done</span><br></pre></td></tr></table></figure>

<p>上面代码一共三次运行<code>next</code>方法，第二次运行的时候会抛出错误，然后第三次运行的时候，Generator 函数就已经结束了，不再执行下去了。</p>
<h2 id="Generator-prototype-return"><a href="#Generator-prototype-return" class="headerlink" title="Generator.prototype.return()"></a>Generator.prototype.return()</h2><p>Generator 函数返回的遍历器对象，还有一个return方法，可以返回给定的值，并且终结遍历 Generator 函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* gen() &#123;</span><br><span class="line">  yield 1;</span><br><span class="line">  yield 2;</span><br><span class="line">  yield 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var g &#x3D; gen();</span><br><span class="line"></span><br><span class="line">g.next()        &#x2F;&#x2F; &#123; value: 1, done: false &#125;</span><br><span class="line">g.return(&#39;foo&#39;) &#x2F;&#x2F; &#123; value: &quot;foo&quot;, done: true &#125;</span><br><span class="line">g.next()        &#x2F;&#x2F; &#123; value: undefined, done: true &#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，遍历器对象g调用<code>return</code>方法后，返回值的<code>value</code>属性就是<code>return</code>方法的参数foo。并且，Generator 函数的遍历就终止了，返回值的done属性为<code>true，</code>以后再调用<code>next</code>方法，done属性总是返回<code>true</code>。</p>
<p><strong>如果return方法调用时，不提供参数，则返回值的value属性为undefined。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* gen() &#123;</span><br><span class="line">  yield 1;</span><br><span class="line">  yield 2;</span><br><span class="line">  yield 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var g &#x3D; gen();</span><br><span class="line"></span><br><span class="line">g.next()        &#x2F;&#x2F; &#123; value: 1, done: false &#125;</span><br><span class="line">g.return() &#x2F;&#x2F; &#123; value: undefined, done: true &#125;</span><br></pre></td></tr></table></figure>

<p>如果 Generator 函数内部有<code>try...finally</code>代码块，且正在执行<code>try</code>代码块，那么<code>return</code>方法会导致立刻进入<code>finally</code>代码块，执行完以后，整个函数才会结束。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* numbers () &#123;</span><br><span class="line">  yield 1;</span><br><span class="line">  try &#123;</span><br><span class="line">    yield 2;</span><br><span class="line">    yield 3;</span><br><span class="line">  &#125; finally &#123;</span><br><span class="line">    yield 4;</span><br><span class="line">    yield 5;</span><br><span class="line">  &#125;</span><br><span class="line">  yield 6;</span><br><span class="line">&#125;</span><br><span class="line">var g &#x3D; numbers();</span><br><span class="line">g.next() &#x2F;&#x2F; &#123; value: 1, done: false &#125;</span><br><span class="line">g.next() &#x2F;&#x2F; &#123; value: 2, done: false &#125;</span><br><span class="line">g.return(7) &#x2F;&#x2F; &#123; value: 4, done: false &#125;</span><br><span class="line">g.next() &#x2F;&#x2F; &#123; value: 5, done: false &#125;</span><br><span class="line">g.next() &#x2F;&#x2F; &#123; value: 7, done: true &#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<strong>调用<code>return()</code>方法后，就开始执行<code>finally</code>代码块，不执行<code>try</code>里面剩下的代码了，然后等到<code>finally</code>代码块执行完，再返回<code>return()</code>方法指定的返回值</strong>。</p>
<h2 id="next-、throw-、return-的共同点"><a href="#next-、throw-、return-的共同点" class="headerlink" title="next()、throw()、return() 的共同点"></a>next()、throw()、return() 的共同点</h2><p><code>next()</code>、<code>throw()</code>、<code>return()</code>这三个方法本质上是同一件事，可以放在一起理解。它们的作用都是让 Generator 函数恢复执行，并且使用不同的语句替换<code>yield</code>表达式。</p>
<p><code>next()</code>是将yield表达式替换成一个值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const g &#x3D; function* (x, y) &#123;</span><br><span class="line">  let result &#x3D; yield x + y;</span><br><span class="line">  return result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const gen &#x3D; g(1, 2);</span><br><span class="line">gen.next(); &#x2F;&#x2F; Object &#123;value: 3, done: false&#125;</span><br><span class="line"></span><br><span class="line">gen.next(1); &#x2F;&#x2F; Object &#123;value: 1, done: true&#125;</span><br><span class="line">&#x2F;&#x2F; 相当于将 let result &#x3D; yield x + y</span><br><span class="line">&#x2F;&#x2F; 替换成 let result &#x3D; 1;</span><br></pre></td></tr></table></figure>

<p>上面代码中，第二个next(1)方法就相当于将<code>yield表</code>达式替换成一个值1。如果<code>next</code>方法没有参数，就相当于替换成<code>undefined</code>。</p>
<p><code>throw()</code>是将yield表达式替换成一个throw语句。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gen.throw(new Error(&#39;出错了&#39;)); &#x2F;&#x2F; Uncaught Error: 出错了</span><br><span class="line">&#x2F;&#x2F; 相当于将 let result &#x3D; yield x + y</span><br><span class="line">&#x2F;&#x2F; 替换成 let result &#x3D; throw(new Error(&#39;出错了&#39;));</span><br></pre></td></tr></table></figure>
<p><code>return()</code>是将<code>yield</code>表达式替换成一个return语句。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gen.return(2); &#x2F;&#x2F; Object &#123;value: 2, done: true&#125;</span><br><span class="line">&#x2F;&#x2F; 相当于将 let result &#x3D; yield x + y</span><br><span class="line">&#x2F;&#x2F; 替换成 let result &#x3D; return 2;</span><br></pre></td></tr></table></figure>

<h2 id="yield-表达式-1"><a href="#yield-表达式-1" class="headerlink" title="yield* 表达式"></a>yield* 表达式</h2><p>如果在 Generator 函数内部，调用另一个 Generator 函数。需要在前者的函数体内部，自己手动完成遍历。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* foo() &#123;</span><br><span class="line">  yield &#39;a&#39;;</span><br><span class="line">  yield &#39;b&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function* bar() &#123;</span><br><span class="line">  yield &#39;x&#39;;</span><br><span class="line">  &#x2F;&#x2F; 手动遍历 foo()</span><br><span class="line">  for (let i of foo()) &#123;</span><br><span class="line">    console.log(i);</span><br><span class="line">  &#125;</span><br><span class="line">  yield &#39;y&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (let v of bar())&#123;</span><br><span class="line">  console.log(v);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; x</span><br><span class="line">&#x2F;&#x2F; a</span><br><span class="line">&#x2F;&#x2F; b</span><br><span class="line">&#x2F;&#x2F; y</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>foo</code>和<code>bar</code>都是 Generator 函数，在<code>bar</code>里面调用<code>foo</code>，就需要手动遍历foo。如果有多个 Generator 函数嵌套，写起来就非常麻烦。</p>
<p>ES6 提供了<code>yield*</code>表达式，作为解决办法，<strong>用来在一个 Generator 函数里面执行另一个 Generator 函数。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* bar() &#123;</span><br><span class="line">  yield &#39;x&#39;;</span><br><span class="line">  yield* foo();</span><br><span class="line">  yield &#39;y&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">function* bar() &#123;</span><br><span class="line">  yield &#39;x&#39;;</span><br><span class="line">  yield &#39;a&#39;;</span><br><span class="line">  yield &#39;b&#39;;</span><br><span class="line">  yield &#39;y&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">function* bar() &#123;</span><br><span class="line">  yield &#39;x&#39;;</span><br><span class="line">  for (let v of foo()) &#123;</span><br><span class="line">    yield v;</span><br><span class="line">  &#125;</span><br><span class="line">  yield &#39;y&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (let v of bar())&#123;</span><br><span class="line">  console.log(v);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; &quot;x&quot;</span><br><span class="line">&#x2F;&#x2F; &quot;a&quot;</span><br><span class="line">&#x2F;&#x2F; &quot;b&quot;</span><br><span class="line">&#x2F;&#x2F; &quot;y&quot;</span><br></pre></td></tr></table></figure>

<p>再来看一个对比的例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* inner() &#123;</span><br><span class="line">  yield &#39;hello!&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function* outer1() &#123;</span><br><span class="line">  yield &#39;open&#39;;</span><br><span class="line">  yield inner();</span><br><span class="line">  yield &#39;close&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var gen &#x3D; outer1()</span><br><span class="line">gen.next().value &#x2F;&#x2F; &quot;open&quot;</span><br><span class="line">gen.next().value &#x2F;&#x2F; 返回一个遍历器对象</span><br><span class="line">gen.next().value &#x2F;&#x2F; &quot;close&quot;</span><br><span class="line"></span><br><span class="line">function* outer2() &#123;</span><br><span class="line">  yield &#39;open&#39;</span><br><span class="line">  yield* inner()</span><br><span class="line">  yield &#39;close&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var gen &#x3D; outer2()</span><br><span class="line">gen.next().value &#x2F;&#x2F; &quot;open&quot;</span><br><span class="line">gen.next().value &#x2F;&#x2F; &quot;hello!&quot;</span><br><span class="line">gen.next().value &#x2F;&#x2F; &quot;close&quot;</span><br></pre></td></tr></table></figure>

<p>上面例子中，<code>outer2</code>使用了<code>yield*</code>，<code>outer1</code>没使用。结果就是，<code>outer1</code>返回一个遍历器对象，outer2返回该遍历器对象的内部值。</p>
<p>从语法角度看，如果<code>yield</code>表达式后面跟的是一个遍历器对象，需要在<code>yield</code>表达式后面加上星号，表明它返回的是一个遍历器对象。这被称为<code>yield*</code>表达式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let delegatedIterator &#x3D; (function* () &#123;</span><br><span class="line">  yield &#39;Hello!&#39;;</span><br><span class="line">  yield &#39;Bye!&#39;;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line">let delegatingIterator &#x3D; (function* () &#123;</span><br><span class="line">  yield &#39;Greetings!&#39;;</span><br><span class="line">  yield* delegatedIterator;</span><br><span class="line">  yield &#39;Ok, bye.&#39;;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line">for(let value of delegatingIterator) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; &quot;Greetings!</span><br><span class="line">&#x2F;&#x2F; &quot;Hello!&quot;</span><br><span class="line">&#x2F;&#x2F; &quot;Bye!&quot;</span><br><span class="line">&#x2F;&#x2F; &quot;Ok, bye.&quot;</span><br></pre></td></tr></table></figure>

<p>上面代码中，delegatingIterator是代理者，delegatedIterator是被代理者。由于<code>yield* delegatedIterator</code>语句得到的值，是一个遍历器，所以要用星号表示。运行结果就是使用一个遍历器，遍历了多个 Generator 函数，有递归的效果。</p>
<p><strong><code>yield*</code>后面的 Generator 函数（没有return语句时），等同于在 Generator 函数内部，部署一个<code>for...of</code>循环。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* concat(iter1, iter2) &#123;</span><br><span class="line">  yield* iter1;</span><br><span class="line">  yield* iter2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line"></span><br><span class="line">function* concat(iter1, iter2) &#123;</span><br><span class="line">  for (var value of iter1) &#123;</span><br><span class="line">    yield value;</span><br><span class="line">  &#125;</span><br><span class="line">  for (var value of iter2) &#123;</span><br><span class="line">    yield value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码说明，<code>yield*</code>后面的 Generator 函数（没有return语句时），不过是<code>for...of</code>的一种简写形式，完全可以用后者替代前者。反之，在有return语句时，则需要用<code>var value = yield* iterator</code>的形式获取return语句的值。</p>
<p><strong>如果<code>yield*</code>后面跟着一个数组，由于数组原生支持遍历器，因此就会遍历数组成员。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* gen()&#123;</span><br><span class="line">  yield* [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gen().next() &#x2F;&#x2F; &#123; value:&quot;a&quot;, done:false &#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>yield</code>命令后面如果不加星号，返回的是整个数组，<font style="color:blue">加了星号就表示返回的是数组的遍历器对象。</font></p>
<p>实际上，<font style="color:blue"><strong>任何数据结构只要有 Iterator 接口，就可以被yield*遍历。</strong></font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let read &#x3D; (function* () &#123;</span><br><span class="line">  yield &#39;hello&#39;;</span><br><span class="line">  yield* &#39;hello&#39;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">read.next().value &#x2F;&#x2F; &quot;hello&quot;</span><br><span class="line">read.next().value &#x2F;&#x2F; &quot;h&quot;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>yield</code>表达式返回整个字符串，<code>yield*</code>语句返回单个字符。因为字符串具有 Iterator 接口，所以被<code>yield*</code>遍历。</p>
<p>如果被代理的 Generator 函数有<code>return</code>语句，那么就可以向代理它的 Generator 函数返回数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* foo() &#123;</span><br><span class="line">  yield 2;</span><br><span class="line">  yield 3;</span><br><span class="line">  return &quot;foo&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function* bar() &#123;</span><br><span class="line">  yield 1;</span><br><span class="line">  var v &#x3D; yield* foo();</span><br><span class="line">  console.log(&quot;v: &quot; + v);</span><br><span class="line">  yield 4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var it &#x3D; bar();</span><br><span class="line"></span><br><span class="line">it.next()</span><br><span class="line">&#x2F;&#x2F; &#123;value: 1, done: false&#125;</span><br><span class="line">it.next()</span><br><span class="line">&#x2F;&#x2F; &#123;value: 2, done: false&#125;</span><br><span class="line">it.next()</span><br><span class="line">&#x2F;&#x2F; &#123;value: 3, done: false&#125;</span><br><span class="line">it.next();</span><br><span class="line">&#x2F;&#x2F; &quot;v: foo&quot;</span><br><span class="line">&#x2F;&#x2F; &#123;value: 4, done: false&#125;</span><br><span class="line">it.next()</span><br><span class="line">&#x2F;&#x2F; &#123;value: undefined, done: true&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码在第四次调用<code>next</code>方法的时候，屏幕上会有输出，这是因为函数<code>foo</code>的<code>return</code>语句，向函数<code>bar</code>提供了返回值。</p>
<p>再看一个例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* genFuncWithReturn() &#123;</span><br><span class="line">  yield &#39;a&#39;;</span><br><span class="line">  yield &#39;b&#39;;</span><br><span class="line">  return &#39;The result&#39;;</span><br><span class="line">&#125;</span><br><span class="line">function* logReturned(genObj) &#123;</span><br><span class="line">  let result &#x3D; yield* genObj;</span><br><span class="line">  console.log(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[...logReturned(genFuncWithReturn())]</span><br><span class="line">&#x2F;&#x2F; The result</span><br><span class="line">&#x2F;&#x2F; 值为 [ &#39;a&#39;, &#39;b&#39; ]</span><br></pre></td></tr></table></figure>

<p>上面代码中，存在两次遍历。第一次是扩展运算符遍历函数<code>logReturned</code>返回的遍历器对象，第二次是<code>yield*</code>语句遍历函数<code>genFuncWithReturn</code>返回的遍历器对象。这两次遍历的效果是叠加的，最终表现为扩展运算符遍历函数<code>genFuncWithReturn</code>返回的遍历器对象。所以，最后的数据表达式得到的值等于<code>[ &#39;a&#39;, &#39;b&#39; ]</code>。但是，函数<code>genFuncWithReturn</code>的<code>return</code>语句的返回值The result，会返回给函数<code>logReturned</code>内部的result变量，因此会有终端输出。</p>
<p><strong><code>yield*</code>命令可以很方便地取出嵌套数组的所有成员</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* iterTree(tree) &#123;</span><br><span class="line">  if (Array.isArray(tree)) &#123;</span><br><span class="line">    for(let i&#x3D;0; i &lt; tree.length; i++) &#123;</span><br><span class="line">      yield* iterTree(tree[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    yield tree;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const tree &#x3D; [ &#39;a&#39;, [&#39;b&#39;, &#39;c&#39;], [&#39;d&#39;, &#39;e&#39;] ];</span><br><span class="line"></span><br><span class="line">for(let x of iterTree(tree)) &#123;</span><br><span class="line">  console.log(x);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; a</span><br><span class="line">&#x2F;&#x2F; b</span><br><span class="line">&#x2F;&#x2F; c</span><br><span class="line">&#x2F;&#x2F; d</span><br><span class="line">&#x2F;&#x2F; e</span><br></pre></td></tr></table></figure>

<p>由于<strong>扩展运算符…默认调用 Iterator 接口</strong>，所以上面这个函数也可以用于<strong>嵌套数组的平铺</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[...iterTree(tree)] &#x2F;&#x2F; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</span><br></pre></td></tr></table></figure>

<p>下面是一个稍微复杂的例子，使用<code>yield*</code>语句遍历完全二叉树。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 下面是二叉树的构造函数，</span><br><span class="line">&#x2F;&#x2F; 三个参数分别是左树、当前节点和右树</span><br><span class="line">function Tree(left, label, right) &#123;</span><br><span class="line">  this.left &#x3D; left;</span><br><span class="line">  this.label &#x3D; label;</span><br><span class="line">  this.right &#x3D; right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 下面是中序（inorder）遍历函数。</span><br><span class="line">&#x2F;&#x2F; 由于返回的是一个遍历器，所以要用generator函数。</span><br><span class="line">&#x2F;&#x2F; 函数体内采用递归算法，所以左树和右树要用yield*遍历</span><br><span class="line">function* inorder(t) &#123;</span><br><span class="line">  if (t) &#123;</span><br><span class="line">    yield* inorder(t.left);</span><br><span class="line">    yield t.label;</span><br><span class="line">    yield* inorder(t.right);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 下面生成二叉树</span><br><span class="line">function make(array) &#123;</span><br><span class="line">  &#x2F;&#x2F; 判断是否为叶节点</span><br><span class="line">  if (array.length &#x3D;&#x3D; 1) return new Tree(null, array[0], null);</span><br><span class="line">  return new Tree(make(array[0]), array[1], make(array[2]));</span><br><span class="line">&#125;</span><br><span class="line">let tree &#x3D; make([[[&#39;a&#39;], &#39;b&#39;, [&#39;c&#39;]], &#39;d&#39;, [[&#39;e&#39;], &#39;f&#39;, [&#39;g&#39;]]]);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 遍历二叉树</span><br><span class="line">var result &#x3D; [];</span><br><span class="line">for (let node of inorder(tree)) &#123;</span><br><span class="line">  result.push(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result</span><br><span class="line">&#x2F;&#x2F; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;]</span><br></pre></td></tr></table></figure>

<h2 id="作为对象属性的-Generator-函数"><a href="#作为对象属性的-Generator-函数" class="headerlink" title="作为对象属性的 Generator 函数"></a>作为对象属性的 Generator 函数</h2><p>如果一个对象的属性是 Generator 函数，可以简写成下面的形式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let obj &#x3D; &#123;</span><br><span class="line">  * myGeneratorMethod() &#123;</span><br><span class="line">    ···</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码中，myGeneratorMethod属性前面有一个星号，表示这个属性是一个 Generator 函数。</p>
<p>它的完整形式如下，与上面的写法是等价的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let obj &#x3D; &#123;</span><br><span class="line">  myGeneratorMethod: function* () &#123;</span><br><span class="line">    &#x2F;&#x2F; ···</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Generator-函数的this"><a href="#Generator-函数的this" class="headerlink" title="Generator 函数的this"></a>Generator 函数的this</h2><p><font style="color:blue"><strong>Generator 函数总是返回一个遍历器，ES6 规定这个遍历器是 Generator 函数的实例，也继承了 Generator 函数的prototype对象上的方法。</strong></font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* g() &#123;&#125;</span><br><span class="line"></span><br><span class="line">g.prototype.hello &#x3D; function () &#123;</span><br><span class="line">  return &#39;hi!&#39;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let obj &#x3D; g();</span><br><span class="line"></span><br><span class="line">obj instanceof g &#x2F;&#x2F; true</span><br><span class="line">obj.hello() &#x2F;&#x2F; &#39;hi!&#39;</span><br></pre></td></tr></table></figure>

<p>上面代码表明，Generator <code>函数g</code>返回的遍历器<code>obj</code>，是<code>g</code>的实例，而且继承了<code>g.prototype</code>。但是，<strong>如果把g当作普通的构造函数，并不会生效，因为g返回的总是遍历器对象，而不是<code>this</code>对象。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* g() &#123;</span><br><span class="line">  this.a &#x3D; 11;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let obj &#x3D; g();</span><br><span class="line">obj.next();</span><br><span class="line">obj.a &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure>

<p>上面代码中，Generator <code>函数g</code>在<code>this</code>对象上面添加了一个属性<code>a</code>，但是<code>obj对象</code>拿不到这个属性。</p>
<p><strong>Generator 函数也不能跟new命令一起用，会报错。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* F() &#123;</span><br><span class="line">  yield this.x &#x3D; 2;</span><br><span class="line">  yield this.y &#x3D; 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new F()</span><br><span class="line">&#x2F;&#x2F; TypeError: F is not a constructor</span><br></pre></td></tr></table></figure>

<p>上面代码中，new命令跟构造函数F一起使用，结果报错，因为F不是构造函数。</p>
<h3 id="那么，有没有办法让-Generator-函数返回一个正常的对象实例，既可以用next方法，又可以获得正常的this？"><a href="#那么，有没有办法让-Generator-函数返回一个正常的对象实例，既可以用next方法，又可以获得正常的this？" class="headerlink" title="那么，有没有办法让 Generator 函数返回一个正常的对象实例，既可以用next方法，又可以获得正常的this？"></a>那么，有没有办法让 Generator 函数返回一个正常的对象实例，既可以用<code>next</code>方法，又可以获得正常的<code>this</code>？</h3><p>下面是一个变通方法。首先，生成一个空对象，使用<code>call</code>方法绑定 Generator 函数内部的<code>this</code>。这样，构造函数调用以后，这个空对象就是 Generator 函数的实例对象了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* F() &#123;</span><br><span class="line">  this.a &#x3D; 1;</span><br><span class="line">  yield this.b &#x3D; 2;</span><br><span class="line">  yield this.c &#x3D; 3;</span><br><span class="line">&#125;</span><br><span class="line">var obj &#x3D; &#123;&#125;;</span><br><span class="line">var f &#x3D; F.call(obj);</span><br><span class="line"></span><br><span class="line">f.next();  &#x2F;&#x2F; Object &#123;value: 2, done: false&#125;</span><br><span class="line">f.next();  &#x2F;&#x2F; Object &#123;value: 3, done: false&#125;</span><br><span class="line">f.next();  &#x2F;&#x2F; Object &#123;value: undefined, done: true&#125;</span><br><span class="line"></span><br><span class="line">obj.a &#x2F;&#x2F; 1</span><br><span class="line">obj.b &#x2F;&#x2F; 2</span><br><span class="line">obj.c &#x2F;&#x2F; 3</span><br></pre></td></tr></table></figure>

<p>上面代码中，<strong>首先是F内部的<code>this</code>对象绑定obj对象</strong>，然后调用它，返回一个 <code>Iterator</code>对象。这个对象执行三次<code>next</code>方法（因为F内部有两个<code>yield</code>表达式），完成 F 内部所有代码的运行。这时，所有内部属性都绑定在<code>obj</code>对象上了，因此<code>obj</code>对象也就成了F的实例。</p>
<p>上面代码中，执行的是遍历器对象f，但是生成的对象实例是obj，有没有办法将这两个对象统一呢？</p>
<p><strong>一个办法就是将obj换成F.prototype。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* F() &#123;</span><br><span class="line">  this.a &#x3D; 1;</span><br><span class="line">  yield this.b &#x3D; 2;</span><br><span class="line">  yield this.c &#x3D; 3;</span><br><span class="line">&#125;</span><br><span class="line">var f &#x3D; F.call(F.prototype);</span><br><span class="line"></span><br><span class="line">f.next();  &#x2F;&#x2F; Object &#123;value: 2, done: false&#125;</span><br><span class="line">f.next();  &#x2F;&#x2F; Object &#123;value: 3, done: false&#125;</span><br><span class="line">f.next();  &#x2F;&#x2F; Object &#123;value: undefined, done: true&#125;</span><br><span class="line"></span><br><span class="line">f.a &#x2F;&#x2F; 1</span><br><span class="line">f.b &#x2F;&#x2F; 2</span><br><span class="line">f.c &#x2F;&#x2F; 3</span><br></pre></td></tr></table></figure>
<p><strong>再将F改成构造函数，就可以对它执行new命令了。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* gen() &#123;</span><br><span class="line">  this.a &#x3D; 1;</span><br><span class="line">  yield this.b &#x3D; 2;</span><br><span class="line">  yield this.c &#x3D; 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function F() &#123;</span><br><span class="line">  return gen.call(gen.prototype);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var f &#x3D; new F();</span><br><span class="line"></span><br><span class="line">f.next();  &#x2F;&#x2F; Object &#123;value: 2, done: false&#125;</span><br><span class="line">f.next();  &#x2F;&#x2F; Object &#123;value: 3, done: false&#125;</span><br><span class="line">f.next();  &#x2F;&#x2F; Object &#123;value: undefined, done: true&#125;</span><br><span class="line"></span><br><span class="line">f.a &#x2F;&#x2F; 1</span><br><span class="line">f.b &#x2F;&#x2F; 2</span><br><span class="line">f.c &#x2F;&#x2F; 3</span><br></pre></td></tr></table></figure>

<h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><h3 id="Generator-与状态机"><a href="#Generator-与状态机" class="headerlink" title="Generator 与状态机"></a>Generator 与状态机</h3><p>Generator 是实现状态机的最佳结构。比如，下面的clock函数就是一个状态机。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var ticking &#x3D; true;</span><br><span class="line">var clock &#x3D; function() &#123;</span><br><span class="line">  if (ticking)</span><br><span class="line">    console.log(&#39;Tick!&#39;);</span><br><span class="line">  else</span><br><span class="line">    console.log(&#39;Tock!&#39;);</span><br><span class="line">  ticking &#x3D; !ticking;</span><br><span class="line">&#125;</span><br><span class="line">上面代码的clock函数一共有两种状态（Tick和Tock），每运行一次，就改变一次状态。这个函数如果用 Generator 实现，就是下面这样。</span><br><span class="line"></span><br><span class="line">var clock &#x3D; function* () &#123;</span><br><span class="line">  while (true) &#123;</span><br><span class="line">    console.log(&#39;Tick!&#39;);</span><br><span class="line">    yield;</span><br><span class="line">    console.log(&#39;Tock!&#39;);</span><br><span class="line">    yield;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面的 Generator 实现与 ES5 实现对比，可以看到少了用来保存状态的外部变量ticking，这样就更简洁，更安全（状态不会被非法篡改）、更符合函数式编程的思想，在写法上也更优雅。Generator 之所以可以不用外部变量保存状态，是因为<strong>它本身就包含了一个状态信息，即目前是否处于暂停态。</strong></p>
<h3 id="Generator-与协程"><a href="#Generator-与协程" class="headerlink" title="Generator 与协程"></a>Generator 与协程</h3><p>协程（coroutine）是一种程序运行的方式，可以理解成“协作的线程”或“协作的函数”。协程既可以用单线程实现，也可以用多线程实现。前者是一种特殊的子例程，后者是一种特殊的线程。</p>
<p>（1）协程与子例程的差异</p>
<p>传统的“子例程”（subroutine）采用堆栈式“后进先出”的执行方式，只有当调用的子函数完全执行完毕，才会结束执行父函数。协程与其不同，多个线程（单线程情况下，即多个函数）可以并行执行，但是只有一个线程（或函数）处于正在运行的状态，其他线程（或函数）都处于暂停态（suspended），线程（或函数）之间可以交换执行权。也就是说，一个线程（或函数）执行到一半，可以暂停执行，将执行权交给另一个线程（或函数），等到稍后收回执行权的时候，再恢复执行。这种可以并行执行、交换执行权的线程（或函数），就称为协程。</p>
<p>从实现上看，在内存中，子例程只使用一个栈（stack），而协程是同时存在多个栈，但只有一个栈是在运行状态，也就是说，协程是以多占用内存为代价，实现多任务的并行。</p>
<p>（2）协程与普通线程的差异</p>
<p>不难看出，协程适合用于多任务运行的环境。在这个意义上，它与普通的线程很相似，都有自己的执行上下文、可以分享全局变量。它们的不同之处在于，同一时间可以有多个线程处于运行状态，但是运行的协程只能有一个，其他协程都处于暂停状态。此外，普通的线程是抢先式的，到底哪个线程优先得到资源，必须由运行环境决定，但是协程是合作式的，执行权由协程自己分配。</p>
<p>由于 JavaScript 是单线程语言，只能保持一个调用栈。引入协程以后，每个任务可以保持自己的调用栈。这样做的最大好处，就是抛出错误的时候，可以找到原始的调用栈。不至于像异步操作的回调函数那样，一旦出错，原始的调用栈早就结束。</p>
<p>Generator 函数是 ES6 对协程的实现，但属于不完全实现。Generator 函数被称为“半协程”（semi-coroutine），意思是只有 Generator 函数的调用者，才能将程序的执行权还给 Generator 函数。如果是完全执行的协程，任何函数都可以让暂停的协程继续执行。</p>
<p>如果将 Generator 函数当作协程，完全可以将多个需要互相协作的任务写成 Generator 函数，它们之间使用yield表达式交换控制权。</p>
<h3 id="Generator-与上下文"><a href="#Generator-与上下文" class="headerlink" title="Generator 与上下文"></a>Generator 与上下文</h3><p>JavaScript 代码运行时，会产生一个全局的上下文环境（context，又称运行环境），包含了当前所有的变量和对象。然后，执行函数（或块级代码）的时候，又会在当前上下文环境的上层，产生一个函数运行的上下文，变成当前（active）的上下文，由此形成一个<strong>上下文环境的堆栈（context stack）</strong>。</p>
<p>这个堆栈是<strong>后进先出</strong>的数据结构，最后产生的上下文环境首先执行完成，退出堆栈，然后再执行完成它下层的上下文，直至所有代码执行完成，堆栈清空。</p>
<p>Generator 函数不是这样，它执行产生的上下文环境，一旦遇到<code>yield</code>命令，就会暂时退出堆栈，但是并不消失，里面的所有变量和对象会冻结在当前状态。等到对它执行<code>next</code>命令时，这个上下文环境又会重新加入调用栈，冻结的变量和对象恢复执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* gen() &#123;</span><br><span class="line">  yield 1;</span><br><span class="line">  return 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let g &#x3D; gen();</span><br><span class="line"></span><br><span class="line">console.log(</span><br><span class="line">  g.next().value,</span><br><span class="line">  g.next().value,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>上面代码中，第一次执行<code>g.next()</code>时，Generator 函数<code>gen</code>的上下文会加入堆栈，即开始运行<code>gen</code>内部的代码。等遇到<code>yield 1</code>时，<code>gen</code>上下文退出堆栈，内部状态冻结。第二次执行<code>g.next()</code>时，<code>gen</code>上下文重新加入堆栈，变成当前的上下文，重新恢复执行。</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>Generator 可以暂停函数执行，返回任意表达式的值。这种特点使得 Generator 有多种应用场景。</p>
<p>（1）异步操作的同步化表达</p>
<p>Generator 函数的暂停执行的效果，意味着可以把异步操作写在<code>yield</code>表达式里面，等到调用<code>next</code>方法时再往后执行。这实际上等同于不需要写回调函数了，因为异步操作的后续操作可以放在<code>yield</code>表达式下面，反正要等到调用<code>next</code>方法时再执行。所以，Generator 函数的一个重要实际意义就是用来处理异步操作，改写回调函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* loadUI() &#123;</span><br><span class="line">  showLoadingScreen();</span><br><span class="line">  yield loadUIDataAsynchronously();</span><br><span class="line">  hideLoadingScreen();</span><br><span class="line">&#125;</span><br><span class="line">var loader &#x3D; loadUI();</span><br><span class="line">&#x2F;&#x2F; 加载UI</span><br><span class="line">loader.next()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 卸载UI</span><br><span class="line">loader.next()</span><br></pre></td></tr></table></figure>

<p>上面代码中，第一次调用<code>loadUI</code>函数时，该函数不会执行，仅返回一个遍历器。下一次对该遍历器调用<code>next</code>方法，则会显示Loading界面（showLoadingScreen），并且异步加载数据（loadUIDataAsynchronously）。等到数据加载完成，再一次使用<code>next</code>方法，则会隐藏<code>Loading</code>界面。可以看到，这种写法的好处是所有Loading界面的逻辑，都被封装在一个函数，按部就班非常清晰。</p>
<p>Ajax 是典型的异步操作，通过 Generator 函数部署 Ajax 操作，可以用同步的方式表达。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* main() &#123;</span><br><span class="line">  var result &#x3D; yield request(&quot;http:&#x2F;&#x2F;some.url&quot;);</span><br><span class="line">  var resp &#x3D; JSON.parse(result);</span><br><span class="line">    console.log(resp.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function request(url) &#123;</span><br><span class="line">  makeAjaxCall(url, function(response)&#123;</span><br><span class="line">    it.next(response);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var it &#x3D; main();</span><br><span class="line">it.next();</span><br></pre></td></tr></table></figure>

<p>上面代码的main函数，就是通过 Ajax 操作获取数据。可以看到，除了多了一个<code>yield</code>，它几乎与同步操作的写法完全一样。注意，<code>makeAjaxCall</code>函数中的<code>next</code>方法，必须加上response参数，因为<code>yield</code>表达式，本身是没有值的，总是等于undefined。</p>
<p>下面是另一个例子，通过 Generator 函数逐行读取文本文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* numbers() &#123;</span><br><span class="line">  let file &#x3D; new FileReader(&quot;numbers.txt&quot;);</span><br><span class="line">  try &#123;</span><br><span class="line">    while(!file.eof) &#123;</span><br><span class="line">      yield parseInt(file.readLine(), 10);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; finally &#123;</span><br><span class="line">    file.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码打开文本文件，使用yield表达式可以手动逐行读取文件。</p>
<p>（2）控制流管理</p>
<p>如果有一个多步操作非常耗时，采用回调函数，可能会写成下面这样。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">step1(function (value1) &#123;</span><br><span class="line">  step2(value1, function(value2) &#123;</span><br><span class="line">    step3(value2, function(value3) &#123;</span><br><span class="line">      step4(value3, function(value4) &#123;</span><br><span class="line">        &#x2F;&#x2F; Do something with value4</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>采用 Promise 改写上面的代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Promise.resolve(step1)</span><br><span class="line">  .then(step2)</span><br><span class="line">  .then(step3)</span><br><span class="line">  .then(step4)</span><br><span class="line">  .then(function (value4) &#123;</span><br><span class="line">    &#x2F;&#x2F; Do something with value4</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    &#x2F;&#x2F; Handle any error from step1 through step4</span><br><span class="line">  &#125;)</span><br><span class="line">  .done();</span><br></pre></td></tr></table></figure>

<p>上面代码已经把回调函数，改成了直线执行的形式，但是加入了大量 <code>Promise</code> 的语法。Generator 函数可以进一步改善代码运行流程。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* longRunningTask(value1) &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    var value2 &#x3D; yield step1(value1);</span><br><span class="line">    var value3 &#x3D; yield step2(value2);</span><br><span class="line">    var value4 &#x3D; yield step3(value3);</span><br><span class="line">    var value5 &#x3D; yield step4(value4);</span><br><span class="line">    &#x2F;&#x2F; Do something with value4</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    &#x2F;&#x2F; Handle any error from step1 through step4</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，使用一个函数，按次序自动执行所有步骤。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scheduler(longRunningTask(initialValue));</span><br><span class="line"></span><br><span class="line">function scheduler(task) &#123;</span><br><span class="line">  var taskObj &#x3D; task.next(task.value);</span><br><span class="line">  &#x2F;&#x2F; 如果Generator函数未结束，就继续调用</span><br><span class="line">  if (!taskObj.done) &#123;</span><br><span class="line">    task.value &#x3D; taskObj.value</span><br><span class="line">    scheduler(task);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，上面这种做法，只适合同步操作，即所有的task都必须是同步的，不能有异步操作。因为这里的代码一得到返回值，就继续往下执行，没有判断异步操作何时完成。如果要控制异步的操作流程，详见后面的《异步操作》一章。</p>
<p>下面，利用<code>for...of</code>循环会自动依次执行<code>yield</code>命令的特性，提供一种更一般的控制流管理的方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let steps &#x3D; [step1Func, step2Func, step3Func];</span><br><span class="line"></span><br><span class="line">function* iterateSteps(steps)&#123;</span><br><span class="line">  for (var i&#x3D;0; i&lt; steps.length; i++)&#123;</span><br><span class="line">    var step &#x3D; steps[i];</span><br><span class="line">    yield step();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，数组<code>steps</code>封装了一个任务的多个步骤，Generator 函数<code>iterateSteps</code>则是依次为这些步骤加上yield命令。</p>
<p>将任务分解成步骤之后，还可以将项目分解成多个依次执行的任务。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let jobs &#x3D; [job1, job2, job3];</span><br><span class="line"></span><br><span class="line">function* iterateJobs(jobs)&#123;</span><br><span class="line">  for (var i&#x3D;0; i&lt; jobs.length; i++)&#123;</span><br><span class="line">    var job &#x3D; jobs[i];</span><br><span class="line">    yield* iterateSteps(job.steps);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，数组jobs封装了一个项目的多个任务，Generator 函数iterateJobs则是依次为这些任务加上<code>yield*</code>命令。</p>
<p>最后，就可以用<code>for...of</code>循环一次性依次执行所有任务的所有步骤。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (var step of iterateJobs(jobs))&#123;</span><br><span class="line">  console.log(step.id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次提醒，上面的做法只能用于所有步骤都是同步操作的情况，不能有异步操作的步骤。如果想要依次执行异步的步骤，必须使用后面的《异步操作》一章介绍的方法。</p>
<p><code>for...of</code>的本质是一个<code>while</code>循环，所以上面的代码实质上执行的是下面的逻辑。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var it &#x3D; iterateJobs(jobs);</span><br><span class="line">var res &#x3D; it.next();</span><br><span class="line"></span><br><span class="line">while (!res.done)&#123;</span><br><span class="line">  var result &#x3D; res.value;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">  res &#x3D; it.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）部署 Iterator 接口</p>
<p>利用 Generator 函数，可以在任意对象上部署 Iterator 接口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* iterEntries(obj) &#123;</span><br><span class="line">  let keys &#x3D; Object.keys(obj);</span><br><span class="line">  for (let i&#x3D;0; i &lt; keys.length; i++) &#123;</span><br><span class="line">    let key &#x3D; keys[i];</span><br><span class="line">    yield [key, obj[key]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let myObj &#x3D; &#123; foo: 3, bar: 7 &#125;;</span><br><span class="line"></span><br><span class="line">for (let [key, value] of iterEntries(myObj)) &#123;</span><br><span class="line">  console.log(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; foo 3</span><br><span class="line">&#x2F;&#x2F; bar 7</span><br></pre></td></tr></table></figure>

<p>上述代码中，myObj是一个普通对象，通过iterEntries函数，就有了 Iterator 接口。也就是说，可以在任意对象上部署next方法。</p>
<p>下面是一个对数组部署 Iterator 接口的例子，尽管数组原生具有这个接口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* makeSimpleGenerator(array)&#123;</span><br><span class="line">  var nextIndex &#x3D; 0;</span><br><span class="line"></span><br><span class="line">  while(nextIndex &lt; array.length)&#123;</span><br><span class="line">    yield array[nextIndex++];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var gen &#x3D; makeSimpleGenerator([&#39;yo&#39;, &#39;ya&#39;]);</span><br><span class="line"></span><br><span class="line">gen.next().value &#x2F;&#x2F; &#39;yo&#39;</span><br><span class="line">gen.next().value &#x2F;&#x2F; &#39;ya&#39;</span><br><span class="line">gen.next().done  &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>（4）作为数据结构</p>
<p>Generator 可以看作是数据结构，更确切地说，可以看作是一个数组结构，因为 Generator 函数可以返回一系列的值，这意味着它可以对任意表达式，提供类似数组的接口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* doStuff() &#123;</span><br><span class="line">  yield fs.readFile.bind(null, &#39;hello.txt&#39;);</span><br><span class="line">  yield fs.readFile.bind(null, &#39;world.txt&#39;);</span><br><span class="line">  yield fs.readFile.bind(null, &#39;and-such.txt&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码就是依次返回三个函数，但是由于使用了 Generator 函数，导致可以像处理数组那样，处理这三个返回的函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (task of doStuff()) &#123;</span><br><span class="line">  &#x2F;&#x2F; task是一个函数，可以像回调函数那样使用它</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际上，如果用 ES5 表达，完全可以用数组模拟 Generator 的这种用法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function doStuff() &#123;</span><br><span class="line">  return [</span><br><span class="line">    fs.readFile.bind(null, &#39;hello.txt&#39;),</span><br><span class="line">    fs.readFile.bind(null, &#39;world.txt&#39;),</span><br><span class="line">    fs.readFile.bind(null, &#39;and-such.txt&#39;)</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的函数，可以用一模一样的<code>for...of</code>循环处理！两相一比较，就不难看出 Generator 使得数据或者操作，具备了类似数组的接口。</p>
]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>数组的常见方法&amp;数组的遍历</title>
    <url>/2020/04/18/19-%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95&amp;%E6%95%B0%E7%BB%84%E7%9A%84%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>数组的四个基本方法如下</strong>：（数组元素的添加和删除）</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left">push()</td>
<td align="left">向数组的<strong>最后面</strong>插入一个或多个元素，返回结果为<strong>该数组新的长度</strong></td>
<td align="left">会改变原数组</td>
</tr>
<tr>
<td align="left">pop()</td>
<td align="left">删除数组中的<strong>最后一个</strong>元素，返回结果为<strong>被删除的元素</strong></td>
<td align="left">会改变原数组</td>
</tr>
<tr>
<td align="left">unshift()</td>
<td align="left">在数组<strong>最前面</strong>插入一个或多个元素，返回结果为<strong>该数组新的长度</strong></td>
<td align="left">会改变原数组</td>
</tr>
<tr>
<td align="left">shift()</td>
<td align="left">删除数组中的<strong>第一个</strong>元素，返回结果为<strong>被删除的元素</strong></td>
<td align="left">会改变原数组</td>
</tr>
<tr>
<td align="left"><a id="more"></a></td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<p><strong>数组的常见方法如下</strong>：</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left">slice()</td>
<td align="left">从数组中<strong>提取</strong>指定的一个或多个元素，返回结果为<strong>新的数组</strong></td>
<td align="left">不会改变原数组</td>
</tr>
<tr>
<td align="left">splice()</td>
<td align="left">从数组中<strong>删除</strong>指定的一个或多个元素，返回结果为<strong>新的数组</strong></td>
<td align="left">会改变原数组</td>
</tr>
<tr>
<td align="left">concat()</td>
<td align="left">连接两个或多个数组，返回结果为<strong>新的数组</strong></td>
<td align="left">不会改变原数组</td>
</tr>
<tr>
<td align="left">join()</td>
<td align="left">将数组转换为字符串，返回结果为<strong>转换后的字符串</strong></td>
<td align="left">不会改变原数组</td>
</tr>
<tr>
<td align="left">reverse()</td>
<td align="left">反转数组，返回结果为<strong>反转后的数组</strong></td>
<td align="left">会改变原数组</td>
</tr>
<tr>
<td align="left">sort()</td>
<td align="left">对数组的元素,默认按照<strong>Unicode编码</strong>，从小到大进行排序</td>
<td align="left">会改变原数组</td>
</tr>
</tbody></table>
<p><strong>遍历数组的方法如下</strong>：</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left">for循环</td>
<td align="left">这个大家都懂</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">forEach()</td>
<td align="left">和 for循环类似，但需要兼容IE8以上</td>
<td align="left">forEach() 没有返回值。也就是说，它的返回值是 undefined</td>
</tr>
<tr>
<td align="left">map()</td>
<td align="left">对原数组中的每一项进行加工，将组成新的数组</td>
<td align="left">不会改变原数组</td>
</tr>
<tr>
<td align="left">filter()</td>
<td align="left">对数组中每一项运行回调函数，该函数返回结果是true的项，将组成新的数组，返回结果为<strong>新的数组</strong>。可以起到过滤的作用</td>
<td align="left">不会改变原数组</td>
</tr>
<tr>
<td align="left">every()</td>
<td align="left">如果有一项返回false，则停止遍历，此方法返回 false</td>
<td align="left">一假即假。要求每一项都返回true，最终的结果才返回true</td>
</tr>
<tr>
<td align="left">some()</td>
<td align="left">只要有一项返回true，则停止遍历，此方法返回true</td>
<td align="left">一真即真。要求每一项都返回false，最终的结果才返回false</td>
</tr>
<tr>
<td align="left">reduce</td>
<td align="left">为数组中的每一个元素，依次执行回调函数</td>
<td align="left"></td>
</tr>
</tbody></table>
<p><strong>数组的其他方法如下</strong>：</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left">indexOf(value)</td>
<td align="left">从前往后索引，获取 value 在数组中的第一个下标</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">lastIndexOf(value)</td>
<td align="left">从后往前索引，获取 value 在数组中的最后一个下标</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">find(function())</td>
<td align="left">找出<strong>第一个</strong>满足「指定条件返回true」的元素。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">findIndex(function())</td>
<td align="left">找出<strong>第一个</strong>满足「指定条件返回true」的元素的index</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Array.from(arrayLike)</td>
<td align="left">将<strong>伪数组</strong>转化为<strong>真数组</strong></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Array.of(value1, value2, value3)</td>
<td align="left">将<strong>一系列值</strong>转换成数组。</td>
<td align="left"></td>
</tr>
</tbody></table>
<h2 id="数组的四个基本方法（数组元素的添加和删除）"><a href="#数组的四个基本方法（数组元素的添加和删除）" class="headerlink" title="数组的四个基本方法（数组元素的添加和删除）"></a>数组的四个基本方法（数组元素的添加和删除）</h2><h3 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h3><p><code>push()</code>：向数组的<strong>最后面</strong>插入一个或多个元素，返回结果为<strong>该数组新的长度</strong>。</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">数组的新长度 = 数组.push(元素);</span><br></pre></td></tr></table></figure>

<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"王一"</span>, <span class="string">"王二"</span>, <span class="string">"王三"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result1 = arr.push(<span class="string">"王四"</span>); <span class="comment">// 末尾插入一个元素</span></span><br><span class="line"><span class="keyword">var</span> result2 = arr.push(<span class="string">"王五"</span>, <span class="string">"王六"</span>); <span class="comment">// 末尾插入多个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result1); <span class="comment">// 打印结果：4</span></span><br><span class="line"><span class="built_in">console</span>.log(result2); <span class="comment">// 打印结果：6</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(arr)); <span class="comment">// 打印结果：["王一","王二","王三","王四","王五","王六"]</span></span><br></pre></td></tr></table></figure>

<h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><p><code>pop()</code>：删除数组中的<strong>最后一个</strong>元素，返回结果为<strong>被删除的元素</strong>。</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">被删除的元素 = 数组.pop();</span><br></pre></td></tr></table></figure>

<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"王一"</span>, <span class="string">"王二"</span>, <span class="string">"王三"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result1 = arr.pop();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result1); <span class="comment">// 打印结果：王三</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(arr)); <span class="comment">// 打印结果：["王一","王二"]</span></span><br></pre></td></tr></table></figure>


<h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h3><p><code>unshift()</code>：在数组<strong>最前面</strong>插入一个或多个元素，返回结果为<strong>该数组新的长度</strong>。插入元素后，其他元素的索引会依次调整。</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">数组的新长度 = 数组.unshift(元素);</span><br></pre></td></tr></table></figure>

<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"王一"</span>, <span class="string">"王二"</span>, <span class="string">"王三"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result1 = arr.unshift(<span class="string">"王四"</span>); <span class="comment">// 最前面插入一个元素</span></span><br><span class="line"><span class="keyword">var</span> result2 = arr.unshift(<span class="string">"王五"</span>, <span class="string">"王六"</span>); <span class="comment">// 最前面插入多个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result1); <span class="comment">// 打印结果：4</span></span><br><span class="line"><span class="built_in">console</span>.log(result2); <span class="comment">// 打印结果：6</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(arr)); <span class="comment">// 打印结果：["王五","王六","王四","王一","王二","王三"]</span></span><br></pre></td></tr></table></figure>

<h3 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h3><p><code>shift()</code>：删除数组中的<strong>第一个</strong>元素，返回结果为<strong>被删除的元素</strong>。</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">被删除的元素 = 数组.shift();</span><br></pre></td></tr></table></figure>

<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"王一"</span>, <span class="string">"王二"</span>, <span class="string">"王三"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result1 = arr.shift();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result1); <span class="comment">// 打印结果：王一</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(arr)); <span class="comment">// 打印结果：["王二","王三"]</span></span><br></pre></td></tr></table></figure>

<h2 id="数组的常见方法"><a href="#数组的常见方法" class="headerlink" title="数组的常见方法"></a>数组的常见方法</h2><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><p><code>slice()</code>：从数组中<strong>提取</strong>指定的一个或者多个元素，返回结果为<strong>新的数组</strong>（不会改变原来的数组）。</p>
<p>备注：该方法不会改变原数组，而是将截取到的元素封装到一个新数组中返回。</p>
<p><strong>语法</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">新数组 = 原数组.slice(开始位置的索引, 结束位置的索引);    <span class="comment">//注意：包含开始索引，不包含结束索引</span></span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result1 = arr.slice(<span class="number">2</span>); <span class="comment">//从第二个值开始提取</span></span><br><span class="line"><span class="keyword">var</span> result2 = arr.slice(<span class="number">-2</span>); <span class="comment">//提取最后两个元素</span></span><br><span class="line"><span class="keyword">var</span> result3 = arr.slice(<span class="number">2</span>, <span class="number">4</span>); <span class="comment">//提取从第二个到第四个之间的值（不包括第四个值）</span></span><br><span class="line"><span class="keyword">var</span> result4 = arr.slice(<span class="number">4</span>, <span class="number">2</span>); <span class="comment">//空</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr:"</span> + <span class="built_in">JSON</span>.stringify(arr));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result1:"</span> + <span class="built_in">JSON</span>.stringify(result1));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result2:"</span> + <span class="built_in">JSON</span>.stringify(result2));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result3:"</span> + <span class="built_in">JSON</span>.stringify(result3));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result4:"</span> + <span class="built_in">JSON</span>.stringify(result4));</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr:[<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>]</span><br><span class="line">result1:[<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>]</span><br><span class="line">result2:[<span class="string">"e"</span>,<span class="string">"f"</span>]</span><br><span class="line">result3:[<span class="string">"c"</span>,<span class="string">"d"</span>]</span><br><span class="line">result4:[]</span><br></pre></td></tr></table></figure>


<p><strong>补充</strong>：</p>
<p>很多前端开发人员会用 slice()将伪数组，转化为真数组。写法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">array = <span class="built_in">Array</span>.prototye.slice.call(arrayLike)</span><br><span class="line">或者</span><br><span class="line">array = [].slice.call(arrayLike)</span><br></pre></td></tr></table></figure>

<p>ES6 看不下去这种蹩脚的转化方法，于是出了一个新的 API：（专门用来将伪数组转化成真数组）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">array = <span class="built_in">Array</span>.from(arrayLike)</span><br></pre></td></tr></table></figure>

<h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><p><code>splice()</code>：从数组中<strong>删除</strong>指定的一个或多个元素，返回结果为<strong>新的数组</strong>（会改变原来的数组）。</p>
<p>备注：该方法会改变原数组，会将指定元素从原数组中删除；被删除的元素会封装到一个新的数组中返回。</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">新数组 = 原数组.splice(起始索引index, 需要删除的个数, 第三个参数, 第四个参数...);</span><br></pre></td></tr></table></figure>

<p>上方语法中，第三个及之后的参数，表示：向原数组中添加新的元素，这些元素将会自动插入到开始位置索引的前面。</p>
<p>举例1：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>];</span><br><span class="line"><span class="keyword">var</span> result1 = arr1.splice(<span class="number">1</span>); <span class="comment">//从第index为1的位置开始，删除元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr1："</span> + <span class="built_in">JSON</span>.stringify(arr1));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result1："</span> + <span class="built_in">JSON</span>.stringify(result1));</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arr1：[&quot;a&quot;]</span><br><span class="line">result1：[&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;]</span><br></pre></td></tr></table></figure>


<p>举例2：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>];</span><br><span class="line"><span class="keyword">var</span> result2 = arr2.splice(<span class="number">-2</span>); <span class="comment">//删除最后两个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr2："</span> + <span class="built_in">JSON</span>.stringify(arr2));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result2："</span> + <span class="built_in">JSON</span>.stringify(result2));</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arr2：[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]</span><br><span class="line">result2：[&quot;e&quot;,&quot;f&quot;]</span><br></pre></td></tr></table></figure>

<p>举例3：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>];</span><br><span class="line"><span class="keyword">var</span> result3 = arr3.splice(<span class="number">1</span>, <span class="number">3</span>); <span class="comment">//从第index为1的位置开始删除元素,一共删除三个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr3："</span> + <span class="built_in">JSON</span>.stringify(arr3));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result3："</span> + <span class="built_in">JSON</span>.stringify(result3));</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arr3：[&quot;a&quot;,&quot;e&quot;,&quot;f&quot;]</span><br><span class="line">result3：[&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]</span><br></pre></td></tr></table></figure>


<p>举例4：（我们来看看<strong>第三个参数</strong>的用法）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr4 = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//从第index为1的位置开始删除元素,一共删除三个元素。并且在 index=1 的前面追加两个元素</span></span><br><span class="line"><span class="keyword">var</span> result4 = arr4.splice(<span class="number">1</span>, <span class="number">3</span>, <span class="string">"千古壹号"</span>, <span class="string">"vae"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr4："</span> + <span class="built_in">JSON</span>.stringify(arr4));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result4："</span> + <span class="built_in">JSON</span>.stringify(result4));</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr4：[<span class="string">"a"</span>,<span class="string">"千古壹号"</span>,<span class="string">"vae"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>]</span><br><span class="line">result4：[<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>]</span><br></pre></td></tr></table></figure>

<h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><p><code>concat()</code>：连接两个或多个数组，返回结果为<strong>新的数组</strong>。（不会改变原数组）</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">新数组 = 数组<span class="number">1.</span>concat(数组<span class="number">2</span>, 数组<span class="number">3</span> ...);</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">"千古壹号"</span>, <span class="string">"vae"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result1 = arr1.concat(arr2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result2 = arr2.concat(arr1, arr3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr1 ="</span> + <span class="built_in">JSON</span>.stringify(arr1));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr2 ="</span> + <span class="built_in">JSON</span>.stringify(arr2));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr3 ="</span> + <span class="built_in">JSON</span>.stringify(arr3));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result1 ="</span> + <span class="built_in">JSON</span>.stringify(result1));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result2 ="</span> + <span class="built_in">JSON</span>.stringify(result2));</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr1 =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr2 =[<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line">arr3 =[<span class="string">"千古壹号"</span>,<span class="string">"vae"</span>]</span><br><span class="line"></span><br><span class="line">result1 =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line">result2 =[<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">"千古壹号"</span>,<span class="string">"vae"</span>]</span><br></pre></td></tr></table></figure>

<p>从打印结果中可以看到，原数组并没有被修改。</p>
<h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><p><code>join()</code>：将数组转换为字符串，返回结果为<strong>转换后的字符串</strong>（不会改变原来的数组）。</p>
<p>补充：<code>join()</code>方法可以指定一个<strong>字符串</strong>作为参数，这个字符串将会成为数组中元素的<strong>连接符</strong>；如果不指定连接符，则默认使用 <code>,</code> 作为连接符，此时和 <code>toString()的效果是一致的</code>。</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">新的字符串 = 原数组.join(参数); <span class="comment">// 参数选填</span></span><br></pre></td></tr></table></figure>

<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result1 = arr.join(); <span class="comment">// 这里没有指定连接符，所以默认使用 , 作为连接符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result2 = arr.join(<span class="string">"-"</span>); <span class="comment">// 使用指定的字符串作为连接符</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr); <span class="comment">// 打印结果：object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> result1); <span class="comment">// 打印结果：string</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr ="</span> + <span class="built_in">JSON</span>.stringify(arr));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result1 ="</span> + <span class="built_in">JSON</span>.stringify(result1));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result2 ="</span> + <span class="built_in">JSON</span>.stringify(result2));</span><br></pre></td></tr></table></figure>

<p>上方代码中，最后三行的打印结果是：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr =[<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line">result1 =a,b,c</span><br><span class="line">result2 =a-b-c</span><br></pre></td></tr></table></figure>

<h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><p><code>reverse()</code>：反转数组，返回结果为<strong>反转后的数组</strong>（会改变原来的数组）。</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">反转后的数组  &#x3D;  数组.reverse();</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = arr.reverse(); <span class="comment">// 将数组 arr 进行反转</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr ="</span> + <span class="built_in">JSON</span>.stringify(arr));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result ="</span> + <span class="built_in">JSON</span>.stringify(result));</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr =[<span class="string">"f"</span>,<span class="string">"e"</span>,<span class="string">"d"</span>,<span class="string">"c"</span>,<span class="string">"b"</span>,<span class="string">"a"</span>]</span><br><span class="line">result =[<span class="string">"f"</span>,<span class="string">"e"</span>,<span class="string">"d"</span>,<span class="string">"c"</span>,<span class="string">"b"</span>,<span class="string">"a"</span>]</span><br></pre></td></tr></table></figure>

<p>从打印结果可以看出，原来的数组已经被改变了。</p>
<h2 id="sort-方法"><a href="#sort-方法" class="headerlink" title="sort()方法"></a>sort()方法</h2><blockquote>
<p>sort()方法要好好理解。所以，我们单独用一大段来讲。</p>
</blockquote>
<p><code>sort()</code>：对数组的元素进行从小到大来排序（会改变原来的数组）。</p>
<h3 id="sort-方法举例：无参时"><a href="#sort-方法举例：无参时" class="headerlink" title="sort()方法举例：无参时"></a>sort()方法举例：无参时</h3><p>如果在使用 sort() 方法时不带参，则默认按照<strong>Unicode编码</strong>，从小到大进行排序。</p>
<p><strong>举例1</strong>：（当数组中的元素为字符串时）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">"e"</span>, <span class="string">"b"</span>, <span class="string">"d"</span>, <span class="string">"a"</span>, <span class="string">"f"</span>, <span class="string">"c"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = arr1.sort(); <span class="comment">// 将数组 arr1 进行排序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr1 ="</span> + <span class="built_in">JSON</span>.stringify(arr1));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result ="</span> + <span class="built_in">JSON</span>.stringify(result));</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr1 =[<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>]</span><br><span class="line">result =[<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>]</span><br></pre></td></tr></table></figure>

<p>从上方的打印结果中，我们可以看到，sort方法会改变原数组，而且方法的返回值也是同样的结果。</p>
<p><strong>举例2</strong>：（当数组中的元素为数字时）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = arr2.sort(); <span class="comment">// 将数组 arr2 进行排序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr2 ="</span> + <span class="built_in">JSON</span>.stringify(arr2));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result ="</span> + <span class="built_in">JSON</span>.stringify(result));</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr2 =[<span class="number">1</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">result =[<span class="number">1</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p>上方的打印结果中，你会发现，使用 sort() 排序后，数字<code>11</code>竟然在数字<code>2</code>的前面。这是为啥呢？因为上面讲到了，<code>sort()</code>方法是按照<strong>Unicode编码</strong>进行排序的。</p>
<p>那如果我想让 arr2 里的数字，完全按照从小到大排序，怎么操作呢？继续往下看。</p>
<h3 id="sort-方法举例：带参时"><a href="#sort-方法举例：带参时" class="headerlink" title="sort()方法举例：带参时"></a>sort()方法举例：带参时</h3><p>如果在 sort()方法中带参，我们就可以<strong>自定义</strong>排序规则。具体做法如下：</p>
<p>我们可以在sort()添加一个回调函数，来指定排序规则。回调函数中需要定义两个形参，浏览器将会分别使用数组中的元素作为实参去调用回调函数</p>
<p>浏览器根据回调函数的返回值来决定元素的排序：（重要）</p>
<ul>
<li><p>如果返回一个大于0的值，则元素会交换位置</p>
</li>
<li><p>如果返回一个小于0的值，则元素位置不变</p>
</li>
<li><p>如果返回一个0，则认为两个元素相等，则不交换位置</p>
</li>
</ul>
<p><strong>代码举例</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义排序规则</span></span><br><span class="line"><span class="keyword">var</span> result = arr3.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a &gt; b) &#123; <span class="comment">// 如果 a 大于 b，则交换 a 和 b 的位置</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &lt; b) &#123; <span class="comment">// 如果 a 小于 b，则位置不变</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果 a 等于 b，则位置不变</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr3 ="</span> + <span class="built_in">JSON</span>.stringify(arr3));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result ="</span> + <span class="built_in">JSON</span>.stringify(result));</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr3 =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>]</span><br><span class="line">result =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>]</span><br></pre></td></tr></table></figure>

<p>上方代码的写法太啰嗦了，其实也可以简化为如下写法：</p>
<p><strong>代码优化</strong>：（冒泡排序）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义排序规则</span></span><br><span class="line"><span class="keyword">var</span> result = arr3.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a - b; <span class="comment">// 升序排列</span></span><br><span class="line"><span class="comment">// return b - a; // 降序排列</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr3 ="</span> + <span class="built_in">JSON</span>.stringify(arr3));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result ="</span> + <span class="built_in">JSON</span>.stringify(result));</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr3 =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>]</span><br><span class="line">result =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>]</span><br></pre></td></tr></table></figure>


<h3 id="sort方法举例：将数组从小到大排序"><a href="#sort方法举例：将数组从小到大排序" class="headerlink" title="sort方法举例：将数组从小到大排序"></a>sort方法举例：将数组从小到大排序</h3><p>将数组从小到大排序，这个例子很常见。</p>
<p>下面这段代码，在实际开发中，经常用到，一定要掌握。完整代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> dataList = [</span></span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                    title: <span class="string">'品牌鞋子，高品质低价入手'</span>,</span></span><br><span class="line">                    publishTime: 200,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                    title: <span class="string">'不是很贵，但是很暖'</span>,</span></span><br><span class="line">                    publishTime: 100,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                    title: <span class="string">'无法拒绝的美食，跟我一起吃吃'</span>,</span></span><br><span class="line">                    publishTime: 300,</span><br><span class="line">                &#125;,</span><br><span class="line">            ];</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'qianguyihao 排序前的数组：'</span> + <span class="built_in">JSON</span>.stringify(dataList));</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 将dataList 数组，按照 publishTime 字段，从小到大排序。（会改变原数组）</span></span></span><br><span class="line"><span class="actionscript">            dataList.sort(<span class="function"><span class="keyword">function</span><span class="params">(a, b)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">parseInt</span>(a.publishTime) - <span class="built_in">parseInt</span>(b.publishTime);</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'qianguyihao 排序后的数组：'</span> + <span class="built_in">JSON</span>.stringify(dataList));</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">qianguyihao 排序前的数组：[</span><br><span class="line">    &#123;&quot;title&quot;:&quot;品牌鞋子，高品质低价入手&quot;,&quot;publishTime&quot;:200&#125;,</span><br><span class="line">    &#123;&quot;title&quot;:&quot;不是很贵，但是很暖&quot;,&quot;publishTime&quot;:100&#125;,</span><br><span class="line">    &#123;&quot;title&quot;:&quot;无法拒绝的美食，跟我一起吃吃&quot;,&quot;publishTime&quot;:300&#125;]</span><br><span class="line"></span><br><span class="line">qianguyihao 排序后的数组：[</span><br><span class="line">    &#123;&quot;title&quot;:&quot;不是很贵，但是很暖&quot;,&quot;publishTime&quot;:100&#125;,</span><br><span class="line">    &#123;&quot;title&quot;:&quot;品牌鞋子，高品质低价入手&quot;,&quot;publishTime&quot;:200&#125;,</span><br><span class="line">    &#123;&quot;title&quot;:&quot;无法拒绝的美食，跟我一起吃吃&quot;,&quot;publishTime&quot;:300&#125;]</span><br></pre></td></tr></table></figure>



<h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h2><p>遍历数组即：获取并操作数组中的每一个元素。在我们的实战开发中，使用得非常频繁。</p>
<p>遍历数组的方法包括：every()、filter()、forEach()、map()、some()</p>
<p>PS：这几个方法<strong>不会修改原数组</strong>。</p>
<p>语法格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数组&#x2F;boolean&#x2F;无 &#x3D; 数组.every&#x2F;filter&#x2F;forEach&#x2F;map&#x2F;some(</span><br><span class="line">                        function(item, index, arr)&#123;</span><br><span class="line">                                        程序和返回值；</span><br><span class="line">                        &#125;)</span><br></pre></td></tr></table></figure>

<p>有了这几种方法，就可以替代一些for循环了。下面依次来介绍。</p>
<h3 id="for循环-遍历"><a href="#for循环-遍历" class="headerlink" title="for循环 遍历"></a>for循环 遍历</h3><p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"生命壹号"</span>,<span class="string">"许嵩"</span>,<span class="string">"永不止步"</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);  <span class="comment">// arr[i]代表的是数组中的每一个元素i</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>

<h3 id="forEach-遍历"><a href="#forEach-遍历" class="headerlink" title="forEach() 遍历"></a>forEach() 遍历</h3><blockquote>
<p><code>forEach()</code> 这种遍历方法只支持IE8以上的浏览器。IE8及以下的浏览器均不支持该方法。所以如果需要兼容IE8，则不要使用forEach，改为使用for循环来遍历即可。</p>
</blockquote>
<p>forEach()方法需要一个函数作为参数。这种函数，是由我们创建但是不由我们调用的，我们称为回调函数。</p>
<p>数组中有几个元素，该回调函数就会执行几次。执行完毕后，浏览器会将遍历到的元素。</p>
<p>回调函数中传递三个参数：</p>
<ul>
<li><p>第一个参数，就是当前正在遍历的元素</p>
</li>
<li><p>第二个参数，就是当前正在遍历的元素的索引</p>
</li>
<li><p>第三个参数，就是正在遍历的数组</p>
</li>
</ul>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"王一"</span>, <span class="string">"王二"</span>, <span class="string">"王三"</span>];</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, obj</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"item:"</span> + item);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"index:"</span> + index);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"obj:"</span> + obj);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"----------"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">item:王一</span><br><span class="line">index:<span class="number">0</span></span><br><span class="line">obj:王一,王二,王三</span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line">item:王二</span><br><span class="line">index:<span class="number">1</span></span><br><span class="line">obj:王一,王二,王三</span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line">item:王三</span><br><span class="line">index:<span class="number">2</span></span><br><span class="line">obj:王一,王二,王三</span><br><span class="line">----------</span><br></pre></td></tr></table></figure>

<p>注意，forEach() 的返回值是 undefined。也就是说，它没有返回值。如果你尝试 <code>tempArry = arr.forEach()</code>这种方式来接收，是达不到效果的。</p>
<h3 id="map-方法"><a href="#map-方法" class="headerlink" title="map()方法"></a>map()方法</h3><p>解释：对数组中每一项运行回调函数，返回该函数的结果，组成的新数组（返回的是<strong>加工之后</strong>的新数组）。</p>
<p><strong>举例1</strong>：（拷贝的过程中改变数组元素的值）</p>
<p>有一个已知的数组arr1，我要求让arr1中的每个元素的值都加10，这里就可以用到 map 方法。代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = arr1.map(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item + <span class="number">10</span>;  <span class="comment">//让arr1中的每个元素加10</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></table></figure>


<p><strong>举例2</strong>：【重要案例，实际开发中经常用到】</p>
<p>将A数组中某个属性的值，存储到B数组中。代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'千古壹号'</span>, <span class="attr">age</span>: <span class="string">'28'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'许嵩'</span>, <span class="attr">age</span>: <span class="string">'32'</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将数组 arr1 中的 name 属性，存储到 数组 arr2 中</span></span><br><span class="line"><span class="keyword">const</span> arr2 = arr1.map(<span class="function"><span class="params">item</span> =&gt;</span> item.name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将数组 arr1 中的 name、age这两个属性，改一下“键”的名字，存储到 arr3中</span></span><br><span class="line"><span class="keyword">const</span> arr3 = arr1.map(<span class="function"><span class="params">item</span> =&gt;</span> (&#123;</span><br><span class="line">    myName: item.name,</span><br><span class="line">    myAge: item.age,</span><br><span class="line">&#125;)); <span class="comment">// 将数组 arr1 中的 name 属性，存储到 数组 arr2 中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr1:'</span> + <span class="built_in">JSON</span>.stringify(arr1));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr2:'</span> + <span class="built_in">JSON</span>.stringify(arr2));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr3:'</span> + <span class="built_in">JSON</span>.stringify(arr3));</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arr1:[&#123;&quot;name&quot;:&quot;千古壹号&quot;,&quot;age&quot;:&quot;28&quot;&#125;,&#123;&quot;name&quot;:&quot;许嵩&quot;,&quot;age&quot;:&quot;32&quot;&#125;]</span><br><span class="line"></span><br><span class="line">arr2:[&quot;千古壹号&quot;,&quot;许嵩&quot;]</span><br><span class="line"></span><br><span class="line">arr3:[&#123;&quot;myName&quot;:&quot;千古壹号&quot;,&quot;myAge&quot;:&quot;28&quot;&#125;,&#123;&quot;myName&quot;:&quot;许嵩&quot;,&quot;myAge&quot;:&quot;32&quot;&#125;]</span><br></pre></td></tr></table></figure>

<p>map的应用场景，主要就是以上两种。</p>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p>解释：对数组中每一项运行回调函数，该函数返回结果是true的项，将组成新的数组（返回值就是这个新的数组）。</p>
<p><strong>举例1</strong>：找出数组 arr1 中大于4的元素，返回一个新的数组。代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = arr1.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">4</span>; <span class="comment">//将arr1中大于4的元素返回，组成新的数组</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(arr2));</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[6,5,6]</span><br></pre></td></tr></table></figure>

<p>上方代码的ES6写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = arr1.filter(<span class="function"><span class="params">item</span>=&gt;</span> item &gt; <span class="number">4</span>); <span class="comment">//将arr1中大于4的元素返回，组成新的数组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(arr2));</span><br></pre></td></tr></table></figure>

<p><strong>举例2</strong>：</p>
<p>获取数组A中指定类型的对象，放到数组B中。代码举例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'许嵩'</span>, <span class="attr">type</span>: <span class="string">'一线'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'周杰伦'</span>, <span class="attr">type</span>: <span class="string">'过气'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'邓紫棋'</span>, <span class="attr">type</span>: <span class="string">'一线'</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = arr1.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.type == <span class="string">'一线'</span>); <span class="comment">// 筛选出一线歌手</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(arr2));</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="string">"name"</span>:<span class="string">"许嵩"</span>,<span class="string">"type"</span>:<span class="string">"一线"</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"邓紫棋"</span>,<span class="string">"type"</span>:<span class="string">"一线"</span>&#125;]</span><br></pre></td></tr></table></figure>

<h3 id="every-方法"><a href="#every-方法" class="headerlink" title="every()方法"></a>every()方法</h3><p><code>every()</code>：对数组中每一项运行回调函数，如果都返回true，every就返回true；如果有一项返回false，则停止遍历，此方法返回false。</p>
<p>注意：every()方法的返回值是boolean值，参数是回调函数。</p>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">"千古"</span>, <span class="string">"宿敌"</span>, <span class="string">"南山忆"</span>, <span class="string">"素颜"</span>];</span><br><span class="line"><span class="keyword">var</span> bool1 = arr1.every(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.length &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(bool1);  <span class="comment">//输出结果：false。只要有一个元素的长度是超过两个字符的，就返回false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">"千古"</span>, <span class="string">"宿敌"</span>, <span class="string">"南山"</span>, <span class="string">"素颜"</span>];</span><br><span class="line"><span class="keyword">var</span> bool2 = arr2.every(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.length &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(bool2);  <span class="comment">//输出结果：true。因为每个元素的长度都是两个字符。</span></span><br></pre></td></tr></table></figure>

<h3 id="some-方法"><a href="#some-方法" class="headerlink" title="some()方法"></a>some()方法</h3><p><code>some()</code>：对数组中每一项运行回调函数，只要有一项返回true，则停止遍历，此方法返回true。</p>
<p>注意：some()方法的返回值是boolean值。</p>
<h3 id="reduce-方法"><a href="#reduce-方法" class="headerlink" title="reduce()方法"></a>reduce()方法</h3><blockquote>
<p>reduce的发音：[rɪ’djuːs]。中文含义是减少。</p>
</blockquote>
<p><code>reduce()</code>：为数组中的每一个元素，依次执行回调函数。</p>
<p><strong>语法</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.reduce(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">previousValue, item, index, arr</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;, initialValue)</span><br></pre></td></tr></table></figure>

<p>参数解释：</p>
<ul>
<li><p>previousValue：上一次调用回调函数时的返回值，或者初始值</p>
</li>
<li><p>currentValue：当前正在处理的数组元素</p>
</li>
<li><p>currentIndex：当前正在处理的数组元素下标</p>
</li>
<li><p>array：调用reduce()方法的数组</p>
</li>
<li><p>initialValue：可选的初始值（作为第一次调用回调函数时传给 previousValue 的值）</p>
</li>
</ul>
<p>备注：如果能熟练使用 reduce 的用法，将能替代很多其他的数组方法。</p>
<p><strong>举例1</strong>：</p>
<p>计算数组中所有元素项的总和。代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">6</span>];</span><br><span class="line">sumValue = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">total, item</span>) </span>&#123; <span class="comment">//  计算 arr 数组中，所有元素项的综合</span></span><br><span class="line">    <span class="keyword">return</span> total + item;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sumValue:'</span> + sumValue); <span class="comment">// 打印结果：18</span></span><br></pre></td></tr></table></figure>

<h2 id="数组的其他方法"><a href="#数组的其他方法" class="headerlink" title="数组的其他方法"></a>数组的其他方法</h2><h3 id="indexOf-和-lastIndexOf-：获取数据的索引"><a href="#indexOf-和-lastIndexOf-：获取数据的索引" class="headerlink" title="indexOf() 和 lastIndexOf()：获取数据的索引"></a>indexOf() 和 lastIndexOf()：获取数据的索引</h3><p><strong>语法</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">索引值 = 数组.indexOf(value);</span><br><span class="line"></span><br><span class="line">索引值 = 数组.lastIndexOf(value);</span><br></pre></td></tr></table></figure>

<p><strong>解释</strong>：</p>
<ul>
<li><p>indexOf(value)：从前往后索引，获取 value 在数组中的第一个下标。</p>
</li>
<li><p>lastIndexOf(value) ：从后往前索引，获取 value 在数组中的最后一个下标。</p>
</li>
</ul>
<p><strong>作用</strong>：</p>
<p>利用这个方法，我们可以判断某个值是否在指定的数组中。<strong>如果没找到则返回<code>-1</code></strong>。</p>
<p> <strong>举例1</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"d"</span>,<span class="string">"c"</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">"c"</span>));       <span class="comment">//从前往后，找第一个"c"在哪个位置</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="string">"d"</span>));   <span class="comment">//从后往前，找第一个"d"在哪个位置</span></span><br></pre></td></tr></table></figure>


<p><strong>举例2</strong>：判断某个值是否在数组中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"29926392220"</span>, <span class="string">"29965620629"</span>, <span class="string">"28003663436"</span>, <span class="string">" "</span>, <span class="string">"28818504366"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = [</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">"smyh"</span>, <span class="attr">id</span>: <span class="string">"12334"</span>&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">"vae"</span>, <span class="attr">id</span>: <span class="string">"28818504366"</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">str.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr.indexOf(item.id));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h3><p><strong>语法</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">find(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, arr</span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>作用</strong>：找出<strong>第一个</strong>满足「指定条件返回true」的元素。</p>
<p>备注：一旦找到符合条件的第一个元素，将不再继续往下遍历。</p>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = arr.find(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">4</span>; <span class="comment">//遍历数组arr，一旦发现有第一个元素大于4，就把这个元素返回</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result);  <span class="comment">//打印结果：5</span></span><br></pre></td></tr></table></figure>

<h3 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex()"></a>findIndex()</h3><p><strong>语法</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, arr</span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>作用</strong>：找出<strong>第一个</strong>满足「指定条件返回true」的元素的index。</p>
<p>举例：</p>
<blockquote>
<p>我们直接把上面的代码中的find方法改成findIndex，来看看效果。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = arr.findIndex(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">4</span>; <span class="comment">//遍历数组arr，一旦发现有第一个元素大于4，就把这个元素的index返回</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//打印结果：3</span></span><br></pre></td></tr></table></figure>


<h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h3><p><strong>语法</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">array = <span class="built_in">Array</span>.from(arrayLike)</span><br></pre></td></tr></table></figure>

<p><strong>作用</strong>：将<strong>伪数组</strong>或可遍历对象转换为<strong>真数组</strong>。</p>
<p><strong>举例：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> btnArray = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(btnArray);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(btnArray[<span class="number">0</span>]);</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的布局中，有三个button标签，我们通过<code>getElementsByTagName</code>获取到的<code>btnArray</code>实际上是<strong>伪数组</strong>，并不是真实的数组：</p>
<p>既然<code>btnArray</code>是伪数组，它就不能使用数组的一般方法，否则会报错：</p>
<p>解决办法：采用<code>Array.from</code>方法将<code>btnArray</code>这个伪数组转换为真数组即可：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(btnArray);</span><br></pre></td></tr></table></figure>



<p><strong>伪数组与真数组的区别</strong>：</p>
<p>伪数组的原型链中没有 Array.prototype，而真数组的原型链中有 Array.prototype。因此伪数组没有 pop、join等属性。</p>
<h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h3><p><strong>语法</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(value1, value2, value3)</span><br></pre></td></tr></table></figure>

<p><strong>作用</strong>：将一系列值转换成数组。</p>
<p><strong>举例</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="string">'abc'</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="isArray-：判断是否为数组"><a href="#isArray-：判断是否为数组" class="headerlink" title="isArray()：判断是否为数组"></a>isArray()：判断是否为数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">布尔值 = <span class="built_in">Array</span>.isArray(被检测的值) ;</span><br></pre></td></tr></table></figure>

<p>以前，我们会通过 <code>A instanceof B</code>来判断 A 是否属于 B 类型。但是在数组里，这种 instanceof 方法已经用的不多了，因为有下面isArray()方法。</p>
<h3 id="toString-：转换数组"><a href="#toString-：转换数组" class="headerlink" title="toString()：转换数组"></a>toString()：转换数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">字符串 = 数组.toString();</span><br></pre></td></tr></table></figure>

<p>解释：把数组转换成字符串，每一项用<code>,</code>分割。</p>
<h3 id="valueOf-：返回数组本身"><a href="#valueOf-：返回数组本身" class="headerlink" title="valueOf()：返回数组本身"></a>valueOf()：返回数组本身</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">数组本身 = 数组.valueOf();</span><br></pre></td></tr></table></figure>

<p>这个方法的意义不大。因为我们指直接写数组对象的名字，就已经是数组本身了。</p>
<h2 id="数组练习"><a href="#数组练习" class="headerlink" title="数组练习"></a>数组练习</h2><h3 id="splice-练习：数组去重"><a href="#splice-练习：数组去重" class="headerlink" title="splice()练习：数组去重"></a>splice()练习：数组去重</h3><p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//去除数组中重复的数字</span></span><br><span class="line"><span class="comment">//获取数组中的每一个元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="comment">//console.log(arr[i]);</span></span><br><span class="line">  <span class="comment">/*获取当前元素后的所有元素*/</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">    <span class="comment">//console.log("----&gt;"+arr[j]);</span></span><br><span class="line">    <span class="comment">//判断两个元素的值是否相等</span></span><br><span class="line">    <span class="keyword">if</span> (arr[i] == arr[j]) &#123;</span><br><span class="line">      <span class="comment">//如果相等则证明出现了重复的元素，则删除j对应的元素</span></span><br><span class="line">      arr.splice(j, <span class="number">1</span>);</span><br><span class="line">      <span class="comment">//当删除了当前j所在的元素以后，后边的元素会自动补位</span></span><br><span class="line">      <span class="comment">//此时将不会在比较这个元素吧，我需要在比较一次j所在位置的元素</span></span><br><span class="line">      <span class="comment">//使j自减</span></span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>

<h3 id="清空数组"><a href="#清空数组" class="headerlink" title="清空数组"></a>清空数组</h3><p>清空数组，有以下几种方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">array.splice(<span class="number">0</span>);      <span class="comment">//方式1：删除数组中所有项目</span></span><br><span class="line">array.length = <span class="number">0</span>;     <span class="comment">//方式2：length属性可以赋值，在其它语言中length是只读</span></span><br><span class="line">array = [];           <span class="comment">//方式3：推荐</span></span><br></pre></td></tr></table></figure>

<h3 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h3><p><strong>问题</strong>：将一个字符串数组输出为<code>|</code>分割的形式，比如“千古|宿敌|素颜”。使用两种方式实现。</p>
<p>答案：</p>
<p>方式1：（不推荐）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"千古"</span>,<span class="string">"宿敌"</span>,<span class="string">"素颜"</span>];</span><br><span class="line"><span class="keyword">var</span> str = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> separator = <span class="string">"|"</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i&lt; arr.length;i++) &#123;</span><br><span class="line">    str += separator+arr[i];    <span class="comment">//从第1个数组元素开始，每个元素前面加上符号"|"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure>


<p>不推荐这种方式，因为：由于字符串的不变性，str拼接过多的话，容易导致内存溢出（很多个str都堆放在栈里）。</p>
<p>方式2：（推荐。通过array数组自带的api来实现）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"千古"</span>,<span class="string">"宿敌"</span>,<span class="string">"素颜"</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">"|"</span>));</span><br></pre></td></tr></table></figure>


<h3 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h3><p>题目：将一个字符串数组的元素的顺序进行反转，使用两种种方式实现。提示：第i个和第length-i-1个进行交换。</p>
<p>答案：</p>
<p>方式1：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = array.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        newArr[newArr.length] = array[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方式2：（算法里比较常见的方式）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;array.length/<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> temp = array[i];</span><br><span class="line">        array[i] = array[array.length<span class="number">-1</span>-i];</span><br><span class="line">        array[array.length<span class="number">-1</span>-i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方式3：（数组自带的reverse方法）</p>
<p>现在我们学习了数组自带的api，我们就可以直接使用reverse()方法。</p>
<h3 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a>练习3</h3><p>问题：针对工资的数组[1500,1200,2000,2100,1800]，把工资超过2000的删除。</p>
<p>答案：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1500</span>, <span class="number">1200</span>, <span class="number">2000</span>, <span class="number">2100</span>, <span class="number">1800</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = arr1.filter(<span class="function"><span class="keyword">function</span> (<span class="params">ele, index, array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ele &lt; <span class="number">2000</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></table></figure>


<h3 id="练习4"><a href="#练习4" class="headerlink" title="练习4"></a>练习4</h3><p>问题：找到数组[“c”,”a”,”z”,”a”,”x”,”a”]中每一个元素出现的次数。</p>
<p>分析：这道题建议用json数据来做，因为我们想知道a出现了几次，c出现了几次，x出现了几次。恰好<code>k:v ..  k:v</code>这种键值对的形式就比数组方便很多了。</p>
<p>键值对的形式：用key代表数组中的元素，用value代表元素出现的次数。</p>
<p>略难，答案暂略。</p>
<h3 id="练习5：数组去重"><a href="#练习5：数组去重" class="headerlink" title="练习5：数组去重"></a>练习5：数组去重</h3><p>问题：编写一个方法去掉一个数组中的重复元素。</p>
<p>分析：创建一个新数组，循环遍历，只要新数组中有老数组的值，就不用再添加了。</p>
<p>答案：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    编写一个方法 去掉一个数组的重复元素</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line">    <span class="keyword">var</span> aaa = fn(arr);</span><br><span class="line">    <span class="built_in">console</span>.log(aaa);</span><br><span class="line">    <span class="comment">//思路：创建一个新数组，循环遍历，只要新数组中有老数组的值，就不用再添加了。</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> newArr = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">            <span class="comment">//开闭原则</span></span><br><span class="line">            <span class="keyword">var</span> bool = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//每次都要判断新数组中是否有旧数组中的值。</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;newArr.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(array[i] === newArr[j])&#123;</span><br><span class="line">                    bool = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(bool)&#123;</span><br><span class="line">                newArr[newArr.length] = array[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newArr;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>内置对象Math</title>
    <url>/2020/04/18/20-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%EF%BC%9AMath/</url>
    <content><![CDATA[<hr>
<h2 id="内置对象简介"><a href="#内置对象简介" class="headerlink" title="内置对象简介"></a>内置对象简介</h2><blockquote>
<p>JavaScript 中的对象分为3种：自定义对象 、内置对象、 浏览器对象。</p>
</blockquote>
<blockquote>
<p>前面两种对象：是JS的基础内容，属于 ECMAScript； 第三个浏览器对象：属于JS独有，即 JS 内置的API。</p>
</blockquote>
<a id="more"></a>
<p><strong>内置对象</strong>：就是指这个语言自带的一些对象，供开发者使用，这些对象提供了一些常用或者最基本而必要的功能（属性和方法）。</p>
<p>内置对象最大的优点就是帮助我们快速开发。</p>
<p><strong>JavaScript的内置对象</strong>：</p>
<table>
<thead>
<tr>
<th align="left">内置对象</th>
<th align="left">对象说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Arguments</td>
<td align="left">函数参数集合</td>
</tr>
<tr>
<td align="left">Array</td>
<td align="left">数组</td>
</tr>
<tr>
<td align="left">Boolean</td>
<td align="left">布尔对象</td>
</tr>
<tr>
<td align="left">Math</td>
<td align="left">数学对象</td>
</tr>
<tr>
<td align="left">Date</td>
<td align="left">日期时间</td>
</tr>
<tr>
<td align="left">Error</td>
<td align="left">异常对象</td>
</tr>
<tr>
<td align="left">Function</td>
<td align="left">函数构造器</td>
</tr>
<tr>
<td align="left">Number</td>
<td align="left">数值对象</td>
</tr>
<tr>
<td align="left">Object</td>
<td align="left">基础对象</td>
</tr>
<tr>
<td align="left">RegExp</td>
<td align="left">正则表达式对象</td>
</tr>
<tr>
<td align="left">String</td>
<td align="left">字符串对象</td>
</tr>
</tbody></table>
<h2 id="内置对象-Math-的常见方法"><a href="#内置对象-Math-的常见方法" class="headerlink" title="内置对象 Math 的常见方法"></a>内置对象 Math 的常见方法</h2><p>Math 和其他的对象不同，它不是一个构造函数，不需要创建对象。所以我们不需要 通过 new 来调用，而是直接使用里面的属性和方法即可。</p>
<p>Math属于一个工具类，里面封装了数学运算相关的属性和方法。如下：</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Math.PI</td>
<td align="left">圆周率</td>
<td align="left">Math对象的属性</td>
</tr>
<tr>
<td align="left">Math.abs()</td>
<td align="left"><strong>返回绝对值</strong></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Math.floor()</td>
<td align="left"><strong>向下取整</strong>（往小取值）</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Math.ceil()</td>
<td align="left"><strong>向上取整</strong>（往大取值）</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Math.round()</td>
<td align="left">四舍五入取整（正数四舍五入，负数五舍六入）</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Math.random()</td>
<td align="left">生成0-1之间的<strong>随机浮点数</strong></td>
<td align="left">取值范围是 [0，1)</td>
</tr>
<tr>
<td align="left">Math.max(x, y, z)</td>
<td align="left">返回多个数中的最大值</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Math.min(x, y, z)</td>
<td align="left">返回多个数中的最小值</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Math.pow(x,y)</td>
<td align="left">返回 x 的 y 次幂</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Math.sqrt()</td>
<td align="left">对一个数进行开方运算</td>
<td align="left"></td>
</tr>
</tbody></table>
<p><strong>举例</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">-0.6</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(num));        <span class="comment">//取绝对值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(num));      <span class="comment">//向下取整，向小取</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(num));       <span class="comment">//向上取整，向大取</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(num));      <span class="comment">//四舍五入取整（正数四舍五入，负数五舍六入）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());        <span class="comment">//生成0-1之间的随机数</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.6</span><br><span class="line"></span><br><span class="line">-1</span><br><span class="line"></span><br><span class="line">-0</span><br><span class="line"></span><br><span class="line">-1</span><br><span class="line"></span><br><span class="line">0.6453756205275165</span><br></pre></td></tr></table></figure>

<h2 id="Math-abs-方法"><a href="#Math-abs-方法" class="headerlink" title="Math.abs() 方法"></a>Math.abs() 方法</h2><p>方法定义：返回绝对值。</p>
<p>注意：</p>
<ul>
<li>参数中可以接收字符串类型的数字，此时会将字符串做隐式类型转换，然后再调用 Math.abs() 方法。</li>
</ul>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="number">2</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="number">-2</span>)); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先做隐式类型转换，将 '-2'转换为数字类型 -2，然后再调用 Math.abs()</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="string">'-2'</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="string">'hello'</span>)); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>

<h2 id="Math-random-方法"><a href="#Math-random-方法" class="headerlink" title="Math.random() 方法"></a>Math.random() 方法</h2><p>方法定义：生成 [0, 1) 之间的<strong>随机浮点数</strong>。</p>
<p>我们来看几个例子。</p>
<h3 id="生成-0-x-之间的随机数"><a href="#生成-0-x-之间的随机数" class="headerlink" title="生成 [0, x) 之间的随机数"></a>生成 [0, x) 之间的随机数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*x)</span><br></pre></td></tr></table></figure>


<h3 id="生成-x-y-之间的随机数"><a href="#生成-x-y-之间的随机数" class="headerlink" title="生成 [x, y) 之间的随机数"></a>生成 [x, y) 之间的随机数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*(y-x)+x)</span><br></pre></td></tr></table></figure>

<h3 id="【重要】生成-x-y-之间的随机整数"><a href="#【重要】生成-x-y-之间的随机整数" class="headerlink" title="【重要】生成 [x, y]之间的随机整数"></a>【重要】生成 [x, y]之间的随机整数</h3><p>也就是说：生成两个整数之间的随机整数，<strong>并且要包含这两个整数</strong>。</p>
<p>这个功能很常用，我们可以将其封装成一个方法，代码实现如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 生成两个整数之间的随机整数，并且要包含这两个整数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getRandom(<span class="number">1</span>, <span class="number">10</span>));</span><br></pre></td></tr></table></figure>

<h3 id="随机点名"><a href="#随机点名" class="headerlink" title="随机点名"></a>随机点名</h3><p>根据上面的例子，我们还可以再延伸一下，来看看随机点名的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 生成两个整数之间的随机整数，并且要包含这两个整数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">'许嵩'</span>, <span class="string">'邓紫棋'</span>, <span class="string">'毛不易'</span>, <span class="string">'解忧邵帅'</span>];</span><br><span class="line"><span class="keyword">const</span> index = getRandom(<span class="number">0</span>, arr.length - <span class="number">1</span>); <span class="comment">// 生成随机的index</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[index]); <span class="comment">// 随机点名</span></span><br></pre></td></tr></table></figure>







<h2 id="乘方"><a href="#乘方" class="headerlink" title="乘方"></a>乘方</h2><p>如果想计算 <code>a 的 b 次方</code>，可以使用如下函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Math.pow(a, b);</span><br></pre></td></tr></table></figure>


<h2 id="开方"><a href="#开方" class="headerlink" title="开方"></a>开方</h2><p>如果想计算数值a的开二次方，可以使用如下函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Math.sqrt(a);</span><br></pre></td></tr></table></figure>

<p>sqrt即“square 开方”。比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; Math.sqrt(36);</span><br></pre></td></tr></table></figure>



<h2 id="url-编码和解码"><a href="#url-编码和解码" class="headerlink" title="url 编码和解码"></a>url 编码和解码</h2><p>URI (Uniform ResourceIdentifiers,通用资源标识符)进行编码，以便发送给浏览器。有效的URI中不能包含某些字符，例如空格。而这URI编码方法就可以对URI进行编码，它们用特殊的UTF-8编码替换所有无效的字符，从而让浏览器能够接受和理解。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">encodeURIComponent</span>();   <span class="comment">//把字符串作为 URI 组件进行编码</span></span><br><span class="line"><span class="built_in">decodeURIComponent</span>();   <span class="comment">//把字符串作为 URI 组件进行解码</span></span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">"http://www.cnblogs.com/smyhvae/"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="built_in">encodeURIComponent</span>(url);</span><br><span class="line"><span class="built_in">console</span>.log(str);                           <span class="comment">//打印url的编码</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">decodeURIComponent</span>(str));       <span class="comment">//对url进行编码后，再解码，还原为url</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Generator函数的异步应用</title>
    <url>/2020/04/18/20-Generator%E5%87%BD%E6%95%B0%E7%9A%84%E5%BC%82%E6%AD%A5%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要内容：</p>
<ul>
<li>传统方法</li>
<li>基本概念</li>
<li>Generator 函数</li>
<li>Thunk 函数</li>
<li>co 模块</li>
</ul>
<h2 id="传统方法"><a href="#传统方法" class="headerlink" title="传统方法"></a>传统方法</h2><p>ES6 诞生以前，异步编程的方法，大概有下面四种。</p>
<ul>
<li>回调函数</li>
<li>事件监听</li>
<li>发布/订阅</li>
<li>Promise 对象<a id="more"></a>

</li>
</ul>
<p>Generator 函数将 JavaScript 异步编程带入了一个全新的阶段。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>所谓”异步”，简单说就是一个任务不是连续完成的，可以理解成该任务被人为分成两段，先执行第一段，然后转而执行其他任务，等做好了准备，再回过头执行第二段。</p>
<p>比如，有一个任务是读取文件进行处理，任务的第一段是向操作系统发出请求，要求读取文件。然后，程序执行其他任务，等到操作系统返回文件，再接着执行任务的第二段（处理文件）。<strong>这种不连续的执行，就叫做异步。</strong></p>
<p>相应地，连续的执行就叫做同步。由于是连续执行，不能插入其他任务，所以操作系统从硬盘读取文件的这段时间，程序只能干等着。</p>
<h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>JavaScript 语言对异步编程的实现，就是回调函数。<strong>所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，就直接调用这个函数。回调函数的英语名字callback，直译过来就是”重新调用”。</strong></p>
<p>读取文件进行处理，是这样写的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fs.readFile(&#39;&#x2F;etc&#x2F;passwd&#39;, &#39;utf-8&#39;, function (err, data) &#123;</span><br><span class="line">  if (err) throw err;</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>readFile</code>函数的第三个参数，就是回调函数，也就是任务的第二段。等到操作系统返回了<code>/etc/passwd</code>这个文件以后，回调函数才会执行。</p>
<p><strong>一个有趣的问题是，为什么 Node 约定，回调函数的第一个参数，必须是错误对象err（如果没有错误，该参数就是null）？</strong></p>
<ul>
<li>原因是执行分成两段，第一段执行完以后，任务所在的上下文环境就已经结束了。在这以后抛出的错误，原来的上下文环境已经无法捕捉，只能当作参数，传入第二段。</li>
</ul>
<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>回调函数本身并没有问题，它的问题出现在多个回调函数嵌套。假定读取A文件之后，再读取B文件，代码如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fs.readFile(fileA, &#39;utf-8&#39;, function (err, data) &#123;</span><br><span class="line">  fs.readFile(fileB, &#39;utf-8&#39;, function (err, data) &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>不难想象，如果依次读取两个以上的文件，就会出现<strong>多重嵌套</strong>。代码不是纵向发展，而是横向发展，很快就会乱成一团，无法管理。因为多个异步操作形成了强耦合，<strong>只要有一个操作需要修改，它的上层回调函数和下层回调函数，可能都要跟着修改。这种情况就称为”回调函数地狱”（callback hell）</strong>。</p>
<p><code>Promise</code> 对象就是为了解决这个问题而提出的。它不是新的语法功能，而是一种新的写法，允许将回调函数的嵌套，改成<strong>链式调用</strong>。采用 Promise，连续读取多个文件，写法如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var readFile &#x3D; require(&#39;fs-readfile-promise&#39;);</span><br><span class="line"></span><br><span class="line">readFile(fileA)</span><br><span class="line">.then(function (data) &#123;</span><br><span class="line">  console.log(data.toString());</span><br><span class="line">&#125;)</span><br><span class="line">.then(function () &#123;</span><br><span class="line">  return readFile(fileB);</span><br><span class="line">&#125;)</span><br><span class="line">.then(function (data) &#123;</span><br><span class="line">  console.log(data.toString());</span><br><span class="line">&#125;)</span><br><span class="line">.catch(function (err) &#123;</span><br><span class="line">  console.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，我使用了fs-readfile-promise模块，它的作用就是返回一个 Promise 版本的readFile函数。Promise 提供then方法加载回调函数，catch方法捕捉执行过程中抛出的错误。</p>
<p>可以看到，Promise 的写法只是回调函数的改进，使用then方法以后，异步任务的两段执行看得更清楚了，除此以外，并无新意。</p>
<p><strong>Promise 的最大问题是代码冗余</strong>，原来的任务被 Promise 包装了一下，不管什么操作，一眼看去都是一堆then，原来的语义变得很不清楚。</p>
<p>那么，有没有更好的写法呢？</p>
<h2 id="Generator-函数"><a href="#Generator-函数" class="headerlink" title="Generator 函数"></a>Generator 函数</h2><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><p>传统的编程语言，早有异步编程的解决方案（其实是多任务的解决方案）。其中有一种叫做”协程”（coroutine），意思是多个线程互相协作，完成异步任务。</p>
<p>协程有点像函数，又有点像线程。它的运行流程大致如下。</p>
<ul>
<li>第一步，协程A开始执行。</li>
<li>第二步，协程A执行到一半，进入暂停，执行权转移到协程B。</li>
<li>第三步，（一段时间后）协程B交还执行权。</li>
<li>第四步，协程A恢复执行。</li>
<li>上面流程的协程A，就是异步任务，因为它分成两段（或多段）执行。</li>
</ul>
<p>举例来说，读取文件的协程写法如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* asyncJob() &#123;</span><br><span class="line">  &#x2F;&#x2F; ...其他代码</span><br><span class="line">  var f &#x3D; yield readFile(fileA);</span><br><span class="line">  &#x2F;&#x2F; ...其他代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码的函数<code>asyncJob</code>是一个协程，它的奥妙就在其中的yield命令。它表示执行到此处，执行权将交给其他协程。也就是说，<strong><code>yield</code>命令是异步两个阶段的分界线</strong>。</p>
<p>协程遇到<code>yield</code>命令就暂停，等到执行权返回，再从暂停的地方继续往后执行。它的最大优点，就是代码的写法非常像同步操作，如果去除<code>yield</code>命令，简直一模一样。</p>
<h3 id="协程的-Generator-函数实现"><a href="#协程的-Generator-函数实现" class="headerlink" title="协程的 Generator 函数实现"></a>协程的 Generator 函数实现</h3><p>Generator 函数是协程在 ES6 的实现，<strong>最大特点就是可以交出函数的执行权</strong>（即暂停执行）。</p>
<p>整个 Generator 函数就是一个封装的异步任务，或者说是异步任务的容器。<strong>异步操作需要暂停的地方，都用yield语句注明</strong>。Generator 函数的执行方法如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* gen(x) &#123;</span><br><span class="line">  var y &#x3D; yield x + 2;</span><br><span class="line">  return y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var g &#x3D; gen(1);</span><br><span class="line">g.next() &#x2F;&#x2F; &#123; value: 3, done: false &#125;</span><br><span class="line">g.next() &#x2F;&#x2F; &#123; value: undefined, done: true &#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，调用 Generator 函数，会返回一个内部指针（即遍历器）g。这是 Generator 函数不同于普通函数的另一个地方，即执行它不会返回结果，返回的是指针对象。调用指针g的<code>next</code>方法，会移动内部指针（即执行异步任务的第一段），指向第一个遇到的<code>yield</code>语句，上例是执行到<code>x + 2</code>为止。</p>
<p>换言之，<code>next</code>方法的作用是<strong>分阶段执行Generator函数</strong>。每次调用next方法，会返回一个对象，表示当前阶段的信息（value属性和done属性）。<code>value</code>属性是yield语句后面表达式的值，表示当前阶段的值；<code>done</code>属性是一个布尔值，表示 Generator 函数是否执行完毕，即是否还有下一个阶段。</p>
<h3 id="Generator-函数的数据交换和错误处理"><a href="#Generator-函数的数据交换和错误处理" class="headerlink" title="Generator 函数的数据交换和错误处理"></a>Generator 函数的数据交换和错误处理</h3><p>Generator 函数可以暂停执行和恢复执行，这是它能封装异步任务的根本原因。除此之外，它还有两个特性，使它可以作为异步编程的完整解决方案：<strong>函数体内外的数据交换和错误处理机制</strong>。</p>
<ul>
<li><strong>next返回值的 value 属性，是 Generator 函数向外输出数据；next方法还可以接受参数，向 Generator 函数体内输入数据</strong>。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* gen(x)&#123;</span><br><span class="line">  var y &#x3D; yield x + 2;</span><br><span class="line">  return y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var g &#x3D; gen(1);</span><br><span class="line">g.next() &#x2F;&#x2F; &#123; value: 3, done: false &#125;</span><br><span class="line">g.next(2) &#x2F;&#x2F; &#123; value: 2, done: true &#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，第一个next方法的value属性，返回表达式x + 2的值3。<strong>第二个next方法带有参数2，这个参数可以传入 Generator 函数，作为上个阶段异步任务的返回结果，被函数体内的变量y接收</strong>。因此，这一步的value属性，返回的就是2（变量y的值）。</p>
<ul>
<li>Generator 函数内部还可以<strong>部署错误处理代码，捕获函数体外抛出的错误</strong>。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* gen(x)&#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    var y &#x3D; yield x + 2;</span><br><span class="line">  &#125; catch (e)&#123;</span><br><span class="line">    console.log(e);</span><br><span class="line">  &#125;</span><br><span class="line">  return y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var g &#x3D; gen(1);</span><br><span class="line">g.next();</span><br><span class="line">g.throw(&#39;出错了&#39;);</span><br><span class="line">&#x2F;&#x2F; 出错了</span><br></pre></td></tr></table></figure>

<p>上面代码的最后一行，Generator 函数体外，使用指针对象的<code>throw</code>方法抛出的错误，可以被函数体内的<code>try...catch</code>代码块捕获。这意味着，出错的代码与处理错误的代码，实现了时间和空间上的分离，这对于异步编程无疑是很重要的。</p>
<h3 id="异步任务的封装"><a href="#异步任务的封装" class="headerlink" title="异步任务的封装"></a>异步任务的封装</h3><p>下面看看如何使用 Generator 函数，执行一个真实的异步任务。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var fetch &#x3D; require(&#39;node-fetch&#39;);</span><br><span class="line"></span><br><span class="line">function* gen()&#123;</span><br><span class="line">  var url &#x3D; &#39;https:&#x2F;&#x2F;api.github.com&#x2F;users&#x2F;github&#39;;</span><br><span class="line">  var result &#x3D; yield fetch(url);</span><br><span class="line">  console.log(result.bio);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，Generator 函数封装了一个异步操作，该操作先读取一个远程接口，然后从 JSON 格式的数据解析信息。就像前面说过的，这段代码非常像同步操作，除了加上了yield命令。</p>
<p>执行这段代码的方法如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var g &#x3D; gen();</span><br><span class="line">var result &#x3D; g.next();</span><br><span class="line"></span><br><span class="line">result.value.then(function(data)&#123;</span><br><span class="line">  return data.json();</span><br><span class="line">&#125;).then(function(data)&#123;</span><br><span class="line">  g.next(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，首先执行 Generator 函数，获取遍历器对象，然后使用next方法（第二行），执行异步任务的第一阶段。由于<code>Fetch模块返回的是一个 Promise 对象</code>，因此要用then方法调用下一个next方法。</p>
<p>可以看到，虽然 Generator 函数将异步操作表示得很简洁，但是流程管理却不方便（即何时执行第一阶段、何时执行第二阶段）。</p>
<h2 id="Thunk-函数"><a href="#Thunk-函数" class="headerlink" title="Thunk 函数"></a>Thunk 函数</h2><p><strong>Thunk 函数是自动执行 Generator 函数的一种方法。</strong></p>
<h3 id="参数的求值策略"><a href="#参数的求值策略" class="headerlink" title="参数的求值策略"></a>参数的求值策略</h3><p>Thunk 函数早在上个世纪 60 年代就诞生了。</p>
<p>那时，编程语言刚刚起步，计算机学家还在研究，编译器怎么写比较好。一个争论的焦点是”求值策略”，即函数的参数到底应该何时求值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x &#x3D; 1;</span><br><span class="line"></span><br><span class="line">function f(m) &#123;</span><br><span class="line">  return m * 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(x + 5)</span><br></pre></td></tr></table></figure>

<p>上面代码先定义函数f，然后向它传入表达式x + 5。请问，这个表达式应该何时求值？</p>
<p>一种意见是”<strong>传值调用</strong>“（call by value），即在进入函数体之前，就计算x + 5的值（等于 6），再将这个值传入函数f。C 语言就采用这种策略。</p>
<p>另一种意见是“<strong>传名调用</strong>”（call by name），即直接将表达式x + 5传入函数体，只在用到它的时候求值。Haskell 语言采用这种策略。</p>
<p>传值调用和传名调用，哪一种比较好？</p>
<p>回答是各有利弊。传值调用比较简单，但是对参数求值的时候，实际上还没用到这个参数，有可能造成性能损失。</p>
<h3 id="Thunk-函数的含义"><a href="#Thunk-函数的含义" class="headerlink" title="Thunk 函数的含义"></a>Thunk 函数的含义</h3><p>编译器的“传名调用”实现，<strong>往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体</strong>。这个临时函数就叫做 Thunk 函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function f(m) &#123;</span><br><span class="line">  return m * 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(x + 5);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line"></span><br><span class="line">var thunk &#x3D; function () &#123;</span><br><span class="line">  return x + 5;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function f(thunk) &#123;</span><br><span class="line">  return thunk() * 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，函数 f 的参数x + 5被一个函数替换了。凡是用到原参数的地方，对Thunk函数求值即可。</p>
<p>这就是 Thunk 函数的定义，它是“传名调用”的一种实现策略，用来替换某个表达式。</p>
<h3 id="JavaScript-语言的-Thunk-函数"><a href="#JavaScript-语言的-Thunk-函数" class="headerlink" title="JavaScript 语言的 Thunk 函数"></a>JavaScript 语言的 Thunk 函数</h3><p>JavaScript 语言是传值调用，它的 Thunk 函数含义有所不同。在 JavaScript 语言中，<strong>Thunk 函数替换的不是表达式，而是多参数函数，将其替换成一个只接受回调函数作为参数的单参数函数</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 正常版本的readFile（多参数版本）</span><br><span class="line">fs.readFile(fileName, callback);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Thunk版本的readFile（单参数版本）</span><br><span class="line">var Thunk &#x3D; function (fileName) &#123;</span><br><span class="line">  return function (callback) &#123;</span><br><span class="line">    return fs.readFile(fileName, callback);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var readFileThunk &#x3D; Thunk(fileName);</span><br><span class="line">readFileThunk(callback);</span><br></pre></td></tr></table></figure>

<p>上面代码中，fs模块的readFile方法是一个多参数函数，两个参数分别为文件名和回调函数。经过转换器处理，它变成了一个单参数函数，只接受回调函数作为参数。这个单参数版本，就叫做 Thunk 函数。</p>
<ul>
<li>任何函数，只要参数有回调函数，就能写成 Thunk 函数的形式。下面是一个简单的 Thunk 函数转换器。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; ES5版本</span><br><span class="line">var Thunk &#x3D; function(fn)&#123;</span><br><span class="line">  return function ()&#123;</span><br><span class="line">    var args &#x3D; Array.prototype.slice.call(arguments);</span><br><span class="line">    return function (callback)&#123;</span><br><span class="line">      args.push(callback);</span><br><span class="line">      return fn.apply(this, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ES6版本</span><br><span class="line">const Thunk &#x3D; function(fn) &#123;</span><br><span class="line">  return function (...args) &#123;</span><br><span class="line">    return function (callback) &#123;</span><br><span class="line">      return fn.call(this, ...args, callback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>使用上面的转换器，生成fs.readFile的 Thunk 函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var readFileThunk &#x3D; Thunk(fs.readFile);</span><br><span class="line">readFileThunk(fileA)(callback);</span><br></pre></td></tr></table></figure>

<h3 id="Thunkify-模块"><a href="#Thunkify-模块" class="headerlink" title="Thunkify 模块"></a>Thunkify 模块</h3><p>生产环境的转换器，建议使用 Thunkify 模块。</p>
<p>首先是安装。</p>
<p><code>$ npm install thunkify</code><br>使用方式如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var thunkify &#x3D; require(&#39;thunkify&#39;);</span><br><span class="line">var fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line"></span><br><span class="line">var read &#x3D; thunkify(fs.readFile);</span><br><span class="line">read(&#39;package.json&#39;)(function(err, str)&#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Thunkify 的源码与上一节那个简单的转换器非常像。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function thunkify(fn) &#123;</span><br><span class="line">  return function() &#123;</span><br><span class="line">    var args &#x3D; new Array(arguments.length);</span><br><span class="line">    var ctx &#x3D; this;</span><br><span class="line"></span><br><span class="line">    for (var i &#x3D; 0; i &lt; args.length; ++i) &#123;</span><br><span class="line">      args[i] &#x3D; arguments[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return function (done) &#123;</span><br><span class="line">      var called;</span><br><span class="line"></span><br><span class="line">      args.push(function () &#123;</span><br><span class="line">        if (called) return;</span><br><span class="line">        called &#x3D; true;</span><br><span class="line">        done.apply(null, arguments);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      try &#123;</span><br><span class="line">        fn.apply(ctx, args);</span><br><span class="line">      &#125; catch (err) &#123;</span><br><span class="line">        done(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>它的源码主要多了一个检查机制，变量<code>called</code>确保回调函数只运行一次。这样的设计与下文的 Generator 函数相关。请看下面的例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function f(a, b, callback)&#123;</span><br><span class="line">  var sum &#x3D; a + b;</span><br><span class="line">  callback(sum);</span><br><span class="line">  callback(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var ft &#x3D; thunkify(f);</span><br><span class="line">var print &#x3D; console.log.bind(console);</span><br><span class="line">ft(1, 2)(print);</span><br><span class="line">&#x2F;&#x2F; 3</span><br></pre></td></tr></table></figure>

<p>上面代码中，<strong>由于thunkify只允许回调函数执行一次</strong>，所以只输出一行结果。</p>
<h3 id="Generator-函数的流程管理"><a href="#Generator-函数的流程管理" class="headerlink" title="Generator 函数的流程管理"></a>Generator 函数的流程管理</h3><p>你可能会问， Thunk 函数有什么用？回答是以前确实没什么用，但是 ES6 有了 Generator 函数，Thunk 函数现在可以用于 Generator 函数的自动流程管理。</p>
<p><strong>Generator 函数可以自动执行。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* gen() &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var g &#x3D; gen();</span><br><span class="line">var res &#x3D; g.next();</span><br><span class="line"></span><br><span class="line">while(!res.done)&#123;</span><br><span class="line">  console.log(res.value);</span><br><span class="line">  res &#x3D; g.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，Generator 函数gen会自动执行完所有步骤。</p>
<p>但是，这不适合异步操作。如果必须保证前一步执行完，才能执行后一步，上面的自动执行就不可行。这时，Thunk 函数就能派上用处。以读取文件为例。下面的 Generator 函数封装了两个异步操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line">var thunkify &#x3D; require(&#39;thunkify&#39;);</span><br><span class="line">var readFileThunk &#x3D; thunkify(fs.readFile);</span><br><span class="line"></span><br><span class="line">var gen &#x3D; function* ()&#123;</span><br><span class="line">  var r1 &#x3D; yield readFileThunk(&#39;&#x2F;etc&#x2F;fstab&#39;);</span><br><span class="line">  console.log(r1.toString());</span><br><span class="line">  var r2 &#x3D; yield readFileThunk(&#39;&#x2F;etc&#x2F;shells&#39;);</span><br><span class="line">  console.log(r2.toString());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<strong><code>yield</code>命令用于将程序的执行权移出 Generator 函数，那么就需要一种方法，将执行权再交还给 Generator 函数。</strong></p>
<p>这种方法就是 Thunk 函数，因为它可以在回调函数里，将执行权交还给 Generator 函数。为了便于理解，我们先看如何手动执行上面这个 Generator 函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var g &#x3D; gen();</span><br><span class="line"></span><br><span class="line">var r1 &#x3D; g.next();</span><br><span class="line">r1.value(function (err, data) &#123;</span><br><span class="line">  if (err) throw err;</span><br><span class="line">  var r2 &#x3D; g.next(data);</span><br><span class="line">  r2.value(function (err, data) &#123;</span><br><span class="line">    if (err) throw err;</span><br><span class="line">    g.next(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<strong>变量g是 Generator 函数的内部指针，表示目前执行到哪一步。next方法负责将指针移动到下一步，并返回该步的信息</strong>（value属性和done属性）。</p>
<p>仔细查看上面的代码，可以发现 Generator 函数的执行过程，其实是将同一个回调函数，反复传入next方法的value属性。这使得我们可以用递归来自动完成这个过程。</p>
<h3 id="Thunk-函数的自动流程管理"><a href="#Thunk-函数的自动流程管理" class="headerlink" title="Thunk 函数的自动流程管理"></a>Thunk 函数的自动流程管理</h3><p>Thunk 函数真正的威力，在于可以自动执行 Generator 函数。下面就是一个基于 Thunk 函数的 Generator 执行器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function run(fn) &#123;</span><br><span class="line">  var gen &#x3D; fn();</span><br><span class="line"></span><br><span class="line">  function next(err, data) &#123;</span><br><span class="line">    var result &#x3D; gen.next(data);</span><br><span class="line">    if (result.done) return;</span><br><span class="line">    result.value(next);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function* g() &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run(g);</span><br></pre></td></tr></table></figure>

<p>上面代码的run函数，就是一个 Generator 函数的自动执行器。内部的next函数就是 Thunk 的回调函数。next函数先将指针移到 Generator 函数的下一步（gen.next方法），然后判断 Generator 函数是否结束（result.done属性），如果没结束，就将next函数再传入 Thunk 函数（result.value属性），否则就直接退出。</p>
<p>有了这个执行器，执行 Generator 函数方便多了。不管内部有多少个异步操作，直接把 Generator 函数传入run函数即可。当然，前提是每一个异步操作，都要是 Thunk 函数，也就是说，<strong>跟在yield命令后面的必须是 Thunk 函数</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var g &#x3D; function* ()&#123;</span><br><span class="line">  var f1 &#x3D; yield readFileThunk(&#39;fileA&#39;);</span><br><span class="line">  var f2 &#x3D; yield readFileThunk(&#39;fileB&#39;);</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">  var fn &#x3D; yield readFileThunk(&#39;fileN&#39;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">run(g);</span><br></pre></td></tr></table></figure>

<p>上面代码中，函数g封装了n个异步的读取文件操作，只要执行run函数，这些操作就会自动完成。这样一来，异步操作不仅可以写得像同步操作，而且一行代码就可以执行。</p>
<p>Thunk 函数并不是 Generator 函数自动执行的唯一方案。因为自动执行的关键是，必须有一种机制，自动控制 Generator 函数的流程，接收和交还程序的执行权。回调函数可以做到这一点，Promise 对象也可以做到这一点。</p>
<h2 id="co-模块"><a href="#co-模块" class="headerlink" title="co 模块"></a>co 模块</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>co 模块是著名程序员 TJ Holowaychuk 于 2013 年 6 月发布的一个小工具，<strong>用于 Generator 函数的自动执行</strong>。</p>
<p>下面是一个 Generator 函数，用于依次读取两个文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var gen &#x3D; function* () &#123;</span><br><span class="line">  var f1 &#x3D; yield readFile(&#39;&#x2F;etc&#x2F;fstab&#39;);</span><br><span class="line">  var f2 &#x3D; yield readFile(&#39;&#x2F;etc&#x2F;shells&#39;);</span><br><span class="line">  console.log(f1.toString());</span><br><span class="line">  console.log(f2.toString());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>co 模块可以让你不用编写 Generator 函数的执行器。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var co &#x3D; require(&#39;co&#39;);</span><br><span class="line">co(gen);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>上面代码中，Generator 函数只要传入co函数，就会自动执行。</p>
<ul>
<li>co函数返回一个Promise对象，因此可以用then方法添加回调函数。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">co(gen).then(function ()&#123;</span><br><span class="line">  console.log(&#39;Generator 函数执行完成&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>上面代码中，等到 Generator 函数执行结束，就会输出一行提示。</p>
<h3 id="co-模块的原理"><a href="#co-模块的原理" class="headerlink" title="co 模块的原理"></a>co 模块的原理</h3><p>为什么 co 可以自动执行 Generator 函数？</p>
<p>前面说过，Generator 就是一个异步操作的容器。它的自动执行需要一种机制，当异步操作有了结果，能够自动交回执行权。</p>
<p>两种方法可以做到这一点。</p>
<p>（1）回调函数。将异步操作包装成 Thunk 函数，在回调函数里面交回执行权。</p>
<p>（2）Promise 对象。将异步操作包装成 Promise 对象，用then方法交回执行权。</p>
<p>co 模块其实就是将两种自动执行器（Thunk 函数和 Promise 对象），包装成一个模块。使用 co 的前提条件是，Generator 函数的yield命令后面，只能是 Thunk 函数或 Promise 对象。如果数组或对象的成员，全部都是 Promise 对象，也可以使用 co，详见后文的例子。</p>
<p>上一节已经介绍了基于 Thunk 函数的自动执行器。下面来看，基于 Promise 对象的自动执行器。这是理解 co 模块必须的。</p>
<h3 id="基于-Promise-对象的自动执行"><a href="#基于-Promise-对象的自动执行" class="headerlink" title="基于 Promise 对象的自动执行"></a>基于 Promise 对象的自动执行</h3><p>还是沿用上面的例子。首先，把fs模块的readFile方法包装成一个 Promise 对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line"></span><br><span class="line">var readFile &#x3D; function (fileName)&#123;</span><br><span class="line">  return new Promise(function (resolve, reject)&#123;</span><br><span class="line">    fs.readFile(fileName, function(error, data)&#123;</span><br><span class="line">      if (error) return reject(error);</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var gen &#x3D; function* ()&#123;</span><br><span class="line">  var f1 &#x3D; yield readFile(&#39;&#x2F;etc&#x2F;fstab&#39;);</span><br><span class="line">  var f2 &#x3D; yield readFile(&#39;&#x2F;etc&#x2F;shells&#39;);</span><br><span class="line">  console.log(f1.toString());</span><br><span class="line">  console.log(f2.toString());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后，手动执行上面的 Generator 函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var g &#x3D; gen();</span><br><span class="line"></span><br><span class="line">g.next().value.then(function(data)&#123;</span><br><span class="line">  g.next(data).value.then(function(data)&#123;</span><br><span class="line">    g.next(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>手动执行其实就是用then方法，层层添加回调函数。理解了这一点，就可以写出一个自动执行器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function run(gen)&#123;</span><br><span class="line">  var g &#x3D; gen();</span><br><span class="line"></span><br><span class="line">  function next(data)&#123;</span><br><span class="line">    var result &#x3D; g.next(data);</span><br><span class="line">    if (result.done) return result.value;</span><br><span class="line">    result.value.then(function(data)&#123;</span><br><span class="line">      next(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run(gen);</span><br></pre></td></tr></table></figure>

<p>上面代码中，只要 Generator 函数还没执行到最后一步，next函数就调用自身，以此实现自动执行。</p>
]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>内置对象Date</title>
    <url>/2020/04/18/21-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%EF%BC%9ADate/</url>
    <content><![CDATA[<hr>
<h2 id="内置对象：Date"><a href="#内置对象：Date" class="headerlink" title="内置对象：Date"></a>内置对象：Date</h2><blockquote>
<p>Date 对象在实际开发中，使用得很频繁，且容易在细节地方出错，需要引起重视。</p>
</blockquote>
<p>内置对象 Date 用来处理日期和时间。</p>
<a id="more"></a>
<p><strong>需要注意的是</strong>：与 Math 对象不同，Date 对象是一个<strong>构造函数</strong> ，需要<strong>先实例化</strong>后才能使用。</p>
<h2 id="创建Date对象"><a href="#创建Date对象" class="headerlink" title="创建Date对象"></a>创建Date对象</h2><p>创建Date对象有两种写法：</p>
<ul>
<li><p>写法一：如果Date()不写参数，就返回当前时间对象</p>
</li>
<li><p>写法二：如果Date()里面写参数，就返回括号里输入的时间对象</p>
</li>
</ul>
<p>针对这两种写法，我们来具体讲一讲。</p>
<h3 id="写法一：不传递参数时，则获取系统的当前时间对象"><a href="#写法一：不传递参数时，则获取系统的当前时间对象" class="headerlink" title="写法一：不传递参数时，则获取系统的当前时间对象"></a>写法一：不传递参数时，则获取系统的当前时间对象</h3><p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> date1);</span><br></pre></td></tr></table></figure>

<p>代码解释：不传递参数时，表示的是获取系统的当前时间对象。也可以理解成是：获取当前代码执行的时间。</p>
<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mon Feb 17 2020 21:57:22 GMT+0800 (中国标准时间)</span><br><span class="line">object</span><br></pre></td></tr></table></figure>

<h3 id="写法二：传递参数"><a href="#写法二：传递参数" class="headerlink" title="写法二：传递参数"></a>写法二：传递参数</h3><p>参数中既可以传递数字，也可以传递字符串。</p>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date21 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020/02/17 21:00:00'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date21);</span><br><span class="line"><span class="comment">// Mon Feb 17 2020 21:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date22 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2020</span>, <span class="number">2</span>, <span class="number">18</span>); <span class="comment">// 第二个参数返回的是三月，不是二月</span></span><br><span class="line"><span class="built_in">console</span>.log(date22);</span><br><span class="line"><span class="comment">// Wed Mar 18 2020 00:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date23 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2020</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">22</span>, <span class="number">59</span>, <span class="number">58</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date23);</span><br><span class="line"><span class="comment">// Sat Apr 18 2020 22:59:58 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date24 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020/04/19'</span>); <span class="comment">// 返回的就是四月</span></span><br><span class="line"><span class="built_in">console</span>.log(date24);</span><br><span class="line"><span class="comment">// Sun Apr 19 2020 00:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date25 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020-05-20'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date25);</span><br><span class="line"><span class="comment">// Wed May 20 2020 08:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date26 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'Wed Jan 27 2017 12:00:00 GMT+0800 (中国标准时间)'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date26);</span><br><span class="line"><span class="comment">// Fri Jan 27 2017 12:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>




<h2 id="日期的格式化"><a href="#日期的格式化" class="headerlink" title="日期的格式化"></a>日期的格式化</h2><p>上一段内容里，我们获取到了 Date <strong>对象</strong>，但这个对象，打印出来的结果并不是特别直观。</p>
<p>如果我们需要获取日期的<strong>指定部分</strong>，就需要用到 Date对象自带的方法。</p>
<p>获取了日期指定的部分之后，我们就可以让日期按照指定的格式，进行展示（即日期的格式化）。比如说，我期望能以 <code>2020-02-02 19:30:59</code> 这种格式进行展示。</p>
<p>在这之前，我们先来看看 Date 对象有哪些方法。</p>
<h3 id="Date对象的方法"><a href="#Date对象的方法" class="headerlink" title="Date对象的方法"></a>Date对象的方法</h3><p>Date对象 有如下方法，可以获取日期和时间的<strong>指定部分</strong>：</p>
<ul>
<li><p><code>getFullYear()</code>        获取年份</p>
</li>
<li><p><code>getMonth()</code>           <strong>获取月 0-11</strong>（0代表一月）</p>
</li>
<li><p><code>getDate()</code>                 <strong>获取日 1-31</strong>。即：获取的是几号</p>
</li>
<li><p><code>getDay()</code>                 <strong>获取星期 0-6</strong>（0代表周日，1代表周一）</p>
</li>
<li><p><code>getHours()</code>      获取小时 0-23</p>
</li>
<li><p><code>getMinutes()</code>         获取分钟 0-59</p>
</li>
<li><p><code>getSeconds()</code>         获取秒  0-59</p>
</li>
<li><p><code>getMilliseconds()</code>    获取毫秒 （1s = 1000ms）</p>
</li>
</ul>
<p><strong>代码举例</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我在执行这行代码时，当前时间为 2019年2月4日，周一，13:23:52</span></span><br><span class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myDate); <span class="comment">// 打印结果：Mon Feb 04 2019 13:23:52 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myDate.getFullYear()); <span class="comment">// 打印结果：2019</span></span><br><span class="line"><span class="built_in">console</span>.log(myDate.getMonth() + <span class="number">1</span>); <span class="comment">// 打印结果：2</span></span><br><span class="line"><span class="built_in">console</span>.log(myDate.getDate()); <span class="comment">// 打印结果：4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myDate.getDay()); <span class="comment">// 打印结果：1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myDate.getHours()); <span class="comment">// 打印结果：13</span></span><br><span class="line"><span class="built_in">console</span>.log(myDate.getMinutes()); <span class="comment">// 打印结果：23</span></span><br><span class="line"><span class="built_in">console</span>.log(myDate.getSeconds()); <span class="comment">// 打印结果：52</span></span><br><span class="line"><span class="built_in">console</span>.log(myDate.getMilliseconds()); <span class="comment">// 打印结果：393</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myDate.getTime()); <span class="comment">// 获取时间戳。打印结果：1549257832393</span></span><br></pre></td></tr></table></figure>

<p>获取了日期和时间的指定部分之后，我们把它们用字符串拼接起来，就可以按照自己想要的格式，来展示日期。</p>
<h3 id="举例1：年月日的格式化"><a href="#举例1：年月日的格式化" class="headerlink" title="举例1：年月日的格式化"></a>举例1：年月日的格式化</h3><p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式化年月日：2020年2月2日 星期三</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> year = date.getFullYear();</span><br><span class="line"><span class="keyword">var</span> month = date.getMonth() + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> dates = date.getDate();</span><br><span class="line"><span class="keyword">var</span> day = date.getDay();</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'星期日'</span>, <span class="string">'星期一'</span>, <span class="string">'星期二'</span>, <span class="string">'星期三'</span>, <span class="string">'星期四'</span>, <span class="string">'星期五'</span>, <span class="string">'星期六'</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'今天是：'</span> + year + <span class="string">'年'</span> + month + <span class="string">'月'</span> + dates + <span class="string">'日 '</span> + arr[day]);</span><br></pre></td></tr></table></figure>


<h3 id="举例2：时分秒的格式化"><a href="#举例2：时分秒的格式化" class="headerlink" title="举例2：时分秒的格式化"></a>举例2：时分秒的格式化</h3><p>封装一个函数，返回当前时间的时分秒，格式为 06:06:06）</p>
<h2 id="getTime-：获取时间戳"><a href="#getTime-：获取时间戳" class="headerlink" title="getTime()：获取时间戳"></a>getTime()：获取时间戳</h2><p>Date对象 还有如下方法：</p>
<ul>
<li><code>getTime()</code>         获取当前日期对象的<strong>时间戳</strong>。这个方法在实际开发中，用得比较多。</li>
</ul>
<p>啥叫时间戳？接下来，我们解释一下。</p>
<p><strong>时间戳</strong>：指的是从格林威治标准时间的<code>1970年1月1日，0时0分0秒</code>到当前日期所花费的<strong>毫秒数</strong>（1秒 = 1000毫秒）。</p>
<p>计算机底层在保存时间时，使用的都是时间戳。时间戳的存在，就是为了<strong>统一</strong>时间的单位。</p>
<p>我们再来看下面这样的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"1970/01/01 0:0:0"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myDate.getTime()); <span class="comment">// 获取时间戳</span></span><br></pre></td></tr></table></figure>

<p>打印结果（可能会让你感到惊讶）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">-28800000</span></span><br></pre></td></tr></table></figure>

<p>为啥打印结果是<code>-28800000</code>，而不是<code>0</code>呢？这是因为，我们的当前代码，是在中文环境下运行的，与英文时间会存在<strong>8个小时的时差</strong>（中文时间比英文时间早了八个小时）。如果代码是在英文环境下运行，打印结果就是<code>0</code>。</p>
<p><strong>利用时间戳检测代码的执行时间</strong>：</p>
<p>我们可以在业务代码的前面定义 <code>时间戳1</code>，在业务代码的后面定义 <code>时间戳2</code>。把这两个时间戳相减，就能得出业务代码的执行时间。</p>
<h3 id="format"><a href="#format" class="headerlink" title="format()"></a>format()</h3><p>将时间对象转换为指定格式。</p>
<p>参考链接：<a href="https://www.cnblogs.com/tugenhua0707/p/3776808.html" target="_blank" rel="noopener">https://www.cnblogs.com/tugenhua0707/p/3776808.html</a></p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="举例1：模拟日历"><a href="#举例1：模拟日历" class="headerlink" title="举例1：模拟日历"></a>举例1：模拟日历</h3><p>要求每天打开这个页面，都能定时显示当前的日期。</p>
<p>代码实现：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 800px;</span><br><span class="line">            margin: 200px auto;</span><br><span class="line">            color: red;</span><br><span class="line">            text-align: center;</span><br><span class="line">            font: 600 30px/30px "simsun";</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//模拟日历</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//需求：每天打开这个页面都能定时显示年月日和星期几</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//1.创建一个当前日期的日期对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//2.然后获取其中的年、月、日和星期</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> year = date.getFullYear();</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> month = date.getMonth();</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> hao = date.getDate();</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> week = date.getDay();</span></span><br><span class="line"><span class="actionscript"><span class="comment">//        console.log(year+" "+month+" "+hao+" "+week);</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//3.赋值给div</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> arr = [<span class="string">"星期日"</span>,<span class="string">"星期一"</span>,<span class="string">"星期二"</span>,<span class="string">"星期三"</span>,<span class="string">"星期四"</span>,<span class="string">"星期五"</span>,<span class="string">"星期六"</span>];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">        div.innerText = <span class="string">"今天是："</span>+year+<span class="string">"年"</span>+(month+<span class="number">1</span>)+<span class="string">"月"</span>+hao+<span class="string">"日 "</span>+arr[week];</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="举例2：发布会倒计时"><a href="#举例2：发布会倒计时" class="headerlink" title="举例2：发布会倒计时"></a>举例2：发布会倒计时</h3><p>实现思路：</p>
<p>设置一个定时器，每间隔1毫秒就自动刷新一次div的内容。</p>
<p>代码实现：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 1210px;</span><br><span class="line">            margin: 200px auto;</span><br><span class="line">            color: red;</span><br><span class="line">            text-align: center;</span><br><span class="line">            font: 600 30px/30px "simsun";</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> timer = setInterval(fn, <span class="number">1</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> nowtime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> future = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2019/02/03 11:20:00"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> timeSum = future.getTime() - nowtime.getTime();  <span class="comment">//获取时间差：发布会时间减去此刻的毫秒值</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> day = <span class="built_in">parseInt</span>(timeSum / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> hour = <span class="built_in">parseInt</span>(timeSum / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> minu = <span class="built_in">parseInt</span>(timeSum / <span class="number">1000</span> / <span class="number">60</span> % <span class="number">60</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> sec = <span class="built_in">parseInt</span>(timeSum / <span class="number">1000</span> % <span class="number">60</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> millsec = <span class="built_in">parseInt</span>(timeSum % <span class="number">1000</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//问题处理：所有的时间小于10的时候，在前面自动补0，毫秒值要补双0（比如如，把 8 秒改成 08 秒）</span></span></span><br><span class="line"><span class="actionscript">        day = day &lt; <span class="number">10</span> ? <span class="string">"0"</span> + day : day;  <span class="comment">//day小于10吗？如果小于，就补0；如果不小于，就是day本身</span></span></span><br><span class="line"><span class="actionscript">        hour = hour &lt; <span class="number">10</span> ? <span class="string">"0"</span> + hour : hour;</span></span><br><span class="line"><span class="actionscript">        minu = minu &lt; <span class="number">10</span> ? <span class="string">"0"</span> + minu : minu;</span></span><br><span class="line"><span class="actionscript">        sec = sec &lt; <span class="number">10</span> ? <span class="string">"0"</span> + sec : sec;</span></span><br><span class="line">        if (millsec &lt; 10) &#123;</span><br><span class="line"><span class="actionscript">            millsec = <span class="string">"00"</span> + millsec;</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (millsec &lt; <span class="number">100</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            millsec = <span class="string">"0"</span> + millsec;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript"><span class="comment">//        console.log(day);</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//        console.log(parseInt(timeSum/1000/60/60/24));</span></span></span><br><span class="line">        if (timeSum &lt; 0) &#123;</span><br><span class="line"><span class="actionscript">            div.innerHTML = <span class="string">"距离苹果发布会还有00天00小时00分00秒000毫秒"</span>;</span></span><br><span class="line">            clearInterval(timer);</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        div.innerHTML = <span class="string">"距离苹果发布会还有"</span> + day + <span class="string">"天"</span> + hour + <span class="string">"小时"</span> + minu + <span class="string">"分"</span> + sec + <span class="string">"秒"</span> + millsec + <span class="string">"毫秒"</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>async函数</title>
    <url>/2020/04/18/21-async%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要内容：</p>
<ul>
<li>含义</li>
<li>基本用法</li>
<li>语法</li>
<li>async 函数的实现原理</li>
<li>与其他异步处理方法的比较</li>
<li>顶层 await<a id="more"></a>
<h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2></li>
</ul>
<p>ES2017 标准引入了<code>async</code>函数，使得异步操作变得更加方便。</p>
<p>async 函数是什么？一句话，它就是 Generator 函数的语法糖。</p>
<p>前文有一个 Generator 函数，依次读取两个文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line"></span><br><span class="line">const readFile &#x3D; function (fileName) &#123;</span><br><span class="line">  return new Promise(function (resolve, reject) &#123;</span><br><span class="line">    fs.readFile(fileName, function(error, data) &#123;</span><br><span class="line">      if (error) return reject(error);</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const gen &#x3D; function* () &#123;</span><br><span class="line">  const f1 &#x3D; yield readFile(&#39;&#x2F;etc&#x2F;fstab&#39;);</span><br><span class="line">  const f2 &#x3D; yield readFile(&#39;&#x2F;etc&#x2F;shells&#39;);</span><br><span class="line">  console.log(f1.toString());</span><br><span class="line">  console.log(f2.toString());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码的函数gen可以写成async函数，就是下面这样。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const asyncReadFile &#x3D; async function () &#123;</span><br><span class="line">  const f1 &#x3D; await readFile(&#39;&#x2F;etc&#x2F;fstab&#39;);</span><br><span class="line">  const f2 &#x3D; await readFile(&#39;&#x2F;etc&#x2F;shells&#39;);</span><br><span class="line">  console.log(f1.toString());</span><br><span class="line">  console.log(f2.toString());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>一比较就会发现，<strong>async函数就是将 Generator 函数的星号（*）替换成async，将yield替换成await，仅此而已</strong>。</p>
<p>async函数对 Generator 函数的改进，体现在以下四点。</p>
<ul>
<li>（1）内置执行器。</li>
</ul>
<p>Generator 函数的执行必须靠执行器，所以才有了co模块，而<strong>async函数自带执行器。也就是说，async函数的执行，与普通函数一模一样，只要一行</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">asyncReadFile();</span><br></pre></td></tr></table></figure>

<p>上面的代码调用了asyncReadFile函数，然后它就会自动执行，输出最后结果。这完全不像 Generator 函数，需要调用next方法，或者用co模块，才能真正执行，得到最后结果。</p>
<ul>
<li>（2）更好的语义。</li>
</ul>
<p>async和await，比起星号和yield，语义更清楚了。async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。</p>
<ul>
<li>（3）更广的适用性。</li>
</ul>
<p>co模块约定，yield命令后面只能是 Thunk 函数或 Promise 对象，而<strong>async函数的await命令后面，可以是 Promise 对象和原始类型的值</strong>（数值、字符串和布尔值，但这时会自动转成立即 resolved 的 Promise 对象）。</p>
<ul>
<li>（4）返回值是 Promise。</li>
</ul>
<p><strong>async函数的返回值是 Promise 对象</strong>，这比 Generator 函数的返回值是 Iterator 对象方便多了。你可以用then方法指定下一步的操作。</p>
<p>进一步说，async函数完全可以看作多个异步操作，包装成的一个 Promise 对象，而await命令就是内部then命令的语法糖。</p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>async函数返回一个 Promise 对象，可以使用then方法添加回调函数。<strong>当函数执行的时候，一旦遇到await就会先返回，等到异步操作完成，再接着执行函数体内后面的语句</strong>。</p>
<p>下面是一个例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">async function getStockPriceByName(name) &#123;</span><br><span class="line">  const symbol &#x3D; await getStockSymbol(name);</span><br><span class="line">  const stockPrice &#x3D; await getStockPrice(symbol);</span><br><span class="line">  return stockPrice;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getStockPriceByName(&#39;goog&#39;).then(function (result) &#123;</span><br><span class="line">  console.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码是一个获取股票报价的函数，函数前面的async关键字，表明该函数内部有异步操作。调用该函数时，会立即返回一个Promise对象。</p>
<p>下面是另一个例子，指定多少毫秒后输出一个值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function timeout(ms) &#123;</span><br><span class="line">  return new Promise((resolve) &#x3D;&gt; &#123;</span><br><span class="line">    setTimeout(resolve, ms);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function asyncPrint(value, ms) &#123;</span><br><span class="line">  await timeout(ms);</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncPrint(&#39;hello world&#39;, 50);</span><br></pre></td></tr></table></figure>

<p>上面代码指定 50 毫秒以后，输出hello world。</p>
<p>由于async函数返回的是 Promise 对象，可以作为await命令的参数。所以，上面的例子也可以写成下面的形式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">async function timeout(ms) &#123;</span><br><span class="line">  await new Promise((resolve) &#x3D;&gt; &#123;</span><br><span class="line">    setTimeout(resolve, ms);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function asyncPrint(value, ms) &#123;</span><br><span class="line">  await timeout(ms);</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncPrint(&#39;hello world&#39;, 50);</span><br></pre></td></tr></table></figure>

<p>async 函数有多种使用形式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 函数声明</span><br><span class="line">async function foo() &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 函数表达式</span><br><span class="line">const foo &#x3D; async function () &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 对象的方法</span><br><span class="line">let obj &#x3D; &#123; async foo() &#123;&#125; &#125;;</span><br><span class="line">obj.foo().then(...)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Class 的方法</span><br><span class="line">class Storage &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.cachePromise &#x3D; caches.open(&#39;avatars&#39;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  async getAvatar(name) &#123;</span><br><span class="line">    const cache &#x3D; await this.cachePromise;</span><br><span class="line">    return cache.match(&#96;&#x2F;avatars&#x2F;$&#123;name&#125;.jpg&#96;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const storage &#x3D; new Storage();</span><br><span class="line">storage.getAvatar(&#39;jake&#39;).then(…);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 箭头函数</span><br><span class="line">const foo &#x3D; async () &#x3D;&gt; &#123;&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>async函数的语法规则总体上比较简单，<strong>难点是错误处理机制</strong>。</p>
<h3 id="返回-Promise-对象"><a href="#返回-Promise-对象" class="headerlink" title="返回 Promise 对象"></a>返回 Promise 对象</h3><ul>
<li><p>async函数返回一个 Promise 对象。</p>
</li>
<li><p>async函数内部return语句返回的值，会成为then方法回调函数的参数。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">async function f() &#123;</span><br><span class="line">  return &#39;hello world&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f().then(v &#x3D;&gt; console.log(v))</span><br><span class="line">&#x2F;&#x2F; &quot;hello world&quot;</span><br></pre></td></tr></table></figure>

<p>上面代码中，函数f内部return命令返回的值，会被then方法回调函数接收到。</p>
<ul>
<li>async函数内部抛出错误，会导致返回的 Promise 对象变为reject状态。抛出的错误对象会被catch方法回调函数接收到。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">async function f() &#123;</span><br><span class="line">  throw new Error(&#39;出错了&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f().then(</span><br><span class="line">  v &#x3D;&gt; console.log(v),</span><br><span class="line">  e &#x3D;&gt; console.log(e)</span><br><span class="line">)</span><br><span class="line">&#x2F;&#x2F; Error: 出错了</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Promise-对象的状态变化"><a href="#Promise-对象的状态变化" class="headerlink" title="Promise 对象的状态变化"></a>Promise 对象的状态变化</h3><p>async函数返回的 Promise 对象，必须等到内部所有await命令后面的 Promise 对象执行完，才会发生状态改变，除非遇到return语句或者抛出错误。也就是说，<strong>只有async函数内部的异步操作执行完，才会执行then方法指定的回调函数</strong>。</p>
<p>下面是一个例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">async function getTitle(url) &#123;</span><br><span class="line">  let response &#x3D; await fetch(url);</span><br><span class="line">  let html &#x3D; await response.text();</span><br><span class="line">  return html.match(&#x2F;&lt;title&gt;([\s\S]+)&lt;\&#x2F;title&gt;&#x2F;i)[1];</span><br><span class="line">&#125;</span><br><span class="line">getTitle(&#39;https:&#x2F;&#x2F;tc39.github.io&#x2F;ecma262&#x2F;&#39;).then(console.log)</span><br><span class="line">&#x2F;&#x2F; &quot;ECMAScript 2017 Language Specification&quot;</span><br></pre></td></tr></table></figure>

<p>上面代码中，函数<code>getTitle</code>内部有三个操作：抓取网页、取出文本、匹配页面标题。只有这三个操作全部完成，才会执行then方法里面的console.log。</p>
<h3 id="await-命令"><a href="#await-命令" class="headerlink" title="await 命令"></a>await 命令</h3><p>正常情况下，await命令后面是一个 Promise 对象，返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">async function f() &#123;</span><br><span class="line">  &#x2F;&#x2F; 等同于</span><br><span class="line">  &#x2F;&#x2F; return 123;</span><br><span class="line">  return await 123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f().then(v &#x3D;&gt; console.log(v))</span><br><span class="line">&#x2F;&#x2F; 123</span><br></pre></td></tr></table></figure>

<p>上面代码中，await命令的参数是数值123，这时等同于return 123。</p>
<p>另一种情况是，<strong>await命令后面是一个thenable对象（即定义then方法的对象），那么await会将其等同于 Promise 对象</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Sleep &#123;</span><br><span class="line">  constructor(timeout) &#123;</span><br><span class="line">    this.timeout &#x3D; timeout;</span><br><span class="line">  &#125;</span><br><span class="line">  then(resolve, reject) &#123;</span><br><span class="line">    const startTime &#x3D; Date.now();</span><br><span class="line">    setTimeout(</span><br><span class="line">      () &#x3D;&gt; resolve(Date.now() - startTime),</span><br><span class="line">      this.timeout</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(async () &#x3D;&gt; &#123;</span><br><span class="line">  const sleepTime &#x3D; await new Sleep(1000);</span><br><span class="line">  console.log(sleepTime);</span><br><span class="line">&#125;)();</span><br><span class="line">&#x2F;&#x2F; 1000</span><br></pre></td></tr></table></figure>

<p>上面代码中，await命令后面是一个Sleep对象的实例。这个实例不是 Promise 对象，但是因为定义了then方法，await会将其视为Promise处理。</p>
<p>这个例子还演示了如何实现休眠效果。JavaScript 一直没有休眠的语法，但是借助await命令就可以让程序停顿指定的时间。下面给出了一个简化的sleep实现。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function sleep(interval) &#123;</span><br><span class="line">  return new Promise(resolve &#x3D;&gt; &#123;</span><br><span class="line">    setTimeout(resolve, interval);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 用法</span><br><span class="line">async function one2FiveInAsync() &#123;</span><br><span class="line">  for(let i &#x3D; 1; i &lt;&#x3D; 5; i++) &#123;</span><br><span class="line">    console.log(i);</span><br><span class="line">    await sleep(1000);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">one2FiveInAsync();</span><br></pre></td></tr></table></figure>

<p>await命令后面的 Promise 对象如果变为reject状态，则reject的参数会被catch方法的回调函数接收到。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">async function f() &#123;</span><br><span class="line">  await Promise.reject(&#39;出错了&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f()</span><br><span class="line">.then(v &#x3D;&gt; console.log(v))</span><br><span class="line">.catch(e &#x3D;&gt; console.log(e))</span><br><span class="line">&#x2F;&#x2F; 出错了</span><br></pre></td></tr></table></figure>

<p>注意，上面代码中，await语句前面没有return，但是reject方法的参数依然传入了catch方法的回调函数。这里如果在await前面加上return，效果是一样的。</p>
<p>任何一个await语句后面的 Promise 对象变为reject状态，那么整个async函数都会中断执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">async function f() &#123;</span><br><span class="line">  await Promise.reject(&#39;出错了&#39;);</span><br><span class="line">  await Promise.resolve(&#39;hello world&#39;); &#x2F;&#x2F; 不会执行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，第二个await语句是不会执行的，因为第一个await语句状态变成了reject。</p>
<p><strong>有时，我们希望即使前一个异步操作失败，也不要中断后面的异步操作。这时可以将第一个await放在try…catch结构里面，这样不管这个异步操作是否成功，第二个await都会执行。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">async function f() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    await Promise.reject(&#39;出错了&#39;);</span><br><span class="line">  &#125; catch(e) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  return await Promise.resolve(&#39;hello world&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f()</span><br><span class="line">.then(v &#x3D;&gt; console.log(v))</span><br><span class="line">&#x2F;&#x2F; hello world</span><br></pre></td></tr></table></figure>

<p><strong>另一种方法是await后面的 Promise 对象再跟一个catch方法，处理前面可能出现的错误。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">async function f() &#123;</span><br><span class="line">  await Promise.reject(&#39;出错了&#39;)</span><br><span class="line">    .catch(e &#x3D;&gt; console.log(e));</span><br><span class="line">  return await Promise.resolve(&#39;hello world&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f()</span><br><span class="line">.then(v &#x3D;&gt; console.log(v))</span><br><span class="line">&#x2F;&#x2F; 出错了</span><br><span class="line">&#x2F;&#x2F; hello world</span><br></pre></td></tr></table></figure>

<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>如果await后面的异步操作出错，那么等同于async函数返回的 Promise 对象被reject。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">async function f() &#123;</span><br><span class="line">  await new Promise(function (resolve, reject) &#123;</span><br><span class="line">    throw new Error(&#39;出错了&#39;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f()</span><br><span class="line">.then(v &#x3D;&gt; console.log(v))</span><br><span class="line">.catch(e &#x3D;&gt; console.log(e))</span><br><span class="line">&#x2F;&#x2F; Error：出错了</span><br></pre></td></tr></table></figure>

<p>上面代码中，async函数f执行后，await后面的 Promise 对象会抛出一个错误对象，导致catch方法的回调函数被调用，它的参数就是抛出的错误对象。具体的执行机制，可以参考后文的“async 函数的实现原理”。</p>
<ul>
<li><p>防止出错的方法，也是将其放在try…catch代码块之中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">async function f() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    await new Promise(function (resolve, reject) &#123;</span><br><span class="line">      throw new Error(&#39;出错了&#39;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; catch(e) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  return await(&#39;hello world&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果有多个await命令，可以统一放在try…catch结构中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">async function main() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const val1 &#x3D; await firstStep();</span><br><span class="line">    const val2 &#x3D; await secondStep(val1);</span><br><span class="line">    const val3 &#x3D; await thirdStep(val1, val2);</span><br><span class="line"></span><br><span class="line">    console.log(&#39;Final: &#39;, val3);</span><br><span class="line">  &#125;</span><br><span class="line">  catch (err) &#123;</span><br><span class="line">    console.error(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>下面的例子使用try…catch结构，实现多次重复尝试。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const superagent &#x3D; require(&#39;superagent&#39;);</span><br><span class="line">const NUM_RETRIES &#x3D; 3;</span><br><span class="line"></span><br><span class="line">async function test() &#123;</span><br><span class="line">  let i;</span><br><span class="line">  for (i &#x3D; 0; i &lt; NUM_RETRIES; ++i) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      await superagent.get(&#39;http:&#x2F;&#x2F;google.com&#x2F;this-throws-an-error&#39;);</span><br><span class="line">      break;</span><br><span class="line">    &#125; catch(err) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(i); &#x2F;&#x2F; 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br></pre></td></tr></table></figure>

<p>上面代码中，如果await操作成功，就会使用break语句退出循环；如果失败，会被catch语句捕捉，然后进入下一轮循环。</p>
<h3 id="使用注意点"><a href="#使用注意点" class="headerlink" title="使用注意点"></a>使用注意点</h3><ul>
<li><p>第一点，前面已经说过，await命令后面的Promise对象，运行结果可能是rejected，所以最好把await命令放在try…catch代码块中。</p>
</li>
<li><p>第二点，多个await命令后面的异步操作，如果不存在继发关系，最好让它们同时触发。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let foo &#x3D; await getFoo();</span><br><span class="line">let bar &#x3D; await getBar();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>上面代码中，getFoo和getBar是两个独立的异步操作（即互不依赖），被写成继发关系。这样比较耗时，因为只有getFoo完成以后，才会执行getBar，完全可以让它们同时触发。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 写法一</span><br><span class="line">let [foo, bar] &#x3D; await Promise.all([getFoo(), getBar()]);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 写法二</span><br><span class="line">let fooPromise &#x3D; getFoo();</span><br><span class="line">let barPromise &#x3D; getBar();</span><br><span class="line">let foo &#x3D; await fooPromise;</span><br><span class="line">let bar &#x3D; await barPromise;</span><br></pre></td></tr></table></figure>

<p>上面两种写法，getFoo和getBar都是同时触发，这样就会缩短程序的执行时间。</p>
<ul>
<li><p>第三点，await命令只能用在async函数之中，如果用在普通函数，就会报错。</p>
</li>
<li><p>第四点，async 函数可以保留运行堆栈。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const a &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  b().then(() &#x3D;&gt; c());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码中，函数a内部运行了一个异步任务b()。当b()运行的时候，函数a()不会中断，而是继续执行。等到b()运行结束，可能a()早就运行结束了，b()所在的上下文环境已经消失了。如果b()或c()报错，错误堆栈将不包括a()。</p>
<p>现在将这个例子改成async函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const a &#x3D; async () &#x3D;&gt; &#123;</span><br><span class="line">  await b();</span><br><span class="line">  c();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码中，b()运行的时候，a()是暂停执行，上下文环境都保存着。一旦b()或c()报错，错误堆栈将包括a()。</p>
<h2 id="async-函数的实现原理"><a href="#async-函数的实现原理" class="headerlink" title="async 函数的实现原理"></a>async 函数的实现原理</h2><p><strong>async 函数的实现原理，就是将 Generator 函数和自动执行器，包装在一个函数里。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">async function fn(args) &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line"></span><br><span class="line">function fn(args) &#123;</span><br><span class="line">  return spawn(function* () &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所有的async函数都可以写成上面的第二种形式，其中的spawn函数就是自动执行器。</p>
<h2 id="与其他异步处理方法的比较"><a href="#与其他异步处理方法的比较" class="headerlink" title="与其他异步处理方法的比较"></a>与其他异步处理方法的比较</h2><p>我们通过一个例子，来看 async 函数与 Promise、Generator 函数的比较。</p>
<p>假定某个 DOM 元素上面，部署了一系列的动画，前一个动画结束，才能开始后一个。如果当中有一个动画出错，就不再往下执行，返回上一个成功执行的动画的返回值。</p>
<p>首先是 Promise 的写法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function chainAnimationsPromise(elem, animations) &#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 变量ret用来保存上一个动画的返回值</span><br><span class="line">  let ret &#x3D; null;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 新建一个空的Promise</span><br><span class="line">  let p &#x3D; Promise.resolve();</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 使用then方法，添加所有动画</span><br><span class="line">  for(let anim of animations) &#123;</span><br><span class="line">    p &#x3D; p.then(function(val) &#123;</span><br><span class="line">      ret &#x3D; val;</span><br><span class="line">      return anim(elem);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 返回一个部署了错误捕捉机制的Promise</span><br><span class="line">  return p.catch(function(e) &#123;</span><br><span class="line">    &#x2F;* 忽略错误，继续执行 *&#x2F;</span><br><span class="line">  &#125;).then(function() &#123;</span><br><span class="line">    return ret;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然 Promise 的写法比回调函数的写法大大改进，但是一眼看上去，代码完全都是 Promise 的 API（then、catch等等），操作本身的语义反而不容易看出来。</p>
<p>接着是 Generator 函数的写法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function chainAnimationsGenerator(elem, animations) &#123;</span><br><span class="line"></span><br><span class="line">  return spawn(function*() &#123;</span><br><span class="line">    let ret &#x3D; null;</span><br><span class="line">    try &#123;</span><br><span class="line">      for(let anim of animations) &#123;</span><br><span class="line">        ret &#x3D; yield anim(elem);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; catch(e) &#123;</span><br><span class="line">      &#x2F;* 忽略错误，继续执行 *&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line">    return ret;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码使用 Generator 函数遍历了每个动画，语义比 Promise 写法更清晰，用户定义的操作全部都出现在spawn函数的内部。这个写法的问题在于，必须有一个任务运行器，自动执行 Generator 函数，上面代码的spawn函数就是自动执行器，它返回一个 Promise 对象，而且必须保证yield语句后面的表达式，必须返回一个 Promise。</p>
<p>最后是 async 函数的写法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">async function chainAnimationsAsync(elem, animations) &#123;</span><br><span class="line">  let ret &#x3D; null;</span><br><span class="line">  try &#123;</span><br><span class="line">    for(let anim of animations) &#123;</span><br><span class="line">      ret &#x3D; await anim(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch(e) &#123;</span><br><span class="line">    &#x2F;* 忽略错误，继续执行 *&#x2F;</span><br><span class="line">  &#125;</span><br><span class="line">  return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到 Async 函数的实现最简洁，最符合语义，几乎没有语义不相关的代码。它将 Generator 写法中的自动执行器，改在语言层面提供，不暴露给用户，因此代码量最少。如果使用 Generator 写法，自动执行器需要用户自己提供。</p>
<h2 id="顶层-await"><a href="#顶层-await" class="headerlink" title="顶层 await"></a>顶层 await</h2><p><strong>根据语法规格，await命令只能出现在 async 函数内部，否则都会报错</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">const data &#x3D; await fetch(&#39;https:&#x2F;&#x2F;api.example.com&#39;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，await命令独立使用，没有放在 async 函数里面，就会报错。</p>
<p>目前，有一个语法提案，<strong>允许在模块的顶层独立使用await命令</strong>，使得上面那行代码不会报错了。这个提案的目的，是借用await解决模块异步加载的问题。</p>
<p>顶层的await命令，保证只有异步操作完成，模块才会输出值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; awaiting.js</span><br><span class="line">const dynamic &#x3D; import(someMission);</span><br><span class="line">const data &#x3D; fetch(url);</span><br><span class="line">export const output &#x3D; someProcess((await dynamic).default, await data);</span><br></pre></td></tr></table></figure>

<p>上面代码中，两个异步操作在输出的时候，都加上了await命令。只有等到异步操作完成，这个模块才会输出值。</p>
<p>加载这个模块的写法如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; usage.js</span><br><span class="line">import &#123; output &#125; from &quot;.&#x2F;awaiting.js&quot;;</span><br><span class="line">function outputPlusValue(value) &#123; return output + value &#125;</span><br><span class="line"></span><br><span class="line">console.log(outputPlusValue(100));</span><br><span class="line">setTimeout(() &#x3D;&gt; console.log(outputPlusValue(100), 1000);</span><br></pre></td></tr></table></figure>

<p>上面代码的写法，与普通的模块加载完全一样。也就是说，模块的使用者完全不用关心，依赖模块的内部有没有异步操作，正常加载即可。</p>
<p>这时，模块的加载会等待依赖模块（上例是awaiting.js）的异步操作完成，才执行后面的代码，有点像暂停在那里。所以，它总是会得到正确的output，不会因为加载时机的不同，而得到不一样的值。</p>
<p>下面是顶层await的一些使用场景。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; import() 方法加载</span><br><span class="line">const strings &#x3D; await import(&#96;&#x2F;i18n&#x2F;$&#123;navigator.language&#125;&#96;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 数据库操作</span><br><span class="line">const connection &#x3D; await dbConnector();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 依赖回滚</span><br><span class="line">let jQuery;</span><br><span class="line">try &#123;</span><br><span class="line">  jQuery &#x3D; await import(&#39;https:&#x2F;&#x2F;cdn-a.com&#x2F;jQuery&#39;);</span><br><span class="line">&#125; catch &#123;</span><br><span class="line">  jQuery &#x3D; await import(&#39;https:&#x2F;&#x2F;cdn-b.com&#x2F;jQuery&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，如果加载多个包含顶层await命令的模块，加载命令是同步执行的。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; x.js</span><br><span class="line">console.log(&quot;X1&quot;);</span><br><span class="line">await new Promise(r &#x3D;&gt; setTimeout(r, 1000));</span><br><span class="line">console.log(&quot;X2&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; y.js</span><br><span class="line">console.log(&quot;Y&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; z.js</span><br><span class="line">import &quot;.&#x2F;x.js&quot;;</span><br><span class="line">import &quot;.&#x2F;y.js&quot;;</span><br><span class="line">console.log(&quot;Z&quot;);</span><br></pre></td></tr></table></figure>

<p>上面代码有三个模块，最后的z.js加载x.js和y.js，打印结果是X1、Y、X2、Z。这说明，z.js并没有等待x.js加载完成，再去加载y.js。</p>
<p>顶层的await命令有点像，交出代码的执行权给其他的模块加载，等异步操作完成后，再拿回执行权，继续向下执行。</p>
]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>Class的基本语法</title>
    <url>/2020/04/18/22-Class%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li>简介</li>
<li>静态方法</li>
<li>实例属性的新写法</li>
<li>静态属性</li>
<li>私有方法和私有属性</li>
<li>new.target 属性<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2></li>
</ul>
<h3 id="类的由来"><a href="#类的由来" class="headerlink" title="类的由来"></a>类的由来</h3><p>JavaScript 语言中，<strong>生成实例对象的传统方法是通过构造函数</strong>。下面是一个例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Point(x, y) &#123;</span><br><span class="line">  this.x &#x3D; x;</span><br><span class="line">  this.y &#x3D; y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Point.prototype.toString &#x3D; function () &#123;</span><br><span class="line">  return &#39;(&#39; + this.x + &#39;, &#39; + this.y + &#39;)&#39;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var p &#x3D; new Point(1, 2);</span><br></pre></td></tr></table></figure>

<p>上面这种写法跟传统的面向对象语言（比如 C++ 和 Java）差异很大，很容易让新学习这门语言的程序员感到困惑。</p>
<p>ES6 提供了更接近传统语言的写法，<strong>引入了 Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类</strong>。</p>
<p>基本上，ES6 的class可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用 ES6 的class改写，就是下面这样。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Point &#123;</span><br><span class="line">  constructor(x, y) &#123;</span><br><span class="line">    this.x &#x3D; x;</span><br><span class="line">    this.y &#x3D; y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    return &#39;(&#39; + this.x + &#39;, &#39; + this.y + &#39;)&#39;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码定义了一个“类”，<strong>可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象</strong>。也就是说，ES5 的构造函数Point，对应 ES6 的Point类的构造方法。</p>
<p>Point类除了构造方法，还定义了一个<code>toString</code>方法。<strong>注意，定义“类”的方法的时候，前面不需要加上function这个关键字，直接把函数定义放进去了就可以了</strong>。另外，<strong>方法之间不需要逗号分隔，加了会报错</strong>。</p>
<p>ES6 的类，完全可以看作构造函数的另一种写法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Point &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">typeof Point &#x2F;&#x2F; &quot;function&quot;</span><br><span class="line">Point &#x3D;&#x3D;&#x3D; Point.prototype.constructor &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>上面代码表明，<strong>类的数据类型就是函数，类本身就指向构造函数</strong>。</p>
<ul>
<li>使用的时候，也是直接对类使用new命令，跟构造函数的用法完全一致。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Bar &#123;</span><br><span class="line">  doStuff() &#123;</span><br><span class="line">    console.log(&#39;stuff&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var b &#x3D; new Bar();</span><br><span class="line">b.doStuff() &#x2F;&#x2F; &quot;stuff&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>构造函数的prototype属性，在 ES6 的“类”上面继续存在。事实上，类的所有方法都定义在类的prototype属性上面。</p>
</li>
<li><p>在类的实例上面调用方法，其实就是调用原型上的方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class B &#123;&#125;</span><br><span class="line">let b &#x3D; new B();</span><br><span class="line"></span><br><span class="line">b.constructor &#x3D;&#x3D;&#x3D; B.prototype.constructor &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>上面代码中，b是B类的实例，它的constructor方法就是B类原型的constructor方法。</p>
<ul>
<li>由于类的方法都定义在<code>prototype</code>对象上面，所以类的新方法可以添加在<code>prototype</code>对象上面。<code>Object.assign</code>方法可以很方便地一次向类添加多个方法。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Point &#123;</span><br><span class="line">  constructor()&#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object.assign(Point.prototype, &#123;</span><br><span class="line">  toString()&#123;&#125;,</span><br><span class="line">  toValue()&#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>prototype对象的constructor属性，直接指向“类”的本身，这与 ES5 的行为是一致的。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 另外，类的内部所有定义的方法，都是不可枚举的（non-enumerable）。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### constructor 方法</span><br><span class="line"></span><br><span class="line">- &#96;constructor&#96;方法是类的默认方法，通过&#96;new&#96;命令生成对象实例时，自动调用该方法。一个类必须有&#96;constructor&#96;方法，如果没有显式定义，一个空的&#96;constructor&#96;方法会被默认添加。</span><br></pre></td></tr></table></figure>
<p>class Point {<br>}</p>
<p>// 等同于<br>class Point {<br>  constructor() {}<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，定义了一个空的类Point，JavaScript 引擎会自动为它添加一个空的constructor方法。</span><br><span class="line"></span><br><span class="line">- constructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象。</span><br></pre></td></tr></table></figure>
<p>class Foo {<br>  constructor() {<br>    return Object.create(null);<br>  }<br>}</p>
<p>new Foo() instanceof Foo</p>
<p>// false</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，constructor函数返回一个全新的对象，结果导致实例对象不是Foo类的实例。</span><br><span class="line"></span><br><span class="line">- 类必须使用new调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用new也可以执行。</span><br></pre></td></tr></table></figure>
<p>class Foo {<br>  constructor() {<br>    return Object.create(null);<br>  }<br>}</p>
<p>Foo()<br>// TypeError: Class constructor Foo cannot be invoked without ‘new’</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 类的实例</span><br><span class="line"></span><br><span class="line">- 生成类的实例的写法，与 ES5 完全一样，也是使用new命令。前面说过，如果忘记加上new，像函数那样调用Class，将会报错。</span><br></pre></td></tr></table></figure>
<p>class Point {<br>  // …<br>}</p>
<p>// 报错<br>var point = Point(2, 3);</p>
<p>// 正确<br>var point = new Point(2, 3);</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 与 ES5 一样，**实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）**。</span><br></pre></td></tr></table></figure>
<p>//定义类<br>class Point {</p>
<p>  constructor(x, y) {<br>    this.x = x;<br>    this.y = y;<br>  }</p>
<p>  toString() {<br>    return ‘(‘ + this.x + ‘, ‘ + this.y + ‘)’;<br>  }</p>
<p>}</p>
<p>var point = new Point(2, 3);</p>
<p>point.toString() // (2, 3)</p>
<p>point.hasOwnProperty(‘x’) // true<br>point.hasOwnProperty(‘y’) // true<br>point.hasOwnProperty(‘toString’) // false<br>point.<strong>proto</strong>.hasOwnProperty(‘toString’) // true</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，x和y都是实例对象point自身的属性（因为定义在this变量上），所以&#96;hasOwnProperty&#96;方法返回true，而&#96;toString&#96;是原型对象的属性（因为定义在Point类上），所以&#96;hasOwnProperty&#96;方法返回&#96;false&#96;。这些都与 ES5 的行为保持一致。</span><br><span class="line"></span><br><span class="line">- 与 ES5 一样，类的所有实例共享一个原型对象。</span><br></pre></td></tr></table></figure>
<p>var p1 = new Point(2,3);<br>var p2 = new Point(3,2);</p>
<p>p1.<strong>proto</strong> === p2.<strong>proto</strong><br>//true</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，p1和p2都是Point的实例，它们的原型都是Point.prototype，所以__proto__属性是相等的。</span><br><span class="line"></span><br><span class="line">- 这也意味着，**可以通过实例的__proto__属性为“类”添加方法**。</span><br><span class="line"></span><br><span class="line">  - &#96;__proto__&#96; 并不是语言本身的特性，这是各大厂商具体实现时添加的私有属性，虽然目前很多现代浏览器的 JS 引擎中都提供了这个私有属性，但依旧不建议在生产中使用该属性，避免对环境产生依赖。生产环境中，我们可以使用 &#96;Object.getPrototypeOf&#96; 方法来获取实例对象的原型，然后再来为原型添加方法&#x2F;属性。</span><br></pre></td></tr></table></figure>
<p>var p1 = new Point(2,3);<br>var p2 = new Point(3,2);</p>
<p>p1.<strong>proto</strong>.printName = function () { return ‘Oops’ };</p>
<p>p1.printName() // “Oops”<br>p2.printName() // “Oops”</p>
<p>var p3 = new Point(4,2);<br>p3.printName() // “Oops”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码在p1的原型上添加了一个printName方法，由于p1的原型就是p2的原型，因此p2也可以调用这个方法。而且，此后新建的实例p3也可以调用这个方法。这意味着，使用实例的&#96;__proto__&#96;属性改写原型，必须相当谨慎，不推荐使用，因为这会改变“类”的原始定义，影响到所有实例。</span><br><span class="line"></span><br><span class="line">### 取值函数（getter）和存值函数（setter）</span><br><span class="line"></span><br><span class="line">与 ES5 一样，**在“类”的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为**。</span><br></pre></td></tr></table></figure>
<p>class MyClass {<br>  constructor() {<br>    // …<br>  }<br>  get prop() {<br>    return ‘getter’;<br>  }<br>  set prop(value) {<br>    console.log(‘setter: ‘+value);<br>  }<br>}</p>
<p>let inst = new MyClass();</p>
<p>inst.prop = 123;<br>// setter: 123</p>
<p>inst.prop<br>// ‘getter’</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，prop属性有对应的存值函数和取值函数，因此赋值和读取行为都被自定义了。</span><br><span class="line"></span><br><span class="line">- 存值函数和取值函数是设置在属性的 Descriptor 对象上的。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 属性表达式</span><br><span class="line"></span><br><span class="line">类的属性名，可以采用表达式。</span><br></pre></td></tr></table></figure>
<p>let methodName = ‘getArea’;</p>
<p>class Square {<br>  constructor(length) {<br>    // …<br>  }</p>
<p>  <a href="">methodName</a> {<br>    // …<br>  }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，Square类的方法名getArea，是从表达式得到的。</span><br><span class="line"></span><br><span class="line">### Class 表达式</span><br><span class="line"></span><br><span class="line">与函数一样，类也可以**使用表达式的形式**定义。</span><br></pre></td></tr></table></figure>
<p>const MyClass = class Me {<br>  getClassName() {<br>    return Me.name;<br>  }<br>};</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码使用表达式定义了一个类。需要注意的是，这个类的名字是Me，但是Me只在 Class 的内部可用，指代当前类。在 Class 外部，这个类只能用MyClass引用。</span><br></pre></td></tr></table></figure>
<p>let inst = new MyClass();<br>inst.getClassName() // Me<br>Me.name // ReferenceError: Me is not defined</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码表示，Me只在 Class 内部有定义。</span><br><span class="line"></span><br><span class="line">如果类的内部没用到的话，可以省略Me，也就是可以写成下面的形式。</span><br></pre></td></tr></table></figure>
<p>const MyClass = class { /* … */ };</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">采用 Class 表达式，可以写出立即执行的 Class。</span><br></pre></td></tr></table></figure>
<p>let person = new class {<br>  constructor(name) {<br>    this.name = name;<br>  }</p>
<p>  sayName() {<br>    console.log(this.name);<br>  }<br>}(‘张三’);</p>
<p>person.sayName(); // “张三”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，person是一个立即执行的类的实例。</span><br><span class="line"></span><br><span class="line">### 注意点</span><br><span class="line"></span><br><span class="line">- （1）严格模式</span><br><span class="line"></span><br><span class="line">类和模块的内部，默认就是严格模式，所以不需要使用use strict指定运行模式。只要你的代码写在类或模块之中，就只有严格模式可用。考虑到未来所有的代码，其实都是运行在模块之中，所以 ES6 实际上把整个语言升级到了严格模式。</span><br><span class="line"></span><br><span class="line">- （2）不存在提升</span><br><span class="line"></span><br><span class="line">类不存在变量提升（hoist），这一点与 ES5 完全不同。</span><br></pre></td></tr></table></figure>
<p>new Foo(); // ReferenceError<br>class Foo {}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，Foo类使用在前，定义在后，这样会报错，因为 ES6 不会把类的声明提升到代码头部。这种规定的原因与下文要提到的继承有关，**必须保证子类在父类之后定义**。</span><br></pre></td></tr></table></figure>
<p>{<br>  let Foo = class {};<br>  class Bar extends Foo {<br>  }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面的代码不会报错，因为Bar继承Foo的时候，Foo已经有定义了。但是，如果存在class的提升，上面代码就会报错，因为class会被提升到代码头部，而let命令是不提升的，所以导致Bar继承Foo的时候，Foo还没有定义。</span><br><span class="line"></span><br><span class="line">- （3）name 属性</span><br><span class="line"></span><br><span class="line">由于本质上，ES6 的类只是 ES5 的构造函数的一层包装，所以函数的许多特性都被Class继承，包括name属性。</span><br></pre></td></tr></table></figure>
<p>class Point {}<br>Point.name // “Point”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">name属性总是返回紧跟在class关键字后面的类名。</span><br><span class="line"></span><br><span class="line">- （4）Generator 方法</span><br><span class="line"></span><br><span class="line">如果某个方法之前加上星号（*），就表示该方法是一个 Generator 函数。</span><br></pre></td></tr></table></figure>
<p>class Foo {<br>  constructor(…args) {<br>    this.args = args;<br>  }</p>
<ul>
<li><a href="">Symbol.iterator</a> {<br>for (let arg of this.args) {<br>  yield arg;<br>}<br>}<br>}</li>
</ul>
<p>for (let x of new Foo(‘hello’, ‘world’)) {<br>  console.log(x);<br>}<br>// hello<br>// world</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，Foo类的Symbol.iterator方法前有一个星号，表示该方法是一个 Generator 函数。Symbol.iterator方法返回一个Foo类的默认遍历器，for...of循环会自动调用这个遍历器。</span><br><span class="line"></span><br><span class="line">- （5）this 的指向</span><br><span class="line"></span><br><span class="line">类的方法内部如果含有this，它默认指向类的实例。但是，必须非常小心，一旦单独使用该方法，很可能报错。</span><br></pre></td></tr></table></figure>
<p>class Logger {<br>  printName(name = ‘there’) {<br>    this.print(<code>Hello ${name}</code>);<br>  }</p>
<p>  print(text) {<br>    console.log(text);<br>  }<br>}</p>
<p>const logger = new Logger();<br>const { printName } = logger;<br>printName(); // TypeError: Cannot read property ‘print’ of undefined</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，printName方法中的this，默认指向Logger类的实例。但是，如果将这个方法提取出来单独使用，this会指向该方法运行时所在的环境（由于 class 内部是严格模式，所以 this 实际指向的是undefined），从而导致找不到print方法而报错。</span><br><span class="line"></span><br><span class="line">一个比较简单的解决方法是，在构造方法中绑定this，这样就不会找不到print方法了。</span><br></pre></td></tr></table></figure>
<p>class Logger {<br>  constructor() {<br>    this.printName = this.printName.bind(this);<br>  }</p>
<p>  // …<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">另一种解决方法是使用箭头函数。</span><br></pre></td></tr></table></figure>
<p>class Obj {<br>  constructor() {<br>    this.getThis = () =&gt; this;<br>  }<br>}</p>
<p>const myObj = new Obj();<br>myObj.getThis() === myObj // true</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">箭头函数内部的this总是指向定义时所在的对象。上面代码中，箭头函数位于构造函数内部，它的定义生效的时候，是在构造函数执行的时候。这时，箭头函数所在的运行环境，肯定是实例对象，所以this会总是指向实例对象。</span><br><span class="line"></span><br><span class="line">还有一种解决方法是使用Proxy，获取方法的时候，自动绑定this。</span><br><span class="line"></span><br><span class="line">## 静态方法</span><br><span class="line"></span><br><span class="line">- 类相当于实例的原型，所有在类中定义的方法，都会被实例继承。**如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”**。</span><br></pre></td></tr></table></figure>
<p>class Foo {<br>  static classMethod() {<br>    return ‘hello’;<br>  }<br>}</p>
<p>Foo.classMethod() // ‘hello’</p>
<p>var foo = new Foo();<br>foo.classMethod()<br>// TypeError: foo.classMethod is not a function</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，Foo类的classMethod方法前有&#96;static&#96;关键字，表明该方法是一个静态方法，可以直接在Foo类上调用（Foo.classMethod()），而不是在Foo类的实例上调用。如果在实例上调用静态方法，会抛出一个错误，表示不存在该方法。</span><br><span class="line"></span><br><span class="line">&gt; 注意，**如果静态方法包含&#96;this&#96;关键字，这个&#96;this&#96;指的是类，而不是实例**。</span><br></pre></td></tr></table></figure>
<p>class Foo {<br>  static bar() {<br>    this.baz();<br>  }<br>  static baz() {<br>    console.log(‘hello’);<br>  }<br>  baz() {<br>    console.log(‘world’);<br>  }<br>}</p>
<p>Foo.bar() // hello</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，静态方法bar调用了this.baz，这里的this指的是Foo类，而不是Foo的实例，等同于调用Foo.baz。另外，从这个例子还可以看出，静态方法可以与非静态方法重名。</span><br><span class="line"></span><br><span class="line">- 父类的静态方法，可以被子类继承。</span><br></pre></td></tr></table></figure>
<p>class Foo {<br>  static classMethod() {<br>    return ‘hello’;<br>  }<br>}</p>
<p>class Bar extends Foo {<br>}</p>
<p>Bar.classMethod() // ‘hello’</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，父类Foo有一个静态方法，子类Bar可以调用这个方法。</span><br><span class="line"></span><br><span class="line">- 静态方法也是可以从super对象上调用的。</span><br></pre></td></tr></table></figure>
<p>class Foo {<br>  static classMethod() {<br>    return ‘hello’;<br>  }<br>}</p>
<p>class Bar extends Foo {<br>  static classMethod() {<br>    return super.classMethod() + ‘, too’;<br>  }<br>}</p>
<p>Bar.classMethod() // “hello, too”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 实例属性的新写法</span><br><span class="line"></span><br><span class="line">实例属性除了定义在&#96;constructor()&#96;方法里面的&#96;this&#96;上面，也可以定义在类的最顶层。</span><br></pre></td></tr></table></figure>
<p>class IncreasingCounter {<br>  constructor() {<br>    this._count = 0;<br>  }<br>  get value() {<br>    console.log(‘Getting the current value!’);<br>    return this._count;<br>  }<br>  increment() {<br>    this._count++;<br>  }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，实例属性this._count定义在constructor()方法里面。另一种写法是，这个属性也可以定义在类的最顶层，其他都不变。</span><br></pre></td></tr></table></figure>
<p>class IncreasingCounter {<br>  _count = 0;<br>  get value() {<br>    console.log(‘Getting the current value!’);<br>    return this._count;<br>  }<br>  increment() {<br>    this._count++;<br>  }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，实例属性_count与取值函数value()和increment()方法，处于同一个层级。这时，不需要在实例属性前面加上this。</span><br><span class="line"></span><br><span class="line">这种新写法的好处是，所有实例对象自身的属性都定义在类的头部，看上去比较整齐，一眼就能看出这个类有哪些实例属性。</span><br><span class="line"></span><br><span class="line">## 静态属性</span><br><span class="line"></span><br><span class="line">静态属性指的是 Class 本身的属性，即Class.propName，而不是定义在实例对象（this）上的属性。</span><br></pre></td></tr></table></figure>
<p>class Foo {<br>}</p>
<p>Foo.prop = 1;<br>Foo.prop // 1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面的写法为Foo类定义了一个静态属性prop。</span><br><span class="line"></span><br><span class="line">目前，只有这种写法可行，因为 ES6 明确规定，Class 内部只有静态方法，没有静态属性。现在有一个提案提供了类的静态属性，写法是在实例属性的前面，加上static关键字。</span><br></pre></td></tr></table></figure>
<p>class MyClass {<br>  static myStaticProp = 42;</p>
<p>  constructor() {<br>    console.log(MyClass.myStaticProp); // 42<br>  }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 私有方法和私有属性</span><br><span class="line"></span><br><span class="line">### 现有的解决方案</span><br><span class="line"></span><br><span class="line">私有方法和私有属性，是只能在类的内部访问的方法和属性，外部不能访问。这是常见需求，有利于代码的封装，但 ES6 不提供，只能通过变通方法模拟实现。</span><br><span class="line"></span><br><span class="line">一种做法是在命名上加以区别。</span><br></pre></td></tr></table></figure>
<p>class Widget {</p>
<p>  // 公有方法<br>  foo (baz) {<br>    this._bar(baz);<br>  }</p>
<p>  // 私有方法<br>  _bar(baz) {<br>    return this.snaf = baz;<br>  }</p>
<p>  // …<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，_bar方法前面的下划线，表示这是一个只限于内部使用的私有方法。但是，这种命名是不保险的，在类的外部，还是可以调用到这个方法。</span><br><span class="line"></span><br><span class="line">另一种方法就是索性将私有方法移出模块，因为模块内部的所有方法都是对外可见的。</span><br></pre></td></tr></table></figure>
<p>class Widget {<br>  foo (baz) {<br>    bar.call(this, baz);<br>  }</p>
<p>  // …<br>}</p>
<p>function bar(baz) {<br>  return this.snaf = baz;<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，foo是公开方法，内部调用了bar.call(this, baz)。这使得bar实际上成为了当前模块的私有方法。</span><br><span class="line"></span><br><span class="line">还有一种方法是利用Symbol值的唯一性，将私有方法的名字命名为一个Symbol值。</span><br></pre></td></tr></table></figure>
<p>const bar = Symbol(‘bar’);<br>const snaf = Symbol(‘snaf’);</p>
<p>export default class myClass{</p>
<p>  // 公有方法<br>  foo(baz) {<br>    this<a href="baz">bar</a>;<br>  }</p>
<p>  // 私有方法<br>  <a href="baz">bar</a> {<br>    return this[snaf] = baz;<br>  }</p>
<p>  // …<br>};</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，bar和snaf都是Symbol值，一般情况下无法获取到它们，因此达到了私有方法和私有属性的效果。但是也不是绝对不行，Reflect.ownKeys()依然可以拿到它们。</span><br></pre></td></tr></table></figure>
<p>const inst = new myClass();</p>
<p>Reflect.ownKeys(myClass.prototype)<br>// [ ‘constructor’, ‘foo’, Symbol(bar) ]<br>上面代码中，Symbol 值的属性名依然可以从类的外部拿到。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 私有属性的提案</span><br><span class="line"></span><br><span class="line">目前，**有一个提案，为class加了私有属性。方法是在属性名之前，使用#表示**。</span><br></pre></td></tr></table></figure>
<p>class IncreasingCounter {<br>  #count = 0;<br>  get value() {<br>    console.log(‘Getting the current value!’);<br>    return this.#count;<br>  }<br>  increment() {<br>    this.#count++;<br>  }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，#count就是私有属性，只能在类的内部使用（this.#count）。如果在类的外部使用，就会报错。</span><br></pre></td></tr></table></figure>
<p>const counter = new IncreasingCounter();<br>counter.#count // 报错<br>counter.#count = 42 // 报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码在类的外部，读取私有属性，就会报错。</span><br><span class="line"></span><br><span class="line">下面是另一个例子。</span><br></pre></td></tr></table></figure>
<p>class Point {<br>  #x;</p>
<p>  constructor(x = 0) {<br>    this.#x = +x;<br>  }</p>
<p>  get x() {<br>    return this.#x;<br>  }</p>
<p>  set x(value) {<br>    this.#x = +value;<br>  }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，#x就是私有属性，在Point类之外是读取不到这个属性的。由于井号#是属性名的一部分，使用时必须带有#一起使用，所以#x和x是两个不同的属性。</span><br><span class="line"></span><br><span class="line">之所以要引入一个新的前缀#表示私有属性，而没有采用private关键字，是因为 JavaScript 是一门动态语言，没有类型声明，使用独立的符号似乎是唯一的比较方便可靠的方法，能够准确地区分一种属性是否为私有属性。另外，Ruby 语言使用@表示私有属性，ES6 没有用这个符号而使用#，是因为@已经被留给了 Decorator。</span><br><span class="line"></span><br><span class="line">这种写法不仅可以写私有属性，还可以用来写私有方法。</span><br></pre></td></tr></table></figure>
<p>class Foo {<br>  #a;<br>  #b;<br>  constructor(a, b) {<br>    this.#a = a;<br>    this.#b = b;<br>  }<br>  #sum() {<br>    return #a + #b;<br>  }<br>  printSum() {<br>    console.log(this.#sum());<br>  }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，#sum()就是一个私有方法。</span><br><span class="line"></span><br><span class="line">另外，私有属性也可以设置 getter 和 setter 方法。</span><br></pre></td></tr></table></figure>
<p>class Counter {<br>  #xValue = 0;</p>
<p>  constructor() {<br>    super();<br>    // …<br>  }</p>
<p>  get #x() { return #xValue; }<br>  set #x(value) {<br>    this.#xValue = value;<br>  }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，#x是一个私有属性，它的读写都通过get #x()和set #x()来完成。</span><br><span class="line"></span><br><span class="line">- 私有属性不限于从this引用，只要是在类的内部，实例也可以引用私有属性。</span><br></pre></td></tr></table></figure>
<p>class Foo {<br>  #privateValue = 42;<br>  static getPrivateValue(foo) {<br>    return foo.#privateValue;<br>  }<br>}</p>
<p>Foo.getPrivateValue(new Foo()); // 42</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码允许从实例foo上面引用私有属性。</span><br><span class="line"></span><br><span class="line">- 私有属性和私有方法前面，也可以加上static关键字，表示这是一个静态的私有属性或私有方法。</span><br></pre></td></tr></table></figure>
<p>class FakeMath {<br>  static PI = 22 / 7;<br>  static #totallyRandomNumber = 4;</p>
<p>  static #computeRandomNumber() {<br>    return FakeMath.#totallyRandomNumber;<br>  }</p>
<p>  static random() {<br>    console.log(‘I heard you like random numbers…’)<br>    return FakeMath.#computeRandomNumber();<br>  }<br>}</p>
<p>FakeMath.PI // 3.142857142857143<br>FakeMath.random()<br>// I heard you like random numbers…<br>// 4<br>FakeMath.#totallyRandomNumber // 报错<br>FakeMath.#computeRandomNumber() // 报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，&#96;#totallyRandomNumber&#96;是私有属性，&#96;#computeRandomNumber()&#96;是私有方法，只能在FakeMath这个类的内部调用，外部调用就会报错。</span><br><span class="line"></span><br><span class="line">## new.target 属性</span><br><span class="line"></span><br><span class="line">new是从构造函数生成实例对象的命令。ES6 为new命令引入了一个&#96;new.target&#96;属性，该属性一般用在构造函数之中，返回new命令作用于的那个构造函数。如果构造函数不是通过&#96;new&#96;命令或&#96;Reflect.construct()&#96;调用的，&#96;new.target&#96;会返回&#96;undefined&#96;，因此这个属性可以用来确定构造函数是怎么调用的。</span><br></pre></td></tr></table></figure>
<p>function Person(name) {<br>  if (new.target !== undefined) {<br>    this.name = name;<br>  } else {<br>    throw new Error(‘必须使用 new 命令生成实例’);<br>  }<br>}</p>
<p>// 另一种写法<br>function Person(name) {<br>  if (new.target === Person) {<br>    this.name = name;<br>  } else {<br>    throw new Error(‘必须使用 new 命令生成实例’);<br>  }<br>}</p>
<p>var person = new Person(‘张三’); // 正确<br>var notAPerson = Person.call(person, ‘张三’);  // 报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码确保构造函数只能通过new命令调用。</span><br><span class="line"></span><br><span class="line">- Class 内部调用new.target，返回当前 Class。</span><br></pre></td></tr></table></figure>
<p>class Rectangle {<br>  constructor(length, width) {<br>    console.log(new.target === Rectangle);<br>    this.length = length;<br>    this.width = width;<br>  }<br>}</p>
<p>var obj = new Rectangle(3, 4); // 输出 true</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 需要注意的是，子类继承父类时，new.target会返回子类。</span><br></pre></td></tr></table></figure>
<p>class Rectangle {<br>  constructor(length, width) {<br>    console.log(new.target === Rectangle);<br>    // …<br>  }<br>}</p>
<p>class Square extends Rectangle {<br>  constructor(length, width) {<br>    super(length, width);<br>  }<br>}</p>
<p>var obj = new Square(3); // 输出 false</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面代码中，new.target会返回子类。</span><br><span class="line"></span><br><span class="line">利用这个特点，可以写出不能独立使用、必须继承后才能使用的类。</span><br></pre></td></tr></table></figure>
<p>class Shape {<br>  constructor() {<br>    if (new.target === Shape) {<br>      throw new Error(‘本类不能实例化’);<br>    }<br>  }<br>}</p>
<p>class Rectangle extends Shape {<br>  constructor(length, width) {<br>    super();<br>    // …<br>  }<br>}</p>
<p>var x = new Shape();  // 报错<br>var y = new Rectangle(3, 4);  // 正确</p>
<p>```</p>
<p>上面代码中，Shape类不能被实例化，只能用于继承。</p>
<p>注意，在函数外部，使用new.target会报错。</p>
]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>内置对象：String</title>
    <url>/2020/04/18/22-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%EF%BC%9AString/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>在日常开发中，String对象的使用频率是非常高的。所以有必要详细介绍。</p>
</blockquote>
<a id="more"></a>
<h3 id="基本数据类型不能绑定属性和方法"><a href="#基本数据类型不能绑定属性和方法" class="headerlink" title="基本数据类型不能绑定属性和方法"></a>基本数据类型不能绑定属性和方法</h3><p><strong>1、基本数据类型：</strong></p>
<p>注意，基本数据类型<code>string</code>是<strong>无法绑定属性和方法</strong>的。比如说：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"qianguyihao"</span>;</span><br><span class="line"></span><br><span class="line">str.aaa = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str);  <span class="comment">//打印结果为：string</span></span><br><span class="line"><span class="built_in">console</span>.log(str.aaa);     <span class="comment">//打印结果为：undefined</span></span><br></pre></td></tr></table></figure>

<p>上方代码中，当我们尝试打印<code>str.aaa</code>的时候，会发现打印结果为：undefined。也就是说，不能给 <code>string</code> 绑定属性和方法。</p>
<p>当然，我们可以打印str.length、str.indexOf(“m”)等等。因为这两个方法的底层做了数据类型转换（<strong>临时</strong>将 <code>string</code> 字符串转换为 <code>String</code> 对象，然后再调用内置方法），也就是我们在上一篇文章中讲到的<strong>包装类</strong>。</p>
<p><strong>2、引用数据类型：</strong></p>
<p>引用数据类型<code>String</code>是可以绑定属性和方法的。如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strObj = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"smyhvae"</span>);</span><br><span class="line">strObj.aaa = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(strObj);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> strObj);  <span class="comment">//打印结果：Object</span></span><br><span class="line"><span class="built_in">console</span>.log(strObj.aaa);</span><br></pre></td></tr></table></figure>

<p>内置对象Number也有一些自带的方法，比如：</p>
<ul>
<li><p>Number.MAX_VALUE;</p>
</li>
<li><p>Number.MIN_VALUE;</p>
</li>
</ul>
<p>内置对象Boolean也有一些自带的方法，但是用的不多。</p>
<h3 id="在底层，字符串以字符数组的形式保存"><a href="#在底层，字符串以字符数组的形式保存" class="headerlink" title="在底层，字符串以字符数组的形式保存"></a>在底层，字符串以字符数组的形式保存</h3><p>在底层，字符串是以字符数组的形式保存的。代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"smyhvae"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length); <span class="comment">// 获取字符串的长度</span></span><br><span class="line"><span class="built_in">console</span>.log(str[<span class="number">2</span>]); <span class="comment">// 获取字符串中的第2个字符</span></span><br></pre></td></tr></table></figure>

<p>上方代码中，<code>smyhvae</code>这个字符串在底层是以<code>[&quot;s&quot;, &quot;m&quot;, &quot;y&quot;, &quot;h&quot;, &quot;v&quot;, &quot;a&quot;, &quot;e&quot;]</code>的形式保存的。因此，我们既可以获取字符串的长度，也可以获取指定索引index位置的单个字符。这很像数组中的操作。</p>
<h2 id="内置对象-String-的常见方法"><a href="#内置对象-String-的常见方法" class="headerlink" title="内置对象 String 的常见方法"></a>内置对象 String 的常见方法</h2><h3 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h3><p><code>charAt</code>：返回字符串指定位置的字符。不会修改原字符串。</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">字符 = str.charAt(index);</span><br></pre></td></tr></table></figure>

<p>解释：字符串中第一个字符的下标是 0。如果参数 index 不在 [0, string.length) 之间，该方法将返回一个空字符串。</p>
<p>而且，这里的 <code>str.charAt(index)</code>和<code>str[index]</code>的效果是一样的。</p>
<p><strong>代码举例</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"smyhvae"</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(str.charAt(i));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<p>上面这个例子一般不用。一般打印数组和json的时候用索引，打印String不建议用索引。</p>
<h3 id="charCodeAt"><a href="#charCodeAt" class="headerlink" title="charCodeAt()"></a>charCodeAt()</h3><p><code>charCodeAt</code>：返回字符串指定位置的字符的 Unicode 编码。不会修改原字符串。</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">字符 = str.charCodeAt(index);</span><br></pre></td></tr></table></figure>

<p><strong>代码举例</strong>：打印字符串的占位长度</p>
<p>提示：一个英文占一个位置，一个中文占两个位置。</p>
<p>思路：判断该字符是否在0-127之间（在的话是英文，不在是非英文）。</p>
<p>代码实现：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//    sort();   底层用到了charCodeAt();</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> str = <span class="string">"I love my country!我你爱中国！"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//需求：求一个字符串占有几个字符位。</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//思路；如果是英文，站一个字符位，如果不是英文占两个字符位。</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//技术点：判断该字符是否在0-127之间。（在的话是英文，不在是非英文）</span></span></span><br><span class="line">    alert(getZFWlength(str));</span><br><span class="line">    alert(str.length);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//定义方法：字符位</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">getZFWlength</span><span class="params">(string)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//定义一个计数器</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> count = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; string.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//对每一位字符串进行判断，如果Unicode编码在0-127，计数器+1；否则+2</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            if (string.charCodeAt(i) <span class="tag">&lt; <span class="attr">128</span> &amp;&amp; <span class="attr">string.charCodeAt</span>(<span class="attr">i</span>) &gt;</span>= 0) &#123;</span></span></span><br><span class="line">                count++;</span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">                count += 2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> count;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">30</span><br><span class="line">24</span><br></pre></td></tr></table></figure>

<p>从打印结果可以看出：字符串的长度是24，但是却占了30个字符位（一个中文占两个字符位）。</p>
<p>另外，sort()方法其实底层也是用到了charCodeAt()，因为用到了Unicode编码。</p>
<h3 id="String-fromCharCode"><a href="#String-fromCharCode" class="headerlink" title="String.fromCharCode()"></a>String.fromCharCode()</h3><p><code>String.fromCharCode()</code>：根据字符的 Unicode 编码获取字符。</p>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result1 = <span class="built_in">String</span>.fromCharCode(<span class="number">72</span>);</span><br><span class="line"><span class="keyword">var</span> result2 = <span class="built_in">String</span>.fromCharCode(<span class="number">20013</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result1); <span class="comment">// 打印结果：H</span></span><br><span class="line"><span class="built_in">console</span>.log(result2); <span class="comment">// 打印结果：中</span></span><br></pre></td></tr></table></figure>

<h3 id="indexOf-lastIndexOf"><a href="#indexOf-lastIndexOf" class="headerlink" title="indexOf()/lastIndexOf()"></a>indexOf()/lastIndexOf()</h3><p><code>indexOf()/lastIndexOf()</code>：获取指定字符的索引。</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">索引值 = str.indexOf(想要查询的字符);</span><br></pre></td></tr></table></figure>

<p>解释：<code>indexOf()</code> 是从前向后索引字符串的位置。同理，<code>lastIndexOf()</code>是从后向前寻找。</p>
<p><strong>作用</strong>：可以检索一个字符串中是否含有指定内容。如果字符串中含有该内容，则会返回其<strong>第一次出现</strong>的索引；如果没有找到指定的内容，则返回 -1。</p>
<p>因此可以得出一个技巧：<strong>如果获取的索引值为0，说明字符串是以查询的参数为开头的</strong>。</p>
<p>这个方法还可以指定第二个参数，用来 指定开始查找的位置。</p>
<p><strong>代码举例1</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abcdea"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给字符查索引(索引值为0,说明字符串以查询的参数为开头)</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"c"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">"c"</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"a"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">"a"</span>));</span><br></pre></td></tr></table></figure>


<p><strong>代码举例2</strong>：（两个参数时，需要特别注意）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'qianguyihao'</span>;</span><br><span class="line">result = str.indexOf(<span class="string">'a'</span>, <span class="number">3</span>); <span class="comment">// 从第三个位置开始查找 'a'这个字符 【重要】</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 打印结果：9</span></span><br></pre></td></tr></table></figure>

<p>上方代码中，<code>indexOf()</code>方法中携带了两个参数，具体解释请看注释。</p>
<h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><p><code>concat()</code>：字符串的连接。</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">新字符串 = str1.concat(str2)； <span class="comment">//链接两个字符串</span></span><br></pre></td></tr></table></figure>

<p>这种方法基本不用，直接把两个字符串相加就好。</p>
<p>是的，你会发现，数组中也有<code>concat()</code>方法，用于数组的连接。这个方法在数组中用得挺多的。</p>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">'qiangu'</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">'yihao'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = str1.concat(str2);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 打印结果：qianguyihao</span></span><br></pre></td></tr></table></figure>

<h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><p><code>slice()</code>：从字符串中截取指定的内容。不会修改原字符串，而是将及截取到的内容返回。</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">字符串 = str.slice(开始索引, 结束索引); <span class="comment">//两个参数都是索引值。包左不包右。</span></span><br></pre></td></tr></table></figure>

<p>解释：上面的参数，包左不包右。参数举例如下：</p>
<ul>
<li><p>(2, 5) 截取时，包左不包右。</p>
</li>
<li><p>(2) 表示<strong>从指定的索引位置开始，截取到最后</strong>。</p>
</li>
<li><p>(-3) 表示从倒数第几个开始，截取到最后。</p>
</li>
<li><p>(1, -1) 表示从第一个截取到倒数第一个。</p>
</li>
<li><p>(5, 2) 表示前面的大，后面的小，返回值为空。</p>
</li>
</ul>
<h3 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h3><p><code>substring()</code>：从字符串中截取指定的内容。和<code>slice()</code>类似。</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">字符串 = str.substring(开始索引, 结束索引); <span class="comment">//两个参数都是索引值。包左不包右。</span></span><br></pre></td></tr></table></figure>

<p><code>substring()</code>和<code>slice()</code>是类似的。但不同之处在于：</p>
<ul>
<li><p><code>substring()</code>不能接受负值作为参数。如果传递了一个<strong>负值</strong>，则默认使用0。</p>
</li>
<li><p><code>substring()</code>还会自动调整参数的位置，如果第二个参数小于第一个，则自动交换。比如说， <code>substring(1, 0)</code>截取的是第一个字符。</p>
</li>
</ul>
<h3 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h3><p><code>substr()</code>：从字符串中截取指定的内容。不会修改原字符串，而是将及截取到的内容返回。</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">字符串 = str.substr(开始索引, 截取的长度);</span><br></pre></td></tr></table></figure>

<p>参数举例：</p>
<ul>
<li><p>(2,4)：从索引值为2的字符开始，截取4个字符。</p>
</li>
<li><p>(1)：从指定位置开始，截取到最后。</p>
</li>
<li><p>(-3)：从倒数第几个开始，剪到最后.</p>
</li>
<li><p>不包括前大后小的情况。</p>
</li>
</ul>
<p>备注：ECMAscript 没有对 <code>substr()</code> 方法进行标准化，因此不建议使用它。</p>
<h3 id="split-【重要】"><a href="#split-【重要】" class="headerlink" title="split() 【重要】"></a>split() 【重要】</h3><p><code>split()</code>：将一个字符串拆分成一个数组。</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">数组 = str.split();</span><br></pre></td></tr></table></figure>


<p>备注：<code>split()</code>这个方法在实际开发中用得非常多。一般来说，从接口拿到的json数据中，经常会收到类似于<code>&quot;q, i, a, n&quot;</code>这样的字符串，前端需要将这个字符串拆分成<code>[&#39;q&#39;, &#39;i&#39;, &#39;a&#39;, &#39;n&#39;]</code>数组，这个时候<code>split()</code>方法就排上用场了。</p>
<p><strong>代码举例1</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"qian, gu, yi, hao"</span>; <span class="comment">// 用逗号隔开的字符串</span></span><br><span class="line"><span class="keyword">var</span> array = str.split(<span class="string">","</span>); <span class="comment">// 将字符串 str 拆分成数组，通过逗号来拆分</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array); <span class="comment">// 打印结果是数组：["qian", " gu", " yi", " hao"]</span></span><br></pre></td></tr></table></figure>

<p><strong>代码举例2</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//split()方法：字符串变数组</span></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">"生命壹号|许嵩|smyhvae"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str3.split());   <span class="comment">// 无参数，表示：把字符串作为一个元素添加到数组中。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str3.split(<span class="string">""</span>));  <span class="comment">//参数为空字符串，则表示：分隔字符串中每一个字符，分别添加到数组中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str3.split(<span class="string">"|"</span>)); <span class="comment">//参数为指定字符，表示：此字符将不会出现在数组的任意一个元素中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str3.split(<span class="string">"许"</span>)); <span class="comment">//同理</span></span><br></pre></td></tr></table></figure>



<h3 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h3><p><code>trim()</code>：去除字符串前后的空白。</p>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//去除前后的空格，trim();</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">"   a   b   c   "</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str1);</span><br><span class="line"><span class="built_in">console</span>.log(str1.trim());</span><br></pre></td></tr></table></figure>


<h3 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h3><p><code>replace()</code>：将字符串中的指定内容，替换为新的内容并返回。不会修改原字符串。</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">新的字符串 = str.replace(被替换的内容，新的内容);</span><br></pre></td></tr></table></figure>

<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//replace()方法：替换</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"Today is fine day,today is fine day !!!"</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);</span><br><span class="line"><span class="built_in">console</span>.log(str2.replace(<span class="string">"today"</span>,<span class="string">"tomorrow"</span>));  <span class="comment">//只能替换第一个today</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.replace(<span class="regexp">/today/gi</span>,<span class="string">"tomorrow"</span>)); <span class="comment">//这里用到了正则，才能替换所有的today</span></span><br></pre></td></tr></table></figure>

<h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abcdEFG"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转换成小写</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toLowerCase());</span><br><span class="line"></span><br><span class="line"><span class="comment">//转换成大写</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toUpperCase());</span><br></pre></td></tr></table></figure>

<h2 id="html方法"><a href="#html方法" class="headerlink" title="html方法"></a>html方法</h2><ul>
<li><p>anchor()  创建a链接</p>
</li>
<li><p>big()</p>
</li>
<li><p>sub()</p>
</li>
<li><p>sup()</p>
</li>
<li><p>link()</p>
</li>
<li><p>bold()</p>
</li>
</ul>
<p>注意，str.link()  返回值是字符串。</p>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"你好"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.anchor())</span><br><span class="line"><span class="built_in">console</span>.log(str.big())</span><br><span class="line"><span class="built_in">console</span>.log(str.sub())</span><br><span class="line"><span class="built_in">console</span>.log(str.sup())</span><br><span class="line"><span class="built_in">console</span>.log(str.link(<span class="string">"http://www.baidu.com"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(str.bold())</span><br></pre></td></tr></table></figure>



<h2 id="字符串练习"><a href="#字符串练习" class="headerlink" title="字符串练习"></a>字符串练习</h2><p><strong>练习1</strong>：”smyhvaevaesmyh”查找字符串中所有m出现的位置。</p>
<p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str2 = <span class="string">"abcoefoxyozzopp"</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;str2.length;i++)&#123;</span><br><span class="line">    <span class="comment">//如果指定位置的符号=== "o"</span></span><br><span class="line">    <span class="comment">//str2[i]</span></span><br><span class="line">    <span class="keyword">if</span>( str2.charAt(i)===<span class="string">"o"</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>练习2</strong>：判断一个字符串中出现次数最多的字符，统计这个次数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> str2 = <span class="string">"smyhvaevaesmyhvae"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//定义一个json，然后判断json中是够有该属性，如果有该属性，那么值+1;否则创建一个该属性，并赋值为1；</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> json = &#123;&#125;;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str2.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//判断：如果有该属性，那么值+1;否则创建一个该属性，并赋值为1；</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> key = str2.charAt(i);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (json[key] === <span class="literal">undefined</span>) &#123;</span></span><br><span class="line">            json[key] = 1;</span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">            json[key] += 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(json);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"----------------"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//获取json中属性值最大的选项</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> maxKey = <span class="string">""</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> maxValue = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> json) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//        if(maxKey == "")&#123;</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//            maxKey = k;</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//            maxValue = json[k];</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//        &#125;else&#123;</span></span></span><br><span class="line">        if (json[k] &gt; maxValue) &#123;</span><br><span class="line">            maxKey = k;</span><br><span class="line">            maxValue = json[k];</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">//        &#125;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(maxKey);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(maxValue);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>包装类</title>
    <url>/2020/04/18/23-%E5%8C%85%E8%A3%85%E7%B1%BB/</url>
    <content><![CDATA[<hr>
<h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><h3 id="包装类的介绍"><a href="#包装类的介绍" class="headerlink" title="包装类的介绍"></a>包装类的介绍</h3><p>我们都知道，js中的数据类型包括以下几种。</p>
<ul>
<li><p>基本数据类型：String、Number、Boolean、Null、Undefined</p>
</li>
<li><p>引用数据类型：Object</p>
</li>
</ul>
<p>JS为我们提供了<strong>三个包装类</strong>：</p>
<ul>
<li><p>String()：将基本数据类型字符串，转换为String对象。</p>
</li>
<li><p>Number()：将基本数据类型的数字，转换为Number对象。</p>
</li>
<li><p>Boolean()：将基本数据类型的布尔值，转换为Boolean对象。</p>
</li>
</ul>
<p>通过上面这这三个包装类，我们可以<strong>将基本数据类型的数据转换为对象</strong>。</p>
<a id="more"></a>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bool = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num); <span class="comment">// 打印结果：object</span></span><br></pre></td></tr></table></figure>


<p><strong>需要注意的是</strong>：我们在实际应用中不会使用基本数据类型的对象。如果使用基本数据类型的对象，在做一些比较时可能会带来一些<strong>不可预期</strong>的结果。</p>
<p>比如说：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> boo1 = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">var</span> boo2 = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(boo1 === boo2); <span class="comment">// 打印结果竟然是：false</span></span><br></pre></td></tr></table></figure>


<p>再比如说：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> boo3 = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (boo3) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'qianguyihao'</span>); <span class="comment">// 这行代码竟然执行了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="基本数据类型不能添加属性和方法"><a href="#基本数据类型不能添加属性和方法" class="headerlink" title="基本数据类型不能添加属性和方法"></a>基本数据类型不能添加属性和方法</h3><p>方法和属性只能添加给对象，不能添加给基本数据类型。</p>
<p><strong>注意</strong>：当我们对一些基本数据类型的值去调用属性和方法时，浏览器会<strong>临时使用包装类将其转换为对象</strong>，然后在调用对象的属性和方法；调用完以后，在将其转换为基本数据类型。</p>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">str = str.toString(); <span class="comment">// 将 number 类型转换为 string 类型</span></span><br><span class="line">str.hello = <span class="string">"千古壹号"</span>; <span class="comment">// 添加属性</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str); <span class="comment">// 打印结果：string</span></span><br><span class="line"><span class="built_in">console</span>.log(str.hello); <span class="comment">// 打印结果：undefined</span></span><br></pre></td></tr></table></figure>

<p>再比如，String 对象的很多内置方法，也可以直接给字符串用。此时，也是临时将字符串转换为 String 对象，然后再调用内置方法。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Class的继承</title>
    <url>/2020/04/18/23-Class%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要内容：</p>
<ul>
<li>简介</li>
<li>Object.getPrototypeOf()</li>
<li>super 关键字</li>
<li>类的 prototype 属性和<strong>proto</strong>属性</li>
<li>原生构造函数的继承</li>
<li>Mixin 模式的实现<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2></li>
</ul>
<p><strong>Class 可以通过extends关键字实现继承</strong>，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Point &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ColorPoint extends Point &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码定义了一个ColorPoint类，该类通过extends关键字，继承了Point类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个Point类。下面，我们在ColorPoint内部加上代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class ColorPoint extends Point &#123;</span><br><span class="line">  constructor(x, y, color) &#123;</span><br><span class="line">    super(x, y); &#x2F;&#x2F; 调用父类的constructor(x, y)</span><br><span class="line">    this.color &#x3D; color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    return this.color + &#39; &#39; + super.toString(); &#x2F;&#x2F; 调用父类的toString()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>constructor</code>方法和<code>toString</code>方法之中，<strong>都出现了<code>super</code>关键字，它在这里表示父类的构造函数，用来新建父类的this对象</strong>。</p>
<ul>
<li><strong>子类必须在constructor方法中调用super方法，否则新建实例时会报错</strong>。这是因为子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用super方法，子类就得不到this对象。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Point &#123; &#x2F;* ... *&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">class ColorPoint extends Point &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let cp &#x3D; new ColorPoint(); &#x2F;&#x2F; ReferenceError</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>上面代码中，ColorPoint继承了父类Point，但是它的构造函数没有调用super方法，导致新建实例时报错。</p>
<ul>
<li><p>ES5 的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（Parent.apply(this)）。<strong>ES6 的继承机制完全不同</strong>，实质是先将父类实例对象的属性和方法，加到this上面（所以必须先调用super方法），然后再用子类的构造函数修改this。</p>
</li>
<li><p>如果子类没有定义constructor方法，这个方法会被默认添加，代码如下。也就是说，不管有没有显式定义，任何一个子类都有constructor方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class ColorPoint extends Point &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">class ColorPoint extends Point &#123;</span><br><span class="line">  constructor(...args) &#123;</span><br><span class="line">    super(...args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>另一个需要注意的地方是，<strong>在子类的构造函数中，只有调用super之后，才可以使用this关键字</strong>，否则会报错。这是因为子类实例的构建，基于父类实例，只有<code>super</code>方法才能调用父类实例。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Point &#123;</span><br><span class="line">  constructor(x, y) &#123;</span><br><span class="line">    this.x &#x3D; x;</span><br><span class="line">    this.y &#x3D; y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ColorPoint extends Point &#123;</span><br><span class="line">  constructor(x, y, color) &#123;</span><br><span class="line">    this.color &#x3D; color; &#x2F;&#x2F; ReferenceError</span><br><span class="line">    super(x, y);</span><br><span class="line">    this.color &#x3D; color; &#x2F;&#x2F; 正确</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，子类的<code>constructor</code>方法没有调用<code>super</code>之前，就使用<code>this</code>关键字，结果报错，而放在<code>super</code>方法之后就是正确的。</p>
<p>下面是生成子类实例的代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let cp &#x3D; new ColorPoint(25, 8, &#39;green&#39;);</span><br><span class="line"></span><br><span class="line">cp instanceof ColorPoint &#x2F;&#x2F; true</span><br><span class="line">cp instanceof Point &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>上面代码中，实例对象cp同时是ColorPoint和Point两个类的实例，这与 ES5 的行为完全一致。</p>
<ul>
<li>最后，父类的静态方法，也会被子类继承。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">  static hello() &#123;</span><br><span class="line">    console.log(&#39;hello world&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends A &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B.hello()  &#x2F;&#x2F; hello world</span><br></pre></td></tr></table></figure>
<p>上面代码中，hello()是A类的静态方法，B继承A，也继承了A的静态方法。</p>
<h2 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf()"></a>Object.getPrototypeOf()</h2><p><strong><code>Object.getPrototypeOf</code>方法可以用来从子类上获取父类。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object.getPrototypeOf(ColorPoint) &#x3D;&#x3D;&#x3D; Point</span><br><span class="line">&#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>因此，可以使用这个方法判断，一个类是否继承了另一个类。</p>
<h2 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a>super 关键字</h2><p>super这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。</p>
<ul>
<li><strong>第一种情况，<code>super</code>作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次<code>super</code>函数。</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A &#123;&#125;</span><br><span class="line"></span><br><span class="line">class B extends A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>上面代码中，子类B的构造函数之中的<code>super()</code>，代表调用父类的构造函数。这是必须的，否则 JavaScript 引擎会报错。</p>
<blockquote>
<p>注意，super虽然代表了父类A的构造函数，但是返回的是子类B的实例，即<strong>super内部的this指的是B的实例</strong>，因此super()在这里相当于<code>A.prototype.constructor.call(this)</code>。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    console.log(new.target.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">class B extends A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">new A() &#x2F;&#x2F; A</span><br><span class="line">new B() &#x2F;&#x2F; B</span><br></pre></td></tr></table></figure>

<p>上面代码中，<strong>new.target指向当前正在执行的函数</strong>。可以看到，在super()执行时，它指向的是子类B的构造函数，而不是父类A的构造函数。也就是说，super()内部的this指向的是B。</p>
<blockquote>
<p><strong>作为函数时，super()只能用在子类的构造函数之中，用在其他地方就会报错</strong>。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A &#123;&#125;</span><br><span class="line"></span><br><span class="line">class B extends A &#123;</span><br><span class="line">  m() &#123;</span><br><span class="line">    super(); &#x2F;&#x2F; 报错</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，super()用在B类的m方法之中，就会造成语法错误。</p>
<ul>
<li><strong>第二种情况，super作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类</strong>。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">  p() &#123;</span><br><span class="line">    return 2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">    console.log(super.p()); &#x2F;&#x2F; 2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let b &#x3D; new B();</span><br></pre></td></tr></table></figure>

<p>上面代码中，子类B当中的super.p()，就是将super当作一个对象使用。这时，super在普通方法之中，指向A.prototype，所以super.p()就相当于A.prototype.p()。</p>
<blockquote>
<p>这里需要注意，由于super指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过super调用的。</p>
</blockquote>
<blockquote>
<p>如果属性定义在父类的原型对象上，super就可以取到。</p>
</blockquote>
<ul>
<li>ES6 规定，在子类普通方法中通过super调用父类的方法时，方法内部的this指向当前的子类实例。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.x &#x3D; 1;</span><br><span class="line">  &#125;</span><br><span class="line">  print() &#123;</span><br><span class="line">    console.log(this.x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">    this.x &#x3D; 2;</span><br><span class="line">  &#125;</span><br><span class="line">  m() &#123;</span><br><span class="line">    super.print();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let b &#x3D; new B();</span><br><span class="line">b.m() &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure>

<p>上面代码中，super.print()虽然调用的是A.prototype.print()，但是A.prototype.print()内部的this指向子类B的实例，导致输出的是2，而不是1。也就是说，实际上执行的是super.print.call(this)。</p>
<ul>
<li>由于<strong>this指向子类实例</strong>，所以如果通过super对某个属性赋值，<strong>这时super就是this</strong>，赋值的属性会变成子类实例的属性。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.x &#x3D; 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">    this.x &#x3D; 2;</span><br><span class="line">    super.x &#x3D; 3;</span><br><span class="line">    console.log(super.x); &#x2F;&#x2F; undefined</span><br><span class="line">    console.log(this.x); &#x2F;&#x2F; 3</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let b &#x3D; new B();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>上面代码中，super.x赋值为3，这时等同于对this.x赋值为3。而当读取super.x的时候，读的是A.prototype.x，所以返回undefined。</p>
<ul>
<li><strong>如果super作为对象，用在静态方法之中，这时super将指向父类，而不是父类的原型对象</strong>。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Parent &#123;</span><br><span class="line">  static myMethod(msg) &#123;</span><br><span class="line">    console.log(&#39;static&#39;, msg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  myMethod(msg) &#123;</span><br><span class="line">    console.log(&#39;instance&#39;, msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Child extends Parent &#123;</span><br><span class="line">  static myMethod(msg) &#123;</span><br><span class="line">    super.myMethod(msg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  myMethod(msg) &#123;</span><br><span class="line">    super.myMethod(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.myMethod(1); &#x2F;&#x2F; static 1</span><br><span class="line"></span><br><span class="line">var child &#x3D; new Child();</span><br><span class="line">child.myMethod(2); &#x2F;&#x2F; instance 2</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>上面代码中，super在静态方法之中指向父类，在普通方法之中指向父类的原型对象。</p>
<blockquote>
<p>另外，在子类的静态方法中通过super调用父类的方法时，方法内部的this指向当前的子类，而不是子类的实例。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.x &#x3D; 1;</span><br><span class="line">  &#125;</span><br><span class="line">  static print() &#123;</span><br><span class="line">    console.log(this.x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">    this.x &#x3D; 2;</span><br><span class="line">  &#125;</span><br><span class="line">  static m() &#123;</span><br><span class="line">    super.print();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B.x &#x3D; 3;</span><br><span class="line">B.m() &#x2F;&#x2F; 3</span><br></pre></td></tr></table></figure>

<p>上面代码中，静态方法B.m里面，super.print指向父类的静态方法。这个方法里面的this指向的是B，而不是B的实例。</p>
<blockquote>
<p>注意，使用super的时候，必须显式指定是作为函数、还是作为对象使用，否则会报错。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A &#123;&#125;</span><br><span class="line"></span><br><span class="line">class B extends A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">    console.log(super); &#x2F;&#x2F; 报错</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，console.log(super)当中的super，无法看出是作为函数使用，还是作为对象使用，所以 JavaScript 引擎解析代码的时候就会报错。这时，如果能清晰地表明super的数据类型，就不会报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A &#123;&#125;</span><br><span class="line"></span><br><span class="line">class B extends A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">    console.log(super.valueOf() instanceof B); &#x2F;&#x2F; true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let b &#x3D; new B();</span><br></pre></td></tr></table></figure>

<p>上面代码中，super.valueOf()表明super是一个对象，因此就不会报错。同时，由<strong>于super使得this指向B的实例</strong>，所以super.valueOf()返回的是一个B的实例。</p>
<blockquote>
<p>最后，由于对象总是继承其他对象的，所以可以在任意一个对象中，使用super关键字。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var obj &#x3D; &#123;</span><br><span class="line">  toString() &#123;</span><br><span class="line">    return &quot;MyObject: &quot; + super.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.toString(); &#x2F;&#x2F; MyObject: [object Object]</span><br></pre></td></tr></table></figure>

<h2 id="类的-prototype-属性和proto属性"><a href="#类的-prototype-属性和proto属性" class="headerlink" title="类的 prototype 属性和proto属性"></a>类的 prototype 属性和<strong>proto</strong>属性</h2><p>大多数浏览器的 ES5 实现之中，每一个对象都有<code>__proto__</code>属性，<font style='color:blue'><strong>指向对应的构造函数的prototype属性</strong></font>。Class 作为构造函数的语法糖，同时有<code>prototype</code>属性和<code>__proto__</code>属性，因此同时存在两条继承链。</p>
<ul>
<li><p>（1）子类的<code>__proto__</code>属性，表示<strong>构造函数的继承</strong>，总是指向父类。</p>
</li>
<li><p>（2）子类<code>prototype</code>属性的<code>__proto__</code>属性，<strong>表示方法的继承，总是指向父类的prototype属性</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends A &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B.__proto__ &#x3D;&#x3D;&#x3D; A &#x2F;&#x2F; true</span><br><span class="line">B.prototype.__proto__ &#x3D;&#x3D;&#x3D; A.prototype &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>上面代码中，子类B的<code>__proto__</code>属性指向父类A，子类B的prototype属性的<strong>proto</strong>属性指向父类A的prototype属性。</p>
<p>这样的结果是因为，类的继承是按照下面的模式实现的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; B 的实例继承 A 的实例</span><br><span class="line">Object.setPrototypeOf(B.prototype, A.prototype);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; B 继承 A 的静态属性</span><br><span class="line">Object.setPrototypeOf(B, A);</span><br><span class="line"></span><br><span class="line">const b &#x3D; new B();</span><br></pre></td></tr></table></figure>

<ul>
<li>这两条继承链，可以这样理解：<strong>作为一个对象</strong>，子类（B）的原型（<code>__proto__</code>属性）是父类（A）；<strong>作为一个构造函数</strong>，子类（B）的原型对象（prototype属性）是父类的原型对象（prototype属性）的实例。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">B.prototype &#x3D; Object.create(A.prototype);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line"></span><br><span class="line">B.prototype.__proto__ &#x3D; A.prototype;</span><br></pre></td></tr></table></figure>
<p>extends关键字后面可以跟多种类型的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class B extends A &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码的A，只要是一个有prototype属性的函数，就能被B继承。由于函数都有prototype属性（除了Function.prototype函数），因此A可以是任意函数。</p>
<p>下面，讨论两种情况。<strong>第一种，子类继承Object类</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A extends Object &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A.__proto__ &#x3D;&#x3D;&#x3D; Object &#x2F;&#x2F; true</span><br><span class="line">A.prototype.__proto__ &#x3D;&#x3D;&#x3D; Object.prototype &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>这种情况下，A其实就是构造函数Object的复制，A的实例就是Object的实例。</p>
<p><strong>第二种情况，不存在任何继承</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A.__proto__ &#x3D;&#x3D;&#x3D; Function.prototype &#x2F;&#x2F; true</span><br><span class="line">A.prototype.__proto__ &#x3D;&#x3D;&#x3D; Object.prototype &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>这种情况下，A作为一个基类（即不存在任何继承），就是一个普通函数，所以直接继承<code>Function.prototype</code>。但是，A调用后返回一个空对象（即Object实例），所以A.<code>prototype.__proto__</code>指向构造函数（Object）的<code>prototype</code>属性。</p>
<h3 id="实例的-proto-属性"><a href="#实例的-proto-属性" class="headerlink" title="实例的 proto 属性"></a>实例的 <strong>proto</strong> 属性</h3><p>子类实例的<code>__proto__</code>属性的<code>__proto__</code>属性，指向父类实例的<strong>proto</strong>属性。也就是说，子类的原型的原型，是父类的原型。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var p1 &#x3D; new Point(2, 3);</span><br><span class="line">var p2 &#x3D; new ColorPoint(2, 3, &#39;red&#39;);</span><br><span class="line"></span><br><span class="line">p2.__proto__ &#x3D;&#x3D;&#x3D; p1.__proto__ &#x2F;&#x2F; false</span><br><span class="line">p2.__proto__.__proto__ &#x3D;&#x3D;&#x3D; p1.__proto__ &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>上面代码中，ColorPoint继承了Point，导致前者原型的原型是后者的原型。</p>
<p>因此，通过子类实例的<code>__proto__.__proto__</code>属性，可以修改父类实例的行为。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p2.__proto__.__proto__.printName &#x3D; function () &#123;</span><br><span class="line">  console.log(&#39;Ha&#39;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">p1.printName() &#x2F;&#x2F; &quot;Ha&quot;</span><br></pre></td></tr></table></figure>

<p>上面代码在ColorPoint的实例p2上向Point类添加方法，结果影响到了Point的实例p1。</p>
<h2 id="原生构造函数的继承"><a href="#原生构造函数的继承" class="headerlink" title="原生构造函数的继承"></a>原生构造函数的继承</h2><p>原生构造函数是指语言内置的构造函数，通常用来生成数据结构。ECMAScript 的原生构造函数大致有下面这些。</p>
<ul>
<li>Boolean()</li>
<li>Number()</li>
<li>String()</li>
<li>Array()</li>
<li>Date()</li>
<li>Function()</li>
<li>RegExp()</li>
<li>Error()</li>
<li>Object()</li>
</ul>
<p>以前，这些原生构造函数是无法继承的。</p>
<p>ES6 允许继承原生构造函数定义子类，因为 ES6 是先新建父类的实例对象this，然后再用子类的构造函数修饰this，使得父类的所有行为都可以继承。下面是一个继承Array的例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class MyArray extends Array &#123;</span><br><span class="line">  constructor(...args) &#123;</span><br><span class="line">    super(...args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var arr &#x3D; new MyArray();</span><br><span class="line">arr[0] &#x3D; 12;</span><br><span class="line">arr.length &#x2F;&#x2F; 1</span><br><span class="line"></span><br><span class="line">arr.length &#x3D; 0;</span><br><span class="line">arr[0] &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure>

<p>上面代码定义了一个MyArray类，继承了Array构造函数，因此就可以从MyArray生成数组的实例。这意味着，ES6 可以自定义原生数据结构（比如Array、String等）的子类，这是 ES5 无法做到的。</p>
<p>上面这个例子也说明，<strong><code>extends</code>关键字不仅可以用来继承类，还可以用来继承原生的构造函数。</strong>因此可以在原生数据结构的基础上，定义自己的数据结构。下面就是定义了一个带版本功能的数组。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class VersionedArray extends Array &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">    this.history &#x3D; [[]];</span><br><span class="line">  &#125;</span><br><span class="line">  commit() &#123;</span><br><span class="line">    this.history.push(this.slice());</span><br><span class="line">  &#125;</span><br><span class="line">  revert() &#123;</span><br><span class="line">    this.splice(0, this.length, ...this.history[this.history.length - 1]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var x &#x3D; new VersionedArray();</span><br><span class="line"></span><br><span class="line">x.push(1);</span><br><span class="line">x.push(2);</span><br><span class="line">x &#x2F;&#x2F; [1, 2]</span><br><span class="line">x.history &#x2F;&#x2F; [[]]</span><br><span class="line"></span><br><span class="line">x.commit();</span><br><span class="line">x.history &#x2F;&#x2F; [[], [1, 2]]</span><br><span class="line"></span><br><span class="line">x.push(3);</span><br><span class="line">x &#x2F;&#x2F; [1, 2, 3]</span><br><span class="line">x.history &#x2F;&#x2F; [[], [1, 2]]</span><br><span class="line"></span><br><span class="line">x.revert();</span><br><span class="line">x &#x2F;&#x2F; [1, 2]</span><br></pre></td></tr></table></figure>

<p>上面代码中，VersionedArray会通过commit方法，将自己的当前状态生成一个版本快照，存入history属性。revert方法用来将数组重置为最新一次保存的版本。除此之外，VersionedArray依然是一个普通数组，所有原生的数组方法都可以在它上面调用。</p>
<h2 id="Mixin-模式的实现"><a href="#Mixin-模式的实现" class="headerlink" title="Mixin 模式的实现"></a>Mixin 模式的实现</h2><p><strong>Mixin 指的是多个对象合成一个新的对象，新对象具有各个组成成员的接口</strong>。它的最简单实现如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const a &#x3D; &#123;</span><br><span class="line">  a: &#39;a&#39;</span><br><span class="line">&#125;;</span><br><span class="line">const b &#x3D; &#123;</span><br><span class="line">  b: &#39;b&#39;</span><br><span class="line">&#125;;</span><br><span class="line">const c &#x3D; &#123;...a, ...b&#125;; &#x2F;&#x2F; &#123;a: &#39;a&#39;, b: &#39;b&#39;&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，c对象是a对象和b对象的合成，具有两者的接口。</p>
<p>下面是一个更完备的实现，将多个类的接口“混入”（mix in）另一个类。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function mix(...mixins) &#123;</span><br><span class="line">  class Mix &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">      for (let mixin of mixins) &#123;</span><br><span class="line">        copyProperties(this, new mixin()); &#x2F;&#x2F; 拷贝实例属性</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  for (let mixin of mixins) &#123;</span><br><span class="line">    copyProperties(Mix, mixin); &#x2F;&#x2F; 拷贝静态属性</span><br><span class="line">    copyProperties(Mix.prototype, mixin.prototype); &#x2F;&#x2F; 拷贝原型属性</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return Mix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function copyProperties(target, source) &#123;</span><br><span class="line">  for (let key of Reflect.ownKeys(source)) &#123;</span><br><span class="line">    if ( key !&#x3D;&#x3D; &#39;constructor&#39;</span><br><span class="line">      &amp;&amp; key !&#x3D;&#x3D; &#39;prototype&#39;</span><br><span class="line">      &amp;&amp; key !&#x3D;&#x3D; &#39;name&#39;</span><br><span class="line">    ) &#123;</span><br><span class="line">      let desc &#x3D; Object.getOwnPropertyDescriptor(source, key);</span><br><span class="line">      Object.defineProperty(target, key, desc);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码的mix函数，可以将多个对象合成为一个类。使用的时候，只要继承这个类即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class DistributedEdit extends mix(Loggable, Serializable) &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>Object.defineProperty()</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p>
</blockquote>
<blockquote>
<p>Object.defineProperty(obj, prop, descriptor)</p>
</blockquote>
<ul>
<li>参数<ul>
<li>obj<ul>
<li>要定义属性的对象。</li>
</ul>
</li>
<li>prop<ul>
<li>要定义或修改的属性的名称或 Symbol 。</li>
</ul>
</li>
<li>descriptor<ul>
<li>要定义或修改的属性描述符。</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2020/04/18/24-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<hr>
<h2 id="正则表达式简介"><a href="#正则表达式简介" class="headerlink" title="正则表达式简介"></a>正则表达式简介</h2><p><strong>定义</strong>：正则表达式用于定义一些字符串的规则。</p>
<p><strong>作用</strong>：计算机可以根据正则表达式，来检查一个字符串是否符合指定的规则；或者将字符串中符合规则的内容提取出来。</p>
<a id="more"></a>
<p>如果你想查看正则更多的内容，可以查阅官方文档关于 RegExp 这个内置对象的用法。</p>
<h2 id="创建正则表达式的对象"><a href="#创建正则表达式的对象" class="headerlink" title="创建正则表达式的对象"></a>创建正则表达式的对象</h2><h3 id="方式一：使用构造函数创建正则表达式的对象"><a href="#方式一：使用构造函数创建正则表达式的对象" class="headerlink" title="方式一：使用构造函数创建正则表达式的对象"></a>方式一：使用构造函数创建正则表达式的对象</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"正则表达式"</span>); <span class="comment">// 注意，参数是字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 变量 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"正则表达式"</span>, <span class="string">"匹配模式"</span>); <span class="comment">// 注意，两个参数都是字符串</span></span><br></pre></td></tr></table></figure>

<p>备注：<code>RegExp</code>的意思是 <strong>Regular expression</strong>。使用typeof检查正则对象，会返回object。</p>
<p>上面的语法中，既可以传一个参数，也可以传两个参数。</p>
<p>创建了正则表达式的对象后，该怎么使用呢？大致分为两个步骤：</p>
<ul>
<li><p>（1）创建正则表达式的对象 reg。</p>
</li>
<li><p>（2）使用 reg 的test() 方法，判断指定字符串是否符合规则。</p>
</li>
</ul>
<p><strong>正则表达式的<code>test()</code>方法</strong>：【重要】</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myReg.test(str); <span class="comment">// 判断字符串 str 是否符合 指定的 myReg 这个正则表达式的规则</span></span><br></pre></td></tr></table></figure>

<p>解释：使用<code>test()</code>这个方法可以用来检查一个字符串是否符合正则表达式的规则，<strong>如果符合则返回true，否则返回false</strong>。</p>
<p>我们来看看下面的例子。</p>
<p><strong>1、传一个参数时</strong>：</p>
<p>构造函数 RegExp 中，可以只传一个参数。</p>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"a"</span>); <span class="comment">// 定义一个正则表达式：检查一个字符串中是否含有 a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">"qianguyihao"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"smyh"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 test()方法，判断字符串是否符合 上面定义的 reg 规则</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str1)); <span class="comment">// 打印结果：true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str2)); <span class="comment">// 打印结果：false</span></span><br></pre></td></tr></table></figure>

<p>注意，上面的例子中，我们是先定义了一个正则表达式的规则，然后通过正则表达式的<code>test()</code>方法来判断字符串是否符合之前定义的规则。</p>
<p><strong>2、传两个参数时</strong>：匹配模式 【重要】</p>
<p>构造函数 RegExp 中，也可以传两个参数。我们可以传递一个<strong>匹配模式</strong>作为第二个参数。这个参数可以是：</p>
<ul>
<li><p><code>i</code> 忽略大小写。这里的 i 指的是 ignore。</p>
</li>
<li><p><code>g</code> 全局匹配模式。这里的 g 指的是 global。</p>
</li>
</ul>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'A'</span>, <span class="string">'i'</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'qiangu'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str)); <span class="comment">// 打印结果：true</span></span><br></pre></td></tr></table></figure>

<h3 id="方式二：使用字面量创建正则表达式"><a href="#方式二：使用字面量创建正则表达式" class="headerlink" title="方式二：使用字面量创建正则表达式"></a>方式二：使用字面量创建正则表达式</h3><p>我们可以使用字面量来创建正则表达式。</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量 = <span class="regexp">/正则表达式/</span>;  <span class="comment">// 注意，这个语法里没有引号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 变量 = <span class="regexp">/正则表达式/</span>匹配模式;  <span class="comment">// 注意，这个语法里没有引号</span></span><br></pre></td></tr></table></figure>

<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/A/i</span>; <span class="comment">// 定义正则表达式的规则：检查一个字符串中是否含有 a。忽略大小写。</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"qiangu"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> reg);  <span class="comment">// 打印结果：object</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str)); <span class="comment">// 打印结果：true</span></span><br></pre></td></tr></table></figure>

<h3 id="以上两种方式的对比"><a href="#以上两种方式的对比" class="headerlink" title="以上两种方式的对比"></a>以上两种方式的对比</h3><ul>
<li><p>方式一：使用构造函数创建时，更加灵活，因为参数中还可以传递变量。</p>
</li>
<li><p>方式二：使用字面量的方式创建，更加简单。</p>
</li>
</ul>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"a"</span>, <span class="string">"i"</span>); <span class="comment">// 方式一</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a/i</span>; <span class="comment">// 方式二</span></span><br></pre></td></tr></table></figure>

<p>上面这两行代码的作用是等价的。</p>
<h3 id="避坑指南：全局匹配-g-慎用test-方法"><a href="#避坑指南：全局匹配-g-慎用test-方法" class="headerlink" title="避坑指南：全局匹配 g 慎用test()方法"></a>避坑指南：全局匹配 g 慎用test()方法</h3><p>对于非全局匹配的正则表达式，<code>test()</code>只会检测<strong>是否存在某个目标字符串</strong>（只要存在就为 true），多次检测的结果都相同。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/test/</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'_test_test'</span>;</span><br><span class="line"></span><br><span class="line">reg.test(str) <span class="comment">// true</span></span><br><span class="line">reg.test(str) <span class="comment">// true</span></span><br><span class="line">reg.test(str) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>重点来了。</p>
<p>当设置全局标志 <code>/g</code> 时，一旦字符串中还存在匹配，test() 方法都将返回 true，同时匹配成功后将把 <code>lastIndex</code> 属性的值<strong>设置为上次匹配成功结果之后的第一个字符所在的位置</strong>，下次匹配将从 <code>lastIndex</code> 指示的位置开始；匹配不成功时返回 false，同时将 lastIndex 属性的值重置为 0。</p>
<p>举例：（很重要的例子，看仔细）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/test/g</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'_test_test'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<p><strong>总结</strong>：</p>
<p>全局匹配模式<code>g</code>一般用于 <code>exec()</code>、<code>match()</code>、<code>replace()</code>等方法。</p>
<p>全局匹配模式<code>g</code>如果用于test()方法会有问题。因为g模式会生成一个<code>lastindex</code>参数来存储匹配最后一次的位置。</p>
<h2 id="正则表达式的简单语法"><a href="#正则表达式的简单语法" class="headerlink" title="正则表达式的简单语法"></a>正则表达式的简单语法</h2><h3 id="检查一个字符串中是否包含-a或b"><a href="#检查一个字符串中是否包含-a或b" class="headerlink" title="检查一个字符串中是否包含 a或b"></a>检查一个字符串中是否包含 a或b</h3><p><strong>写法1</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a|b/</span>;</span><br></pre></td></tr></table></figure>

<p>解释：使用 <code>|</code> 表示<code>或</code>的意思。</p>
<p><strong>写法2</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[ab]/</span>;  <span class="comment">// 跟上面的那行语法，是等价的</span></span><br></pre></td></tr></table></figure>

<p>解释：这里的<code>[]</code>也是表示<code>或</code>的意思。</p>
<p><code>[]</code>这个符号在正则还是比较常用的。我们接下来看几个例子。</p>
<h3 id="表示：或"><a href="#表示：或" class="headerlink" title="[]表示：或"></a>[]表示：或</h3><p>一些规则：</p>
<ul>
<li><p><code>/[ab]/</code> 等价于 <code>/a|b/</code>：检查一个字符串中是否包含 <strong>a或b</strong></p>
</li>
<li><p><code>/[a-z]/</code>：检查一个字符串那种是否包含<strong>任意小写字母</strong></p>
</li>
<li><p><code>/[A-Z]/</code>：任意大写字母</p>
</li>
<li><p><code>/[A-z]/</code>：任意字母</p>
</li>
<li><p><code>/[0-9]/</code>：任意数字</p>
</li>
<li><p><code>/a[bde]c/</code>：检查一个字符串中是否包含 abc 或 adc 或 aec</p>
</li>
</ul>
<h3 id="表示：除了"><a href="#表示：除了" class="headerlink" title="[^ ] 表示：除了"></a>[^ ] 表示：除了</h3><p>举例1：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[^ab]/</span>; <span class="comment">// 规则：字符串中，除了a、b之外，还有没有其他的字符内容？</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"acb"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str)); <span class="comment">// 打印结果：true</span></span><br></pre></td></tr></table></figure>

<p>举例2：（可以用来验证某字符串是否为 纯数字）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[^0-9]/</span>;  <span class="comment">// 规则：字符串中，除了数字之外，还有没有其他的内容？</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">"1991"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"199a1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str1)); <span class="comment">// 打印结果：false （如果字符串是 纯数字，则返回 false）</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str2)); <span class="comment">// 打印结果：true</span></span><br></pre></td></tr></table></figure>

<h2 id="支持正则表达式的-String-对象的方法"><a href="#支持正则表达式的-String-对象的方法" class="headerlink" title="支持正则表达式的 String 对象的方法"></a>支持正则表达式的 String 对象的方法</h2><p> String对象的如下方法，是支持正则表达式的：</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left">split()</td>
<td align="left">将字符串拆分成数组</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">search()</td>
<td align="left">搜索字符串中是否含有指定内容，返回索引 index</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">match()</td>
<td align="left">根据正则表达式，从一个字符串中将符合条件的内容提取出来</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">replace()</td>
<td align="left">将字符串中的指定内容，替换为新的内容并返回</td>
<td align="left"></td>
</tr>
</tbody></table>
<p>下面来分别介绍和举例。</p>
<h3 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h3><p><code>split()</code>：将一个字符串拆分成一个数组。可以接受一个正则表达式作为参数。</p>
<p>备注：关于<code>split()</code>更详细的用法，可以看之前的关于《内置对象：String》这篇文章。</p>
<p><strong>正则相关的举例</strong>：根据任意字母，将字符串拆分成数组。</p>
<p>代码实现：（通过正则）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"1a2b3c4d5e6f7g"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = str.split(<span class="regexp">/[A-z]/</span>); <span class="comment">// 参数是一个正则表达式：表示所有字母</span></span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>, <span class="string">"6"</span>, <span class="string">"7"</span>, <span class="string">""</span>]</span><br></pre></td></tr></table></figure>

<h3 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h3><p><code>search()</code>：搜索字符串中是否含有指定内容。如果搜索到指定内容，则会返回第一次出现的索引；否则返回-1。</p>
<p><code>search()</code>方法可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串。<code>serach()</code>只会查找第一个，即使设置全局匹配也没用。</p>
<p><strong>举例</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"hello abc hello aec afc"</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 搜索字符串中是否含有abc 或 aec 或 afc</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">result = str.search(<span class="regexp">/a[bef]c/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 打印结果：6</span></span><br></pre></td></tr></table></figure>

<h3 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h3><p><code>match()</code>：根据正则表达式，从一个字符串中将符合条件的内容提取出来，封装到一个数组中返回（即使只查询到一个结果）。</p>
<p><strong>注意</strong>：默认情况下，<code>match()</code>方法只会找到<strong>第一个</strong>符合要求的内容，找到以后就停止检索。我们可以设置正则表达式为<strong>全局匹配</strong>模式，这样就会匹配到所有的内容，并以<strong>数组</strong>的形式返回。</p>
<p>另外，我们可以为一个正则表达式设置多个匹配模式，且匹配模式的顺序无所谓。</p>
<p><strong>代码举例</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"1a2a3a4a5e6f7A8B9C"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result1 = str.match(<span class="regexp">/[a-z]/</span>);   <span class="comment">// 找到符合要求的第一个内容，然后返回</span></span><br><span class="line"><span class="keyword">var</span> result2 = str.match(<span class="regexp">/[a-z]/g</span>);  <span class="comment">// 设置为“全局匹配”模式，匹配字符串中 所有的小写字母</span></span><br><span class="line"><span class="keyword">var</span> result3 = str.match(<span class="regexp">/[a-z]/gi</span>); <span class="comment">// 设置多个匹配模式，匹配字符串中 所有的字母（忽略大小写）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result1); <span class="comment">// 打印结果：["a"]</span></span><br><span class="line"><span class="built_in">console</span>.log(result2); <span class="comment">// 打印结果：["a", "a", "a", "a", "e", "f"]</span></span><br><span class="line"><span class="built_in">console</span>.log(result3); <span class="comment">// 打印结果：["a", "a", "a", "a", "e", "f", "A", "B", "C"]</span></span><br></pre></td></tr></table></figure>

<p><strong>总结</strong>：</p>
<p>match()这个方法还是很实用的，可以在一个很长的字符串中，提取出<strong>有规则</strong>的内容。</p>
<h3 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h3><p><code>replace()</code>：将字符串中的指定内容，替换为新的内容并返回。不会修改原字符串。</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">新的字符串 = str.replace(被替换的内容，新的内容);</span><br></pre></td></tr></table></figure>

<p>参数解释：</p>
<ul>
<li><p>被替换的内容：可以接受一个正则表达式作为参数。</p>
</li>
<li><p>新的内容：默认只会替换第一个。如果需要替换全部符合条件的内容，可以设置正则表达式为<strong>全局匹配</strong>模式。</p>
</li>
</ul>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//replace()方法：替换</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"Today is fine day,today is fine day !!!"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str2);</span><br><span class="line"><span class="built_in">console</span>.log(str2.replace(<span class="string">"today"</span>,<span class="string">"tomorrow"</span>));  <span class="comment">//只能替换第一个today</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.replace(<span class="regexp">/today/gi</span>,<span class="string">"tomorrow"</span>)); <span class="comment">//这里用到了正则，且为“全局匹配”模式，才能替换所有的today</span></span><br></pre></td></tr></table></figure>

<h2 id="常见正则表达式举例"><a href="#常见正则表达式举例" class="headerlink" title="常见正则表达式举例"></a>常见正则表达式举例</h2><h3 id="检查一个字符串是否是一个合法手机号"><a href="#检查一个字符串是否是一个合法手机号" class="headerlink" title="检查一个字符串是否是一个合法手机号"></a>检查一个字符串是否是一个合法手机号</h3><p>手机号的规则：</p>
<ul>
<li><p>以1开头</p>
</li>
<li><p>第二位是3~9之间任意数字</p>
</li>
<li><p>三位以后任意9位数字</p>
</li>
</ul>
<p>正则实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> phoneStr = <span class="string">"13067890123"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> phoneReg = <span class="regexp">/^1[3-9][0-9]&#123;9&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(phoneReg.test(phoneStr));</span><br></pre></td></tr></table></figure>

<p><strong>备注</strong>：如果在正则表达式中同时使用<code>^</code>和<code>$</code>符号，则要求字符串必须完全符合正则表达式。</p>
<h3 id="去掉字符串开头和结尾的空格"><a href="#去掉字符串开头和结尾的空格" class="headerlink" title="去掉字符串开头和结尾的空格"></a>去掉字符串开头和结尾的空格</h3><p>正则实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str = str.replace(<span class="regexp">/^\s*|\s*$/g</span>,<span class="string">""</span>);</span><br></pre></td></tr></table></figure>

<p>解释如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str = str.replace(<span class="regexp">/^\s*/</span>, <span class="string">""</span>); <span class="comment">//去除开头的空格</span></span><br><span class="line"></span><br><span class="line">str = str.replace(<span class="regexp">/\s*$/</span>, <span class="string">""</span>); <span class="comment">//去除结尾的空格</span></span><br></pre></td></tr></table></figure>

<h3 id="判断字符串是否为电子邮件"><a href="#判断字符串是否为电子邮件" class="headerlink" title="判断字符串是否为电子邮件"></a>判断字符串是否为电子邮件</h3><p>正则实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> emailReg = <span class="regexp">/^\w&#123;3,&#125;(\.\w+)*@[A-z0-9]+(\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> email = <span class="string">"abchello@163.com"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(emailReg.test(email));</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>事件简介</title>
    <url>/2020/04/18/25-%E4%BA%8B%E4%BB%B6%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<hr>
<h2 id="事件简介"><a href="#事件简介" class="headerlink" title="事件简介"></a>事件简介</h2><p>事件：就是文档或浏览器窗口中发生的一些特定的交互瞬间。对于 Web 应用来说，有下面这些代表性的事件：点击某个元素、将鼠标移动至某个元素上方、关闭弹窗等等。</p>
<p>JavaScript 是以<strong>事件驱动为核心</strong>的一门语言。JavaScript 与 HTML 之间的交互是通过事件实现的。</p>
<a id="more"></a>
<h3 id="事件的三要素"><a href="#事件的三要素" class="headerlink" title="事件的三要素"></a>事件的三要素</h3><p><strong>事件的三要素：事件源、事件、事件驱动程序</strong>。</p>
<p>比如，我用手去按开关，灯亮了。这件事情里，事件源是：手。事件是：按开关。事件驱动程序是：灯开了或者关了。</p>
<p>再比如，网页上弹出一个广告，我点击右上角的<code>X</code>，广告就关闭了。这件事情里，事件源是：<code>X</code>。事件是：onclick。事件驱动程序是：广告关闭了。</p>
<p>于是我们可以总结出：谁引发的后续事件，谁就是事件源。</p>
<p><strong>总结如下：</strong></p>
<ul>
<li><p>事件源：引发后续事件的html标签。</p>
</li>
<li><p>事件：js已经定义好了（见下图）。</p>
</li>
<li><p>事件驱动程序：对样式和html的操作。也就是DOM。</p>
</li>
</ul>
<p>也就是说，我们可以在时间对应的属性中写一些js代码，当事件被触发时，这些代码将会执行。</p>
<p><strong>代码书写步骤如下：</strong>（重要）</p>
<ul>
<li><p>（1）获取事件源：document.getElementById(“box”);   // 类似于Android里面的findViewById</p>
</li>
<li><p>（2）绑定事件： 事件源box.事件onclick = function(){ 事件驱动程序 };</p>
</li>
<li><p>（3）书写事件驱动程序：关于DOM的操作。</p>
</li>
</ul>
<p>最简单的代码举例：（点击box1，然后弹框）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1、获取事件源</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"box1"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2、绑定事件</span></span></span><br><span class="line"><span class="actionscript">    div.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3、书写事件驱动程序</span></span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">"我是弹出的内容"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>常见的事件如下：</p>
<table>
<thead>
<tr>
<th align="left">事件</th>
<th align="left">触发</th>
</tr>
</thead>
<tbody><tr>
<td align="left">onabort</td>
<td align="left">图像加载被中断</td>
</tr>
<tr>
<td align="left">onblur</td>
<td align="left">元素失去焦点</td>
</tr>
<tr>
<td align="left">onchange</td>
<td align="left">用户改变域的内容</td>
</tr>
<tr>
<td align="left">onclick</td>
<td align="left">鼠标点击某个对象</td>
</tr>
<tr>
<td align="left">ondblclick</td>
<td align="left">鼠标双击某个对象</td>
</tr>
<tr>
<td align="left">onerror</td>
<td align="left">当加载文档或图像时发生某个错误</td>
</tr>
<tr>
<td align="left">onfocus</td>
<td align="left">元素获得焦点</td>
</tr>
<tr>
<td align="left">onkeydown</td>
<td align="left">某个键盘的键被按下</td>
</tr>
<tr>
<td align="left">onkeypress</td>
<td align="left">某个键盘的键被按下或按住</td>
</tr>
<tr>
<td align="left">onkeyup</td>
<td align="left">某个键盘的键被松开</td>
</tr>
<tr>
<td align="left">onload</td>
<td align="left">某个页面或图像被完成加载</td>
</tr>
<tr>
<td align="left">onmousedown</td>
<td align="left">某个鼠标按键被按下</td>
</tr>
<tr>
<td align="left">onmousemove</td>
<td align="left">鼠标被移动</td>
</tr>
<tr>
<td align="left">onmouseout</td>
<td align="left">鼠标从某元素移开</td>
</tr>
<tr>
<td align="left">onmouseover</td>
<td align="left">鼠标被移到某元素之上</td>
</tr>
<tr>
<td align="left">onmouseup</td>
<td align="left">某个鼠标按键被松开</td>
</tr>
<tr>
<td align="left">onreset</td>
<td align="left">重置按钮被点击</td>
</tr>
<tr>
<td align="left">onresize</td>
<td align="left">窗口或框架被调整尺寸</td>
</tr>
<tr>
<td align="left">onselect</td>
<td align="left">文本被选定</td>
</tr>
<tr>
<td align="left">onsubmit</td>
<td align="left">提交按钮被点击</td>
</tr>
<tr>
<td align="left">onunload</td>
<td align="left">用户退出页面</td>
</tr>
</tbody></table>
<p>下面针对这事件的三要素，进行分别介绍。</p>
<h3 id="1、获取事件源的方式（DOM节点的获取）"><a href="#1、获取事件源的方式（DOM节点的获取）" class="headerlink" title="1、获取事件源的方式（DOM节点的获取）"></a>1、获取事件源的方式（DOM节点的获取）</h3><p>获取事件源的常见方式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">"box1"</span>);      <span class="comment">//方式一：通过id获取单个标签</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);     <span class="comment">//方式二：通过 标签名 获得 标签数组，所以有s</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"hehe"</span>);  <span class="comment">//方式三：通过 类名 获得 标签数组，所以有s</span></span><br></pre></td></tr></table></figure>

<h3 id="2、绑定事件的方式"><a href="#2、绑定事件的方式" class="headerlink" title="2、绑定事件的方式"></a>2、绑定事件的方式</h3><p>方式一：直接绑定匿名函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">"box1"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//绑定事件的第一种方式</span></span></span><br><span class="line"><span class="actionscript">    div1.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">"我是弹出的内容"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方式二：先单独定义函数，再绑定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">"box1"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//绑定事件的第二种方式</span></span></span><br><span class="line"><span class="actionscript">    div1.onclick = fn;   <span class="comment">//注意，这里是fn，不是fn()。fn()指的是返回值。</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//单独定义函数</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">"我是弹出的内容"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意上方代码的注释。<strong>绑定的时候，是写fn，不是写fn()</strong>。fn代表的是整个函数，而fn()代表的是返回值。</p>
<p>方式三：行内绑定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--行内绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span> <span class="attr">onclick</span>=<span class="string">"fn()"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">"我是弹出的内容"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意第一行代码，绑定时，是写的<code>&quot;fn()&quot;</code>，不是写的<code>&quot;fn&quot;</code>。因为绑定的这段代码不是写在js代码里的，而是被识别成了<strong>字符串</strong>。</p>
<h3 id="3、事件驱动程序"><a href="#3、事件驱动程序" class="headerlink" title="3、事件驱动程序"></a>3、事件驱动程序</h3><p>我们在上面是拿alert举例，不仅如此，我们还可以操作标签的属性和样式。举例如下：</p>
<p>点击鼠标时，原本粉色的div变大了，背景变红：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#box1</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">"box1"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//点击鼠标时，原本粉色的div变大了，背景变红了</span></span></span><br><span class="line"><span class="actionscript">    div1.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        div1.style.width = <span class="string">"200px"</span>;   <span class="comment">//属性值要写引号</span></span></span><br><span class="line"><span class="actionscript">        div1.style.height = <span class="string">"200px"</span>;</span></span><br><span class="line"><span class="actionscript">        div1.style.backgroundColor = <span class="string">"red"</span>;   <span class="comment">//属性名是backgroundColor，不是background-color</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上方代码的注意事项：</p>
<ul>
<li><p>在js里写属性值时，要用引号</p>
</li>
<li><p>在js里写属性名时，是<code>backgroundColor</code>，不是CSS里面的<code>background-color</code>。</p>
</li>
</ul>
<h3 id="onload事件"><a href="#onload事件" class="headerlink" title="onload事件"></a>onload事件</h3><blockquote>
<p>onload事件比较特殊，这里单独讲一下。</p>
</blockquote>
<p><strong>当页面加载（文本和图片）完毕的时候，触发onload事件。</strong></p>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"smyhvae"</span>);  <span class="comment">//等页面加载完毕时，打印字符串</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>有一点我们要知道：<strong>js的加载是和html同步加载的</strong>。因此，如果使用元素在定义元素之前，容易报错。这个时候，onload事件就能派上用场了，我们可以把使用元素的代码放在onload里，就能保证这段代码是最后执行。</p>
<p>建议是：整个页面上所有元素加载完毕再执行js内容。所以，window.onload可以预防使用标签在定义标签之前。</p>
<h3 id="事件举例：京东顶部广告栏"><a href="#事件举例：京东顶部广告栏" class="headerlink" title="事件举例：京东顶部广告栏"></a>事件举例：京东顶部广告栏</h3><p>当鼠标点击右上角的<code>X</code>时，关掉整个广告栏，这就要用到事件。</p>
<p>代码实现如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.top-banner</span> &#123;</span></span><br><span class="line">            background-color: pink;</span><br><span class="line">            height: 80px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.w</span> &#123;</span></span><br><span class="line">            width: 1210px;</span><br><span class="line">            margin: 10px auto;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">        img &#123;</span><br><span class="line">            display: block;</span><br><span class="line">            width: 1210px;</span><br><span class="line">            height: 80px;</span><br><span class="line">            background-color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">        a &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 5px;</span><br><span class="line">            right: 5px;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">            text-decoration: none;</span><br><span class="line">            width: 20px;</span><br><span class="line">            height: 20px;</span><br><span class="line">            font: 700 14px/20px "simsum";</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.hide</span> &#123;</span></span><br><span class="line">            display: none!important;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top-banner"</span> <span class="attr">id</span>=<span class="string">"topBanner"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"w"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"closeBanner"</span>&gt;</span>×<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//需求：点击案例，隐藏盒子。</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//思路：点击a链接，让top-banner这个盒子隐藏起来（加隐藏类名）。</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//1.获取事件源和相关元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> closeBanner = <span class="built_in">document</span>.getElementById(<span class="string">"closeBanner"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> topBanner = <span class="built_in">document</span>.getElementById(<span class="string">"topBanner"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//2.绑定事件</span></span></span><br><span class="line"><span class="actionscript">    closeBanner.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//3.书写事件驱动程序</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//类控制</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//        topBanner.className += " hide"; //保留原类名，添加新类名</span></span></span><br><span class="line"><span class="actionscript">        topBanner.className = <span class="string">"hide"</span>;<span class="comment">//替换旧类名（方式一）</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//        topBanner.style.display = "none"; //方式二：与上一行代码的效果相同</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意最后一行代码，这种方式会替换旧类名，意思是，不管之前的类名叫什么，都会被修改。</p>
<h3 id="事件举例："><a href="#事件举例：" class="headerlink" title="事件举例："></a>事件举例：</h3><p>要求实现效果：当鼠标悬停在img上时，更换为另外一张图片；鼠标离开时，还原为本来的图片。</p>
<p>代码实现：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//window.onload页面加载完毕以后再执行此代码</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//需求：鼠标放到img上，更换为另一张图片，也就是修改路径（src的值）。</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//步骤：</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//1.获取事件源</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//2.绑定事件</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//3.书写事件驱动程序</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//1.获取事件源</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//2.绑定事件(悬停事件：鼠标进入到事件源中，立即触发事件)</span></span></span><br><span class="line"><span class="actionscript">            img.onmouseover = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//3.书写事件驱动程序(修改src)</span></span></span><br><span class="line"><span class="actionscript">                img.src = <span class="string">"image/jd2.png"</span>;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//                this.src = "image/jd2.png";</span></span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//2.绑定事件(悬停事件：鼠标进入到事件源中，立即触发事件)</span></span></span><br><span class="line"><span class="actionscript">            img.onmouseout = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//3.书写事件驱动程序(修改src)</span></span></span><br><span class="line"><span class="actionscript">                img.src = <span class="string">"image/jd1.png"</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">src</span>=<span class="string">"image/jd1.png"</span> <span class="attr">style</span>=<span class="string">"cursor: pointer;border: 1px solid #ccc;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>通过style对象获取和设置行内样式</title>
    <url>/2020/04/18/27-%E9%80%9A%E8%BF%87style%E5%AF%B9%E8%B1%A1%E8%8E%B7%E5%8F%96%E5%92%8C%E8%AE%BE%E7%BD%AE%E8%A1%8C%E5%86%85%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<hr>
<h2 id="style属性的获取和修改"><a href="#style属性的获取和修改" class="headerlink" title="style属性的获取和修改"></a>style属性的获取和修改</h2><p>在DOM当中，如果想设置样式，有两种形式：</p>
<ul>
<li><p>className（针对内嵌样式）</p>
</li>
<li><p>style（针对行内样式）</p>
<a id="more"></a>
<p>接下来主要讲<code>style</code>。</p>
</li>
</ul>
<p>需要注意的是：style是一个对象，只能获取<strong>行内样式</strong>，不能获取内嵌的样式和外链的样式。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            border: 6px solid red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span> <span class="attr">style</span>=<span class="string">"width: 200px;height: 100px;background-color: pink;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(box1.style.backgroundColor);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(box1.style.border);  <span class="comment">//没有打印结果，因为这个属性不是行内样式</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> box1.style);  <span class="comment">//因为是对象，所以打印结果是Object</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(box1.style);         <span class="comment">//打印结果是对象</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>因为border属性不是行内样式，所以无法通过style对象获取。</p>
<h3 id="通过-js-读取元素的样式"><a href="#通过-js-读取元素的样式" class="headerlink" title="通过 js 读取元素的样式"></a>通过 js 读取元素的样式</h3><p>语法：（方式一）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">元素.style.样式名</span><br></pre></td></tr></table></figure>

<p>备注：我们通过style属性读取的样式都是<strong>行内样式</strong>。</p>
<p>语法：（方式二）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">元素.style[<span class="string">"属性"</span>];  <span class="comment">//格式</span></span><br><span class="line"></span><br><span class="line">box.style[<span class="string">"width"</span>];  <span class="comment">//举例</span></span><br></pre></td></tr></table></figure>

<p>方式二最大的优点是：可以给属性传递参数。</p>
<h3 id="通过-js-设置元素的样式"><a href="#通过-js-设置元素的样式" class="headerlink" title="通过 js 设置元素的样式"></a>通过 js 设置元素的样式</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">元素.style.样式名 = 样式值;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">box1.style.width &#x3D; &quot;300px&quot;;</span><br><span class="line">box1.style.backgroundColor &#x3D; &quot;red&quot;; &#x2F;&#x2F; 驼峰命名法</span><br></pre></td></tr></table></figure>

<p>备注：我们通过style属性设置的样式都是<strong>行内样式</strong>，而行内样式有较高的优先级。但是如果在样式中的其他地方写了<code>!important</code>，则此时<code>!important</code>会有更高的优先级。</p>
<h3 id="style属性的注意事项"><a href="#style属性的注意事项" class="headerlink" title="style属性的注意事项"></a>style属性的注意事项</h3><p>style属性需要注意以下几点：</p>
<p>（1）样式少的时候使用。</p>
<p>（2）style是对象。我们在上方已经打印出来，typeof的结果是Object。</p>
<p>（3）值是字符串，没有设置值是“”。</p>
<p>（4）命名规则，驼峰命名。</p>
<p>（5）只能获取行内样式，和内嵌和外链无关。</p>
<p>（6）box.style.cssText = “字符串形式的样式”。</p>
<p><code>cssText</code>这个属性，其实就是把行内样式里面的值当做字符串来对待。在上方代码的基础之上，举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//通过cssText一次性设置行内样式</span></span></span><br><span class="line"><span class="actionscript">    box1.style.cssText = <span class="string">"width: 300px;height: 300px;background-color: green;"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(box1.style.cssText);   <span class="comment">//这一行更加可以理解,style是对象</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="style的常用属性"><a href="#style的常用属性" class="headerlink" title="style的常用属性"></a>style的常用属性</h3><p>style的常用属性包括：</p>
<ul>
<li><p>backgroundColor</p>
</li>
<li><p>backgroundImage</p>
</li>
<li><p>color</p>
</li>
<li><p>width</p>
</li>
<li><p>height</p>
</li>
<li><p>border</p>
</li>
<li><p>opacity 设置透明度 (IE8以前是filter: alpha(opacity=xx))</p>
</li>
</ul>
<p>注意DOM对象style的属性和标签中style内的值不一样，因为在JS中，<code>-</code>不能作为标识符。比如：</p>
<ul>
<li><p>DOM中：backgroundColor</p>
</li>
<li><p>CSS中：background-color</p>
</li>
</ul>
<h2 id="style属性的举例"><a href="#style属性的举例" class="headerlink" title="style属性的举例"></a>style属性的举例</h2><p>我们针对上面列举的几个style的样式，来举几个例子：</p>
<ul>
<li><p>举例1、改变div的大小和透明度</p>
</li>
<li><p>举例2、当前输入的文本框高亮显示</p>
</li>
<li><p>举例3、高级隔行变色、高亮显示</p>
</li>
</ul>
<p>下面来逐一实现。</p>
<h3 id="举例1：改变div的大小和透明度"><a href="#举例1：改变div的大小和透明度" class="headerlink" title="举例1：改变div的大小和透明度"></a>举例1：改变div的大小和透明度</h3><p>代码举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 100px;background-color: pink;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">    div.onmouseover = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        div.style.width = <span class="string">"200px"</span>;</span></span><br><span class="line"><span class="actionscript">        div.style.height = <span class="string">"200px"</span>;</span></span><br><span class="line"><span class="actionscript">        div.style.backgroundColor = <span class="string">"black"</span>;</span></span><br><span class="line"><span class="actionscript">        div.style.opacity = <span class="string">"0.2"</span>;   <span class="comment">//设置背景色的透明度。单位是0.1</span></span></span><br><span class="line"><span class="actionscript">        div.style.filter = <span class="string">"alpha(opacity=20)"</span>;   <span class="comment">//上一行代码的兼容性写法。注意单位是百进制</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="举例2：当前输入的文本框高亮显示"><a href="#举例2：当前输入的文本框高亮显示" class="headerlink" title="举例2：当前输入的文本框高亮显示"></a>举例2：当前输入的文本框高亮显示</h3><p>代码实现：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        input &#123;</span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//需求：让所有的input标签获取焦点后高亮显示</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//1.获取事件源</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> inpArr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"input"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//2.绑定事件</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//3.书写事件驱动程序</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; inpArr.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//获取焦点后，所有的input标签被绑定onfocus事件</span></span></span><br><span class="line"><span class="actionscript">        inpArr[i].onfocus = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.style.border = <span class="string">"2px solid red"</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.style.backgroundColor = <span class="string">"#ccc"</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">//绑定onblur事件，取消样式</span></span></span><br><span class="line"><span class="actionscript">        inpArr[i].onblur = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.style.border = <span class="string">""</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.style.backgroundColor = <span class="string">""</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="举例3：高级隔行变色、高亮显示"><a href="#举例3：高级隔行变色、高亮显示" class="headerlink" title="举例3：高级隔行变色、高亮显示"></a>举例3：高级隔行变色、高亮显示</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            margin: 100px auto 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        table &#123;</span><br><span class="line">            border-collapse: collapse;</span><br><span class="line">            border-spacing: 0;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#c0c0c0</span>;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        th,</span><br><span class="line">        td &#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#d0d0d0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#404060</span>;</span></span><br><span class="line">            padding: 10px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        th &#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#09c</span>;</span></span><br><span class="line">            font: bold 16px "微软雅黑";</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        td &#123;</span><br><span class="line">            font: 14px "微软雅黑";</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tbody tr &#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#f0f0f0</span>;</span></span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.current</span> &#123;</span></span><br><span class="line">            background-color: red !important;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>课程<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>成绩<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                1</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>生命壹号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                2</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>生命贰号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>日语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>99<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                3</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>生命叁号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>营销学<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>98<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                4</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>生命伍号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>90<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                5</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>许嵩<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>96<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                6</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>vae<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>体育<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>90<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//需求：让tr各行变色，鼠标放入tr中，高亮显示。</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//1.隔行变色。</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> tbody = <span class="built_in">document</span>.getElementById(<span class="string">"target"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> trArr = tbody.children;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//循环判断并各行赋值属性（背景色）</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; trArr.length; i++) &#123;</span></span><br><span class="line">        if (i % 2 !== 0) &#123;</span><br><span class="line"><span class="actionscript">            trArr[i].style.backgroundColor = <span class="string">"#a3a3a3"</span>;</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">            trArr[i].style.backgroundColor = <span class="string">"#ccc"</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//鼠标进入高亮显示</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//难点：鼠标移开的时候要回复原始颜色。</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//计数器（进入tr之后，立刻记录颜色，然后移开的时候使用记录好的颜色）</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> myColor = <span class="string">""</span>;</span></span><br><span class="line"><span class="actionscript">        trArr[i].onmouseover = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//赋值颜色之前，先记录颜色</span></span></span><br><span class="line"><span class="actionscript">            myColor = <span class="keyword">this</span>.style.backgroundColor;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.style.backgroundColor = <span class="string">"#fff"</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        trArr[i].onmouseout = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.style.backgroundColor = myColor;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>代码解释：</p>
<p>上方代码中，我们<strong>用到了计数器myColor来记录每一行最原始的颜色</strong>（赋值白色之前）。如果不用计数器，可能很多人以为代码是写的：（错误的代码）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//需求：让tr各行变色，鼠标放入tr中，高亮显示。</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//1.隔行变色。</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> tbody = <span class="built_in">document</span>.getElementById(<span class="string">"target"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> trArr = tbody.children;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//循环判断并各行赋值属性（背景色）</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; trArr.length; i++) &#123;</span></span><br><span class="line">        if (i % 2 !== 0) &#123;</span><br><span class="line"><span class="actionscript">            trArr[i].style.backgroundColor = <span class="string">"#a3a3a3"</span>;</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">            trArr[i].style.backgroundColor = <span class="string">"#ccc"</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//鼠标进入高亮显示</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//难点：鼠标移开的时候要回复原始颜色。</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//计数器（进入tr之后，立刻记录颜色，然后移开的时候使用记录好的颜色）</span></span></span><br><span class="line"><span class="actionscript">        trArr[i].onmouseover = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.style.backgroundColor = <span class="string">"#fff"</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        trArr[i].onmouseout = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.style.backgroundColor = <span class="string">"#a3a3a3"</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="通过-js-获取元素当前显示的样式"><a href="#通过-js-获取元素当前显示的样式" class="headerlink" title="通过 js 获取元素当前显示的样式"></a>通过 js 获取元素当前显示的样式</h2><p>我们在上面的内容中，通过<code>元素.style.className</code>的方式只能获取<strong>行内样式</strong>。但是，有些元素，也写了<strong>内嵌样式或外链样式</strong>。</p>
<p>既然样式有这么种，那么，如何获取元素当前显示的样式（包括行内样式、内嵌样式、外链样式）呢？我们接下来看一看。</p>
<h3 id="获取元素当前正在显示的样式"><a href="#获取元素当前正在显示的样式" class="headerlink" title="获取元素当前正在显示的样式"></a>获取元素当前正在显示的样式</h3><p>（1）w3c的做法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.getComputedStyle(<span class="string">"要获取样式的元素"</span>, <span class="string">"伪元素"</span>);</span><br></pre></td></tr></table></figure>

<p>两个参数都是必须要有的。参数二中，如果没有伪元素就用 null 代替（一般都传null）。</p>
<p>（2）IE和opera的做法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj.currentStyle;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li><p>如果当前元素没有设置该样式，则获取它的默认值。</p>
</li>
<li><p>该方法会返回一个<strong>对象</strong>，对象中封装了当前元素对应的样式，可以通过<code>对象.样式名</code>来读取具体的某一个样式。</p>
</li>
<li><p>通过currentStyle和getComputedStyle()读取到的样式都是只读的，不能修改，如果要修改必须通过style属性。</p>
</li>
</ul>
<p>综合上面两种写法，就有了一种兼容性的写法，同时将其封装。代码举例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            background-color: pink;</span><br><span class="line"><span class="css">            <span class="comment">/*border: 1px solid #000;*/</span></span></span><br><span class="line">            padding: 10px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 100px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(getStyle(div1, <span class="string">"width"</span>));</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(getStyle(div1, <span class="string">"padding"</span>));</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(getStyle(div1, <span class="string">"background-color"</span>));</span></span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * 兼容方法，获取元素当前正在显示的样式。</span><br><span class="line">     * 参数：</span><br><span class="line">     *      obj     要获取样式的元素</span><br><span class="line">     *.     name    要获取的样式名</span><br><span class="line">    */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">getStyle</span><span class="params">(ele, attr)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">window</span>.getComputedStyle) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(ele, <span class="literal">null</span>)[attr];</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> ele.currentStyle[attr];</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM简介和DOM操作</title>
    <url>/2020/04/18/26-DOM%E7%AE%80%E4%BB%8B%E5%92%8CDOM%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<hr>
<h2 id="常见概念"><a href="#常见概念" class="headerlink" title="常见概念"></a>常见概念</h2><h3 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h3><p>JavaScript基础分为三个部分：</p>
<ul>
<li><p>ECMAScript：JavaScript的语法标准。包括变量、表达式、运算符、函数、if语句、for语句等。</p>
</li>
<li><p><strong>DOM</strong>：文档对象模型（Document object Model），操作<strong>网页上的元素</strong>的API。比如让盒子移动、变色、轮播图等。</p>
</li>
<li><p><strong>BOM</strong>：浏览器对象模型（Browser Object Model），操作<strong>浏览器部分功能</strong>的API。比如让浏览器自动滚动。</p>
<a id="more"></a>
<h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3></li>
</ul>
<p><strong>节点</strong>（Node）：构成 HTML 网页的最基本单元。网页中的每一个部分都可以称为是一个节点，比如：html标签、属性、文本、注释、整个文档等都是一个节点。</p>
<p>虽然都是节点，但是实际上他们的具体类型是不同的。常见节点分为四类：</p>
<ul>
<li><p>文档节点（文档）：整个 HTML 文档。整个 HTML 文档就是一个文档节点。</p>
</li>
<li><p>元素节点（标签）：HTML标签。</p>
</li>
<li><p>属性节点（属性）：元素的属性。</p>
</li>
<li><p>文本节点（文本）：HTML标签中的文本内容（包括标签之间的空格、换行）。</p>
</li>
</ul>
<p>节点的类型不同，属性和方法也都不尽相同。所有的节点都是Object。</p>
<h3 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM"></a>什么是DOM</h3><p><strong>DOM</strong>：Document Object Model，文档对象模型。DOM 为文档提供了结构化表示，并定义了如何通过脚本来访问文档结构。目的其实就是为了能让js操作html元素而制定的一个规范。</p>
<p>DOM就是由节点组成的。</p>
<p><strong>解析过程</strong>：<br>HTML加载完毕，渲染引擎会在内存中把HTML文档，生成一个DOM树，getElementById是获取内中DOM上的元素节点。然后操作的时候修改的是该元素的<strong>属性</strong>。</p>
<p><strong>DOM树</strong>：（一切都是节点）</p>
<p>DOM的数据结构如下：</p>
<p><img src="dom.png" alt=""></p>
<p>上图可知，<strong>在HTML当中，一切都是节点</strong>（非常重要）。节点的分类，在上一段中，已经讲了。</p>
<p>整个html文档就是一个文档节点。所有的节点都是Object。</p>
<h3 id="DOM可以做什么"><a href="#DOM可以做什么" class="headerlink" title="DOM可以做什么"></a>DOM可以做什么</h3><ul>
<li><p>找对象（元素节点）</p>
</li>
<li><p>设置元素的属性值</p>
</li>
<li><p>设置元素的样式</p>
</li>
<li><p>动态创建和删除元素</p>
</li>
<li><p>事件的触发响应：事件源、事件、事件的驱动程序</p>
</li>
</ul>
<h2 id="元素节点的获取"><a href="#元素节点的获取" class="headerlink" title="元素节点的获取"></a>元素节点的获取</h2><p>DOM节点的获取方式其实就是<strong>获取事件源的方式</strong>。关于事件，上一篇文章中已经讲到了。</p>
<p>想要操作元素节点，必须首先要找到该节点。有三种方式可以获取DOM节点：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">"box1"</span>); <span class="comment">//方式一：通过 id 获取 一个 元素节点（为什么是一个呢？因为 id 是唯一的）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>); <span class="comment">//方式二：通过 标签名 获取 元素节点数组，所以有s</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"hehe"</span>); <span class="comment">//方式三：通过 类名 获取 元素节点数组，所以有s</span></span><br></pre></td></tr></table></figure>

<p>既然方式二、方式三获取的是标签数组，那么习惯性是<strong>先遍历之后再使用</strong>。</p>
<p>特殊情况：数组中的值只有1个。即便如此，这一个值也是包在数组里的。这个值的获取方式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"div1"</span>)[<span class="number">0</span>];    <span class="comment">//取数组中的第一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">"hehe"</span>)[<span class="number">0</span>];  <span class="comment">//取数组中的第一个元素</span></span><br></pre></td></tr></table></figure>

<h2 id="DOM访问关系的获取"><a href="#DOM访问关系的获取" class="headerlink" title="DOM访问关系的获取"></a>DOM访问关系的获取</h2><p>DOM的节点并不是孤立的，因此可以通过DOM节点之间的相对关系对它们进行访问。</p>
<p>节点的访问关系，是以<strong>属性</strong>的方式存在的。</p>
<p>这里我们要重点知道<strong>parentNode</strong>和<strong>children</strong>这两个属性的用法。下面分别介绍。</p>
<h3 id="获取父节点"><a href="#获取父节点" class="headerlink" title="获取父节点"></a>获取父节点</h3><p>调用者就是节点。一个节点只有一个父节点，调用方式就是</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">节点.parentNode</span><br></pre></td></tr></table></figure>

<h3 id="获取兄弟节点"><a href="#获取兄弟节点" class="headerlink" title="获取兄弟节点"></a>获取兄弟节点</h3><p><strong>1、下一个节点 | 下一个元素节点</strong>：</p>
<blockquote>
<p>Sibling的中文是<strong>兄弟</strong>。</p>
</blockquote>
<p>（1）nextSibling：</p>
<ul>
<li><p>火狐、谷歌、IE9+版本：都指的是下一个节点（包括标签、空文档和换行节点）。</p>
</li>
<li><p>IE678版本：指下一个元素节点（标签）。</p>
</li>
</ul>
<p>（2）nextElementSibling：</p>
<ul>
<li>火狐、谷歌、IE9+版本：都指的是下一个元素节点（标签）。</li>
</ul>
<p><strong>总结</strong>：为了获取下一个<strong>元素节点</strong>，我们可以这样做：在IE678中用nextSibling，在火狐谷歌IE9+以后用nextElementSibling，于是，综合这两个属性，可以这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">下一个兄弟节点 = 节点.nextElementSibling || 节点.nextSibling</span><br></pre></td></tr></table></figure>

<p><strong>2、前一个节点 | 前一个元素节点</strong>：</p>
<blockquote>
<p>previous的中文是：前一个。</p>
</blockquote>
<p>（1）previousSibling：</p>
<ul>
<li><p>火狐、谷歌、IE9+版本：都指的是前一个节点（包括标签、空文档和换行节点）。</p>
</li>
<li><p>IE678版本：指前一个元素节点（标签）。</p>
</li>
</ul>
<p>（2）previousElementSibling：</p>
<ul>
<li>火狐、谷歌、IE9+版本：都指的是前一个元素节点（标签）。</li>
</ul>
<p><strong>总结</strong>：为了获取前一个<strong>元素节点</strong>，我们可以这样做：在IE678中用previousSibling，在火狐谷歌IE9+以后用previousElementSibling，于是，综合这两个属性，可以这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">前一个兄弟节点 = 节点.previousElementSibling || 节点.previousSibling</span><br></pre></td></tr></table></figure>

<p><strong>3、补充</strong>：获得任意一个兄弟节点：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">节点自己.parentNode.children[index];  <span class="comment">//随意得到兄弟节点</span></span><br></pre></td></tr></table></figure>

<h3 id="获取单个的子节点"><a href="#获取单个的子节点" class="headerlink" title="获取单个的子节点"></a>获取单个的子节点</h3><p><strong>1、第一个子节点 | 第一个子元素节点</strong>：</p>
<p>（1）firstChild：</p>
<ul>
<li><p>火狐、谷歌、IE9+版本：都指的是第一个子节点（包括标签、空文档和换行节点）。</p>
</li>
<li><p>IE678版本：指第一个子元素节点（标签）。</p>
</li>
</ul>
<p>（2）firstElementChild：</p>
<ul>
<li>火狐、谷歌、IE9+版本：都指的是第一个子元素节点（标签）。</li>
</ul>
<p><strong>总结</strong>：为了获取第一个<strong>子元素节点</strong>，我们可以这样做：在IE678中用firstChild，在火狐谷歌IE9+以后用firstElementChild，于是，综合这两个属性，可以这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">第一个子元素节点 = 节点.firstElementChild || 节点.firstChild</span><br></pre></td></tr></table></figure>

<p><strong>2、最后一个子节点 | 最后一个子元素节点</strong>：</p>
<p>（1）lastChild：</p>
<ul>
<li><p>火狐、谷歌、IE9+版本：都指的是最后一个子节点（包括标签、空文档和换行节点）。</p>
</li>
<li><p>IE678版本：指最后一个子元素节点（标签）。</p>
</li>
</ul>
<p>（2）lastElementChild：</p>
<ul>
<li>火狐、谷歌、IE9+版本：都指的是最后一个子元素节点（标签）。</li>
</ul>
<p><strong>总结</strong>：为了获取最后一个<strong>子元素节点</strong>，我们可以这样做：在IE678中用lastChild，在火狐谷歌IE9+以后用lastElementChild，于是，综合这两个属性，可以这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">最后一个子元素节点 = 节点.lastElementChild || 节点.lastChild</span><br></pre></td></tr></table></figure>

<h3 id="获取所有的子节点"><a href="#获取所有的子节点" class="headerlink" title="获取所有的子节点"></a>获取所有的子节点</h3><p>（1）<strong>childNodes</strong>：标准属性。返回的是指定元素的<strong>子节点</strong>的集合（包括元素节点、所有属性、文本节点）。是W3C的亲儿子。</p>
<ul>
<li>火狐 谷歌等高本版会把换行也看做是子节点。</li>
</ul>
<p>用法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">子节点数组 = 父节点.childNodes;   <span class="comment">//获取所有节点。</span></span><br></pre></td></tr></table></figure>

<p>（2）<strong>children</strong>：非标准属性。返回的是指定元素的<strong>子元素节点</strong>的集合。【重要】</p>
<ul>
<li>它只返回HTML节点，甚至不返回文本节点。</li>
<li>在IE6/7/8中包含注释节点（在IE678中，注释节点不要写在里面）。</li>
</ul>
<p>虽然不是标准的DOM属性，但它和innerHTML方法一样，得到了几乎所有浏览器的支持。</p>
<p>用法：（<strong>用的最多</strong>）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">子节点数组 = 父节点.children;   <span class="comment">//获取所有节点。用的最多。</span></span><br></pre></td></tr></table></figure>

<h2 id="DOM节点的操作（重要）"><a href="#DOM节点的操作（重要）" class="headerlink" title="DOM节点的操作（重要）"></a>DOM节点的操作（重要）</h2><p>上一段的内容：节点的<strong>访问关系</strong>都是<strong>属性</strong>。</p>
<p>本段的内容：节点的<strong>操作</strong>都是<strong>函数</strong>（方法）。</p>
<h3 id="创建节点-createElement"><a href="#创建节点-createElement" class="headerlink" title="创建节点 createElement"></a>创建节点 <code>createElement</code></h3><p>格式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">新的标签(元素节点) = <span class="built_in">document</span>.createElement(<span class="string">"标签名"</span>);</span><br></pre></td></tr></table></figure>

<p>比如，如果我们想创建一个li标签，或者是创建一个不存在的adbc标签，可以这样做：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a1 = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);   <span class="comment">//创建一个li标签</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a2 = <span class="built_in">document</span>.createElement(<span class="string">"adbc"</span>);   <span class="comment">//创建一个不存在的标签</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a1);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a2);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a1);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a2);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="插入节点-appendChild"><a href="#插入节点-appendChild" class="headerlink" title="插入节点 appendChild"></a>插入节点 <code>appendChild</code></h3><p>插入节点有两种方式，它们的含义是不同的。</p>
<p>方式1：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">父节点.appendChild(新的子节点);</span><br></pre></td></tr></table></figure>

<p>解释：父节点的最后插入一个新的子节点。</p>
<p>方式2：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">父节点.insertBefore(新的子节点,作为参考的子节点)</span><br></pre></td></tr></table></figure>




<p><strong>特别强调：</strong></p>
<p>关于方式1的appendChild方法，这里要强调一下。比如，现在有下面这样一个div结构：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box11"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box12"</span>&gt;</span>生命壹号<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box21"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box22"</span>&gt;</span>永不止步<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>上方结构中，子盒子box12是在父亲box11里的，子盒子box22是在父亲box21里面的。现在，如果我调用方法<code>box11.appendChild(box22)</code>，<strong>最后产生的结果是：box22会跑到box11中</strong>（也就是说，box22不在box21里面了）。这是一个很神奇的事情：</p>
<h3 id="删除节点-removeChild"><a href="#删除节点-removeChild" class="headerlink" title="删除节点 removeChild"></a>删除节点 <code>removeChild</code></h3><p>格式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">父节点.removeChild(子节点);</span><br></pre></td></tr></table></figure>

<p>解释：<strong>用父节点删除子节点</strong>。必须要指定是删除哪个子节点。</p>
<p>如果我想删除自己这个节点，可以这么做：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">node1.parentNode.removeChild(node1);</span><br></pre></td></tr></table></figure>

<h3 id="复制节点（克隆节点）"><a href="#复制节点（克隆节点）" class="headerlink" title="复制节点（克隆节点）"></a>复制节点（克隆节点）</h3><p>格式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">要复制的节点.cloneNode();       <span class="comment">//括号里不带参数和带参数false，效果是一样的。</span></span><br><span class="line"></span><br><span class="line">要复制的节点.cloneNode(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>括号里带不带参数，效果是不同的。解释如下：</p>
<ul>
<li><p>不带参数/带参数false：只复制节点本身，不复制子节点。</p>
</li>
<li><p>带参数true：既复制节点本身，也复制其所有的子节点。</p>
</li>
</ul>
<h2 id="设置节点的属性"><a href="#设置节点的属性" class="headerlink" title="设置节点的属性"></a>设置节点的属性</h2><p>我们可以获取节点的属性值、设置节点的属性值、删除节点的属性。</p>
<p>我们就统一拿下面这个标签来举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/1.jpg"</span> <span class="attr">class</span>=<span class="string">"image-box"</span> <span class="attr">title</span>=<span class="string">"美女图片"</span> <span class="attr">alt</span>=<span class="string">"地铁一瞥"</span> <span class="attr">id</span>=<span class="string">"a1"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下面分别介绍。</p>
<h3 id="1、获取节点的属性值"><a href="#1、获取节点的属性值" class="headerlink" title="1、获取节点的属性值"></a>1、获取节点的属性值</h3><p><strong>方式1</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">元素节点.属性名;</span><br><span class="line">元素节点[属性名];</span><br></pre></td></tr></table></figure>

<p>举例：（获取节点的属性值）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/1.jpg"</span> <span class="attr">class</span>=<span class="string">"image-box"</span> <span class="attr">title</span>=<span class="string">"美女图片"</span> <span class="attr">alt</span>=<span class="string">"地铁一瞥"</span> <span class="attr">id</span>=<span class="string">"a1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myNode = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(myNode.src);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(myNode.className);    <span class="comment">//注意，是className，不是class</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(myNode.title);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"------------"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(myNode[<span class="string">"src"</span>]);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(myNode[<span class="string">"className"</span>]); <span class="comment">//注意，是className，不是class</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(myNode[<span class="string">"title"</span>]);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>方式2</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">元素节点.getAttribute(<span class="string">"属性名称"</span>);</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(myNode.getAttribute(<span class="string">"src"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(myNode.getAttribute(<span class="string">"class"</span>));   <span class="comment">//注意是class，不是className</span></span><br><span class="line"><span class="built_in">console</span>.log(myNode.getAttribute(<span class="string">"title"</span>));</span><br></pre></td></tr></table></figure>


<p>方式1和方式2的区别在于：前者是直接操作标签，后者是把标签作为DOM节点。推荐方式2。</p>
<h3 id="2、设置节点的属性值"><a href="#2、设置节点的属性值" class="headerlink" title="2、设置节点的属性值"></a>2、设置节点的属性值</h3><p>方式1举例：（设置节点的属性值）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myNode.src = <span class="string">"images/2.jpg"</span>   <span class="comment">//修改src的属性值</span></span><br><span class="line">myNode.className = <span class="string">"image2-box"</span>;  <span class="comment">//修改class的name</span></span><br></pre></td></tr></table></figure>

<p>方式2：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">元素节点.setAttribute(<span class="string">"属性名"</span>, <span class="string">"新的属性值"</span>);</span><br></pre></td></tr></table></figure>

<p>方式2举例：（设置节点的属性值）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myNode.setAttribute(<span class="string">"src"</span>,<span class="string">"images/3.jpg"</span>);</span><br><span class="line">myNode.setAttribute(<span class="string">"class"</span>,<span class="string">"image3-box"</span>);</span><br><span class="line">myNode.setAttribute(<span class="string">"id"</span>,<span class="string">"你好"</span>);</span><br></pre></td></tr></table></figure>


<h3 id="3、删除节点的属性"><a href="#3、删除节点的属性" class="headerlink" title="3、删除节点的属性"></a>3、删除节点的属性</h3><p>格式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">元素节点.removeAttribute(属性名);</span><br></pre></td></tr></table></figure>

<p>举例：（删除节点的属性）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myNode.removeAttribute(<span class="string">"class"</span>);</span><br><span class="line">myNode.removeAttribute(<span class="string">"id"</span>);</span><br></pre></td></tr></table></figure>


<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>获取节点的属性值和设置节点的属性值，都有两种方式。</p>
<p><strong>如果是节点的“原始属性”</strong>（比如 普通标签的<code>class/className</code>属性、普通标签的<code>style</code>属性、普通标签的 title属性、img 标签的<code>src</code>属性、超链接的<code>href</code>属性等），<strong>方式1和方式2是等价的</strong>，可以混用。怎么理解混用呢？比如说：用 <code>div.title = &#39;我是标题&#39;</code>设置属性，用 <code>div.getAttribute(&#39;title&#39;)</code>获取属性，就是混用。</p>
<p>但如果是节点的“非原始属性”，比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">div.aaa = <span class="string">'qianguyihao'</span>;</span><br><span class="line"></span><br><span class="line">div.setAttribute(<span class="string">'bbb'</span>, <span class="string">'qianguyihao'</span>);</span><br></pre></td></tr></table></figure>

<p>上面的这个“非原始属性”，在使用这两种方式时，是有区别的。区别如下：</p>
<ul>
<li><p>方式1 的<code>元素节点.属性</code>和<code>元素节点[属性]</code>：绑定的属性值不会出现在标签上。</p>
</li>
<li><p>方式2 的<code>get/set/removeAttribut</code>：绑定的属性值会出现在标签上。</p>
</li>
<li><p><strong>这两种方式不能交换使用</strong>，get值和set值必须使用同一种方法。</p>
</li>
</ul>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">title</span>=<span class="string">"主体"</span> <span class="attr">class</span>=<span class="string">"asdfasdfadsfd"</span>&gt;</span>我爱你中国<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//采用方式一进行set</span></span></span><br><span class="line"><span class="actionscript">    div.aaaa = <span class="string">"1111"</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(div.aaaa);    <span class="comment">//打印结果：1111。可以打印出来，但是不会出现在标签上</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//采用方式二进行set</span></span></span><br><span class="line"><span class="actionscript">    div.setAttribute(<span class="string">"bbbb"</span>,<span class="string">"2222"</span>);    <span class="comment">//bbbb作为新增的属性，会出现在标签上</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(div.getAttribute(<span class="string">"aaaa"</span>));   <span class="comment">//打印结果：null。因为方式一的set，无法采用方式二进行get。</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(div.bbbb);                   <span class="comment">//打印结果：undefined。因为方式二的set，无法采用方式一进行get。</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="DOM对象的属性-补充"><a href="#DOM对象的属性-补充" class="headerlink" title="DOM对象的属性-补充"></a>DOM对象的属性-补充</h2><h3 id="innerHTML和innerText的区别"><a href="#innerHTML和innerText的区别" class="headerlink" title="innerHTML和innerText的区别"></a>innerHTML和innerText的区别</h3><ul>
<li><p>value：标签的value属性。</p>
</li>
<li><p><strong>innerHTML</strong>：双闭合标签里面的内容（包含标签）。</p>
</li>
<li><p><strong>innerText</strong>：双闭合标签里面的内容（不包含标签）。（老版本的火狐用textContent）</p>
</li>
</ul>
<p><strong>获取内容举例：</strong></p>
<p>如果我们想获取innerHTML和innerText里的内容，看看会如何：（innerHTML会获取到标签本身，而innerText则不会）</p>
<p><strong>修改内容举例：</strong>（innerHTML会修改标签本身，而innerText则不会）</p>
<h3 id="nodeType属性"><a href="#nodeType属性" class="headerlink" title="nodeType属性"></a>nodeType属性</h3><p>这里讲一下nodeType属性。</p>
<ul>
<li><p><strong>nodeType == 1  表示的是元素节点</strong>（标签） 。记住：在这里，元素就是标签。</p>
</li>
<li><p>nodeType == 2  表示是属性节点。</p>
</li>
<li><p>nodeType == 3  是文本节点。</p>
</li>
</ul>
<h3 id="nodeType、nodeName、nodeValue"><a href="#nodeType、nodeName、nodeValue" class="headerlink" title="nodeType、nodeName、nodeValue"></a>nodeType、nodeName、nodeValue</h3><p>我们那下面这个标签来举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">value</span>=<span class="string">"111"</span>&gt;</span></span><br><span class="line">    生命壹号</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面这个标签就包含了三种节点：</p>
<ul>
<li><p>元素节点（标签）<code>getElementById</code></p>
</li>
<li><p>属性节点 <code>getAttributeNode</code></p>
</li>
<li><p>文本节点 <code>firstChild</code></p>
</li>
</ul>
<p>获取这三个节点的方式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"box1"</span>);  <span class="comment">//获取元素节点（标签）</span></span><br><span class="line"><span class="keyword">var</span> attribute = element.getAttributeNode(<span class="string">"id"</span>); <span class="comment">//获取box1的属性节点</span></span><br><span class="line"><span class="keyword">var</span> txt = element.firstChild;                   <span class="comment">//获取box1的文本节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> value = element.getAttribute(<span class="string">"id"</span>);         <span class="comment">//获取id的属性值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(element);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"--------------"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(attribute);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"--------------"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(txt);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"--------------"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br></pre></td></tr></table></figure>


<p>既然这三个都是节点，如果我想获取它们的nodeType、nodeName、nodeValue，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"box1"</span>);  <span class="comment">//获取元素节点（标签）</span></span><br><span class="line"><span class="keyword">var</span> attribute = element.getAttributeNode(<span class="string">"id"</span>); <span class="comment">//获取box1的属性节点</span></span><br><span class="line"><span class="keyword">var</span> txt = element.firstChild;                   <span class="comment">//获取box1的文本节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取nodeType</span></span><br><span class="line"><span class="built_in">console</span>.log(element.nodeType);       <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(attribute.nodeType);     <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(txt.nodeType);           <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"--------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取nodeName</span></span><br><span class="line"><span class="built_in">console</span>.log(element.nodeName);       <span class="comment">//DIV</span></span><br><span class="line"><span class="built_in">console</span>.log(attribute.nodeName);     <span class="comment">//id</span></span><br><span class="line"><span class="built_in">console</span>.log(txt.nodeName);           <span class="comment">//#text</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"--------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取nodeValue</span></span><br><span class="line"><span class="built_in">console</span>.log(element.nodeValue);     <span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(attribute.nodeValue);   <span class="comment">//box1</span></span><br><span class="line"><span class="built_in">console</span>.log(txt.nodeValue);         <span class="comment">//生命壹号</span></span><br></pre></td></tr></table></figure>



<h2 id="文档的加载"><a href="#文档的加载" class="headerlink" title="文档的加载"></a>文档的加载</h2><p>浏览器在加载一个页面时，是按照自上向下的顺序加载的，读取到一行就运行一行。如果将script标签写到页面的上边，在代码执行时，页面还没有加载，页面没有加载DOM对象也没有加载，会导致无法获取到DOM对象。</p>
<p><strong>onload 事件</strong>：</p>
<p>onload 事件会在整个页面加载完成之后才触发。为 window 绑定一个onload事件，该事件对应的响应函数将会在页面加载完成之后执行，这样可以确保我们的代码执行时所有的DOM对象已经加载完毕了。</p>
<p>代码举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 【方式一：先加载，后执行】这段 js 代码是写在 &lt;head&gt; 标签里的，所以建议放在 window.onload 里面。</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取id为btn的按钮</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 为按钮绑定点击事件</span></span></span><br><span class="line"><span class="actionscript">        btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          alert(<span class="string">"hello"</span>);</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>点我一下<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 【方式二：后加载，后执行】这段 js 代码是写在 &lt;body&gt; 标签里的，代码的位置是处在页面的下方。这么做，也可以确保：在页面加载完毕后，再执行 js 代码。</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 获取id为btn的按钮</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 为按钮绑定点击事件</span></span></span><br><span class="line"><span class="actionscript">      btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">"hello"</span>);</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上方代码中，方式一和方式二均可以确保：在页面加载完毕后，再执行 js 代码。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>offset相关属性和匀速动画</title>
    <url>/2020/04/18/28-offset%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7%E5%92%8C%E5%8C%80%E9%80%9F%E5%8A%A8%E7%94%BB(%E5%90%AB%E8%BD%AE%E6%92%AD%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0)/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JS动画的主要内容如下：</p>
<p>1、三大家族和一个事件对象：</p>
<ul>
<li><p>三大家族：offset/scroll/client。也叫三大系列。</p>
</li>
<li><p>事件对象/event（事件被触动时，鼠标和键盘的状态）（通过属性控制）。</p>
</li>
</ul>
<p>2、动画(闪现/匀速/缓动)</p>
<p>3、冒泡/兼容/封装</p>
<a id="more"></a>
<h2 id="offset-家族的组成"><a href="#offset-家族的组成" class="headerlink" title="offset 家族的组成"></a>offset 家族的组成</h2><p>我们知道，JS动画的三大家族包括：offset/scroll/client。今天来讲一下offset，以及与其相关的匀速动画。</p>
<blockquote>
<p>offset的中文是：偏移，补偿，位移。</p>
</blockquote>
<p>js中有一套方便的<strong>获取元素尺寸</strong>的办法就是offset家族。offset家族包括：</p>
<ul>
<li><p>offsetWidth</p>
</li>
<li><p>offsetHight</p>
</li>
<li><p>offsetLeft</p>
</li>
<li><p>offsetTop</p>
</li>
<li><p>offsetParent</p>
</li>
</ul>
<p>下面分别介绍。</p>
<h3 id="1、offsetWidth-和-offsetHight"><a href="#1、offsetWidth-和-offsetHight" class="headerlink" title="1、offsetWidth 和 offsetHight"></a>1、offsetWidth 和 offsetHight</h3><p><code>offsetWidth</code> 和 <code>offsetHight</code>：获取元素的<strong>宽高 + padding + border</strong>，不包括margin。如下：</p>
<ul>
<li><p>offsetWidth = width + padding + border</p>
</li>
<li><p>offsetHeight = Height + padding + border</p>
</li>
</ul>
<p>这两个属性，他们绑定在了所有的节点元素上。获取元素之后，只要调用这两个属性，我们就能够获取元素节点的宽和高。</p>
<p>举例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            padding: 10px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">            margin: 100px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(div1.offsetHeight);          <span class="comment">//打印结果：140（100+20+20）</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> div1.offsetHeight);   <span class="comment">//打印结果：number</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、offsetParent"><a href="#2、offsetParent" class="headerlink" title="2、offsetParent"></a>2、offsetParent</h3><p><code>offsetParent</code>：获取当前元素的<strong>定位父元素</strong>。</p>
<ul>
<li><p>如果当前元素的父元素，<strong>有CSS定位</strong>（position为absolute、relative、fixed），那么 <code>offsetParent</code> 获取的是<strong>最近的</strong>那个父元素。</p>
</li>
<li><p>如果当前元素的父元素，<strong>没有CSS定位</strong>（position为absolute、relative、fixed），那么<code>offsetParent</code> 获取的是<strong>body</strong>。</p>
</li>
</ul>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span> <span class="attr">style</span>=<span class="string">"position: absolute;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span> <span class="attr">style</span>=<span class="string">"position: fixed;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box3 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"box3"</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(box3.offsetParent);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="3、offsetLeft-和-offsetTop"><a href="#3、offsetLeft-和-offsetTop" class="headerlink" title="3、offsetLeft 和 offsetTop"></a>3、offsetLeft 和 offsetTop</h3><p><code>offsetLeft</code>：当前元素相对于其<strong>定位父元素</strong>的水平偏移量。</p>
<p><code>offsetTop</code>：当前元素相对于其<strong>定位父元素</strong>的垂直偏移量。</p>
<p>备注：从父亲的 padding 开始算起，父亲的 border 不算在内。</p>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            padding: 100px;</span><br><span class="line">            margin: 100px;</span><br><span class="line">            position: relative;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 100<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: red;</span><br><span class="line"><span class="css">            <span class="comment">/*position: absolute;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*left: 10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*top: 10px;*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span> <span class="attr">style</span>=<span class="string">"left: 10px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box2 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"box2"</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//offsetTop和offsetLeft</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(box2.offsetLeft);  <span class="comment">//100</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(box2.style.left);  <span class="comment">//10px</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在父盒子有定位的情况下，offsetLeft == style.left(去掉px之后)。注意，后者只识别行内样式。但区别不仅仅于此，下面会讲。</p>
<h3 id="offsetLeft-和-style-left-区别"><a href="#offsetLeft-和-style-left-区别" class="headerlink" title="offsetLeft 和 style.left 区别"></a>offsetLeft 和 style.left 区别</h3><p>（1）最大区别在于：</p>
<p>offsetLeft 可以返回无定位父元素的偏移量。如果父元素中都没有定位，则body为准。</p>
<p>style.left 只能获取行内样式，如果父元素中都没有设置定位，则返回””（意思是，返回空字符串）;</p>
<p>（2）offsetTop 返回的是数字，而 style.top 返回的是字符串，而且还带有单位：px。</p>
<p>比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">div.offsetLeft = <span class="number">100</span>;</span><br><span class="line">div.style.left = <span class="string">"100px"</span>;</span><br></pre></td></tr></table></figure>

<p>（3）offsetLeft 和 offsetTop <strong>只读</strong>，而 style.left 和 style.top 可读写（只读是获取值，可写是修改值）</p>
<p>总结：我们一般的做法是：<strong>用offsetLeft 和 offsetTop 获取值，用style.left 和 style.top 赋值</strong>（比较方便）。理由如下：</p>
<ul>
<li><p>style.left：只能获取行内式，获取的值可能为空，容易出现NaN。</p>
</li>
<li><p>offsetLeft：获取值特别方便，而且是现成的number，方便计算。它是只读的，不能赋值。</p>
</li>
</ul>
<h2 id="动画的种类"><a href="#动画的种类" class="headerlink" title="动画的种类"></a>动画的种类</h2><ul>
<li><p>闪现（基本不用）</p>
</li>
<li><p>匀速（本文重点）</p>
</li>
<li><p>缓动（后续重点）</p>
</li>
</ul>
<p>简单举例如下：（每间隔500ms，向右移动盒子100px）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            position: absolute;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>动画<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"left: 0px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//1、闪动</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//    btn.onclick = function () &#123;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//        div.style.left = "500px";</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//    &#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//2、匀速运动</span></span></span><br><span class="line"><span class="actionscript">    btn.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//定时器，每隔一定的时间向右走一些</span></span></span><br><span class="line"><span class="actionscript">        setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(div.style.left));</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//动画原理： 盒子未来的位置 = 盒子现在的位置 + 步长；</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//用style.left赋值，用offsetLeft获取值。</span></span></span><br><span class="line"><span class="actionscript">            div.style.left = div.offsetLeft + <span class="number">100</span> + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//div.style.left = parseInt(div.style.left)+10+"px";  //NaN不能用</span></span></span><br><span class="line"></span><br><span class="line">        &#125;, 500);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="匀速动画的封装：每间隔30ms，移动盒子10px【重要】"><a href="#匀速动画的封装：每间隔30ms，移动盒子10px【重要】" class="headerlink" title="匀速动画的封装：每间隔30ms，移动盒子10px【重要】"></a>匀速动画的封装：每间隔30ms，移动盒子10px【重要】</h2><p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 5px;</span><br><span class="line">            height: 300px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#ddd</span>;</span></span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        button &#123;</span><br><span class="line">            margin: 5px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: red;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 195px;</span><br><span class="line">            top: 40px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 0;</span><br><span class="line">            top: 150px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>运动到 left = 200px<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>运动到 left = 400px<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btnArr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box2 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"box2"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box3 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"box3"</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//绑定事件</span></span></span><br><span class="line"><span class="actionscript">    btnArr[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//如果有一天我们要传递另外一个盒子，那么我们的方法就不好用了</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//所以我们要增加第二个参数，被移动的盒子本身。</span></span></span><br><span class="line">        animate(box2, 200);</span><br><span class="line">        animate(box3, 200);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    btnArr[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">        animate(box2, 400);</span><br><span class="line">        animate(box3, 400);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//【重要】方法的封装：每间隔30ms，将盒子向右移动10px</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">animate</span><span class="params">(ele, target)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//要用定时器，先清除定时器</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//一个盒子只能有一个定时器，这样的话，不会和其他盒子出现定时器冲突</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//我们可以把定时器本身，当成为盒子的一个属性</span></span></span><br><span class="line">        clearInterval(ele.timer);</span><br><span class="line"><span class="actionscript">        <span class="comment">//我们要求盒子既能向前又能向后，那么我们的步长就得有正有负</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//目标值如果大于当前值取正，目标值如果小于当前值取负</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> speed = target &gt; ele.offsetLeft ? <span class="number">10</span> : <span class="number">-10</span>;  <span class="comment">//speed指的是步长</span></span></span><br><span class="line"><span class="actionscript">        ele.timer = setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//在执行之前就获取当前值和目标值之差</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> val = target - ele.offsetLeft;</span></span><br><span class="line"><span class="actionscript">            ele.style.left = ele.offsetLeft + speed + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//移动的过程中，如果目标值和当前值之差如果小于步长，那么就不能在前进了</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//因为步长有正有负，所有转换成绝对值来比较</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(val) &lt; <span class="built_in">Math</span>.abs(speed)) &#123;</span></span><br><span class="line"><span class="actionscript">                ele.style.left = target + <span class="string">"px"</span>;</span></span><br><span class="line">                clearInterval(ele.timer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 30)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>上方代码中的方法封装，可以作为一个模板步骤，要记住。其实，这个封装的方法，写成下面这样，会更严谨，更容易理解：（将if语句进行了改进）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//【重要】方法的封装：每间隔30ms，将盒子向右移动10px</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">ele, target</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//要用定时器，先清除定时器</span></span><br><span class="line">    <span class="comment">//一个盒子只能有一个定时器，这样的话，不会和其他盒子出现定时器冲突</span></span><br><span class="line">    <span class="comment">//我们可以把定时器本身，当成为盒子的一个属性</span></span><br><span class="line">    clearInterval(ele.timer);</span><br><span class="line">    <span class="comment">//我们要求盒子既能向前又能向后，那么我们的步长就得有正有负</span></span><br><span class="line">    <span class="comment">//目标值如果大于当前值取正，目标值如果小于当前值取负</span></span><br><span class="line">    <span class="keyword">var</span> speed = target &gt; ele.offsetLeft ? <span class="number">10</span> : <span class="number">-10</span>;  <span class="comment">//speed指的是步长</span></span><br><span class="line">    ele.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//在执行之前就获取当前值和目标值之差</span></span><br><span class="line">        <span class="keyword">var</span> val = target - ele.offsetLeft;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移动的过程中，如果目标值和当前值之差如果小于步长，那么就不能在前进了</span></span><br><span class="line">        <span class="comment">//因为步长有正有负，所有转换成绝对值来比较</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(val) &lt; <span class="built_in">Math</span>.abs(speed)) &#123;  <span class="comment">//如果val小于步长，则直接到达目的地；否则，每次移动一个步长</span></span><br><span class="line">            ele.style.left = target + <span class="string">"px"</span>;</span><br><span class="line">            clearInterval(ele.timer);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ele.style.left = ele.offsetLeft + speed + <span class="string">"px"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">30</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="代码举例：轮播图的实现"><a href="#代码举例：轮播图的实现" class="headerlink" title="代码举例：轮播图的实现"></a>代码举例：轮播图的实现</h2><p>完整版代码如下：（注释已经比较详细）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>无标题文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            list-style: none;</span><br><span class="line">            border: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.all</span> &#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            padding: 7px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.screen</span> &#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.screen</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.screen</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 0;</span><br><span class="line">            top: 0px;</span><br><span class="line">            width: 3000px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.all</span> <span class="selector-tag">ol</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            right: 10px;</span><br><span class="line">            bottom: 10px;</span><br><span class="line">            line-height: 20px;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.all</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            width: 20px;</span><br><span class="line">            height: 20px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">            margin-left: 10px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.all</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span><span class="selector-class">.current</span> &#123;</span></span><br><span class="line">            background: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#arr</span> &#123;</span></span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#arr</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 5px;</span><br><span class="line">            top: 50%;</span><br><span class="line">            margin-top: -20px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">            cursor: pointer;</span><br><span class="line">            line-height: 40px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            font-weight: bold;</span><br><span class="line">            font-family: '黑体';</span><br><span class="line">            font-size: 30px;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">opacity</span>: 0<span class="selector-class">.3</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fff</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#arr</span> <span class="selector-id">#right</span> &#123;</span></span><br><span class="line">            right: 5px;</span><br><span class="line">            left: auto;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//需求：无缝滚动。</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//思路：赋值第一张图片放到ul的最后，然后当图片切换到第五张的时候</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//     直接切换第六章，再次从第一张切换到第二张的时候先瞬间切换到</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//     第一张图片，然后滑动到第二张</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//步骤：</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//1.获取事件源及相关元素。（老三步）</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//2.复制第一张图片所在的li,添加到ul的最后面。</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//3.给ol中添加li，ul中的个数-1个，并点亮第一个按钮。</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//4.鼠标放到ol的li上切换图片</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//5.添加定时器</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//6.左右切换图片（鼠标放上去隐藏，移开显示）</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//1.获取事件源及相关元素。（老三步）</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> all = <span class="built_in">document</span>.getElementById(<span class="string">"all"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> screen = all.firstElementChild || all.firstChild;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> imgWidth = screen.offsetWidth;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> ul = screen.firstElementChild || screen.firstChild;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> ol = screen.children[<span class="number">1</span>];</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> div = screen.lastElementChild || screen.lastChild;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> spanArr = div.children;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//2.复制第一张图片所在的li,添加到ul的最后面。</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> ulNewLi = ul.children[<span class="number">0</span>].cloneNode(<span class="literal">true</span>);</span></span><br><span class="line">            ul.appendChild(ulNewLi);</span><br><span class="line"><span class="actionscript">            <span class="comment">//3.给ol中添加li，ul中的个数-1个，并点亮第一个按钮。</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ul.children.length - <span class="number">1</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> olNewLi = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span></span><br><span class="line">                olNewLi.innerHTML = i + 1;</span><br><span class="line">                ol.appendChild(olNewLi)</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> olLiArr = ol.children;</span></span><br><span class="line"><span class="actionscript">            olLiArr[<span class="number">0</span>].className = <span class="string">"current"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//4.鼠标放到ol的li上切换图片</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; olLiArr.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//自定义属性，把索引值绑定到元素的index属性上</span></span></span><br><span class="line">                olLiArr[i].index = i;</span><br><span class="line"><span class="actionscript">                olLiArr[i].onmouseover = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//排他思想</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; olLiArr.length; j++) &#123;</span></span><br><span class="line"><span class="actionscript">                        olLiArr[j].className = <span class="string">""</span>;</span></span><br><span class="line">                    &#125;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.className = <span class="string">"current"</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//鼠标放到小的方块上的时候索引值和key以及square同步</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//                    key = this.index;</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//                    square = this.index;</span></span></span><br><span class="line"><span class="actionscript">                    key = square = <span class="keyword">this</span>.index;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//移动盒子</span></span></span><br><span class="line"><span class="actionscript">                    animate(ul, -<span class="keyword">this</span>.index * imgWidth);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//5.添加定时器</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> timer = setInterval(autoPlay, <span class="number">1000</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//固定向右切换图片</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//两个定时器（一个记录图片，一个记录小方块）</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> key = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> square = <span class="number">0</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">autoPlay</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//通过控制key的自增来模拟图片的索引值，然后移动ul</span></span></span><br><span class="line">                key++;</span><br><span class="line">                if (key &gt; olLiArr.length) &#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">//图片已经滑动到最后一张，接下来，跳转到第一张，然后在滑动到第二张</span></span></span><br><span class="line">                    ul.style.left = 0;</span><br><span class="line">                    key = 1;</span><br><span class="line">                &#125;</span><br><span class="line">                animate(ul, -key * imgWidth);</span><br><span class="line"><span class="actionscript">                <span class="comment">//通过控制square的自增来模拟小方块的索引值，然后点亮盒子</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">//排他思想做小方块</span></span></span><br><span class="line">                square++;</span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (square &gt; olLiArr.length - <span class="number">1</span>) &#123;<span class="comment">//索引值不能大于等于5，如果等于5，立刻变为0；</span></span></span><br><span class="line">                    square = 0;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; olLiArr.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">                    olLiArr[i].className = <span class="string">""</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                olLiArr[square].className = <span class="string">"current"</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//鼠标放上去清除定时器，移开后在开启定时器</span></span></span><br><span class="line"><span class="actionscript">            all.onmouseover = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                div.style.display = <span class="string">"block"</span>;</span></span><br><span class="line">                clearInterval(timer);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            all.onmouseout = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                div.style.display = <span class="string">"none"</span>;</span></span><br><span class="line">                timer = setInterval(autoPlay, 1000);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//6.左右切换图片（鼠标放上去显示，移开隐藏）</span></span></span><br><span class="line"><span class="actionscript">            spanArr[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//通过控制key的自增来模拟图片的索引值，然后移动ul</span></span></span><br><span class="line">                key--;</span><br><span class="line">                if (key &lt; 0) &#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">//先移动到最后一张，然后key的值取之前一张的索引值，然后在向前移动</span></span></span><br><span class="line"><span class="actionscript">                    ul.style.left = -imgWidth * (olLiArr.length) + <span class="string">"px"</span>;</span></span><br><span class="line">                    key = olLiArr.length - 1;</span><br><span class="line">                &#125;</span><br><span class="line">                animate(ul, -key * imgWidth);</span><br><span class="line"><span class="actionscript">                <span class="comment">//通过控制square的自增来模拟小方块的索引值，然后点亮盒子</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">//排他思想做小方块</span></span></span><br><span class="line">                square--;</span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (square &lt; <span class="number">0</span>) &#123;<span class="comment">//索引值不能大于等于5，如果等于5，立刻变为0；</span></span></span><br><span class="line">                    square = olLiArr.length - 1;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; olLiArr.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">                    olLiArr[i].className = <span class="string">""</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                olLiArr[square].className = <span class="string">"current"</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            spanArr[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//右侧的和定时器一模一样</span></span></span><br><span class="line">                autoPlay();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">animate</span><span class="params">(ele, target)</span> </span>&#123;</span></span><br><span class="line">                clearInterval(ele.timer);</span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> speed = target &gt; ele.offsetLeft ? <span class="number">10</span> : <span class="number">-10</span>;</span></span><br><span class="line"><span class="actionscript">                ele.timer = setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> val = target - ele.offsetLeft;</span></span><br><span class="line"><span class="actionscript">                    ele.style.left = ele.offsetLeft + speed + <span class="string">"px"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(val) &lt; <span class="built_in">Math</span>.abs(speed)) &#123;</span></span><br><span class="line"><span class="actionscript">                        ele.style.left = target + <span class="string">"px"</span>;</span></span><br><span class="line">                        clearInterval(ele.timer);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, 10)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"all"</span> <span class="attr">id</span>=<span class="string">'all'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"screen"</span> <span class="attr">id</span>=<span class="string">"screen"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/1.jpg"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"200"</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/2.jpg"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"200"</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/3.jpg"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"200"</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/4.jpg"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"200"</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/5.jpg"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"200"</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"arr"</span>&gt;</span></span><br><span class="line">            &lt;span id="left"&gt;&lt;&lt;/span&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"right"</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>29-scroll相关属性和缓动动画</title>
    <url>/2020/04/18/29-scroll%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7%E5%92%8C%E7%BC%93%E5%8A%A8%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<hr>
<h2 id="scroll-相关属性"><a href="#scroll-相关属性" class="headerlink" title="scroll 相关属性"></a>scroll 相关属性</h2><h3 id="window-onscroll-方法"><a href="#window-onscroll-方法" class="headerlink" title="window.onscroll() 方法"></a>window.onscroll() 方法</h3><p>当我们用鼠标滚轮，滚动网页的时候，会触发 window.onscroll() 方法。效果如下：（注意看控制台的打印结果）</p>
<a id="more"></a>
<p>如果你需要做滚动监听，可以使用这个方法。</p>
<p>我们来看看和 scroll 相关的有哪些属性。</p>
<h3 id="1、ScrollWidth-和-scrollHeight"><a href="#1、ScrollWidth-和-scrollHeight" class="headerlink" title="1、ScrollWidth 和 scrollHeight"></a>1、ScrollWidth 和 scrollHeight</h3><p><code>ScrollWidth</code> 和 <code>scrollHeight</code>：获取元素<strong>整个滚动区域</strong>的宽、高。包括 width 和 padding，不包括 border和margin。</p>
<p><strong>注意</strong>：</p>
<p><code>scrollHeight</code> 的特点是：如果内容超出了盒子，<code>scrollHeight</code>为内容的高（包括超出的内容）；如果不超出，<code>scrollHeight</code>为盒子本身的高度。<code>ScrollWidth</code>同理。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            padding: 10px;</span><br><span class="line">            margin: 3px;</span><br><span class="line">            border: 8px solid red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    静，能寒窗苦守；动，能点石成金。</span><br><span class="line">    静，能寒窗苦守；动，能点石成金。</span><br><span class="line">    静，能寒窗苦守；动，能点石成金。</span><br><span class="line">    静，能寒窗苦守；动，能点石成金。</span><br><span class="line">    静，能寒窗苦守；动，能点石成金。</span><br><span class="line">    静，能寒窗苦守；动，能点石成金。</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// `scrollHeight` 的特点是：如果内容超出了盒子，`scrollHeight`为内容的高（包括超出的内容）；如果不超出，`scrollHeight`为盒子本身的高度。</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//IE8以下（不包括IE8），为盒子本身内容的高度。</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(div.scrollWidth);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(div.scrollHeight);</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2、scrollTop-和-scrollLeft"><a href="#2、scrollTop-和-scrollLeft" class="headerlink" title="2、scrollTop 和 scrollLeft"></a>2、scrollTop 和 scrollLeft</h3><ul>
<li><p><code>scrollLeft</code>：获取水平滚动条滚动的距离。</p>
</li>
<li><p><code>scrollTop</code>：获取垂直滚动条滚动的距离。</p>
</li>
</ul>
<p><strong>实战经验</strong>：</p>
<p>当某个元素满足<code>scrollHeight - scrollTop == clientHeight</code>时，说明垂直滚动条滚动到底了。</p>
<p>当某个元素满足<code>scrollWidth - scrollLeft == clientWidth</code>时，说明水平滚动条滚动到底了。</p>
<p>这个实战经验非常有用，可以用来判断用户是否已经将内容滑动到底了。比如说，有些场景下，希望用户能够看完“长长的活动规则”，才允许触发接下来的表单操作。</p>
<h3 id="scrollTop-的兼容性"><a href="#scrollTop-的兼容性" class="headerlink" title="scrollTop 的兼容性"></a>scrollTop 的兼容性</h3><p>如果要获取页面滚动的距离，scrollTop 这个属性的写法要注意兼容性，如下。</p>
<p>（1）如果文档没有 DTD 声明，写法为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.scrollTop</span><br></pre></td></tr></table></figure>

<p>在没有 DTD 声明的情况下，要求是这种写法，chrome浏览器才能认出来。</p>
<p>（2）如果文档有 DTD 声明，写法为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.scrollTop</span><br></pre></td></tr></table></figure>

<p>在有 DTD 声明的情况下，要求是这种写法，IE6、7、8才能认出来。</p>
<p>综合上面这两个，就诞生了一种兼容性的写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop <span class="comment">//方式一</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.scrollTop + <span class="built_in">document</span>.documentElement.scrollTop  <span class="comment">//方式二</span></span><br></pre></td></tr></table></figure>

<p>另外还有一种兼容性的写法：<code>window.pageYOffset</code> 和 <code>window.pageXOffset</code>。这种写法无视DTD的声明。这种写法支持的浏览器版本是：火狐/谷歌/ie9+。</p>
<p>综合上面的几种写法，为了兼容，不管有没有DTD，<strong>最终版的兼容性写法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span><br></pre></td></tr></table></figure>

<h3 id="判断是否已经-DTD-声明"><a href="#判断是否已经-DTD-声明" class="headerlink" title="判断是否已经 DTD 声明"></a>判断是否已经 DTD 声明</h3><p>方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.compatMode === <span class="string">"CSS1Compat"</span>   <span class="comment">// 已声明</span></span><br><span class="line"><span class="built_in">document</span>.compatMode === <span class="string">"BackCompat"</span>   <span class="comment">// 未声明</span></span><br></pre></td></tr></table></figure>

<h3 id="将-scrollTop-和-scrollLeft-进行封装"><a href="#将-scrollTop-和-scrollLeft-进行封装" class="headerlink" title="将 scrollTop 和 scrollLeft 进行封装"></a>将 scrollTop 和 scrollLeft 进行封装</h3><p>这里，我们将 scrollTop 和 scrollLeft 封装为一个方法，名叫scroll()，返回值为 一个对象。以后就直接调用<code>scroll().top</code> 和 <code>scroll().left</code>就好。</p>
<p>代码实现：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            height: 6000px;</span><br><span class="line">            width: 5000px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//需求：封装一个兼容的scroll().返回的是对象，用scroll().top获取scrollTop，用scroll().left获取scrollLeft</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//        var myScroll = scroll();</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//        myScroll.top;</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(scroll().top);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(scroll().left);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//函数封装（简单封装，实际工作使用）</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">scroll</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123; <span class="comment">//此函数的返回值是对象</span></span></span><br><span class="line"><span class="javascript">            left: <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop,</span></span><br><span class="line"><span class="javascript">            right: <span class="built_in">window</span>.pageXOffset || <span class="built_in">document</span>.body.scrollLeft || <span class="built_in">document</span>.documentElement.scrollLeft</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上方代码中，函数定义的那部分就是要封装的代码。</p>
<p>另外还有一种比较麻烦的封装方式：（仅供参考）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scroll</span>(<span class="params"></span>) </span>&#123;  <span class="comment">// 开始封装自己的scrollTop</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.pageYOffset !== <span class="literal">undefined</span>) &#123;  <span class="comment">// ie9+ 高版本浏览器</span></span><br><span class="line">        <span class="comment">// 因为 window.pageYOffset 默认的是  0  所以这里需要判断</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            left: <span class="built_in">window</span>.pageXOffset,</span><br><span class="line">            top: <span class="built_in">window</span>.pageYOffset</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">document</span>.compatMode === <span class="string">"CSS1Compat"</span>) &#123;    <span class="comment">// 标准浏览器   来判断有没有声明DTD</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            left: <span class="built_in">document</span>.documentElement.scrollLeft,</span><br><span class="line">            top: <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;   <span class="comment">// 未声明 DTD</span></span><br><span class="line">        left: <span class="built_in">document</span>.body.scrollLeft,</span><br><span class="line">        top: <span class="built_in">document</span>.body.scrollTop</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="获取-html-文档的方法"><a href="#获取-html-文档的方法" class="headerlink" title="获取 html 文档的方法"></a>获取 html 文档的方法</h2><p>获取title、body、head、html标签的方法如下：</p>
<ul>
<li><p><code>document.title</code> 文档标题；</p>
</li>
<li><p><code>document.head</code>  文档的头标签</p>
</li>
<li><p><code>document.body</code>  文档的body标签；</p>
</li>
<li><p><code>document.documentElement</code>  （这个很重要）。</p>
</li>
</ul>
<p><code>document.documentElement</code>表示文档的html标签。也就是说，基本结构当中的 <code>html 标签</code>而是通过<code>document.documentElement</code>访问的，并不是通过 document.html 去访问的。</p>
<h2 id="scrollTop-举例：固定导航栏"><a href="#scrollTop-举例：固定导航栏" class="headerlink" title="scrollTop 举例：固定导航栏"></a>scrollTop 举例：固定导航栏</h2><p>完整版代码实现：</p>
<p>（1）index.html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        img &#123;</span><br><span class="line">            vertical-align: top;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            width: 1000px;</span><br><span class="line">            margin-top: 10px;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#Q-nav1</span> &#123;</span></span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.fixed</span> &#123;</span></span><br><span class="line">            position: fixed;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入工具js--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"tools.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//需求1：当我们滚动界面的时候，被卷曲的头部如果超过第二个盒子距离顶部的位置，那么直接给第二个盒子加类名.fixed</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//需求2：当我们滚动界面的时候，被卷曲的头部如果小于第二个盒子距离顶部的位置，那么直接给第二个盒子取消类名.fixed</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//1.老三步。</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> topDiv = <span class="built_in">document</span>.getElementById(<span class="string">"top"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> height = topDiv.offsetHeight;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> middle = <span class="built_in">document</span>.getElementById(<span class="string">"Q-nav1"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> main = <span class="built_in">document</span>.getElementById(<span class="string">"main"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//2.判断 ，被卷曲的头部的大小</span></span></span><br><span class="line">                if (scroll().top &gt; height) &#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">//3.满足条件添加类，否则删除类</span></span></span><br><span class="line"><span class="actionscript">                    middle.className += <span class="string">" fixed"</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//第二个盒子也要占位置，为了避免重叠，我们给第三个盒子一个上padding的空间，把这个空间留给第二个盒子</span></span></span><br><span class="line"><span class="actionscript">                    main.style.paddingTop = middle.offsetHeight + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    middle.className = <span class="string">""</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//清零</span></span></span><br><span class="line">                    main.style.paddingTop = 0;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span> <span class="attr">id</span>=<span class="string">"top"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/top.png"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"Q-nav1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/nav.png"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/main.png"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上方代码中，有一个技巧：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">main.style.paddingTop = middle.offsetHeight + <span class="string">"px"</span>;</span><br></pre></td></tr></table></figure>

<p>仔细看注释就好。</p>
<p>（2）tools.js：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by smyhvae on 2018/02/03.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scroll</span>(<span class="params"></span>) </span>&#123;  <span class="comment">// 开始封装自己的scrollTop</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.pageYOffset !== <span class="literal">undefined</span>) &#123;  <span class="comment">// ie9+ 高版本浏览器</span></span><br><span class="line">        <span class="comment">// 因为 window.pageYOffset 默认的是  0  所以这里需要判断</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            left: <span class="built_in">window</span>.pageXOffset,</span><br><span class="line">            top: <span class="built_in">window</span>.pageYOffset</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.compatMode === <span class="string">"CSS1Compat"</span>) &#123;    <span class="comment">// 标准浏览器   来判断有没有声明DTD</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            left: <span class="built_in">document</span>.documentElement.scrollLeft,</span><br><span class="line">            top: <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;   <span class="comment">// 未声明 DTD</span></span><br><span class="line">        left: <span class="built_in">document</span>.body.scrollLeft,</span><br><span class="line">        top: <span class="built_in">document</span>.body.scrollTop</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="缓动动画"><a href="#缓动动画" class="headerlink" title="缓动动画"></a>缓动动画</h2><h3 id="三个函数"><a href="#三个函数" class="headerlink" title="三个函数"></a>三个函数</h3><p>缓慢动画里，我们要用到三个函数，这里先列出来：</p>
<ul>
<li><p>Math.ceil()         向上取整</p>
</li>
<li><p>Math.floor()        向下取整</p>
</li>
<li><p>Math.round();   四舍五入</p>
</li>
</ul>
<h3 id="缓动动画的原理"><a href="#缓动动画的原理" class="headerlink" title="缓动动画的原理"></a>缓动动画的原理</h3><p>缓动动画的原理就是：在移动的过程中，步长越来越小。</p>
<p>设置步长为：<strong>目标位置和盒子当前位置的十分之一</strong>。用公式表达，即：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">盒子位置 &#x3D; 盒子本身位置 + (目标位置 - 盒子本身位置)&#x2F; 10；</span><br></pre></td></tr></table></figure>

<p>代码举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            position: absolute;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>运动到left = 400px<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    btn.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//动画原理：盒子未来的位置 = 盒子当前的位置+步长</span></span></span><br><span class="line"><span class="actionscript">            div.style.left = div.offsetLeft + (<span class="number">400</span> - div.offsetLeft) / <span class="number">10</span> + <span class="string">"px"</span>;</span></span><br><span class="line">        &#125;, 30);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="缓慢动画的封装（解决四舍五入的问题）"><a href="#缓慢动画的封装（解决四舍五入的问题）" class="headerlink" title="缓慢动画的封装（解决四舍五入的问题）"></a>缓慢动画的封装（解决四舍五入的问题）</h3><p>我们发现一个问题，上图中的盒子最终并没有到达400px的位置，而是只到了396.04px就停住了：</p>
<p>原因是：JS在取整的运算时，进行了四舍五入。</p>
<p>我么发现，通过<code>div.style.left</code>获取的值是精确的，通过<code>div.offsetLeft</code>获取的left值会进行四舍五入。</p>
<p>此时，我们就要用到取整的函数了。</p>
<p>通过对缓动动画进行封装，完整版的代码实现如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 0;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>运动到200<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>运动到400<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    btn[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">        animate(div, 200);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    btn[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">        animate(div, 400);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//缓动动画封装</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">animate</span><span class="params">(ele, target)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//要用定时器，先清定时器</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//一个萝卜一个坑儿，一个元素对应一个定时器</span></span></span><br><span class="line">        clearInterval(ele.timer);</span><br><span class="line"><span class="actionscript">        <span class="comment">//定义定时器</span></span></span><br><span class="line"><span class="actionscript">        ele.timer = setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//获取步长</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//步长应该是越来越小的，缓动的算法。</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> step = (target - ele.offsetLeft) / <span class="number">10</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//对步长进行二次加工(大于0向上取整,小于0向下取整)</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//达到的效果是：最后10像素的时候都是1像素1像素的向目标位置移动，就能够到达指定位置。</span></span></span><br><span class="line"><span class="javascript">            step = step &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//动画原理： 目标位置 = 当前位置 + 步长</span></span></span><br><span class="line"><span class="actionscript">            ele.style.left = ele.offsetLeft + step + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(step);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//检测缓动动画有没有停止</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"smyhvae"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(target - ele.offsetLeft) &lt;= <span class="built_in">Math</span>.abs(step)) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//处理小数赋值</span></span></span><br><span class="line"><span class="actionscript">                ele.style.left = target + <span class="string">"px"</span>;</span></span><br><span class="line">                clearInterval(ele.timer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 30);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="window-scrollTo-方法举例：返回到顶部小火箭"><a href="#window-scrollTo-方法举例：返回到顶部小火箭" class="headerlink" title="window.scrollTo()方法举例：返回到顶部小火箭"></a>window.scrollTo()方法举例：返回到顶部小火箭</h2><p>（1）index.html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        img &#123;</span><br><span class="line">            position: fixed;</span><br><span class="line">            bottom: 100px;</span><br><span class="line">            right: 50px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            display: none;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 1210px;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            text-align: center;</span><br><span class="line">            font: 500 26px/35px "simsun";</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"tools.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//需求：被卷去的头部超过100显示小火箭，然后点击小火箭屏幕缓慢移动到最顶端。</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//难点：我们以前是移动盒子，现在是移动屏幕，我们没有学过如何移动屏幕。</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//      技术点：window.scrollTo(x,y);浏览器显示区域跳转到指定的坐标</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//步骤：</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//1.老三步</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//被卷去的距离大于200显示小火箭，否则隐藏</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">//2.显示隐藏小火箭</span></span></span><br><span class="line">                if (scroll().top &gt; 1000) &#123;</span><br><span class="line"><span class="actionscript">                    img.style.display = <span class="string">"block"</span>;</span></span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    img.style.display = <span class="string">"none"</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="comment">//每次移动滚动条的时候都给leader赋值，模拟leader获取距离顶部的距离</span></span></span><br><span class="line">                leader = scroll().top;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="comment">//3.缓动跳转到页面最顶端（利用我们的缓动动画）</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> timer = <span class="literal">null</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> target = <span class="number">0</span>; <span class="comment">//目标位置</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> leader = <span class="number">0</span>; <span class="comment">//显示区域自身的位置</span></span></span><br><span class="line"><span class="actionscript">            img.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//技术点：window.scrollTo(0,0);</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">//要用定时器，先清定时器</span></span></span><br><span class="line">                clearInterval(timer);</span><br><span class="line"><span class="actionscript">                timer = setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//获取步长</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> step = (target - leader) / <span class="number">10</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//二次处理步长</span></span></span><br><span class="line"><span class="javascript">                    step = step &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step);</span></span><br><span class="line"><span class="actionscript">                    leader = leader + step; <span class="comment">//往上移动的过程中，step是负数。当前位置减去步长，就等于下一步的位置。</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//显示区域移动</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, leader);</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//清除定时器</span></span></span><br><span class="line">                    if (leader === 0) &#123;</span><br><span class="line">                        clearInterval(timer);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, 25);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/Top.jpg"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    我是最顶端.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生命壹号，永不止步.....<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）tools.js:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by smyhvae on 2015/12/8.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数：获取scrollTop和scrollLeft的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scroll</span>(<span class="params"></span>) </span>&#123;  <span class="comment">// 开始封装自己的scrollTop</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.pageYOffset != <span class="literal">null</span>) &#123;  <span class="comment">// ie9+ 高版本浏览器</span></span><br><span class="line">        <span class="comment">// 因为 window.pageYOffset 默认的是  0  所以这里需要判断</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            left: <span class="built_in">window</span>.pageXOffset,</span><br><span class="line">            top: <span class="built_in">window</span>.pageYOffset</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.compatMode === <span class="string">"CSS1Compat"</span>) &#123;    <span class="comment">// 标准浏览器   来判断有没有声明DTD</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            left: <span class="built_in">document</span>.documentElement.scrollLeft,</span><br><span class="line">            top: <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;   <span class="comment">// 未声明 DTD</span></span><br><span class="line">        left: <span class="built_in">document</span>.body.scrollLeft,</span><br><span class="line">        top: <span class="built_in">document</span>.body.scrollTop</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>client相关属性</title>
    <url>/2020/04/18/30-client-%E5%8F%AF%E8%A7%86%E5%8C%BA/</url>
    <content><![CDATA[<hr>
<h2 id="client-家族的组成"><a href="#client-家族的组成" class="headerlink" title="client 家族的组成"></a>client 家族的组成</h2><h3 id="clientWidth-和-clientHeight"><a href="#clientWidth-和-clientHeight" class="headerlink" title="clientWidth 和 clientHeight"></a>clientWidth 和 clientHeight</h3><p>元素调用时：</p>
<ul>
<li><p>clientWidth：获取元素的可见宽度（width + padding）。</p>
</li>
<li><p>clientHeight：获取元素的可见高度（height + padding）。</p>
<a id="more"></a>

</li>
</ul>
<p>body/html 调用时：</p>
<ul>
<li><p>clientWidth：获取网页可视区域宽度。</p>
</li>
<li><p>clientHeight：获取网页可视区域高度。</p>
</li>
</ul>
<p><strong>声明</strong>：</p>
<ul>
<li><p><code>clientWidth</code> 和 <code>clientHeight</code> 属性是只读的，不可修改。</p>
</li>
<li><p><code>clientWidth</code> 和 <code>clientHeight</code> 的值都是不带 px 的，返回的都是一个数字，可以直接进行计算。</p>
</li>
</ul>
<h3 id="clientX-和-clientY"><a href="#clientX-和-clientY" class="headerlink" title="clientX 和 clientY"></a>clientX 和 clientY</h3><p>event调用：</p>
<ul>
<li><p>clientX：鼠标距离可视区域左侧距离。</p>
</li>
<li><p>clientY：鼠标距离可视区域上侧距离。</p>
</li>
</ul>
<h3 id="clientTop-和-clientLeft"><a href="#clientTop-和-clientLeft" class="headerlink" title="clientTop 和 clientLeft"></a>clientTop 和 clientLeft</h3><ul>
<li><p>clientTop：盒子的上border。</p>
</li>
<li><p>clientLeft：盒子的左border。</p>
</li>
</ul>
<h2 id="三大家族-offset-scroll-client-的区别"><a href="#三大家族-offset-scroll-client-的区别" class="headerlink" title="三大家族 offset/scroll/client 的区别"></a>三大家族 offset/scroll/client 的区别</h2><h3 id="区别1：宽高"><a href="#区别1：宽高" class="headerlink" title="区别1：宽高"></a>区别1：宽高</h3><ul>
<li><p>offsetWidth  = width  + padding + border</p>
</li>
<li><p>offsetHeight = height + padding + border</p>
</li>
<li><p>scrollWidth   = 内容宽度（不包含border）</p>
</li>
<li><p>scrollHeight  = 内容高度（不包含border）</p>
</li>
<li><p>clientWidth  = width  + padding</p>
</li>
<li><p>clientHeight = height + padding</p>
</li>
</ul>
<h3 id="区别2：上左"><a href="#区别2：上左" class="headerlink" title="区别2：上左"></a>区别2：上左</h3><p>offsetTop/offsetLeft：</p>
<ul>
<li>调用者：任意元素。(盒子为主)</li>
<li>作用：距离父系盒子中带有定位的距离。</li>
</ul>
<p>scrollTop/scrollLeft：</p>
<ul>
<li>调用者：document.body.scrollTop（window调用）(盒子也可以调用，但必须有滚动条)</li>
<li>作用：浏览器无法显示的部分（被卷去的部分）。</li>
</ul>
<p>clientY/clientX：</p>
<ul>
<li>调用者：event</li>
<li>作用：鼠标距离浏览器可视区域的距离（左、上）。</li>
</ul>
<h2 id="函数封装：获取浏览器的宽高（可视区域）"><a href="#函数封装：获取浏览器的宽高（可视区域）" class="headerlink" title="函数封装：获取浏览器的宽高（可视区域）"></a>函数封装：获取浏览器的宽高（可视区域）</h2><p>函数封装如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数封装：获取屏幕可视区域的宽高</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">client</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.innerHeight !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="comment">//ie9及其以上的版本的写法</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">"width"</span>: <span class="built_in">window</span>.innerWidth,</span><br><span class="line">            <span class="string">"height"</span>: <span class="built_in">window</span>.innerHeight</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.compatMode === <span class="string">"CSS1Compat"</span>) &#123;</span><br><span class="line">        <span class="comment">//标准模式的写法（有DTD时）</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">"width"</span>: <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">            <span class="string">"height"</span>: <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//没有DTD时的写法</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">"width"</span>: <span class="built_in">document</span>.body.clientWidth,</span><br><span class="line">            <span class="string">"height"</span>: <span class="built_in">document</span>.body.clientHeight</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>案例：根据浏览器的可视宽度，给定不同的背景的色。</strong></p>
<blockquote>
<p>PS：这个可以用来做响应式。</p>
</blockquote>
<p>代码如下：（需要用到上面的封装好的方法）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"tools.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//需求：浏览器每次更改大小，判断是否符合某一标准然后给背景上色。</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//  // &gt;960红色，大于640小于960蓝色，小于640绿色。</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onresize = fn;  <span class="comment">//页面大小发生变化时，执行该函数。</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//页面加载的时候直接执行一次函数，确定浏览器可视区域的宽，给背景上色</span></span></span><br><span class="line">    fn();</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//封装成函数，然后指定的时候去调用和绑定函数名</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">        if (client().width &gt; 960) &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.body.style.backgroundColor = <span class="string">"red"</span>;</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (client().width &gt; <span class="number">640</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.body.style.backgroundColor = <span class="string">"blue"</span>;</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.body.style.backgroundColor = <span class="string">"green"</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>上当代码中，<code>window.onresize</code>事件指的是：在窗口或框架被调整大小时发生。各个事件的解释如下：</p>
<ul>
<li><p>window.onscroll        屏幕滑动</p>
</li>
<li><p>window.onresize       浏览器大小变化</p>
</li>
<li><p>window.onload            页面加载完毕</p>
</li>
<li><p>div.onmousemove    鼠标在盒子上移动（注意：不是盒子移动）</p>
</li>
</ul>
<h2 id="获取显示器的分辨率"><a href="#获取显示器的分辨率" class="headerlink" title="获取显示器的分辨率"></a>获取显示器的分辨率</h2><p>比如，我的电脑的显示器分辨率是：1920*1080。</p>
<p>获取显示器的分辨率：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="built_in">window</span>.screen.width + <span class="string">"    "</span> + <span class="built_in">window</span>.screen.height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>上图中，不管我如何改变浏览器的窗口大小，title栏显示的值永远都是我的显示器分辨率：1920*1080。</p>
<h3 id="pageX-clientX-screenX-offsetX区别"><a href="#pageX-clientX-screenX-offsetX区别" class="headerlink" title="pageX,clientX,screenX,offsetX区别"></a>pageX,clientX,screenX,offsetX区别</h3><p><strong>pageX/pageY</strong>:</p>
<p>鼠标相对于整个页面的X/Y坐标。</p>
<p><img src="./30-client-%E5%8F%AF%E8%A7%86%E5%8C%BA/2020-04-19-11-08-38.png" alt=""></p>
<blockquote>
<p>注意，整个页面的意思就是你整个网页的全部，比如说网页很宽很长，宽2000px，高3000px，那pageX,pageY的最大值就是它们了。</p>
</blockquote>
<blockquote>
<p>特别说明：IE不支持！</p>
</blockquote>
<p><strong>clientX/clientY</strong>：</p>
<p>事件发生时鼠标在浏览器内容区域的X/Y坐标（不包含滚动条）。</p>
<p>浏览器内容区域即浏览器窗口中用来显示网页的可视区域，注意这个可视，也就是说需要拖动滚动条才能看到的区域不算。</p>
<p>当你将浏览器窗口缩小时，clientX/clientY的最大值也会缩小，但始终，它们的最大值不会超过你浏览器可视区域。</p>
<p><img src="./30-client-%E5%8F%AF%E8%A7%86%E5%8C%BA/2020-04-19-11-09-31.png" alt=""></p>
<blockquote>
<p>特别说明：IE下此属性不规范，它们的最小值不是0而是2，也就是说IE下的clientX/clientY比火狐下始终大2px。</p>
</blockquote>
<p><strong>screenX/screenY</strong>:</p>
<p>鼠标在屏幕上的坐标。screenX,screenY的最大值不会超过屏幕分辨率。</p>
<p><strong>offsetX/offsetY</strong>:</p>
<p><img src="2020-04-19-11-10-09.png" alt=""></p>
<blockquote>
<p>特别说明：只有IE支持！相当于IE下的pageX,pageY。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="2020-04-19-11-10-44.png" alt=""></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>事件绑定和事件对象Event</title>
    <url>/2020/04/18/31-%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%BB%91%E5%AE%9A%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1Event/</url>
    <content><![CDATA[<hr>
<h2 id="绑定事件的两种方式-DOM事件的级别"><a href="#绑定事件的两种方式-DOM事件的级别" class="headerlink" title="绑定事件的两种方式/DOM事件的级别"></a>绑定事件的两种方式/DOM事件的级别</h2><h3 id="DOM的写法：onclick"><a href="#DOM的写法：onclick" class="headerlink" title="DOM的写法：onclick"></a>DOM的写法：onclick</h3><a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//这种事件绑定的方式，如果绑定多个，则后面的会覆盖掉前面的</span></span></span><br><span class="line"><span class="actionscript">    btn.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"事件1"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    btn.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"事件2"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>点击按钮后，上方代码的打印结果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">事件2</span><br></pre></td></tr></table></figure>

<p>我们可以看到，<code>DOM对象.事件 =  函数</code>的这种绑定事件的方式：一个元素的一个事件只能绑定一个响应函数。如果绑定了多个响应函数，则后者会覆盖前者。</p>
<h3 id="DOM2的写法：addEventListener（高版本浏览器）"><a href="#DOM2的写法：addEventListener（高版本浏览器）" class="headerlink" title="DOM2的写法：addEventListener（高版本浏览器）"></a>DOM2的写法：addEventListener（高版本浏览器）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>


<p>参数解释：</p>
<ul>
<li><p>参数1：事件名的字符串(注意，没有on)</p>
</li>
<li><p>参数2：回调函数：当事件触发时，该函数会被执行</p>
</li>
<li><p>参数3：<strong>true表示捕获阶段触发，false表示冒泡阶段触发（默认）</strong>。如果不写，则默认为false。<strong>【重要】</strong></p>
</li>
</ul>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// addEventListener: 事件监听器。 原事件被执行的时候，后面绑定的事件照样被执行</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 这种写法不存在响应函数被覆盖的情况。（更适合团队开发）</span></span></span><br><span class="line"><span class="actionscript">    btn.addEventListener(<span class="string">"click"</span>, fn1);</span></span><br><span class="line"><span class="actionscript">    btn.addEventListener(<span class="string">"click"</span>, fn2);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fn1</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"事件1"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fn2</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"事件2"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>点击按钮后，上方代码的打印结果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">事件1</span><br><span class="line">事件2</span><br></pre></td></tr></table></figure>

<p>我们可以看到，<code>addEventListener()</code>这种绑定事件的方式：</p>
<ul>
<li><p>一个元素的一个事件，可以绑定多个响应函数。不存在响应函数被覆盖的情况。<strong>执行顺序是</strong>：事件被触发时，响应函数会按照函数的绑定顺序执行。</p>
</li>
<li><p>addEventListener()中的this，是绑定事件的对象。</p>
</li>
<li><p><code>addEventListener()</code>不支持 IE8 及以下的浏览器。在IE8中可以使用<code>attachEvent</code>来绑定事件（详见下一小段）。</p>
</li>
</ul>
<h3 id="DOM2的写法：attachEvent（IE8及以下版本浏览器）"><a href="#DOM2的写法：attachEvent（IE8及以下版本浏览器）" class="headerlink" title="DOM2的写法：attachEvent（IE8及以下版本浏览器）"></a>DOM2的写法：attachEvent（IE8及以下版本浏览器）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.attachEvent(<span class="string">'onclick'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>参数解释：</p>
<ul>
<li><p>参数1：事件名的字符串(注意，有on)</p>
</li>
<li><p>参数2：回调函数：当事件触发时，该函数会被执行</p>
</li>
</ul>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        btn.attachEvent(<span class="string">'onclick'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'事件1'</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        btn.attachEvent(<span class="string">'onclick'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'事件2'</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在低版本的IE浏览器上，点击按钮后，上方代码的打印结果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">事件2</span><br><span class="line">事件1</span><br></pre></td></tr></table></figure>

<p>我们可以看到，<code>attachEvent()</code>这种绑定事件的方式：</p>
<ul>
<li><p>一个元素的一个事件，可以绑定多个响应函数。不存在响应函数被覆盖的情况。<strong>注意</strong>：执行顺序是，后绑定的先执行。</p>
</li>
<li><p>attachEvent()中的this，是window</p>
</li>
</ul>
<h3 id="兼容性写法"><a href="#兼容性写法" class="headerlink" title="兼容性写法"></a>兼容性写法</h3><p>上面的内容里，需要强调的是：</p>
<ul>
<li><p><code>addEventListener()</code>中的this，是绑定事件的对象。</p>
</li>
<li><p><code>attachEvent()</code>中的this，是window。</p>
</li>
</ul>
<p>既然这两个写法的<code>this</code>不同，那么，有没有一种兼容性的写法可以确保这两种绑定方式的this是相同的呢？我们可以封装一下。代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        myBind(btn , <span class="string">"click"</span> , <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="keyword">this</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//定义一个函数，用来为指定元素绑定响应函数</span></span></span><br><span class="line">        /*</span><br><span class="line"><span class="actionscript">         * addEventListener()中的<span class="keyword">this</span>，是绑定事件的对象</span></span><br><span class="line"><span class="javascript">         * attachEvent()中的<span class="keyword">this</span>，是<span class="built_in">window</span></span></span><br><span class="line"><span class="actionscript">         *  需要统一两个方法<span class="keyword">this</span></span></span><br><span class="line">         */</span><br><span class="line">        /*</span><br><span class="line">         * 参数：</span><br><span class="line">         *  element 要绑定事件的对象</span><br><span class="line">         *  eventStr 事件的字符串(不要on)</span><br><span class="line">         *  callback 回调函数</span><br><span class="line">         */</span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">myBind</span><span class="params">(element , eventStr , callback)</span></span>&#123;</span></span><br><span class="line">            if(element.addEventListener)&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">//大部分浏览器兼容的方式</span></span></span><br><span class="line"><span class="actionscript">                element.addEventListener(eventStr , callback , <span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line">                /*</span><br><span class="line"><span class="actionscript">                 * <span class="keyword">this</span>是谁，由调用方式决定</span></span><br><span class="line">                 * callback.call(element)</span><br><span class="line">                 */</span><br><span class="line"><span class="actionscript">                <span class="comment">//IE8及以下</span></span></span><br><span class="line"><span class="actionscript">                element.attachEvent(<span class="string">"on"</span>+eventStr , <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//在匿名函数 function 中调用回调函数callback</span></span></span><br><span class="line">                    callback.call(element);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>当事件的响应函数被触发时，会产生一个事件对象<code>event</code>。浏览器每次都会将这个事件<code>event</code>作为实参传进之前的响应函数。</p>
<p>这个对象中包含了与当前事件相关的一切信息。比如鼠标的坐标、键盘的哪个按键被按下、鼠标滚轮滚动的方向等。</p>
<h3 id="获取-event-对象（兼容性问题）"><a href="#获取-event-对象（兼容性问题）" class="headerlink" title="获取 event 对象（兼容性问题）"></a>获取 event 对象（兼容性问题）</h3><p>所有浏览器都支持event对象，但支持的方式不同。如下。</p>
<p>（1）普通浏览器的写法是 <code>event</code>。比如：</p>
<p>（2）ie 678 的写法是 <code>window.event</code>。此时，事件对象 event 是作为window对象的属性保存的。</p>
<p>于是，我们可以采取一种兼容性的写法。如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">event = event || <span class="built_in">window</span>.event; <span class="comment">// 兼容性写法</span></span><br></pre></td></tr></table></figure>

<p>代码举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//点击页面的任何部分</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        event = event || <span class="built_in">window</span>.event; <span class="comment">////兼容性写法</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(event);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(event.timeStamp);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(event.bubbles);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(event.button);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(event.pageX);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(event.pageY);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(event.screenX);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(event.screenY);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(event.target);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(event.type);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(event.clientX);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(event.clientY);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="event-属性"><a href="#event-属性" class="headerlink" title="event 属性"></a>event 属性</h3><p>event 有很多属性</p>
<p>由于pageX 和 pageY的兼容性不好，我们可以这样做：</p>
<ul>
<li>鼠标在页面的位置 = 滚动条滚动的距离 + 可视区域的坐标。</li>
</ul>
<h2 id="Event举例"><a href="#Event举例" class="headerlink" title="Event举例"></a>Event举例</h2><h3 id="举例1：使-div-跟随鼠标移动"><a href="#举例1：使-div-跟随鼠标移动" class="headerlink" title="举例1：使 div 跟随鼠标移动"></a>举例1：使 div 跟随鼠标移动</h3><p>代码实现：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-id">#box1</span> &#123;</span></span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background-color: red;</span><br><span class="line">        /*</span><br><span class="line">        * 开启box1的绝对定位</span><br><span class="line">        */</span><br><span class="line">        position: absolute;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        /*</span><br><span class="line">         * 使div可以跟随鼠标移动</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//获取box1</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">"box1"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//给整个页面绑定：鼠标移动事件</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//兼容的方式获取event对象</span></span></span><br><span class="line"><span class="javascript">          event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// 鼠标在页面的位置 = 滚动条滚动的距离 + 可视区域的坐标。</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> pagex = event.pageX || scroll().left + event.clientX;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> pagey = event.pageY || scroll().top + event.clientY;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">//   设置div的偏移量（相对于整个页面）</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 注意，如果想通过 style.left 来设置属性，一定要给 box1开启绝对定位。</span></span></span><br><span class="line"><span class="actionscript">          box1.style.left = pagex + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="actionscript">          box1.style.top = pagey + <span class="string">"px"</span>;</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// scroll 函数封装</span></span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">scroll</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//此函数的返回值是对象</span></span></span><br><span class="line"><span class="javascript">          left: <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop,</span></span><br><span class="line">          right:</span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.pageXOffset || <span class="built_in">document</span>.body.scrollLeft || <span class="built_in">document</span>.documentElement.scrollLeft</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"height: 1000px;width: 2000px;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="举例2：获取鼠标距离所在盒子的距离"><a href="#举例2：获取鼠标距离所在盒子的距离" class="headerlink" title="举例2：获取鼠标距离所在盒子的距离"></a>举例2：获取鼠标距离所在盒子的距离</h3><p>关键点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">鼠标距离所在盒子的距离 &#x3D; 鼠标在整个页面的位置 - 所在盒子在整个页面的位置</span><br></pre></td></tr></table></figure>

<p>代码演示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            padding-top: 100px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            margin: 100px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            font: 18px/30px "simsun";</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"animate.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//需求：鼠标进入盒子之后只要移动，哪怕1像素，随时显示鼠标在盒子中的坐标。</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//技术点：新事件，onmousemove：在事件源上，哪怕鼠标移动1像素也会触动这个事件。</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//一定程度上，模拟了定时器</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//步骤：</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//1.老三步和新五步</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//2.获取鼠标在整个页面的位置</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//3.获取盒子在整个页面的位置</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//4.用鼠标的位置减去盒子的位置赋值给盒子的内容。</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//1.老三步和新五步</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    div.onmousemove = <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//2.获取鼠标在整个页面的位置</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> pagex = event.pageX || scroll().left + event.clientX;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> pagey = event.pageY || scroll().top + event.clientY;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//3.获取盒子在整个页面的位置</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// var xx =</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// var yy =</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//4.用鼠标的位置减去盒子的位置赋值给盒子的内容。</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> targetx = pagex - div.offsetLeft;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> targety = pagey - div.offsetTop;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.innerHTML = <span class="string">"鼠标在盒子中的X坐标为："</span> + targetx + <span class="string">"px;&lt;br&gt;鼠标在盒子中的Y坐标为："</span> + targety + <span class="string">"px;"</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="举例3：商品放大镜"><a href="#举例3：商品放大镜" class="headerlink" title="举例3：商品放大镜"></a>举例3：商品放大镜</h3><p>代码实现：</p>
<p>（1）index.html:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 350px;</span><br><span class="line">            height: 350px;</span><br><span class="line">            margin: 100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.big</span> &#123;</span></span><br><span class="line">            width: 400px;</span><br><span class="line">            height: 400px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 360px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">            overflow: hidden;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*mask的中文是：遮罩*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.mask</span> &#123;</span></span><br><span class="line">            width: 175px;</span><br><span class="line">            height: 175px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(255, 255, 0, 0<span class="selector-class">.4</span>);</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            cursor: move;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.small</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        img &#123;</span><br><span class="line">            vertical-align: top;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"tools.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//需求：鼠标放到小盒子上，让大盒子里面的图片和我们同步等比例移动。</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//技术点：onmouseenter==onmouseover 第一个不冒泡</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//技术点：onmouseleave==onmouseout  第一个不冒泡</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//步骤：</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//1.鼠标放上去显示盒子，移开隐藏盒子。</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//2.老三步和新五步（黄盒子跟随移动）</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//3.右侧的大图片，等比例移动。</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//0.获取相关元素</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"box"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> small = box.firstElementChild || box.firstChild;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> big = box.children[<span class="number">1</span>];</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> mask = small.children[<span class="number">1</span>];</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> bigImg = big.children[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//1.鼠标放上去显示盒子，移开隐藏盒子。(为小盒子绑定事件)</span></span></span><br><span class="line"><span class="actionscript">            small.onmouseenter = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//封装好方法调用：显示元素</span></span></span><br><span class="line">                show(mask);</span><br><span class="line">                show(big);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            small.onmouseleave = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//封装好方法调用：隐藏元素</span></span></span><br><span class="line">                hide(mask);</span><br><span class="line">                hide(big);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//2.老三步和新五步（黄盒子跟随移动）</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//绑定的事件是onmousemove，而事件源是small(只要在小盒子上移动1像素，黄盒子也要跟随)</span></span></span><br><span class="line"><span class="actionscript">            small.onmousemove = <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//新五步</span></span></span><br><span class="line"><span class="javascript">                event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">//想要移动黄盒子，必须要知道鼠标在small小图中的位置。</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> pagex = event.pageX || scroll().left + event.clientX;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> pagey = event.pageY || scroll().top + event.clientY;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">//x：mask的left值，y：mask的top值。</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> x = pagex - box.offsetLeft - mask.offsetWidth / <span class="number">2</span>; <span class="comment">//除以2，可以保证鼠标mask的中间</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> y = pagey - box.offsetTop - mask.offsetHeight / <span class="number">2</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">//限制换盒子的范围</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">//left取值为大于0，小盒子的宽-mask的宽。</span></span></span><br><span class="line">                if (x &lt; 0) &#123;</span><br><span class="line">                    x = 0;</span><br><span class="line">                &#125;</span><br><span class="line">                if (x &gt; small.offsetWidth - mask.offsetWidth) &#123;</span><br><span class="line">                    x = small.offsetWidth - mask.offsetWidth;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="comment">//top同理。</span></span></span><br><span class="line">                if (y &lt; 0) &#123;</span><br><span class="line">                    y = 0;</span><br><span class="line">                &#125;</span><br><span class="line">                if (y &gt; small.offsetHeight - mask.offsetHeight) &#123;</span><br><span class="line">                    y = small.offsetHeight - mask.offsetHeight;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">//移动黄盒子</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(small.offsetHeight);</span></span><br><span class="line"><span class="actionscript">                mask.style.left = x + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="actionscript">                mask.style.top = y + <span class="string">"px"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">//3.右侧的大图片，等比例移动。</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">//如何移动大图片？等比例移动。</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">//    大图片/大盒子 = 小图片/mask盒子</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">//    大图片走的距离/mask走的距离 = （大图片-大盒子）/（小图片-黄盒子）</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//                var bili = (bigImg.offsetWidth-big.offsetWidth)/(small.offsetWidth-mask.offsetWidth);</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">//大图片走的距离/mask盒子都的距离 = 大图片/小图片</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> bili = bigImg.offsetWidth / small.offsetWidth;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> xx = bili * x;  <span class="comment">//知道比例，就可以移动大图片了</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> yy = bili * y;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                bigImg.style.marginTop = -yy + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="actionscript">                bigImg.style.marginLeft = -xx + <span class="string">"px"</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/001.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mask"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/0001.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）tools.js:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by smyhvae on 2018/02/03.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//显示和隐藏</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">ele</span>) </span>&#123;</span><br><span class="line">    ele.style.display = <span class="string">"block"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hide</span>(<span class="params">ele</span>) </span>&#123;</span><br><span class="line">    ele.style.display = <span class="string">"none"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scroll</span>(<span class="params"></span>) </span>&#123;  <span class="comment">// 开始封装自己的scrollTop</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.pageYOffset != <span class="literal">null</span>) &#123;  <span class="comment">// ie9+ 高版本浏览器</span></span><br><span class="line">        <span class="comment">// 因为 window.pageYOffset 默认的是  0  所以这里需要判断</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            left: <span class="built_in">window</span>.pageXOffset,</span><br><span class="line">            top: <span class="built_in">window</span>.pageYOffset</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.compatMode === <span class="string">"CSS1Compat"</span>) &#123;    <span class="comment">// 标准浏览器   来判断有没有声明DTD</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            left: <span class="built_in">document</span>.documentElement.scrollLeft,</span><br><span class="line">            top: <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;   <span class="comment">// 未声明 DTD</span></span><br><span class="line">        left: <span class="built_in">document</span>.body.scrollLeft,</span><br><span class="line">        top: <span class="built_in">document</span>.body.scrollTop</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>事件的传播和事件冒泡</title>
    <url>/2020/04/18/32-%E4%BA%8B%E4%BB%B6%E7%9A%84%E4%BC%A0%E6%92%AD%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/</url>
    <content><![CDATA[<hr>
<h2 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h2><p>事件传播的三个阶段是：事件捕获、事件冒泡和目标。</p>
<ul>
<li><p>事件捕获阶段：事件从祖先元素往子元素查找（DOM树结构），直到捕获到事件目标 target。在这个过程中，默认情况下，事件相应的监听函数是不会被触发的。</p>
</li>
<li><p>事件目标：当到达目标元素之后，执行目标元素该事件相应的处理函数。如果没有绑定监听函数，那就不执行。</p>
</li>
<li><p>事件冒泡阶段：事件从事件目标 target 开始，从子元素往祖先元素冒泡，直到页面的最上一级标签。</p>
<a id="more"></a>
<p>如下图所示：</p>
</li>
</ul>
<p><img src="%E6%8D%95%E8%8E%B7%E5%86%92%E6%B3%A1.jpg" alt=""></p>
<h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><p>addEventListener可以捕获事件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">box1.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"捕获 box3"</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p><strong>上面的方法中，参数为true，代表事件在捕获阶段执行</strong>。</p>
<p>代码演示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参数为true，代表事件在「捕获」阶段触发；参数为false或者不写参数，代表事件在「冒泡」阶段触发</span></span><br><span class="line">box3.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"捕获 child"</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">box2.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"捕获 father"</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">box1.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"捕获 grandfather"</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"捕获 body"</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>



<p><strong>重点</strong>：捕获阶段，事件依次传递的顺序是：window –&gt; document –&gt; html–&gt; body –&gt; 父元素、子元素、目标元素。</p>
<p>这几个元素在事件捕获阶段的完整写法是：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"捕获 window"</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"捕获 document"</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.documentElement.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"捕获 html"</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"捕获 body"</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">fatherBox.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"捕获 father"</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">childBox.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"捕获 child"</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>（1）第一个接收到事件的对象是 <strong>window</strong>（有人会说body，有人会说html，这都是错误的）。</p>
<p>（2）JS中涉及到DOM对象时，有两个对象最常用：window、doucument。它们俩是最先获取到事件的。</p>
<p><strong>补充一个知识点：</strong></p>
<p>在 js中：</p>
<ul>
<li><p>如果想获取 <code>html</code>节点，方法是<code>document.documentElement</code>。</p>
</li>
<li><p>如果想获取 <code>body</code> 节点，方法是：<code>document.body</code>。</p>
</li>
</ul>
<p>二者不要混淆了。</p>
<h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p><strong>事件冒泡</strong>: 当一个元素上的事件被触发的时候（比如说鼠标点击了一个按钮），同样的事件将会在那个元素的所有<strong>祖先元素</strong>中被触发。这一过程被称为事件冒泡；这个事件从原始元素开始一直冒泡到DOM树的最上层。</p>
<p>通俗来讲，冒泡指的是：<strong>子元素的事件被触发时，父元素的同样的事件也会被触发</strong>。取消冒泡就是取消这种机制。</p>
<p>代码演示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//事件冒泡</span></span><br><span class="line">box3.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"child"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">box2.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"father"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">box1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"grandfather"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"body"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>上图显示，当我点击子元素 box3 的时候，它的父元素box2、box1、body都依次被触发了。即使我改变代码的顺序，也不会影响效果的顺序。</p>
<p>当然，上面的代码中，我们用 addEventListener 这种 DOM2的写法也是可以的，但是第三个参数要写 false，或者不写。</p>
<p><strong>冒泡顺序</strong>：</p>
<p>一般的浏览器: （除IE6.0之外的浏览器）</p>
<ul>
<li>div -&gt; body -&gt; html -&gt; document -&gt; window</li>
</ul>
<p>IE6.0：</p>
<ul>
<li>div -&gt; body -&gt; html -&gt; document</li>
</ul>
<h3 id="不是所有的事件都能冒泡"><a href="#不是所有的事件都能冒泡" class="headerlink" title="不是所有的事件都能冒泡"></a>不是所有的事件都能冒泡</h3><p>以下事件不冒泡：blur、focus、load、unload、onmouseenter、onmouseleave。意思是，事件不会往父元素那里传递。</p>
<p>我们检查一个元素是否会冒泡，可以通过事件的以下参数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">event.bubbles</span><br></pre></td></tr></table></figure>

<p>如果返回值为true，说明该事件会冒泡；反之则相反。</p>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">box1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"冒泡 child"</span>);</span><br><span class="line"></span><br><span class="line">    event = event || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="built_in">console</span>.log(event.bubbles); <span class="comment">//打印结果：true。说明 onclick 事件是可以冒泡的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="阻止冒泡"><a href="#阻止冒泡" class="headerlink" title="阻止冒泡"></a>阻止冒泡</h2><p>大部分情况下，冒泡都是有益的。当然，如果你想阻止冒泡，也是可以的。可以按下面的方法阻止冒泡。</p>
<h3 id="阻止冒泡的方法"><a href="#阻止冒泡的方法" class="headerlink" title="阻止冒泡的方法"></a>阻止冒泡的方法</h3><p>w3c的方法：（火狐、谷歌、IE11）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">event.stopPropagation();</span><br></pre></td></tr></table></figure>

<p>IE10以下则是：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">event.cancelBubble = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>兼容代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">box3.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">     alert(<span class="string">"child"</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//阻止冒泡</span></span><br><span class="line">     event = event || <span class="built_in">window</span>.event;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (event &amp;&amp; event.stopPropagation) &#123;</span><br><span class="line">         event.stopPropagation();</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>上方代码中，我们对box3进行了阻止冒泡，产生的效果是：事件不会继续传递到 father、grandfather、body了。</p>
<h3 id="阻止冒泡的举例"><a href="#阻止冒泡的举例" class="headerlink" title="阻止冒泡的举例"></a>阻止冒泡的举例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#box1</span> &#123;</span></span><br><span class="line">                width: 100px;</span><br><span class="line">                height: 100px;</span><br><span class="line">                background-color: red;</span><br><span class="line">                /*</span><br><span class="line">        * 开启box1的绝对定位</span><br><span class="line">        */</span><br><span class="line">                position: absolute;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">                /*</span><br><span class="line">                 * 使div可以跟随鼠标移动</span><br><span class="line">                 */</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">//获取box1</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">'box1'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">//给整个页面绑定：鼠标移动事件</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//兼容的方式获取event对象</span></span></span><br><span class="line"><span class="javascript">                    event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 鼠标在页面的位置 = 滚动条滚动的距离 + 可视区域的坐标。</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> pagex = event.pageX || scroll().left + event.clientX;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> pagey = event.pageY || scroll().top + event.clientY;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="comment">//   设置div的偏移量（相对于整个页面）</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 注意，如果想通过 style.left 来设置属性，一定要给 box1 开启绝对定位。</span></span></span><br><span class="line"><span class="actionscript">                    box1.style.left = pagex + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="actionscript">                    box1.style.top = pagey + <span class="string">'px'</span>;</span></span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">// 【重要注释】</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 当 document.onmousemove 和 box2.onmousemove 同时触发时，通过  box2 阻止事件向 document 冒泡。</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 也就是说，只要是在 box2 的区域，就只触发 document.onmousemove 事件</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> box2 = <span class="built_in">document</span>.getElementById(<span class="string">'box2'</span>);</span></span><br><span class="line"><span class="actionscript">                box2.onmousemove = <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//阻止冒泡</span></span></span><br><span class="line"><span class="javascript">                    event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"></span><br><span class="line">                    if (event &amp;&amp; event.stopPropagation) &#123;</span><br><span class="line">                        event.stopPropagation();</span><br><span class="line"><span class="actionscript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                        event.cancelBubble = <span class="literal">true</span>;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// scroll 函数封装</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">scroll</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//此函数的返回值是对象</span></span></span><br><span class="line"><span class="javascript">                    left: <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop,</span></span><br><span class="line"><span class="javascript">                    right: <span class="built_in">window</span>.pageXOffset || <span class="built_in">document</span>.body.scrollLeft || <span class="built_in">document</span>.documentElement.scrollLeft,</span></span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"height: 1000px;width: 2000px;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span> <span class="attr">style</span>=<span class="string">"width: 300px; height: 300px; background-color: #bfa;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>事件委托</title>
    <url>/2020/04/18/33-%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</url>
    <content><![CDATA[<hr>
<h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>事件委托，通俗地来讲，就是把一个元素响应事件（click、keydown……）的函数委托到另一个元素。</p>
<a id="more"></a>
<p>比如说有一个列表 ul，列表之中有大量的列表项 <code>&lt;a&gt;</code>标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"parent-list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"my_link"</span>&gt;</span>超链接一<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"my_link"</span>&gt;</span>超链接二<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"my_link"</span>&gt;</span>超链接三<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当我们的鼠标移到<code>&lt;a&gt;</code>标签上的时候，需要获取此<code>&lt;a&gt;</code>的相关信息并飘出悬浮窗以显示详细信息，或者当某个<code>&lt;a&gt;</code>被点击的时候需要触发相应的处理事件。我们通常的写法，是为每个<code>&lt;a&gt;</code>都绑定类似onMouseOver或者onClick之类的事件监听：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> parentNode = <span class="built_in">document</span>.getElementById(<span class="string">"parent-list"</span>);</span><br><span class="line">    <span class="keyword">var</span> aNodes = parentNode.getElementByTagName(<span class="string">"a"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>, l = aNodes.length; i &lt; l; i++)&#123;</span><br><span class="line"></span><br><span class="line">        aNodes[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'我是超链接 a 的单击相应函数'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是，上面的做法过于消耗内存和性能。<strong>我们希望，只绑定一次事件，即可应用到多个元素上</strong>，即使元素是后来添加的。</p>
<p>因此，比较好的方法就是把这个点击事件绑定到他的父层，也就是 <code>ul</code> 上，然后在执行事件函数的时候再去匹配判断目标元素。如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">// 获取父节点，并为它绑定click单击事件。 false 表示事件在冒泡阶段触发（默认）</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">'parent-list'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="comment">// e.target 表示：触发事件的对象</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//如果触发事件的对象是我们期望的元素，则执行否则不执行</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span> (event.target &amp;&amp; event.target.className == <span class="string">'link'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 或者写成 if (event.target &amp;&amp; event.target.nodeName.toUpperCase() == 'A') &#123;</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">'我是ul的单击响应函数'</span>);</span></span><br><span class="line">                    &#125;</span><br><span class="line"><span class="actionscript">                &#125;, <span class="literal">false</span>);</span></span><br><span class="line">            &#125;;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"parent-list"</span> <span class="attr">style</span>=<span class="string">"background-color: #bfa;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"link"</span>&gt;</span>超链接一<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"link"</span>&gt;</span>超链接二<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"link"</span>&gt;</span>超链接三<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上方代码，为父节点注册 click 事件，当子节点被点击的时候，click事件会从子节点开始<strong>向父节点冒泡</strong>。<strong>父节点捕获到事件</strong>之后，开始执行方法体里的内容：通过判断 event.target 拿到了被点击的子节点<code>&lt;a&gt;</code>。从而可以获取到相应的信息，并作处理。</p>
<p>换而言之，参数为false，说明事件是在冒泡阶段触发（子元素向父元素传递事件）。而父节点注册了事件函数，子节点没有注册事件函数，此时，会在父节点中执行函数体里的代码。</p>
<p><strong>总结</strong>：事件委托是利用了冒泡机制，减少了事件绑定的次数，减少内存消耗，提高性能。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>键盘事件</title>
    <url>/2020/04/18/34-%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<hr>
<h2 id="鼠标的拖拽事件"><a href="#鼠标的拖拽事件" class="headerlink" title="鼠标的拖拽事件"></a>鼠标的拖拽事件</h2><p>拖拽的流程：</p>
<p>（1）<code>onmousedown</code>：当鼠标在被拖拽元素上按下时，开始拖拽；</p>
<p>（2）<code>onmousemove</code>：当鼠标移动时被拖拽元素跟随鼠标移动；</p>
<p>（3）<code>onmouseup</code>：当鼠标松开时，被拖拽元素固定在当前位置。</p>
<a id="more"></a>
<h2 id="鼠标的滚轮事件"><a href="#鼠标的滚轮事件" class="headerlink" title="鼠标的滚轮事件"></a>鼠标的滚轮事件</h2><p><code>onmousewheel</code>：鼠标滚轮滚动的事件，会在滚轮滚动时触发。但是火狐不支持该属性。</p>
<p><code>DOMMouseScroll</code>：在火狐中需要使用 DOMMouseScroll 来绑定滚动事件。注意该事件需要通过addEventListener()函数来绑定。</p>
<h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><h3 id="事件名"><a href="#事件名" class="headerlink" title="事件名"></a>事件名</h3><p><code>onkeydown</code>：按键被按下。</p>
<p><code>onkeyup</code>：按键被松开。</p>
<p><strong>注意</strong>：</p>
<ul>
<li><p>如果一直按着某一个按键不松手，那么，<code>onkeydown</code>事件会一直触发。此时，松开键盘，<code>onkeyup</code>事件会执行一次。</p>
</li>
<li><p>当<code>onkeydown</code>连续触发时，第一次和第二次之间会间隔稍微长一点，后续的间隔会非常快。这种设计是为了防止误操作的发生。</p>
</li>
</ul>
<p>键盘事件一般都会绑定给一些可以获取到焦点的对象或者是document。代码举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'qianguyihao 键盘按下了'</span>);</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.onkeyup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'qianguyihao 键盘松开了'</span>);</span></span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="判断哪个键盘被按下"><a href="#判断哪个键盘被按下" class="headerlink" title="判断哪个键盘被按下"></a>判断哪个键盘被按下</h3><p>可以通过<code>event</code>事件对象的<code>keyCode</code>来获取按键的编码。</p>
<p>此外，<code>event</code>事件对象里面还提供了以下几个属性：</p>
<ul>
<li><p>altKey</p>
</li>
<li><p>ctrlKey</p>
</li>
<li><p>shiftKey</p>
</li>
</ul>
<p>上面这三个属性，可以用来判断<code>alt</code>、<code>ctrl</code>、和<code>shift</code>是否被按下。如果按下则返回true，否则返回false。代码举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'qianguyihao：键盘按下了'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 判断y和ctrl是否同时被按下</span></span></span><br><span class="line">            if (event.ctrlKey &amp;&amp; event.keyCode === 89) &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'ctrl和y都被按下了'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><strong>举例</strong>：input 文本框中，禁止输入数字。代码实现：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//获取input</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> input = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        input.onkeydown = <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//console.log('qianguyihao:' + event.keyCode);</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//数字 48 - 57</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//使文本框中不能输入数字</span></span></span><br><span class="line">            if (event.keyCode &gt;= 48 &amp;&amp; event.keyCode &lt;= 57) &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">//在文本框中输入内容，属于onkeydown的默认行为</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果在onkeydown中取消了默认行为，则输入的内容，不会出现在文本框中</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="举例：通过键盘的方向键，移动盒子"><a href="#举例：通过键盘的方向键，移动盒子" class="headerlink" title="举例：通过键盘的方向键，移动盒子"></a>举例：通过键盘的方向键，移动盒子</h2><p>代码实现：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#box1</span> &#123;</span></span><br><span class="line">                width: 100px;</span><br><span class="line">                height: 100px;</span><br><span class="line">                background-color: red;</span><br><span class="line">                position: absolute;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 使div可以根据不同的方向键向不同的方向移动</span></span></span><br><span class="line">            /*</span><br><span class="line">             * 按左键，div向左移</span><br><span class="line">             * 按右键，div向右移</span><br><span class="line">             * ...</span><br><span class="line">             */</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//为document绑定一个按键按下的事件</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">//定义一个变量，来表示移动的速度</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> speed = <span class="number">10</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">//当用户按了ctrl以后，速度加快</span></span></span><br><span class="line">                if (event.ctrlKey) &#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'smyhvae ctrl'</span>);</span></span><br><span class="line">                    speed = 20;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                /*</span><br><span class="line">                 * 37 左</span><br><span class="line">                 * 38 上</span><br><span class="line">                 * 39 右</span><br><span class="line">                 * 40 下</span><br><span class="line">                 */</span><br><span class="line"><span class="actionscript">                <span class="keyword">switch</span> (event.keyCode) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">case</span> <span class="number">37</span>:</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//alert("向左"); left值减小</span></span></span><br><span class="line"><span class="actionscript">                        box1.style.left = box1.offsetLeft - speed + <span class="string">'px'</span>; <span class="comment">// 在初始值的基础之上，减去 speed 大小</span></span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">case</span> <span class="number">39</span>:</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//alert("向右");</span></span></span><br><span class="line"><span class="actionscript">                        box1.style.left = box1.offsetLeft + speed + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">case</span> <span class="number">38</span>:</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//alert("向上");</span></span></span><br><span class="line"><span class="actionscript">                        box1.style.top = box1.offsetTop - speed + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">case</span> <span class="number">40</span>:</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//alert("向下");</span></span></span><br><span class="line"><span class="actionscript">                        box1.style.top = box1.offsetTop + speed + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">break</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上方代码，待改进的地方：</p>
<p>（1）移动盒子时，如果要加速，需要先按<code>方向键</code>，再按<code>Ctrl键</code>。</p>
<p>（2）首次移动盒子时，动作较慢。后续如果学习了定时器相关的内容，可以再改进。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>定时器typeof和数据类型转换</title>
    <url>/2020/04/18/36-%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
    <content><![CDATA[<hr>
<h2 id="定时器的常见方法"><a href="#定时器的常见方法" class="headerlink" title="定时器的常见方法"></a>定时器的常见方法</h2><ul>
<li><p>setInterval()：循环调用。将一段代码，<strong>每隔一段时间</strong>执行一次。（循环执行）</p>
</li>
<li><p>setTimeout()：延时调用。将一段代码，等待一段时间之后<strong>再执行</strong>。（只执行一次）</p>
<a id="more"></a>
<p>备注：在实际开发中，二者是可以根据需要，互相替代的。</p>
</li>
</ul>
<h2 id="setInterval-的使用"><a href="#setInterval-的使用" class="headerlink" title="setInterval() 的使用"></a>setInterval() 的使用</h2><p><code>setInterval()</code>：循环调用。将一段代码，<strong>每隔一段时间</strong>执行一次。（循环执行）</p>
<p><strong>参数</strong>：</p>
<ul>
<li><p>参数1：回调函数，该函数会每隔一段时间被调用一次。</p>
</li>
<li><p>参数2：每次调用的间隔时间，单位是毫秒。</p>
</li>
</ul>
<p><strong>返回值</strong>：返回一个Number类型的数据。这个数字用来作为定时器的<strong>唯一标识</strong>，方便用来清除定时器。</p>
<h3 id="定义定时器"><a href="#定义定时器" class="headerlink" title="定义定时器"></a>定义定时器</h3><p><strong>方式一：</strong>匿名函数</p>
<p>每间隔一秒，将 数字 加1：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    num ++;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p><strong>方式二：</strong></p>
<p>每间隔一秒，将 数字 加1：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setInterval(fn,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">   num ++;</span><br><span class="line">   <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="清除定时器"><a href="#清除定时器" class="headerlink" title="清除定时器"></a>清除定时器</h3><p><strong>定时器的返回值是作为这个定时器的唯一标识</strong>，可以用来清除定时器。具体方法是：假设定时器setInterval()的返回值是<code>参数1</code>，那么<code>clearInterval(参数1)</code>就可以清除定时器。</p>
<p>setTimeout()的道理是一样的。</p>
<p>代码举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> num = <span class="number">1</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> timer = setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(num);  <span class="comment">//每间隔一秒，打印一次num的值</span></span></span><br><span class="line">        num ++;</span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(num === <span class="number">5</span>) &#123;  <span class="comment">//打印四次之后，就清除定时器</span></span></span><br><span class="line">            clearInterval(timer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;, 1000);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="setTimeout-的使用"><a href="#setTimeout-的使用" class="headerlink" title="setTimeout() 的使用"></a>setTimeout() 的使用</h2><p><code>setTimeout()</code>：延时调用。将一段代码，等待一段时间之后<strong>再执行</strong>。（只执行一次）</p>
<p><strong>参数</strong>：</p>
<ul>
<li><p>参数1：回调函数，该函数会每隔一段时间被调用一次。</p>
</li>
<li><p>参数2：每次调用的间隔时间，单位是毫秒。</p>
</li>
</ul>
<p><strong>返回值</strong>：返回一个Number类型的数据。这个数字用来作为定时器的<strong>唯一标识</strong>，方便用来清除定时器。</p>
<h3 id="定义和清除定时器"><a href="#定义和清除定时器" class="headerlink" title="定义和清除定时器"></a>定义和清除定时器</h3><p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>); <span class="comment">// 3秒之后，再执行这段代码。</span></span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">clearTimeout(timer);</span><br></pre></td></tr></table></figure>

<p>代码举例：（箭头函数写法）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>); <span class="comment">// 3秒之后，再执行这段代码。</span></span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure>


<h3 id="setTimeout-举例：5秒后关闭网页两侧的广告栏"><a href="#setTimeout-举例：5秒后关闭网页两侧的广告栏" class="headerlink" title="setTimeout() 举例：5秒后关闭网页两侧的广告栏"></a>setTimeout() 举例：5秒后关闭网页两侧的广告栏</h3><p>假设网页两侧的广告栏为两个img标签，它们的样式为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>5秒后关闭广告栏的js代码为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//获取相关元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> imgArr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//设置定时器：5秒后关闭两侧的广告栏</span></span></span><br><span class="line">        setTimeout(fn,5000);</span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            imgArr[<span class="number">0</span>].style.display = <span class="string">"none"</span>;</span></span><br><span class="line"><span class="actionscript">            imgArr[<span class="number">1</span>].style.display = <span class="string">"none"</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>BOM简介</title>
    <url>/2020/04/18/35-BOM%E7%AE%80%E4%BB%8B%E5%92%8Cnavigator.userAgent&amp;History&amp;Location/</url>
    <content><![CDATA[<hr>
<h2 id="常见概念"><a href="#常见概念" class="headerlink" title="常见概念"></a>常见概念</h2><h3 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h3><p>JavaScript基础分为三个部分：</p>
<ul>
<li><p>ECMAScript：JavaScript的语法标准。包括变量、表达式、运算符、函数、if语句、for语句等。</p>
</li>
<li><p><strong>DOM</strong>：文档对象模型（Document object Model），操作<strong>网页上的元素</strong>的API。比如让盒子移动、变色、轮播图等。</p>
</li>
<li><p><strong>BOM</strong>：浏览器对象模型（Browser Object Model），操作<strong>浏览器部分功能</strong>的API。比如让浏览器自动滚动。</p>
<a id="more"></a>
<h3 id="常见的-BOM-对象"><a href="#常见的-BOM-对象" class="headerlink" title="常见的 BOM 对象"></a>常见的 BOM 对象</h3></li>
</ul>
<p>BOM可以让我们通过JS来操作浏览器。BOM中为我们提供了一些对象，来完成对浏览器相关的操作。</p>
<p>常见的 BOM对象有：</p>
<ul>
<li><p>Window：代表整个浏览器的窗口，同时 window 也是网页中的全局对象。</p>
</li>
<li><p>Navigator：代表当前浏览器的信息，通过该对象可以识别不同的浏览器。</p>
</li>
<li><p>Location：代表当前浏览器的地址栏信息，通过 Location 可以获取地址栏信息，或者操作浏览器跳转页面。</p>
</li>
<li><p>History：代表浏览器的历史记录，通过该对象可以操作浏览器的历史记录。由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页，而且该操作只在当次访问时有效。</p>
</li>
<li><p>Screen：代表用户的屏幕信息，通过该对象可以获取用户的显示器的相关信息。</p>
</li>
</ul>
<p>备注：这些 BOM 对象都是作为 window 对象的属性保存的，可以通过window对象来使用，也可以直接使用。比如说，我可以使用 <code>window.location.href</code>，也可以直接使用 <code>location.href</code>，二者是等价的。</p>
<p>备注2：不要忘了，之前学习过的<code>document</code>也是在<code>window</code>中保存的。</p>
<p>这篇文章，我们先来讲一下 几个常见的 BOM 对象。</p>
<h2 id="Navigator-和-navigator-userAgent"><a href="#Navigator-和-navigator-userAgent" class="headerlink" title="Navigator 和 navigator.userAgent"></a>Navigator 和 <code>navigator.userAgent</code></h2><p><code>Navigator</code>代表当前浏览器的信息，通过该对象可以识别不同的浏览器。</p>
<p>由于历史原因，Navigator对象中的大部分属性都已经不能帮助我们识别浏览器了。</p>
<p><strong>一般我们只会使用<code>navigator.userAgent</code>来获取浏览器的信息</strong>。</p>
<p>userAgent 的值是一个字符串，简称 <strong>UA</strong>，这个字符串中包含了用来描述浏览器信息的内容，不同的浏览器会有不同的userAgent。</p>
<p><strong>代码举例</strong>：（获取当前浏览器的UA）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> ua = navigator.userAgent; <span class="comment">// 获取当前浏览器的 userAgent</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'qianguyihao 当前浏览器的UA是：'</span> + ua);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="regexp">/firefox/i</span>.test(ua)) &#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">'是火狐浏览器'</span>);</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/chrome/i</span>.test(ua)) &#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">'是Chrome浏览器'</span>);</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/msie/i</span>.test(ua)) &#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">'是IE浏览器'</span>);</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'ActiveXObject'</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">'是 IE11 浏览器'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="在电脑上模拟移动端浏览器"><a href="#在电脑上模拟移动端浏览器" class="headerlink" title="在电脑上模拟移动端浏览器"></a>在电脑上模拟移动端浏览器</h3><p>不同浏览器（包括微信内置的浏览器）的 userAgent 信息，是不一样的，我们可以根据 <code>navigator.userAgent</code>属性来获取。</p>
<p>比如说，我们在电脑浏览器上，按F12，然后在控制台输入<code>navigator.userAgent</code>，</p>
<p>MacOS上的Chrome浏览器的 userAgent 是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;66.0.3359.117 Safari&#x2F;537.36&quot;</span><br></pre></td></tr></table></figure>

<p>我们还可以在电脑浏览器的控制台里可以添加很多设备，通过这种方式，可以模拟移动端浏览器的场景，非常有用，请务必掌握。操作如下：</p>
<p>（1）需要点击 edit，手动添加：</p>
<p>（2）添加时，根据 User agent 来识别不同的浏览器：</p>
<h3 id="不同浏览器的-userAgent"><a href="#不同浏览器的-userAgent" class="headerlink" title="不同浏览器的 userAgent"></a>不同浏览器的 userAgent</h3><p>iOS 版微信浏览器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mozilla&#x2F;5.0 (iPhone; CPU iPhone OS 9_3 like Mac OS X) AppleWebKit&#x2F;601.1.46 (KHTML, like Gecko) Mobile&#x2F;13E233 MicroMessenger&#x2F;6.3.15 NetType&#x2F;WIFI Language&#x2F;zh_CN</span><br></pre></td></tr></table></figure>

<p>Android 版微信浏览器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mozilla&#x2F;5.0 (Linux; Android 5.0.1; GT-I9502 Build&#x2F;LRX22C; wv) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Version&#x2F;4.0 Chrome&#x2F;43.0.2357.121 Mobile Safari&#x2F;537.36 MicroMessenger&#x2F;6.1.0.78_r1129455.543 NetType&#x2F;WIFI</span><br></pre></td></tr></table></figure>

<p>iOS 版本QQ浏览器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mozilla&#x2F;5.0 (iPhone; CPU iPhone OS 11_2_2 like Mac OS X) AppleWebKit&#x2F;604.4.7 (KHTML, like Gecko) Mobile&#x2F;15C202 QQ&#x2F;7.3.5.473 V1_IPH_SQ_7.3.5_1_APP_A Pixel&#x2F;1125 Core&#x2F;UIWebView Device&#x2F;Apple(iPhone X) NetType&#x2F;WIFI QBWebViewType&#x2F;1</span><br></pre></td></tr></table></figure>

<p>Android 版 QQ浏览器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mozilla&#x2F;5.0 (Linux; Android 4.4.2; PE-TL20 Build&#x2F;HuaweiPE-TL20; wv) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Version&#x2F;4.0 Chrome&#x2F;57.0.2987.132 MQQBrowser&#x2F;6.2 TBS&#x2F;043807 Mobile Safari&#x2F;537.36 V1_AND_SQ_7.3.2_762_YYB_D QQ&#x2F;7.3.2.3350 NetType&#x2F;WIFI WebP&#x2F;0.3.0 Pixel&#x2F;1080</span><br></pre></td></tr></table></figure>


<p><strong>参考链接</strong>：</p>
<ul>
<li><p><a href="https://blog.csdn.net/taambernk520/article/details/80801574" target="_blank" rel="noopener">微信、QQ在Android和iOS的UserAgent</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/7z7chn/p/5370352.html" target="_blank" rel="noopener">判断微信内置浏览器的UserAgent</a></p>
</li>
<li><p><a href="https://gist.github.com/wjp2013/fff34c063cf0cf227d65" target="_blank" rel="noopener">微信内置浏览器UserAgent的判断</a></p>
</li>
</ul>
<h2 id="History-对象"><a href="#History-对象" class="headerlink" title="History 对象"></a>History 对象</h2><p>History对象：可以用来操作浏览器的向前或向后翻页。</p>
<h3 id="History对象的属性"><a href="#History对象的属性" class="headerlink" title="History对象的属性"></a>History对象的属性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">history.length</span><br></pre></td></tr></table></figure>

<p>解释：获取浏览器历史列表中的 url 数量。注意，只是统计当次的数量，如果浏览器关了，数量会重置为1。</p>
<h3 id="History对象的方法"><a href="#History对象的方法" class="headerlink" title="History对象的方法"></a>History对象的方法</h3><p><strong>方法1</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">history.back();</span><br></pre></td></tr></table></figure>

<p>解释：用来回退到上一个页面，作用和浏览器的「回退按钮」一样。</p>
<p><strong>方法2</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">history.forward();</span><br></pre></td></tr></table></figure>

<p>解释：用来跳转下一个页面，作用和浏览器的「前进按钮」一样。</p>
<p><strong>方法3</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">history.go( int n);  <span class="comment">// 需要整数作为参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码举例：</span></span><br><span class="line">history.go( <span class="number">1</span> ); <span class="comment">// 向前跳转一个页面，相当于 history.forward()</span></span><br><span class="line"></span><br><span class="line">history.go( <span class="number">2</span> ); <span class="comment">// 表示向前跳转两个页面</span></span><br><span class="line"></span><br><span class="line">history.go( <span class="number">0</span> ); <span class="comment">// 刷新当前页面</span></span><br><span class="line"></span><br><span class="line">history.go( <span class="number">-1</span> ); <span class="comment">// 向后跳转一个页面，相当于 history.back()</span></span><br><span class="line"></span><br><span class="line">history.go( <span class="number">-2</span> ); <span class="comment">// 向后跳转两个页面</span></span><br></pre></td></tr></table></figure>

<p>解释：向前/向后跳转 n 个页面。</p>
<h2 id="Location-对象"><a href="#Location-对象" class="headerlink" title="Location 对象"></a>Location 对象</h2><p>Location 对象：封装了浏览器地址栏的 URL 信息。</p>
<p>下面介绍一些常见的属性和方法。</p>
<h3 id="Location-对象的属性"><a href="#Location-对象的属性" class="headerlink" title="Location 对象的属性"></a>Location 对象的属性</h3><p><strong>属性1</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location.href</span><br><span class="line"></span><br><span class="line">location.href &#x3D; &#39;https:&#x2F;&#x2F;xxx&#39;;</span><br></pre></td></tr></table></figure>

<p>解释：获取当前页面的 url 路径（或者设置 url 路径）。</p>
<p>代码举例1：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(location.href); <span class="comment">// 获取当前页面的url 路径</span></span><br></pre></td></tr></table></figure>

<p>代码举例2：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">location.href = <span class="string">'www.baidu.com'</span>; <span class="comment">// 跳转到指定的页面链接。通俗理解就是：跳转到其他的页面</span></span><br></pre></td></tr></table></figure>

<p>从上方的<strong>举例2</strong>中可以看出：如果直接将<code>location.href</code>属性修改为一个绝对路径（或相对路径），则页面会自动跳转到该路径，并生成相应的历史记录。</p>
<h3 id="Location-对象的方法"><a href="#Location-对象的方法" class="headerlink" title="Location 对象的方法"></a>Location 对象的方法</h3><p><strong>方法1</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">location.assign(str);</span><br></pre></td></tr></table></figure>

<p>解释：用来跳转到其他的页面，作用和直接修改<code>location.href</code>一样。</p>
<p><strong>方法2</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">location.reload();</span><br></pre></td></tr></table></figure>

<p>解释：用于重新加载当前页面，作用和刷新按钮一样。</p>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">location.reload(); <span class="comment">// 重新加载当前页面。</span></span><br><span class="line">location.reload(<span class="literal">true</span>); <span class="comment">// 在方法的参数中传递一个true，则会强制清空缓存刷新页面。</span></span><br></pre></td></tr></table></figure>

<p><strong>方法3</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">location.replace();</span><br></pre></td></tr></table></figure>

<p>解释：使用一个新的页面替换当前页面，调用完毕也会跳转页面。但不会生成历史记录，不能使用「后退按钮」后退。</p>
<h3 id="hash和history的区别"><a href="#hash和history的区别" class="headerlink" title="hash和history的区别"></a>hash和history的区别</h3><blockquote>
<p>为什么要有 hash 和 history？</p>
</blockquote>
<blockquote>
<p>对于 Vue 这类渐进式前端开发框架，为了构建 SPA（单页面应用），需要引入前端路由系统，这也就是 Vue-Router 存在的意义。前端路由的核心，就在于 —— 改变视图的同时不会向后端发出请求。</p>
</blockquote>
<p>为了达到这一目的，浏览器当前提供了以下两种支持：</p>
<ul>
<li><p>hash —— 即地址栏 URL 中的 # 符号（此 hash 不是密码学里的散列运算）。</p>
<blockquote>
<p>比如这个 URL：<a href="http://www.abc.com/#/hello，hash" target="_blank" rel="noopener">http://www.abc.com/#/hello，hash</a> 的值为 #/hello。它的特点在于：hash 虽然出现在 URL 中，但不会被包括在 HTTP 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面。</p>
</blockquote>
</li>
<li><p>history —— 利用了 HTML5 History Interface 中新增的 pushState() 和 replaceState() 方法。（需要特定浏览器支持）</p>
<blockquote>
<p>这两个方法应用于浏览器的历史记录栈，在当前已有的 back、forward、go 的基础之上，它们提供了对历史记录进行修改的功能。只是当它们执行修改时，虽然改变了当前的 URL，但浏览器不会立即向后端发送请求。</p>
</blockquote>
</li>
<li><p>因此可以说，hash 模式和 history 模式都属于浏览器自身的特性，Vue-Router 只是利用了这两个特性（通过调用浏览器提供的接口）来实现前端路由。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>BOM的常见内置方法和内置对象</title>
    <url>/2020/04/18/37-BOM%E7%9A%84%E5%B8%B8%E8%A7%81%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95%E5%92%8C%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<hr>
<h2 id="BOM的介绍"><a href="#BOM的介绍" class="headerlink" title="BOM的介绍"></a>BOM的介绍</h2><h3 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h3><p>JavaScript基础分为三个部分：</p>
<ul>
<li><p>ECMAScript：JavaScript的语法标准。包括变量、表达式、运算符、函数、if语句、for语句等。</p>
</li>
<li><p><strong>DOM</strong>：文档对象模型，操作<strong>网页上的元素</strong>的API。比如让盒子移动、变色、轮播图等。</p>
</li>
<li><p><strong>BOM</strong>：浏览器对象模型，操作<strong>浏览器部分功能</strong>的API。比如让浏览器自动滚动。</p>
<a id="more"></a>
<h3 id="什么是BOM"><a href="#什么是BOM" class="headerlink" title="什么是BOM"></a>什么是BOM</h3></li>
</ul>
<p>BOM：Browser Object Model，浏览器对象模型。</p>
<p><strong>BOM的结构：</strong></p>
<ul>
<li><p><strong>window对象是BOM的顶层(核心)对象</strong>，所有对象都是通过它延伸出来的，也可以称为window的子对象。</p>
</li>
<li><p>DOM是BOM的一部分。</p>
</li>
</ul>
<p><strong>window对象：</strong></p>
<ul>
<li><p><strong>window对象是JavaScript中的顶级对象</strong>。</p>
</li>
<li><p>全局变量、自定义函数也是window对象的属性和方法。</p>
</li>
<li><p>window对象下的属性和方法调用时，可以省略window。</p>
</li>
</ul>
<p>下面讲一下 <strong>BOM 的常见内置方法和内置对象</strong>。</p>
<h2 id="弹出系统对话框"><a href="#弹出系统对话框" class="headerlink" title="弹出系统对话框"></a>弹出系统对话框</h2><p>比如说，<code>alert(1)</code>是<code>window.alert(1)</code>的简写，因为它是window的子方法。</p>
<p>系统对话框有三种：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert();	<span class="comment">//不同浏览器中的外观是不一样的</span></span><br><span class="line">confirm();  <span class="comment">//兼容不好</span></span><br><span class="line">prompt();	<span class="comment">//不推荐使用</span></span><br></pre></td></tr></table></figure>

<h2 id="打开窗口、关闭窗口"><a href="#打开窗口、关闭窗口" class="headerlink" title="打开窗口、关闭窗口"></a>打开窗口、关闭窗口</h2><p>1、打开窗口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.open(url,target,param)</span><br></pre></td></tr></table></figure>

<p><strong>参数解释：</strong></p>
<ul>
<li><p>url：要打开的地址。</p>
</li>
<li><p>target：新窗口的位置。可以是：<code>_blank</code> 、<code>_self</code>、 <code>_parent</code> 父框架。</p>
</li>
<li><p>param：新窗口的一些设置。</p>
</li>
<li><p>返回值：新窗口的句柄。</p>
</li>
</ul>
<p><strong>param</strong>这个参数，可以填各种各样的参数（），比如：</p>
<ul>
<li><p>name：新窗口的名称，可以为空</p>
</li>
<li><p>features：属性控制字符串，在此控制窗口的各种属性，属性之间以逗号隔开。</p>
</li>
<li><p>fullscreen= { yes/no/1/0 } 是否全屏，默认no</p>
</li>
<li><p>channelmode= { yes/no/1/0 } 是否显示频道栏，默认no</p>
</li>
<li><p>toolbar= { yes/no/1/0 } 是否显示工具条，默认no</p>
</li>
<li><p>location= { yes/no/1/0 } 是否显示地址栏，默认no。（有的浏览器不一定支持）</p>
</li>
<li><p>directories = { yes/no/1/0 } 是否显示转向按钮，默认no</p>
</li>
<li><p>status= { yes/no/1/0 } 是否显示窗口状态条，默认no</p>
</li>
<li><p>menubar= { yes/no/1/0 } 是否显示菜单，默认no</p>
</li>
<li><p>scrollbars= { yes/no/1/0 } 是否显示滚动条，默认yes</p>
</li>
<li><p>resizable= { yes/no/1/0 } 是否窗口可调整大小，默认no</p>
</li>
<li><p>width=number 窗口宽度（像素单位）</p>
</li>
<li><p>height=number 窗口高度（像素单位）</p>
</li>
<li><p>top=number 窗口离屏幕顶部距离（像素单位）</p>
</li>
<li><p>left=number 窗口离屏幕左边距离（像素单位）</p>
</li>
</ul>
<p>各个参数之间用逗号隔开就行，但我们最好是把它们统一放到json里。</p>
<p>2、关闭窗口：window.close()</p>
<p>（1）和（2）的代码举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>点击我打开一个新的页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>点击我关闭本页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//新窗口 = window.open(地址,是否开新窗口,新窗口的各种参数);</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a2 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>)[<span class="number">1</span>];</span></span><br><span class="line"><span class="actionscript">    a1.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//举例1： window.open("http://www.jx.com","_blank");</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> json = &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="string">"name"</span>: <span class="string">"helloworld"</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="string">"fullscreen"</span>: <span class="string">"no"</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="string">"location"</span>: <span class="string">"no"</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="string">"width"</span>: <span class="string">"100px"</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="string">"height"</span>: <span class="string">"100px"</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="string">"top"</span>: <span class="string">"100px"</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="string">"left"</span>: <span class="string">"100px"</span></span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.open(<span class="string">"http://www.baidu.com"</span>, <span class="string">"_blank"</span>, json); <span class="comment">//举例2</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//关闭本页面</span></span></span><br><span class="line"><span class="actionscript">    a2.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.close();</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、新窗口相关：</p>
<ul>
<li><p>新窗口.moveTo(5,5)</p>
</li>
<li><p>新窗口.moveBy()</p>
</li>
<li><p>新窗口.resizeTo()</p>
</li>
<li><p>window.resizeBy()</p>
</li>
</ul>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newWin = <span class="built_in">window</span>.open(<span class="string">"demo.html"</span>, <span class="string">"_blank"</span>, json);</span><br><span class="line">newWin.moveTo(<span class="number">500</span>, <span class="number">500</span>);</span><br></pre></td></tr></table></figure>


<h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><p><code>window.location</code>可以简写成location。location相当于浏览器地址栏，可以将url解析成独立的片段。</p>
<h3 id="location对象的属性"><a href="#location对象的属性" class="headerlink" title="location对象的属性"></a>location对象的属性</h3><ul>
<li><p><strong>href</strong>：跳转</p>
</li>
<li><p>hash   返回url中#后面的内容，包含#</p>
</li>
<li><p>host    主机名，包括端口</p>
</li>
<li><p>hostname   主机名</p>
</li>
<li><p>pathname     url中的路径部分</p>
</li>
<li><p>protocol    协议 一般是http、https</p>
</li>
<li><p>search         查询字符串</p>
</li>
</ul>
<p><strong>location.href属性举例</strong>：</p>
<p><strong>举例1：</strong>点击盒子时，进行跳转。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>smyhvae<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    div.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        location.href = <span class="string">"http://www.baidu.com"</span>;   <span class="comment">//点击div时，跳转到指定链接</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">//     window.open("http://www.baidu.com","_blank");  //方式二</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>举例2：5秒后自动跳转到百度</strong>。</p>
<p>有时候，当我们访问一个不存在的网页时，会提示5秒后自动跳转到指定页面，此时就可以用到location。举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        location.href = <span class="string">"http://www.baidu.com"</span>;</span></span><br><span class="line">    &#125;, 5000);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="location对象的方法"><a href="#location对象的方法" class="headerlink" title="location对象的方法"></a>location对象的方法</h3><ul>
<li>location.assign()：改变浏览器地址栏的地址，并记录到历史中</li>
</ul>
<p>设置location.href  就会调用assign()。一般使用location.href 进行页面之间的跳转。</p>
<ul>
<li><p>location.replace()：替换浏览器地址栏的地址，不会记录到历史中</p>
</li>
<li><p>location.reload()：重新加载</p>
</li>
</ul>
<h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><p>window.navigator 的一些属性可以获取客户端的一些信息。</p>
<ul>
<li><p>userAgent：系统，浏览器)</p>
</li>
<li><p>platform：浏览器支持的系统，win/mac/linux</p>
</li>
</ul>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(navigator.userAgent);</span><br><span class="line"><span class="built_in">console</span>.log(navigator.platform);</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>创建对象</title>
    <url>/2020/04/18/38-%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<hr>
<h2 id="创建对象的几种方式"><a href="#创建对象的几种方式" class="headerlink" title="创建对象的几种方式"></a>创建对象的几种方式</h2><h3 id="方式一、通过Object"><a href="#方式一、通过Object" class="headerlink" title="方式一、通过Object"></a>方式一、通过Object</h3><a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>01_Object构造函数模式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">方式一: Object构造函数模式</span></span><br><span class="line"><span class="comment">  * 套路: 先创建空Object对象, 再动态添加属性/方法</span></span><br><span class="line"><span class="comment">  * 适用场景: 起始时不确定对象内部数据</span></span><br><span class="line"><span class="comment">  * 问题: 语句太多</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line"><span class="actionscript">    一个人: name:<span class="string">"Tom"</span>, age: <span class="number">12</span></span></span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="comment">// 先创建空Object对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Object</span>()</span></span><br><span class="line"><span class="actionscript">    p = &#123;&#125; <span class="comment">//此时内部数据是不确定的</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 再动态添加属性/方法</span></span></span><br><span class="line"><span class="actionscript">    p.name = <span class="string">'Tom'</span></span></span><br><span class="line">    p.age = 12</span><br><span class="line"><span class="actionscript">    p.setName = <span class="function"><span class="keyword">function</span> <span class="params">(name)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.name = name</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//测试</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(p.name, p.age)</span></span><br><span class="line"><span class="actionscript">    p.setName(<span class="string">'Bob'</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(p.name, p.age)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="方式二：对象字面量"><a href="#方式二：对象字面量" class="headerlink" title="方式二：对象字面量"></a>方式二：对象字面量</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>02_对象字面量<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">方式二: 对象字面量模式</span></span><br><span class="line"><span class="comment">  * 套路: 使用&#123;&#125;创建对象, 同时指定属性/方法</span></span><br><span class="line"><span class="comment">  * 适用场景: 起始时对象内部数据是确定的</span></span><br><span class="line"><span class="comment">  * 问题: 如果创建多个对象, 有重复代码</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> p = &#123;</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">'Tom'</span>,</span></span><br><span class="line">        age: 12,</span><br><span class="line"><span class="actionscript">        setName: <span class="function"><span class="keyword">function</span> <span class="params">(name)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.name = name</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//测试</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(p.name, p.age)</span></span><br><span class="line"><span class="actionscript">    p.setName(<span class="string">'JACK'</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(p.name, p.age)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> p2 = &#123;  <span class="comment">//如果创建多个对象代码很重复</span></span></span><br><span class="line"><span class="actionscript">        name: <span class="string">'Bob'</span>,</span></span><br><span class="line">        age: 13,</span><br><span class="line"><span class="actionscript">        setName: <span class="function"><span class="keyword">function</span> <span class="params">(name)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.name = name</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="方式三：工厂模式"><a href="#方式三：工厂模式" class="headerlink" title="方式三：工厂模式"></a>方式三：工厂模式</h3><ul>
<li>方式：通过工厂函数动态创建对象并返回。</li>
</ul>
<p>返回一个对象的函数，就是<strong>工厂函数</strong>。</p>
<ul>
<li><p>适用场景: 需要创建多个对象。</p>
</li>
<li><p>问题: 对象没有一个具体的类型，都是Object类型。</p>
</li>
</ul>
<p>由于这个问题的存在，工厂模式用得不多。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>03_工厂模式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">方式三: 工厂模式</span></span><br><span class="line"><span class="comment">  * 套路: 通过工厂函数动态创建对象并返回</span></span><br><span class="line"><span class="comment">  * 适用场景: 需要创建多个对象</span></span><br><span class="line"><span class="comment">  * 问题: 对象没有一个具体的类型, 都是Object类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">createPerson</span><span class="params">(name, age)</span> </span>&#123; <span class="comment">//返回一个对象的函数===&gt;工厂函数</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> obj = &#123;</span></span><br><span class="line">            name: name,</span><br><span class="line">            age: age,</span><br><span class="line"><span class="actionscript">            setName: <span class="function"><span class="keyword">function</span> <span class="params">(name)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.name = name</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> obj</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 创建2个人</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> p1 = createPerson(<span class="string">'Tom'</span>, <span class="number">12</span>)</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> p2 = createPerson(<span class="string">'Bob'</span>, <span class="number">13</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// p1/p2是Object类型</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">createStudent</span><span class="params">(name, price)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> obj = &#123;</span></span><br><span class="line">            name: name,</span><br><span class="line">            price: price</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> obj</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> s = createStudent(<span class="string">'张三'</span>, <span class="number">12000</span>)</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// s也是Object</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="方式四：自定义构造函数"><a href="#方式四：自定义构造函数" class="headerlink" title="方式四：自定义构造函数"></a>方式四：自定义构造函数</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>04_自定义构造函数模式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">方式四: 自定义构造函数模式</span></span><br><span class="line"><span class="comment">  * 套路: 自定义构造函数, 通过new创建对象</span></span><br><span class="line"><span class="comment">  * 适用场景: 需要创建多个类型确定的对象</span></span><br><span class="line"><span class="comment">  * 问题: 每个对象都有相同的数据, 浪费内存</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//定义类型</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name, age)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.name = name</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.age = age</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span> <span class="params">(name)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.name = name</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'Tom'</span>, <span class="number">12</span>)</span></span><br><span class="line"><span class="actionscript">    p1.setName(<span class="string">'Jack'</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(p1.name, p1.age)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> Person)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span><span class="params">(name, price)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.name = name</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.price = price</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> s = <span class="keyword">new</span> Student(<span class="string">'Bob'</span>, <span class="number">13000</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(s <span class="keyword">instanceof</span> Student)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'JACK'</span>, <span class="number">23</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(p1, p2)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>方式四引入了继承。</p>
<h3 id="方式五、原型创建对象模式"><a href="#方式五、原型创建对象模式" class="headerlink" title="方式五、原型创建对象模式"></a>方式五、原型创建对象模式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Person()&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.name &#x3D; &#39;Nike&#39;;</span><br><span class="line">Person.prototype.age &#x3D; 20;</span><br><span class="line">Person.prototype.jbo &#x3D; &#39;teacher&#39;;</span><br><span class="line">Person.prototype.sayName &#x3D; function()&#123; alert(this.name);&#125;;</span><br><span class="line"></span><br><span class="line">var person1 &#x3D; new Person();</span><br><span class="line">person1.sayName();</span><br></pre></td></tr></table></figure>
<p>复制代码使用原型创建对象的方式，可以让所有对象实例共享它所包含的属性和方法。如果是使用原型创建对象模式，请看下面代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Person()&#123;&#125;</span><br><span class="line">Person.prototype.name &#x3D; &#39;Nike&#39;;</span><br><span class="line">Person.prototype.age &#x3D; 20;</span><br><span class="line">Person.prototype.jbo &#x3D; &#39;teacher&#39;;</span><br><span class="line">Person.prototype.sayName &#x3D; function()</span><br><span class="line">&#123; alert(this.name);&#125;;</span><br><span class="line">var person1 &#x3D; new Person();</span><br><span class="line">var person2 &#x3D; new Person();</span><br><span class="line">person1.name &#x3D;&#39;Greg&#39;;alert(person1.name); </span><br><span class="line">&#x2F;&#x2F;&#39;Greg&#39; --来自实例alert(person2.name); &#x2F;&#x2F;&#39;Nike&#39; --来自原型</span><br></pre></td></tr></table></figure>
<p>复制代码前面的例子中，每添加一个属性和方法都要敲一遍Person.prototype。为减少不必要的输入，从视觉上更好封装原型的功能。常见的做法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Person()&#123;&#125;</span><br><span class="line">Person.prototype&#x3D;&#123;</span><br><span class="line">name:&quot;NIke&quot;,</span><br><span class="line">age:11,</span><br><span class="line">sayName:function()&#123;</span><br><span class="line">alert(this.name);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们将Person.prototype设置为等于一个以对象字面量形式创建新对象，最终结果相同，但有一个例外：constructor属性不在指向Person了。原型prototype</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>浅拷贝和深拷贝</title>
    <url>/2020/04/18/39-%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<hr>
<p>深拷贝和浅拷贝是只针对 Object 和 Array 这样的复杂类型的。</p>
<a id="more"></a>
<h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>对于对象或数组类型，当我们将a赋值给b，然后更改b中的属性，a也会随着变化。</p>
<p>也就是说，a和b指向了同一块堆内存，所以修改其中任意的值，另一个值都会随之变化，这就是浅拷贝。</p>
<h2 id="浅拷贝的实现"><a href="#浅拷贝的实现" class="headerlink" title="浅拷贝的实现"></a>浅拷贝的实现</h2><ol>
<li><p><strong><code>=</code></strong></p>
</li>
<li><p><code>Object.assign()</code></p>
</li>
</ol>
<p>在 MDN 上介绍 <code>Object.assign()</code>：”<code>Object.assign()</code> 方法用于将所有可枚举的属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。”复制一个对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var target &#x3D; &#123;a: 1, b: 1&#125;;</span><br><span class="line">var copy1 &#x3D; &#123;a: 2, b: 2, c: &#123;ca: 21, cb: 22, cc: 23&#125;&#125;;</span><br><span class="line">var copy2 &#x3D; &#123;c: &#123;ca: 31, cb: 32, cd: 34&#125;&#125;;</span><br><span class="line"></span><br><span class="line">var result &#x3D; Object.assign(target, copy1, copy2);</span><br><span class="line">console.log(target);    &#x2F;&#x2F; &#123;a: 2, b: 2, c: &#123;ca: 31, cb: 32, cc: 33&#125;&#125;</span><br><span class="line">console.log(target &#x3D;&#x3D;&#x3D; result);    &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>
<p>可以看到，<code>Object.assign()</code>拷贝的只是属性值，假如源对象的属性值是一个指向对象的引用，它也只拷贝那个引用值。所以 <code>Object.assign()</code> 只能用于浅拷贝或是合并对象。这是 <code>Object.assign()</code> 值得注意的地方。</p>
<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>那么相应的，如果给b放到新的内存中，将a的各个属性都复制到新内存里，就是深拷贝。</p>
<p>也就是说，当b中的属性有变化的时候，a内的属性不会发生变化。</p>
<h2 id="深拷贝的实现"><a href="#深拷贝的实现" class="headerlink" title="深拷贝的实现"></a>深拷贝的实现</h2><ol>
<li><strong><code>jQuery.extend()</code></strong></li>
</ol>
<blockquote>
<p>说到深拷贝，第一想到的就是 <code>jQuery.extend()</code>方法，下面我们简单看下 <code>jQuery.extend()</code>的使用。</p>
</blockquote>
<p><code>jQuery.extend( [deep ], target, object1 [, objectN ] )</code>，其中 <code>deep</code> 为 <code>Boolean</code> 类型，如果是 <code>true</code>，则进行深拷贝。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var target &#x3D; &#123;a: 1, b: 1&#125;;</span><br><span class="line">var copy1 &#x3D; &#123;a: 2, b: 2, c: &#123;ca: 21, cb: 22, cc: 23&#125;&#125;;</span><br><span class="line">var copy2 &#x3D; &#123;c: &#123;ca: 31, cb: 32, cd: 34&#125;&#125;;</span><br><span class="line">var result &#x3D; $.extend(true, target, copy1, copy2);   &#x2F;&#x2F; 进行深拷贝</span><br><span class="line">console.log(target);    &#x2F;&#x2F; &#123;a: 2, b: 2, c: &#123;ca: 31, cb: 32, cc: 23, cd: 34&#125;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var target &#x3D; &#123;a: 1, b: 1&#125;;</span><br><span class="line">var copy1 &#x3D; &#123;a: 2, b: 2, c: &#123;ca: 21, cb: 22, cc: 23&#125;&#125;;</span><br><span class="line">var copy2 &#x3D; &#123;c: &#123;ca: 31, cb: 32, cd: 34&#125;&#125;;</span><br><span class="line">var result &#x3D; $.extend(target, copy1, copy2);   &#x2F;&#x2F; 不进行深拷贝</span><br><span class="line">console.log(target);    &#x2F;&#x2F; &#123;a: 2, b: 2, c: &#123;ca: 31, cb: 32, cd:34&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>通过上面的对比可以看出，当使用<code>extend()</code> 进行深拷贝的时候，对象的所有属性都添加到 <code>target</code> 中了。</p>
<blockquote>
<p>我们知道了 extend() 可以进行深拷贝，那么 extend() 是如何实现深拷贝的呢？</p>
</blockquote>
<p>先来看下 jQuery.extend() 源码</p>
<p><strong>待续</strong></p>
<ol start="2">
<li><code>JSON.parse() 和 JSON.stringify()</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var target &#x3D; &#123;a: 1, b: 1, c: &#123;ca: 11, cb: 12, cc: 13&#125;&#125;;</span><br><span class="line">var targetCopy &#x3D; JSON.parse(JSON.stringify(target));</span><br><span class="line">targetCopy.a &#x3D; 2;</span><br><span class="line">targetCopy.c.ca &#x3D; 21;</span><br><span class="line">console.log(target);   &#x2F;&#x2F; &#123;a: 1, b: 1, c: &#123;ca: 11, cb: 12, cc: 13&#125;&#125;</span><br><span class="line">console.log(targetCopy);    &#x2F;&#x2F; &#123;a: 2, b: 1, c: &#123;ca: 21, cb: 12, cc: 13&#125;&#125;</span><br><span class="line">console.log(target &#x3D;&#x3D;&#x3D; targetCopy);  &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>

<p>可以看到改变 <code>targetCopy</code> 并没有改变原始的 <code>target</code>，继承的属性也没有丢失，因此实现了基本的深拷贝。</p>
<p>但是用<code>JSON.parse()</code> 和 <code>JSON.stringify()</code> 会有一个问题。</p>
<blockquote>
<p>JSON.parse() 和 JSON.stringify() 能正确处理的对象只有 Number、String、Array 等能够被 json 表示的数据结构，因此函数这种不能被 json 表示的类型将不能被正确处理。</p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>继承</title>
    <url>/2020/04/18/41-%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<hr>
<h2 id="下面介绍继承的几种方式"><a href="#下面介绍继承的几种方式" class="headerlink" title="下面介绍继承的几种方式"></a>下面介绍继承的几种方式</h2><h3 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1. 原型链继承"></a>1. 原型链继承</h3><p>通过<strong>prototype</strong>实现继承</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Parent () &#123;</span><br><span class="line">    this.name &#x3D; &#39;kevin&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getName &#x3D; function () &#123;</span><br><span class="line">    console.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Child () &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype &#x3D; new Parent();</span><br><span class="line"></span><br><span class="line">var child1 &#x3D; new Child();</span><br><span class="line"></span><br><span class="line">console.log(child1.getName()) &#x2F;&#x2F; kevin</span><br></pre></td></tr></table></figure>

<blockquote>
<p>引用类型的属性被所有实例共享<br>在创建 Child 的实例时，不能向Parent传参</p>
</blockquote>
<h3 id="2-借用构造函数继承"><a href="#2-借用构造函数继承" class="headerlink" title="2. 借用构造函数继承"></a>2. 借用构造函数继承</h3><p>通过<strong>call</strong>绑定this实现继承。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Parent () &#123;</span><br><span class="line">    this.names &#x3D; [&#39;kevin&#39;, &#39;daisy&#39;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Child () &#123;</span><br><span class="line">    Parent.call(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var child1 &#x3D; new Child();</span><br><span class="line"></span><br><span class="line">child1.names.push(&#39;yayu&#39;);</span><br><span class="line"></span><br><span class="line">console.log(child1.names); &#x2F;&#x2F; [&quot;kevin&quot;, &quot;daisy&quot;, &quot;yayu&quot;]</span><br><span class="line"></span><br><span class="line">var child2 &#x3D; new Child();</span><br><span class="line"></span><br><span class="line">console.log(child2.names); &#x2F;&#x2F; [&quot;kevin&quot;, &quot;daisy&quot;]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>避免了引用类型的属性被所有实例共享<br>可以在 Child 中向 Parent 传参<br>方法都在构造函数中定义，每次创建实例都会创建一遍方法。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Parent (name) &#123;</span><br><span class="line">    this.name &#x3D; name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Child (name) &#123;</span><br><span class="line">    Parent.call(this, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var child1 &#x3D; new Child(&#39;kevin&#39;);</span><br><span class="line"></span><br><span class="line">console.log(child1.name); &#x2F;&#x2F; kevin</span><br><span class="line"></span><br><span class="line">var child2 &#x3D; new Child(&#39;daisy&#39;);</span><br><span class="line"></span><br><span class="line">console.log(child2.name); &#x2F;&#x2F; daisy</span><br></pre></td></tr></table></figure>

<h3 id="3-组合继承"><a href="#3-组合继承" class="headerlink" title="3. 组合继承"></a>3. 组合继承</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Parent (name) &#123;</span><br><span class="line">    this.name &#x3D; name;</span><br><span class="line">    this.colors &#x3D; [&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getName &#x3D; function () &#123;</span><br><span class="line">    console.log(this.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Child (name, age) &#123;</span><br><span class="line"></span><br><span class="line">    Parent.call(this, name);</span><br><span class="line">    </span><br><span class="line">    this.age &#x3D; age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype &#x3D; new Parent();</span><br><span class="line">Child.prototype.constructor &#x3D; Child;</span><br><span class="line"></span><br><span class="line">var child1 &#x3D; new Child(&#39;kevin&#39;, &#39;18&#39;);</span><br><span class="line"></span><br><span class="line">child1.colors.push(&#39;black&#39;);</span><br><span class="line"></span><br><span class="line">console.log(child1.name); &#x2F;&#x2F; kevin</span><br><span class="line">console.log(child1.age); &#x2F;&#x2F; 18</span><br><span class="line">console.log(child1.colors); &#x2F;&#x2F; [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;black&quot;]</span><br><span class="line"></span><br><span class="line">var child2 &#x3D; new Child(&#39;daisy&#39;, &#39;20&#39;);</span><br><span class="line"></span><br><span class="line">console.log(child2.name); &#x2F;&#x2F; daisy</span><br><span class="line">console.log(child2.age); &#x2F;&#x2F; 20</span><br><span class="line">console.log(child2.colors); &#x2F;&#x2F; [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>优点：融合原型链继承和构造函数的优点，是 JavaScript 中最常用的继承模式。</p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>lazyload&amp;防抖和节流</title>
    <url>/2020/04/18/40-lazyload&amp;%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<hr>
<h2 id="lazyload"><a href="#lazyload" class="headerlink" title="lazyload"></a>lazyload</h2><p>用的最多的场景是：</p>
<ul>
<li><p>图片lazyload</p>
</li>
<li><p>组件lazyload</p>
</li>
</ul>
<p>现在一般都单独做css的lazyload或者js的lazyload，因为这种方式，其实还是要加载图片和组件。</p>
<a id="more"></a>

<h3 id="图片lazyload"><a href="#图片lazyload" class="headerlink" title="图片lazyload"></a>图片lazyload</h3><p>图片一般是页面最大的资源，所以<strong>非首屏</strong>延迟加载很重要（让首屏尽快显示）。</p>
<h2 id="防抖（Debouncing）和节流（Throtting）"><a href="#防抖（Debouncing）和节流（Throtting）" class="headerlink" title="防抖（Debouncing）和节流（Throtting）"></a>防抖（Debouncing）和节流（Throtting）</h2><blockquote>
<p>函数防抖和函数节流：优化高频率执行js代码的一种手段，js中的一些事件如浏览器的resize、scroll，鼠标的mousemove、mouseover，input输入框的keypress等事件在触发时，会不断地调用绑定在事件上的回调函数，极大地浪费资源，降低前端性能。为了优化体验，需要对这类事件进行调用次数的限制。</p>
</blockquote>
<h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a><a href="https://github.com/mqyqingfeng/Blog/issues/22" target="_blank" rel="noopener">防抖</a></h3><p>在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。</p>
<p>根据函数防抖思路设计出第一版的最简单的防抖代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var timer; &#x2F;&#x2F; 维护同一个timer</span><br><span class="line">function debounce(fn, delay) &#123;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    timer &#x3D; setTimeout(function()&#123;</span><br><span class="line">        fn();</span><br><span class="line">    &#125;, delay);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改进后源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function debounce(fn, wait) &#123;</span><br><span class="line">  var timer &#x3D; null;</span><br><span class="line">  return function () &#123;</span><br><span class="line">      var context &#x3D; this</span><br><span class="line">      var args &#x3D; arguments</span><br><span class="line">      if (timer) &#123;</span><br><span class="line">          clearTimeout(timer);</span><br><span class="line">          timer &#x3D; null;</span><br><span class="line">      &#125;</span><br><span class="line">      timer &#x3D; setTimeout(function () &#123;</span><br><span class="line">          fn.apply(context, args)</span><br><span class="line">      &#125;, wait)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var fn &#x3D; function () &#123;</span><br><span class="line">  console.log(&#39;boom&#39;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setInterval(debounce(fn,500),1000) &#x2F;&#x2F; 第一次在1500ms后触发，之后每1000ms触发一次</span><br><span class="line"></span><br><span class="line">setInterval(debounce(fn,2000),1000) &#x2F;&#x2F; 不会触发一次（我把函数防抖看出技能读条，如果读条没完成就用技能，便会失败而且重新读条）</span><br></pre></td></tr></table></figure>









<h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function throttle(fn, gapTime) &#123;</span><br><span class="line">  let _lastTime &#x3D; null;</span><br><span class="line"></span><br><span class="line">  return function () &#123;</span><br><span class="line">    let _nowTime &#x3D; + new Date()</span><br><span class="line">    if (_nowTime - _lastTime &gt; gapTime || !_lastTime) &#123;</span><br><span class="line">      fn();</span><br><span class="line">      _lastTime &#x3D; _nowTime</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let fn &#x3D; ()&#x3D;&gt;&#123;</span><br><span class="line">  console.log(&#39;boom&#39;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setInterval(throttle(fn,1000),10)</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>作用域链</title>
    <url>/2020/04/18/43-%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</url>
    <content><![CDATA[<hr>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域是在运行时代码中的某些特定部分中变量，函数和对象的可访问性。</p>
<p>作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。</p>
<p><strong>ES6 之前 JavaScript 没有块级作用域,只有全局作用域和函数作用域。ES6的到来，为我们提供了‘块级作用域’，可通过新增命令let和const来体现。</strong></p>
<a id="more"></a>
<h2 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h2><p><strong>在代码中任何地方都能访问到的对象拥有全局作用域</strong>，一般来说以下几种情形拥有全局作用域：</p>
<ul>
<li>最外层函数 和在最外层函数外面定义的变量拥有全局作用域。</li>
<li>所有末定义直接赋值的变量自动声明为拥有全局作用域。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  function outFun2() &#123;</span><br><span class="line">    variable &#x3D; &quot;未定义直接赋值的变量&quot;;</span><br><span class="line">    var inVariable2 &#x3D; &quot;内层变量2&quot;;</span><br><span class="line">&#125;</span><br><span class="line">outFun2();&#x2F;&#x2F;要先执行这个函数，否则根本不知道里面是啥</span><br><span class="line">console.log(variable); &#x2F;&#x2F;未定义直接赋值的变量</span><br><span class="line">console.log(inVariable2); &#x2F;&#x2F;inVariable2 is not defined</span><br></pre></td></tr></table></figure></li>
<li>所有window对象的属性拥有全局作用域。</li>
</ul>
<blockquote>
<p>全局作用域有个弊端：如果我们写了很多行 JS 代码，变量定义都没有用函数包括，那么它们就全部都在全局作用域中。这样就会 污染全局命名空间, 容易引起命名冲突。</p>
</blockquote>
<h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><p><strong>函数作用域,是指声明在函数内部的变量</strong>，和全局作用域相反，局部作用域一般只在固定的代码片段内可访问到，最常见的例如函数内部。</p>
<blockquote>
<p>作用域是分层的，内层作用域可以访问外层作用域的变量，反之则不行。<br>块语句（大括号“｛｝”中间的语句），如 if 和 switch 条件语句或 for 和 while 循环语句，不像函数，它们不会创建一个新的作用域。在块语句中定义的变量将保留在它们已经存在的作用域中。</p>
</blockquote>
<h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p><strong>块级作用域可通过新增命令let和const声明，所声明的变量在指定块的作用域外无法被访问</strong>。块级作用域在如下情况被创建：</p>
<ul>
<li>在一个函数内部</li>
<li>在一个代码块（由一对花括号包裹）内部</li>
</ul>
<p>let 声明的语法与 var 的语法一致。你基本上可以用 let 来代替 var 进行变量声明，但会将变量的作用域限制在当前代码块中。<strong>块级作用域有以下几个特点</strong>：</p>
<ul>
<li><p><strong>声明变量不会提升到代码块顶部</strong></p>
<blockquote>
<p>let/const 声明并不会被提升到当前代码块的顶部，因此你需要手动将 let/const 声明放置到顶部，以便让变量在整个代码块内部可用。</p>
</blockquote>
</li>
<li><p>禁止重复声明</p>
</li>
<li><p>循环中的绑定块作用域的妙用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (let i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br><span class="line">console.log(i);</span><br><span class="line">&#x2F;&#x2F; ReferenceError: i is not defined</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a><a href="https://github.com/mqyqingfeng/Blog/issues/4" target="_blank" rel="noopener">作用域链</a></h2><p>当查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级(词法层面上的父级)执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做作用域链。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>执行上下文</title>
    <url>/2020/04/18/42-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当 JavaScript 代码执行一段可执行代码(<em>executable code</em>)时，会创建对应的执行上下文(<em>execution context</em>)。</p>
<p>对于每个执行上下文，都有三个重要属性：</p>
<ul>
<li>变量对象(Variable object，VO)</li>
<li>作用域链(Scope chain)</li>
<li>this<a id="more"></a></li>
</ul>
<p><strong>代码1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var scope &#x3D; &quot;global scope&quot;;</span><br><span class="line">function checkscope()&#123;</span><br><span class="line">    var scope &#x3D; &quot;local scope&quot;;</span><br><span class="line">    function f()&#123;</span><br><span class="line">        return scope;</span><br><span class="line">    &#125;</span><br><span class="line">    return f();</span><br><span class="line">&#125;</span><br><span class="line">checkscope();</span><br></pre></td></tr></table></figure>
<p><strong>代码2</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var scope &#x3D; &quot;global scope&quot;;</span><br><span class="line">function checkscope()&#123;</span><br><span class="line">    var scope &#x3D; &quot;local scope&quot;;</span><br><span class="line">    function f()&#123;</span><br><span class="line">        return scope;</span><br><span class="line">    &#125;</span><br><span class="line">    return f;</span><br><span class="line">&#125;</span><br><span class="line">checkscope()();</span><br></pre></td></tr></table></figure>
<p>二者返回结果相同，均为<code>local scope</code>，但是二者有着本质的不同——执行上下文栈的变化不同。</p>
<p><strong>代码1执行过程如下</strong>：</p>
<p>1.执行全局代码，创建全局执行上下文，全局上下文被压入执行上下文栈</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ECStack &#x3D; [</span><br><span class="line">    globalContext</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>2.全局上下文初始化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">globalContext &#x3D; &#123;</span><br><span class="line">    VO: [global],</span><br><span class="line">    Scope: [globalContext.VO],</span><br><span class="line">    this: globalContext.VO</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.初始化的同时，checkscope 函数被创建，保存作用域链到函数的内部属性[[scope]]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">checkscope.[[scope]] &#x3D; [</span><br><span class="line">  globalContext.VO</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>3.执行 checkscope 函数，创建 checkscope 函数执行上下文，checkscope 函数执行上下文被压入执行上下文栈</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ECStack &#x3D; [</span><br><span class="line">    checkscopeContext,</span><br><span class="line">    globalContext</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>4.checkscope 函数执行上下文初始化：</p>
<p>复制函数 <code>[[scope]]</code> 属性创建作用域链，<br>用 arguments 创建活动对象，<br>初始化活动对象，即加入形参、函数声明、变量声明，<br>将活动对象压入 checkscope 作用域链顶端。<br>同时 f 函数被创建，保存作用域链到 f 函数的内部属性[[scope]]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">checkscopeContext &#x3D; &#123;</span><br><span class="line">    AO: &#123;</span><br><span class="line">        arguments: &#123;</span><br><span class="line">            length: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        scope: undefined,</span><br><span class="line">        f: reference to function f()&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    Scope: [AO, globalContext.VO],</span><br><span class="line">    this: undefined</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5.执行 f 函数，创建 f 函数执行上下文，f 函数执行上下文被压入执行上下文栈</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ECStack &#x3D; [</span><br><span class="line">    fContext,</span><br><span class="line">    checkscopeContext,</span><br><span class="line">    globalContext</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>6.f 函数执行上下文初始化, 以下跟第 4 步相同：</p>
<p>复制函数 [[scope]] 属性创建作用域链<br>用 arguments 创建活动对象<br>初始化活动对象，即加入形参、函数声明、变量声明<br>将活动对象压入 f 作用域链顶端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fContext &#x3D; &#123;</span><br><span class="line">    AO: &#123;</span><br><span class="line">        arguments: &#123;</span><br><span class="line">            length: 0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    Scope: [AO, checkscopeContext.AO, globalContext.VO],</span><br><span class="line">    this: undefined</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7.f 函数执行，沿着作用域链查找 scope 值，返回 scope 值</p>
<p>8.f 函数执行完毕，f 函数上下文从执行上下文栈中弹出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ECStack &#x3D; [</span><br><span class="line">    checkscopeContext,</span><br><span class="line">    globalContext</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>9.checkscope 函数执行完毕，checkscope 执行上下文从执行上下文栈中弹出</p>
<pre><code>ECStack = [
    globalContext
];</code></pre><p>代码2的执行过程：</p>
<h2 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a><a href="https://github.com/mqyqingfeng/Blog/issues/4" target="_blank" rel="noopener">执行上下文栈</a></h2>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>类数组对象</title>
    <url>/2020/04/18/45-%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E4%B8%8Earguments/</url>
    <content><![CDATA[<hr>
<h2 id="类数组对象"><a href="#类数组对象" class="headerlink" title="类数组对象"></a>类数组对象</h2><p>所谓的类数组对象:</p>
<blockquote>
<p>拥有一个 length 属性和若干索引属性的对象</p>
</blockquote>
<a id="more"></a>
<p>举个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var array &#x3D; [&#39;name&#39;, &#39;age&#39;, &#39;sex&#39;];</span><br><span class="line"></span><br><span class="line">var arrayLike &#x3D; &#123;</span><br><span class="line">    0: &#39;name&#39;,</span><br><span class="line">    1: &#39;age&#39;,</span><br><span class="line">    2: &#39;sex&#39;,</span><br><span class="line">    length: 3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>arrayLike.push(‘4’), 会报错: arrayLike.push is not a function</p>
</blockquote>
<h3 id="调用数组方法"><a href="#调用数组方法" class="headerlink" title="调用数组方法"></a>调用数组方法</h3><p>利用Function.call</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var arrayLike &#x3D; &#123;0: &#39;name&#39;, 1: &#39;age&#39;, 2: &#39;sex&#39;, length: 3 &#125;</span><br><span class="line"></span><br><span class="line">Array.prototype.join.call(arrayLike, &#39;&amp;&#39;); &#x2F;&#x2F; name&amp;age&amp;sex</span><br><span class="line"></span><br><span class="line">Array.prototype.slice.call(arrayLike, 0); &#x2F;&#x2F; [&quot;name&quot;, &quot;age&quot;, &quot;sex&quot;] </span><br><span class="line">&#x2F;&#x2F; slice可以做到类数组转数组</span><br><span class="line"></span><br><span class="line">Array.prototype.map.call(arrayLike, function(item)&#123;</span><br><span class="line">    return item.toUpperCase();</span><br><span class="line">&#125;); </span><br><span class="line">&#x2F;&#x2F; [&quot;NAME&quot;, &quot;AGE&quot;, &quot;SEX&quot;]</span><br></pre></td></tr></table></figure>

<h3 id="转换为数组"><a href="#转换为数组" class="headerlink" title="转换为数组"></a>转换为数组</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var arrayLike &#x3D; &#123;0: &#39;name&#39;, 1: &#39;age&#39;, 2: &#39;sex&#39;, length: 3 &#125;</span><br><span class="line">&#x2F;&#x2F; 1. slice</span><br><span class="line">Array.prototype.slice.call(arrayLike); &#x2F;&#x2F; [&quot;name&quot;, &quot;age&quot;, &quot;sex&quot;] </span><br><span class="line">&#x2F;&#x2F; 2. splice</span><br><span class="line">Array.prototype.splice.call(arrayLike, 0); &#x2F;&#x2F; [&quot;name&quot;, &quot;age&quot;, &quot;sex&quot;] </span><br><span class="line">&#x2F;&#x2F; 3. ES6 Array.from</span><br><span class="line">Array.from(arrayLike); &#x2F;&#x2F; [&quot;name&quot;, &quot;age&quot;, &quot;sex&quot;] </span><br><span class="line">&#x2F;&#x2F; 4. apply</span><br><span class="line">Array.prototype.concat.apply([], arrayLike)</span><br></pre></td></tr></table></figure>

<h2 id="arguments对象"><a href="#arguments对象" class="headerlink" title="arguments对象"></a>arguments对象</h2><p>Arguments 对象只定义在函数体中，包括了函数的参数和其他属性。在函数体中，arguments 指代该函数的 Arguments 对象。</p>
<p>举个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function foo(name, age, sex) &#123;</span><br><span class="line">    console.log(arguments);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(&#39;name&#39;, &#39;age&#39;, &#39;sex&#39;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>[‘name’, ‘age’, ‘sex’]</p>
</blockquote>
<h3 id="length属性"><a href="#length属性" class="headerlink" title="length属性"></a>length属性</h3><p>arguments.length</p>
<h3 id="callee属性"><a href="#callee属性" class="headerlink" title="callee属性"></a>callee属性</h3>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM</title>
    <url>/2020/04/18/DOM/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>浏览器的内核是指支持浏览器运行的最核心的程序，分为两个部分，一是<strong>渲染引擎</strong>，另一个是<strong>JS引擎</strong>。</p>
<p>浏览器请求、加载、渲染一个页面，时间花在下面五件事情上：</p>
<ul>
<li>DNS 查询</li>
<li>TCP 连接</li>
<li>HTTP 请求即响应</li>
<li>服务器响应</li>
<li>客户端渲染<a id="more"></a>
<h2 id="浏览器渲染页面的过程"><a href="#浏览器渲染页面的过程" class="headerlink" title="浏览器渲染页面的过程"></a>浏览器渲染页面的过程</h2></li>
</ul>
<p>浏览器对内容的渲染（渲染树构建、布局及绘制），可以分为下面五个步骤：</p>
<ul>
<li>处理 HTML 标记并构建 DOM 树。</li>
<li>处理 CSS 标记并构建 CSSOM 树。</li>
<li>将 DOM 与 CSSOM 合并成一个渲染树。</li>
<li>根据渲染树来布局，以计算每个节点的几何信息(也叫回流)。</li>
<li>将各个节点绘制到屏幕上。</li>
</ul>
<p><strong>注：</strong> </p>
<ul>
<li>文档解析完毕，页面重新渲染。当页面引用的所有 js 同步代码执行完毕，触发 <code>DOMContentLoaded</code>事件。</li>
<li>html 文档中的图片资源，js 代码中有异步加载的 css、js 、图片资源都加载完毕之后，<code>load</code> 事件触发。</li>
</ul>
<blockquote>
<p>需要明白，这五个步骤并不一定一次性顺序完成。如果 DOM 或 CSSOM 被修改，以上过程需要重复执行，这样才能计算出哪些像素需要在屏幕上进行重新渲染。实际页面中，CSS 与 JavaScript 往往会多次修改 DOM 和 CSSOM，下面就来看看它们的影响方式。</p>
</blockquote>
<blockquote>
<p>HTML从第一行开始解析，遇到外联资源就会请求对应资源，有的资源会阻塞请求，有的资源不会，故分为阻塞型与非阻塞型资源，这里区分两类资源的标志是document对象派发DOMContentLoaded事件的时间点，认为<strong>派发DOMContentLoaded事件才表示dom树构建完成</strong>。非阻塞型的资源加载完成由window.onload判断，此时页面加载完毕。</p>
</blockquote>
<h2 id="阻塞渲染"><a href="#阻塞渲染" class="headerlink" title="阻塞渲染"></a>阻塞渲染</h2><p><strong>会阻塞DOM解析的资源主要是:</strong></p>
<ul>
<li>内联css</li>
<li>内联javascript</li>
<li>外联普通javascript</li>
<li>外联defer javascript</li>
<li>javascript标签之前的外联css</li>
</ul>
<p>现代浏览器总是并行加载资源。</p>
<blockquote>
<p> 当 HTML 解析器被脚本阻塞时，解析器虽然会停止构建 DOM，但仍会识别该脚本后面的资源，并进行预加载。</p>
</blockquote>
<p>当浏览器遇到一个 <code>script</code> 标记时，DOM 构建将暂停，直至脚本完成执行。<br>JavaScript 可以查询和修改 DOM 与 CSSOM。<br>CSSOM 构建时，JavaScript 执行将暂停，直至 CSSOM 就绪。</p>
<p>所以，<strong><code>script</code> 标签的位置很重要。实际使用时，可以遵循下面两个原则</strong>：</p>
<ul>
<li>CSS 优先：引入顺序上，CSS 资源先于 JavaScript 资源。</li>
<li>JavaScript 应尽量少影响 DOM 的构建。</li>
</ul>
<p><strong>渲染过程中遇见JavaScript会发生什么？</strong></p>
<ul>
<li><p>JavaScript的加载、解析与执行会阻塞DOM的构建，也就是说，在构建DOM时，HTML解析器若遇到了JavaScript，那么它会暂停构建DOM，将控制权移交给JavaScript引擎，等JavaScript引擎运行完毕，浏览器再从中断的地方恢复DOM构建。这也是都建议将 script 标签放在 <code>body</code> 标签底部的原因。当然在当下，并不是说 <code>script</code> 标签必须放在底部，因为你可以给 <code>script</code> 标签添加<code>defer</code> 或者 <code>async</code>属性。</p>
</li>
<li><p>JS文件不只是阻塞DOM的构建，它会导致CSSOM也阻塞DOM的构建。</p>
</li>
<li><p>原本DOM和CSSOM的构建是互不影响，但是一旦引入了JavaScript，CSSOM也开始阻塞DOM的构建，只有CSSOM构建完毕后，DOM再恢复DOM构建。</p>
</li>
<li><p>因为JavaScript不只是可以改DOM，它还可以更改样式，即可以更改CSSOM。<strong>不完整的CSSOM是无法使用的，但JavaScript中想访问CSSOM并更改它，那么在执行JavaScript时，必须要能拿到完整的CSSOM</strong>。所以，如果浏览器尚未完成CSSOM的下载和构建，而我们却想在此时运行脚本，那么浏览器将延迟脚本执行和DOM构建，直至其完成CSSOM的下载和构建。<strong>在这种情况下，浏览器会先下载和构建CSSOM，然后再执行JavaScript，最后在继续构建DOM</strong>。</p>
</li>
</ul>
<h2 id="改变阻塞模式：defer-与-async"><a href="#改变阻塞模式：defer-与-async" class="headerlink" title="改变阻塞模式：defer 与 async"></a>改变阻塞模式：defer 与 async</h2><p><strong>defer</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;app1.js&quot; defer&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;app2.js&quot; defer&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;app3.js&quot; defer&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p><code>defer</code> 属性表示延迟执行引入的 JavaScript，不阻塞资源，而是会暂存到一个队列中，等整个html解析完成后再按队列的顺序请求并执行javascript，但是这种外联defer javascript全部加载并执行完成后才会派发<code>DOMContentLoaded事件</code>。</p>
<p><strong>async</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;app.js&quot; async&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;ad.js&quot; async&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;statistics.js&quot; async&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p><code>async</code> 属性表示异步执行引入的 JavaScript，与 <code>defer</code> 的区别在于，如果已经加载好，就会开始执行—, 无论此刻是 HTML 解析阶段还是 DOMContentLoaded 触发之后。需要注意的是，这种方式加载的 JavaScript 依然会阻塞 load 事件。换句话说<code>async-script</code> 可能在 <code>DOMContentLoaded</code> 触发之前或之后执行，但一定在 <code>load</code> 触发之前执行。</p>
<h2 id="回流和重绘"><a href="#回流和重绘" class="headerlink" title="回流和重绘"></a>回流和重绘</h2><p>网页生成的时候，至少会渲染一次。在用户访问的过程中，还会不断重新渲染。</p>
<p><strong>重绘</strong>: </p>
<p>当渲染树（render tree）中的一些元素需要更新属性，而这些属性只是影响元素的外观、风格，而不会影响布局的，比如background-color。</p>
<p><strong>回流</strong>:</p>
<p>当渲染树（render tree）中的一部分(或全部)因为元素的规模尺寸、布局、隐藏等改变而需要重新构建。</p>
<p>回流必定会发生重绘，重绘不一定会引发回流。</p>
<p><strong>常见引起回流属性和方法</strong></p>
<ul>
<li>任何会改变元素几何信息(元素的位置和尺寸大小)的操作，都会触发回流。</li>
<li>添加或者删除可见的DOM元素；</li>
<li>元素尺寸改变——边距、填充、边框、宽度和高度</li>
<li>内容变化，比如用户在input框中输入文字</li>
<li>浏览器窗口尺寸改变——resize事件发生时</li>
<li>计算 offsetWidth 和 offsetHeight 属性</li>
<li>设置 style 属性的值</li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5(三)</title>
    <url>/2020/04/18/HTML5(%E4%B8%89)/</url>
    <content><![CDATA[<hr>
<h2 id="Web-存储"><a href="#Web-存储" class="headerlink" title="Web 存储"></a>Web 存储</h2><p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在本地存储大量的数据，<strong>传统方式我们以<em>document.cookie</em>来进行存储</strong>的，但是由于其存储大小只有4k左右，并且解析也相当的复杂，给开发带来诸多不便，HTML5规范则提出解决方案。</p>
<a id="more"></a>
<h3 id="H5-中有两种存储的方式"><a href="#H5-中有两种存储的方式" class="headerlink" title="H5 中有两种存储的方式"></a>H5 中有两种存储的方式</h3><p>1、<strong><code>window.sessionStorage</code> 会话存储：</strong></p>
<ul>
<li><p>保存在内存中。</p>
</li>
<li><p><strong>生命周期</strong>为关闭浏览器窗口。也就是说，当窗口关闭时数据销毁。</p>
</li>
<li><p>在同一个窗口下数据可以共享。</p>
</li>
</ul>
<p>2、<strong><code>window.localStorage</code> 本地存储</strong>：</p>
<ul>
<li><p>有可能保存在浏览器内存里，有可能在硬盘里。</p>
</li>
<li><p>永久生效，除非手动删除（比如清理垃圾的时候）。</p>
</li>
<li><p>可以多窗口共享。</p>
</li>
</ul>
<h3 id="Web-存储的特性"><a href="#Web-存储的特性" class="headerlink" title="Web 存储的特性"></a>Web 存储的特性</h3><p>（1）设置、读取方便。</p>
<p>（2）容量较大，sessionStorage 约5M、localStorage 约20M。</p>
<p>（3）只能存储字符串，可以将对象 JSON.stringify() 编码后存储。</p>
<h3 id="常见-API"><a href="#常见-API" class="headerlink" title="常见 API"></a>常见 API</h3><p>设置存储内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setItem(key, value);</span><br></pre></td></tr></table></figure>

<p>PS：可以新增一个 item，也可以更新一个 item。</p>
<p>读取存储内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getItem(key);</span><br></pre></td></tr></table></figure>

<p>根据键，删除存储内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">removeItem(key);</span><br></pre></td></tr></table></figure>


<p>清空所有存储内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">clear();</span><br></pre></td></tr></table></figure>

<p>根据索引值来获取存储内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">key(n);</span><br></pre></td></tr></table></figure>


<p>sessionStorage 的 API 举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>sesssionStorage存储<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>sesssionStorage获取<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>sesssionStorage更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>sesssionStorage删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>sesssionStorage清除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//在h5中提供两种web存储方式</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// sessionStorage  session（会话，会议） 5M  当窗口关闭是数据销毁  内存</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// localStorage    20M 永久生效 ，除非手动删除  清理垃圾  硬盘上</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> txt = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//        sessionStorage存储数据</span></span></span><br><span class="line"><span class="actionscript">    btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">'userName'</span>, txt.value);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">'pwd'</span>, <span class="string">'123456'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">'age'</span>, <span class="number">18</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//        sessionStorage获取数据</span></span></span><br><span class="line"><span class="actionscript">    btns[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        txt.value = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">'userName'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//        sessionStorage更新数据</span></span></span><br><span class="line"><span class="actionscript">    btns[<span class="number">2</span>].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">'userName'</span>, txt.value);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//        sessionStorage删除数据</span></span></span><br><span class="line"><span class="actionscript">    btns[<span class="number">3</span>].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.sessionStorage.removeItem(<span class="string">'userName'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//        sessionStorage清空数据</span></span></span><br><span class="line"><span class="actionscript">    btns[<span class="number">4</span>].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.sessionStorage.clear();</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>localStorage 的 API 举例：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>localStorage存储<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>localStorage获取<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>localStorage更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>localStorage删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>localStorage清除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    *  localStorage</span><br><span class="line">    *  数据存在硬盘上</span><br><span class="line">    *  永久生效</span><br><span class="line">    *  20M</span><br><span class="line">    * */</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> txt = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">'button'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//        localStorage存储数据</span></span></span><br><span class="line"><span class="actionscript">    btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.localStorage.setItem(<span class="string">'userName'</span>, txt.value);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//        localStorage存储数据</span></span></span><br><span class="line"><span class="actionscript">    btns[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        txt.value = <span class="built_in">window</span>.localStorage.getItem(<span class="string">'userName'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//        localStorage删除数据</span></span></span><br><span class="line"><span class="actionscript">    btns[<span class="number">3</span>].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.localStorage.removeItem(<span class="string">'userName'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="案例：记住用户名和密码"><a href="#案例：记住用户名和密码" class="headerlink" title="案例：记住用户名和密码"></a>案例：记住用户名和密码</h3><p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"userName"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    密 码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"pwd"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"check"</span> <span class="attr">id</span>=<span class="string">""</span>/&gt;</span>记住密码</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> userName = <span class="built_in">document</span>.querySelector(<span class="string">'.userName'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> pwd = <span class="built_in">document</span>.querySelector(<span class="string">'.pwd'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> chk = <span class="built_in">document</span>.querySelector(<span class="string">'.check'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//        当点击登录的时候 如果勾选“记住密码”，就存储密码；否则就清除密码</span></span></span><br><span class="line"><span class="actionscript">    btn.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">        if (chk.checked) &#123;</span><br><span class="line"><span class="actionscript"><span class="comment">//                记住数据</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.localStorage.setItem(<span class="string">'userName'</span>, userName.value);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.localStorage.setItem(<span class="string">'pwd'</span>, pwd.value);</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//                清除数据</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.localStorage.removeItem(<span class="string">'userName'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.localStorage.removeItem(<span class="string">'pwd'</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="comment">//        下次登录时，如果记录的有数据，就直接填充</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        userName.value = <span class="built_in">window</span>.localStorage.getItem(<span class="string">'userName'</span>);</span></span><br><span class="line"><span class="javascript">        pwd.value = <span class="built_in">window</span>.localStorage.getItem(<span class="string">'pwd'</span>);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="网络状态"><a href="#网络状态" class="headerlink" title="网络状态"></a>网络状态</h2><p>我们可以通过 <code>window.onLine</code> 来检测用户当前的网络状况，返回一个布尔值。另外：</p>
<ul>
<li><p>window.online：用户网络连接时被调用。</p>
</li>
<li><p>window.offline：用户网络断开时被调用（拔掉网线或者禁用以太网）。</p>
</li>
</ul>
<h2 id="应用缓存"><a href="#应用缓存" class="headerlink" title="应用缓存"></a>应用缓存</h2><p>HTML5中我们可以轻松的构建一个离线（无网络状态）应用，只需要创建一个 <code>cache manifest</code> 缓存清单文件。</p>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>1、可配置需要缓存的资源；</p>
<p>2、网络无连接应用仍可用；</p>
<p>3、本地读取缓存资源，提升访问速度，增强用户体验；</p>
<p>4、减少请求，缓解服务器负担。</p>
<h3 id="cache-manifest-缓存清单文件"><a href="#cache-manifest-缓存清单文件" class="headerlink" title="cache manifest 缓存清单文件"></a><code>cache manifest</code> 缓存清单文件</h3><p>缓存清单文件中列出了浏览器应缓存，以供离线访问的资源。推荐使用 <code>.appcache</code>作为后缀名，另外还要添加MIME类型。</p>
<p><strong>缓存清单文件里的内容怎样写：</strong></p>
<p>（1）顶行写CACHE MANIFEST。</p>
<p>（2）CACHE: 换行 指定我们需要缓存的静态资源，如.css、image、js等。</p>
<p>（3）NETWORK: 换行 指定需要在线访问的资源，可使用通配符（也就是：不需要缓存的、必须在网络下面才能访问的资源）。</p>
<p>（4）FALLBACK: 换行 当被缓存的文件找不到时的备用资源（当访问不到某个资源时，自动由另外一个资源替换）。</p>
<p>格式举例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line"></span><br><span class="line"><span class="comment">#要缓存的文件</span></span><br><span class="line">CACHE:</span><br><span class="line">    images/img1.jpg</span><br><span class="line">    images/img2.jpg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定必须联网才能访问的文件</span></span><br><span class="line">NETWORK:</span><br><span class="line">     images/img3.jpg</span><br><span class="line">     images/img4.jpg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#当前页面无法访问是回退的页面</span></span><br><span class="line">FALLBACK:</span><br><span class="line">    404.html</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5(一)</title>
    <url>/2020/04/18/HTML5(%D2%BB)/</url>
    <content><![CDATA[<hr>
<h2 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h2><ul>
<li><p>H5中新增的语义标签</p>
</li>
<li><p>H5表单</p>
</li>
</ul>
<a id="more"></a>
<h3 id="什么是-HTML5"><a href="#什么是-HTML5" class="headerlink" title="什么是 HTML5"></a>什么是 HTML5</h3><p>HTML5并不仅仅只是做为HTML标记语言的一个最新版本，更重要的是它<strong>制定了Web应用开发的一系列标准</strong>，成为第一个将Web做为应用开发平台的HTML语言。</p>
<p>HTML5定义了一系列新元素，如新语义标签、智能表单、多媒体标签等，可以帮助开发者创建富互联网应用，还提供了一些Javascript API，如地理定位、重力感应、硬件访问等，可以在浏览器内实现类原生应用。我们甚至可以结合 Canvas 开发网页版游戏。</p>
<p><strong><code>HTML5</code>的广义概念</strong>：HTML5代表浏览器端技术的一个发展阶段。在这个阶段，浏览器的呈现技术得到了飞跃发展和广泛支持，它包括：HTML5、CSS3、Javascript API在内的一套技术组合。</p>
<p><code>HTML5</code>不等于 <code>HTML next version</code>。<code>HTML5</code> 包含： <code>HTML</code>的升级版、<code>CSS</code>的升级版、<code>JavaScript API</code>的升级版。</p>
<p><strong>总结</strong>：<code>HTML5</code>是新一代开发 <strong>Web 富客户端</strong>应用程序整体<strong>解决方案</strong>。包括：HTML5，CSS3，Javascript API在内的一套<strong>技术组合</strong>。</p>
<p><strong>富客户端</strong>：具有很强的<strong>交互性</strong>和体验的客户端程序。比如说，浏览博客，是比较简单的客户端；一个在线听歌的网站、即时聊天网站就是富客户端。</p>
<br>

<h3 id="HTML5-的应用场景"><a href="#HTML5-的应用场景" class="headerlink" title="HTML5 的应用场景"></a>HTML5 的应用场景</h3><p>列举几个HTML5 的应用场景：</p>
<p>（1）极具表现力的网页：内容简约而不简单。</p>
<p>（2）网页应用程序：</p>
<ul>
<li><p>代替PC端的软件：iCloud、百度脑图、Office 365等。</p>
</li>
<li><p>APP端的网页：淘宝、京东、美团等。</p>
</li>
<li><p>微信端：公众号、小程序等。</p>
</li>
</ul>
<p>（3）混合式本地应用。</p>
<p>（4）简单的游戏。</p>
<h3 id="HTML5-新增的内容"><a href="#HTML5-新增的内容" class="headerlink" title="HTML5 新增的内容"></a>HTML5 新增的内容</h3><p>HTML 5提供了一些新的元素和属性，反映典型的现代用法网站。其中有些是技术上类似<code>&lt;div&gt;</code>和<code>&lt;span&gt;</code>标签，但有一定含义，例如<code>&lt;nav&gt;</code>（网站导航块）和<code>&lt;footer&gt;</code>,<code>&lt;audio&gt;</code>和<code>&lt;video&gt;</code>标记。</p>
<br>

<h2 id="语义化的标签"><a href="#语义化的标签" class="headerlink" title="语义化的标签"></a>语义化的标签</h2><h3 id="语义化的作用"><a href="#语义化的作用" class="headerlink" title="语义化的作用"></a>语义化的作用</h3><p>语义标签对于我们并不陌生，如<code>&lt;p&gt;</code>表示一个段落、<code>&lt;ul&gt;</code>表示一个无序列表。<strong>标签语义化的作用：</strong></p>
<ul>
<li><p>能够便于开发者阅读和写出更优雅的代码。</p>
</li>
<li><p>同时让浏览器或是网络爬虫可以很好地解析，从而更好分析其中的内容。</p>
</li>
<li><p>更好地搜索引擎优化。</p>
</li>
</ul>
<p>总结：HTML的职责是描述一块内容是什么（或其意义），而不是它长什么样子；它的外观应该由CSS来决定。</p>
<h3 id="H5在语义上的改进"><a href="#H5在语义上的改进" class="headerlink" title="H5在语义上的改进"></a>H5在语义上的改进</h3><p>在此基础上，HTML5 增加了大量有意义的语义标签，更有利于搜索引擎或辅助设备理解 HTML 页面内容。HTML5会让HTML代码的内容更结构化、标签更语义化。</p>
<p>传统的做法中，我们通过增加类名如<code>class=&quot;header&quot;</code>、<code>class=&quot;footer&quot;</code>，使HTML页面具有语义性，但是不具有通用性。</p>
<p>HTML5 则是通过新增语义标签的形式来解决这个问题，例如<code>&lt;header&gt;&lt;/header&gt;</code>、<code>&lt;footer&gt;&lt;/footer&gt;</code>等，这样就可以使其具有通用性。</p>
<p><strong>传统网页布局：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 头部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 主体部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文章 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 侧边栏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aside"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 底部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>H5 的经典网页布局：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 头部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 主体部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文章 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 侧边栏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 底部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="H5中新增的语义标签"><a href="#H5中新增的语义标签" class="headerlink" title="H5中新增的语义标签"></a>H5中新增的语义标签</h2><ul>
<li><p><code>&lt;section&gt;</code> 表示区块</p>
</li>
<li><p><code>&lt;article&gt;</code> 表示文章。如文章、评论、帖子、博客</p>
</li>
<li><p><code>&lt;header&gt;</code> 表示页眉</p>
</li>
<li><p><code>&lt;footer&gt;</code> 表示页脚</p>
</li>
<li><p><code>&lt;nav&gt;</code> 表示导航</p>
</li>
<li><p><code>&lt;aside&gt;</code> 表示侧边栏。如文章的侧栏</p>
</li>
<li><p><code>&lt;figure&gt;</code> 表示媒介内容分组。</p>
</li>
<li><p><code>&lt;mark&gt;</code> 表示标记 (用得少)</p>
</li>
<li><p><code>&lt;progress&gt;</code> 表示进度 (用得少)</p>
</li>
<li><p><code>&lt;time&gt;</code> 表示日期</p>
</li>
</ul>
<p>本质上新语义标签与<code>&lt;div&gt;</code>、<code>&lt;span&gt;</code>没有区别，只是其具有表意性，使用时除了在HTML结构上需要注意外，其它和普通标签的使用无任何差别，可以理解成<code>&lt;div class=&quot;nav&quot;&gt;</code> 相当于<code>&lt;nav&gt;</code>。</p>
<br>

<blockquote>
<p>单标签不用写关闭符号。</p>
</blockquote>
<br>

<h3 id="新语义标签的兼容性处理"><a href="#新语义标签的兼容性处理" class="headerlink" title="新语义标签的兼容性处理"></a>新语义标签的兼容性处理</h3><p>IE8 及以下版本的浏览器不支持 H5 和 CSS3。解决办法：引入<code>html5shiv.js</code>文件。</p>
<p>引入时，需要做if判断，具体代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  条件注释 只有ie能够识别--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--[if lte ie 8]&gt;</span></span><br><span class="line"><span class="comment">    &lt;script src="html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>

<p>上方代码是<strong>条件注释</strong>：虽然是注释，但是IE浏览器可以识别出来。解释一下：</p>
<ul>
<li><p>l：less 更小</p>
</li>
<li><p>t：than 比</p>
</li>
<li><p>e：equal等于</p>
</li>
<li><p>g：great 更大</p>
</li>
</ul>
<blockquote>
<p>在测试 IE 浏览器的兼容的时候，可以使用软件 ietest，模拟IE6-IE11。</p>
</blockquote>
<p>在不支持HTML5新标签的浏览器，会将这些新的标签解析成行内元素(inline)对待，所以我们只需要将其转换成块元素(block)即可使用。</p>
<p>但是在IE9版本以下，并不能正常解析这些新标签，但是可以识别通过document.createElement(‘tagName’)创建的自定义标签。于是我们的解决方案就是：将HTML5的新标签全部通过document.createElement(‘tagName’)来创建一遍，这样IE低版本也能正常解析HTML5新标签了。</p>
<p>当然，在实际开发中我们更多采用的办法是：检测IE浏览器的版本，来加载第三方的JS库来解决兼容问题（如上方代码所示）。</p>
<h2 id="H5中的表单"><a href="#H5中的表单" class="headerlink" title="H5中的表单"></a>H5中的表单</h2><p>传统的Web表单已经越来越不能满足开发的需求，HTML5 在 Web 表单方向做了很大的改进，如拾色器、日期/时间组件等，使表单处理更加高效。</p>
<h3 id="H5中新增的表单类型"><a href="#H5中新增的表单类型" class="headerlink" title="H5中新增的表单类型"></a>H5中新增的表单类型</h3><ul>
<li><p><code>email</code> 只能输入email格式。自动带有验证功能。</p>
</li>
<li><p><code>tel</code> 手机号码。</p>
</li>
<li><p><code>url</code> 只能输入url格式。</p>
</li>
<li><p><code>number</code> 只能输入数字。</p>
</li>
<li><p><code>search</code> 搜索框</p>
</li>
<li><p><code>range</code> 滑动条</p>
</li>
<li><p><code>color</code> 拾色器</p>
</li>
<li><p><code>time</code>    时间</p>
</li>
<li><p><code>date</code> 日期</p>
</li>
<li><p><code>datetime</code> 时间日期</p>
</li>
<li><p><code>month</code> 月份</p>
</li>
<li><p><code>week</code> 星期</p>
</li>
</ul>
<p>上面的部分类型是针对移动设备生效的，且具有一定的兼容性，在实际应用当中可选择性的使用。</p>
<p>代码举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, user-scalable=no"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#F7F7F7</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        form &#123;</span><br><span class="line">            max-width: 500px;</span><br><span class="line">            width: 100%;</span><br><span class="line">            margin: 32px auto 0;</span><br><span class="line">            font-size: 16px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        label &#123;</span><br><span class="line">            display: block;</span><br><span class="line">            margin: 10px 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        input &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 25px;</span><br><span class="line">            margin-top: 2px;</span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>表单类型<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            email: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            color: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"color"</span> <span class="attr">name</span>=<span class="string">"color"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            url: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"url"</span> <span class="attr">name</span>=<span class="string">'url'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            number: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">step</span>=<span class="string">"3"</span> <span class="attr">name</span>=<span class="string">"number"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            range: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">name</span>=<span class="string">"range"</span> <span class="attr">value</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            search: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">name</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            tel: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"tel"</span> <span class="attr">name</span>=<span class="string">"tel"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            time: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"time"</span> <span class="attr">name</span>=<span class="string">"time"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            date: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">name</span>=<span class="string">"date"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            datetime: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"datetime"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            week: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"week"</span> <span class="attr">name</span>=<span class="string">"month"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            month: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"month"</span> <span class="attr">name</span>=<span class="string">"month"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            datetime-local: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"datetime-local"</span> <span class="attr">name</span>=<span class="string">"datetime-local"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码解释：</p>
<p><code>&lt;fieldset&gt;</code> 标签将表单里的内容进行打包，代表一组；而<code>&lt;legend&gt;</code>标签的则是 fieldset 里的元素定义标题。</p>
<h3 id="表单元素（标签）"><a href="#表单元素（标签）" class="headerlink" title="表单元素（标签）"></a>表单元素（标签）</h3><p>这里讲两个表单元素。</p>
<p><strong>1、<code>&lt;datalist&gt;</code> 数据列表：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">list</span>=<span class="string">"myData"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"myData"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>本科<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>研究生<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>不明<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上方代码中，input里的list属性和 datalist 进行了绑定。</p>
<p>2、<code>&lt;keygen&gt;</code>元素：</p>
<p>keygen 元素的作用是提供一种验证用户的可靠方法。</p>
<p>keygen 元素是密钥对生成器（key-pair generator）。当提交表单时，会生成两个键：一个公钥，一个私钥。</p>
<p>私钥（private key）存储于客户端，公钥（public key）则被发送到服务器。公钥可用于之后验证用户的客户端证书（client certificate）。</p>
<p>3、<code>&lt;meter&gt;</code>元素：度量器</p>
<ul>
<li><p>low：低于该值后警告</p>
</li>
<li><p>high：高于该值后警告</p>
</li>
<li><p>value：当前值</p>
</li>
<li><p>max：最大值</p>
</li>
<li><p>min：最小值。</p>
</li>
</ul>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;meter  value=<span class="string">"81"</span>    min=<span class="string">"0"</span> max=<span class="string">"100"</span>  low=<span class="string">"60"</span>  high=<span class="string">"80"</span>/&gt;</span><br></pre></td></tr></table></figure>

<h3 id="表单属性"><a href="#表单属性" class="headerlink" title="表单属性"></a>表单属性</h3><ul>
<li><p><code>placeholder</code> 占位符（提示文字）</p>
</li>
<li><p><code>autofocus</code> 自动获取焦点</p>
</li>
<li><p><code>multiple</code> 文件上传多选或多个邮箱地址</p>
</li>
<li><p><code>autocomplete</code> 自动完成（填充的）。on 开启（默认），off 取消。用于表单元素，也可用于表单自身(on/off)</p>
</li>
<li><p><code>form</code> 指定表单项属于哪个form，处理复杂表单时会需要</p>
</li>
<li><p><code>novalidate</code> 关闭默认的验证功能（只能加给form）</p>
</li>
<li><p><code>required</code> 表示必填项</p>
</li>
<li><p><code>pattern</code> 自定义正则，验证表单。</p>
</li>
</ul>
<h3 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h3><ul>
<li><p><code>oninput()</code>：用户输入内容时触发，可用于输入字数统计。</p>
</li>
<li><p><code>oninvalid()</code>：验证不通过时触发。比如，如果验证不通过时，想弹出一段提示文字，就可以用到它。</p>
</li>
</ul>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        form &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line"><span class="css">            <span class="comment">/* 最大宽度*/</span></span></span><br><span class="line">            max-width: 400px;</span><br><span class="line"><span class="css">            <span class="comment">/* 最小宽度*/</span></span></span><br><span class="line">            min-width: 200px;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            font-family: "Microsoft Yahei";</span><br><span class="line">            font-size: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        input &#123;</span><br><span class="line">            display: block;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 30px;</span><br><span class="line">            margin: 10px 0;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>表单事件<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"txt1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            输入的次数统计：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"txt2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> txt1 = <span class="built_in">document</span>.getElementById(<span class="string">'txt1'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> txt2 = <span class="built_in">document</span>.getElementById(<span class="string">'txt2'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> num = <span class="number">0</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    txt1.oninput = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;  <span class="comment">//用户输入时触发</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        num++;  <span class="comment">//用户每输入一次，num自动加 1</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//将统计数显示在txt2中</span></span></span><br><span class="line">        txt2.value = num;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    txt1.oninvalid = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;  <span class="comment">//验证不通过时触发</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.setCustomValidity(<span class="string">'亲，请输入正确哦'</span>);  <span class="comment">//设置验证不通过时的提示文字</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h2><p>在HTML5之前，在网页上播放音频/视频的通用方法是利用Flash来播放。但是大多情况下，并非所有用户的浏览器都安装了Flash插件，由此使得音频、视频播放的处理变得非常复杂；并且移动设备的浏览器并不支持Flash插件。</p>
<p>H5里面提供了视频和音频的标签。</p>
<h3 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h3><p>HTML5通过<code>&lt;audio&gt;</code>标签来解决音频播放的问题。</p>
<p>使用举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"music/yinyue.mp3"</span> <span class="attr">autoplay</span> <span class="attr">controls</span>&gt;</span> <span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>我们可以通过附加属性，来更友好地控制音频的播放，如：</p>
<ul>
<li><p><code>autoplay</code> 自动播放。写成<code>autoplay</code> 或者 <code>autoplay = &quot;&quot;</code>，都可以。</p>
</li>
<li><p><code>controls</code> 控制条。（建议把这个选项写上，不然都看不到控件在哪里）</p>
</li>
<li><p><code>loop</code> 循环播放。</p>
</li>
<li><p><code>preload</code> 预加载 同时设置 autoplay 时，此属性将失效。</p>
</li>
</ul>
<p><strong>处理兼容性问题：</strong></p>
<p>由于版权等原因，不同的浏览器可支持播放的格式是不一样的,为了做到多浏览器支持，可以采取以下兼容性写法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--推荐的兼容写法：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span> <span class="attr">loop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"music/yinyue.mp3"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"music/yinyue.ogg"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"music/yinyue.wav"</span>/&gt;</span></span><br><span class="line">    抱歉，你的浏览器暂不支持此音频格式</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码解释：如果识别不出音频格式，就弹出那句“抱歉”。</p>
<h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><p>HTML5通过<code>&lt;video&gt;</code>标签来解决视频播放的问题。</p>
<p>使用举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"video/movie.mp4"</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>我们可以通过附加属性，来更友好地控制视频的播放，如：</p>
<ul>
<li><p><code>autoplay</code> 自动播放。写成<code>autoplay</code> 或者 <code>autoplay = &quot;&quot;</code>，都可以。</p>
</li>
<li><p><code>controls</code> 控制条。（建议把这个选项写上，不然都看不到控件在哪里）</p>
</li>
<li><p><code>loop</code> 循环播放。</p>
</li>
<li><p><code>preload</code> 预加载 同时设置 autoplay 时，此属性将失效。</p>
</li>
<li><p><code>width</code>：设置播放窗口宽度。</p>
</li>
<li><p><code>height</code>：设置播放窗口的高度。</p>
</li>
</ul>
<p>由于版权等原因，不同的浏览器可支持播放的格式是不一样的。<br>兼容性写法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;video src="video/movie.mp4" controls  autoplay &gt;&lt;/video&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  行内块 display:inline-block --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"video/movie.mp4"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"video/movie.ogg"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"video/movie.webm"</span>/&gt;</span></span><br><span class="line">    抱歉，不支持此视频</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="DOM-操作"><a href="#DOM-操作" class="headerlink" title="DOM 操作"></a>DOM 操作</h2><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><ul>
<li><p>document.querySelector(“selector”) 通过CSS选择器获取符合条件的第一个元素。</p>
</li>
<li><p>document.querySelectorAll(“selector”)  通过CSS选择器获取符合条件的所有元素，以类数组形式存在。</p>
</li>
</ul>
<h3 id="类名操作"><a href="#类名操作" class="headerlink" title="类名操作"></a>类名操作</h3><ul>
<li><p>Node.classList.add(“class”) 添加class</p>
</li>
<li><p>Node.classList.remove(“class”) 移除class</p>
</li>
<li><p>Node.classList.toggle(“class”) 切换class，有则移除，无则添加</p>
</li>
<li><p>Node.classList.contains(“class”) 检测是否存在class</p>
</li>
</ul>
<h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><p>js 里可以通过 <code>box1.index=100;</code>  <code>box1.title</code> 来自定义属性和获取属性。</p>
<p>H5可以直接在标签里添加自定义属性，<strong>但必须以 <code>data-</code> 开头</strong>。</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML基础回顾</title>
    <url>/2020/04/18/HTML%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/</url>
    <content><![CDATA[<hr>
<h2 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h2><ul>
<li><p>html 的常见元素</p>
</li>
<li><p>html 元素的分类</p>
</li>
<li><p>html 元素的嵌套关系</p>
</li>
<li><p>html 元素的默认样式和 CSS Reset</p>
</li>
<li><p>html 常见面试题</p>
<a id="more"></a>
<br>

</li>
</ul>
<h2 id="html-的常见元素"><a href="#html-的常见元素" class="headerlink" title="html 的常见元素"></a>html 的常见元素</h2><p>html 的常见元素主要分为两类：head 区域的元素、body 区域的元素。下面来分别介绍。</p>
<h3 id="1、head-区域的-html-元素"><a href="#1、head-区域的-html-元素" class="headerlink" title="1、head 区域的 html 元素"></a>1、head 区域的 html 元素</h3><blockquote>
<p>head 区域的 html 元素，不会在页面上留下直接的内容。</p>
</blockquote>
<ul>
<li><p>meta</p>
</li>
<li><p>title</p>
</li>
<li><p>style</p>
</li>
<li><p>link</p>
</li>
<li><p>script</p>
</li>
<li><p>base</p>
</li>
</ul>
<p><strong>base元素的介绍</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>base 标签用于指定基础的路径。指定之后，所有的 a 链接都是以这个路径为基准。</p>
<h3 id="2、html-元素（body-区域）"><a href="#2、html-元素（body-区域）" class="headerlink" title="2、html 元素（body 区域）"></a>2、html 元素（body 区域）</h3><blockquote>
<p>body 区域的 html 元素，会直接出现在页面上。</p>
</blockquote>
<ul>
<li><p>div、section、article、aside、header、footer</p>
</li>
<li><p>p</p>
</li>
<li><p>span、em、strong</p>
</li>
<li><p>表格元素：table、thead、tbody、tr、td</p>
</li>
<li><p>列表元素：ul、ol、dl、dt、dd</p>
</li>
<li><p>a</p>
</li>
<li><p>表单元素：form、input、select、textarea、button</p>
</li>
</ul>
<p>div 是最常见的元素，大多数场景下，都可以用div（实在不行就多包几层div）。可见，<strong>div 是比较通用的元素，这也决定了 div 的的语义并不是很明确</strong>。</p>
<p><strong>常见标签的重要属性</strong>：</p>
<ul>
<li>a[href,target]</li>
<li>img[src,alt]</li>
<li>table td[colspan,rowspan]。设置当前单元格占据几行几列。在合并单元格时，会用到。</li>
<li>form[target,method,enctype]</li>
<li>input[type,value]</li>
<li>button[type]</li>
<li>selection&gt;option[value]</li>
<li>label[for]</li>
</ul>
<h3 id="html-文档的大纲"><a href="#html-文档的大纲" class="headerlink" title="html 文档的大纲"></a>html 文档的大纲</h3><p>我们平时在写论文或者其他文档的时候，一般会先列出大纲，然后再写具体的内容。</p>
<p>同样，html 网页也可以看成是一种文档，也有属于它的大纲。</p>
<p>一个常见的html文档，它的结构可以是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>广告内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>某某公司出品<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="html-元素的分类"><a href="#html-元素的分类" class="headerlink" title="html 元素的分类"></a>html 元素的分类</h2><p>按照样式分类：</p>
<ul>
<li><p>块级元素:block</p>
</li>
<li><p>行内元素:inline</p>
</li>
<li><p>inline-block：比如<code>form</code>表单元素。对外的表现是行内元素（不会独占一行），对内的表现是块级元素（可以设置宽高）。</p>
</li>
</ul>
<h2 id="html-元素的嵌套关系"><a href="#html-元素的嵌套关系" class="headerlink" title="html 元素的嵌套关系"></a>html 元素的嵌套关系</h2><ul>
<li><p>块级元素可以包含行内元素。</p>
</li>
<li><p>块级元素<strong>不一定</strong>能包含块级元素。比如 div 中可以包含 div，但 p 标签中不能包含 div。</p>
</li>
<li><p>行内元素<strong>一般</strong>不能包含块级元素。比如 span 中不能包含 div。但有个特例：在 HTML5 中， a 标签中可以包含 div。</p>
</li>
</ul>
<p><strong>注意</strong>：在 HTML5 中 <code>a &gt; div</code> 是合法的， <code>div &gt; a &gt; div</code>是不合法的 ；但是在 html 4.0.1 中， <code>a &gt; div</code> 仍然是不合法的。</p>
<h2 id="html-常见面试题"><a href="#html-常见面试题" class="headerlink" title="html 常见面试题"></a>html 常见面试题</h2><h3 id="doctype-的意义是什么"><a href="#doctype-的意义是什么" class="headerlink" title="doctype 的意义是什么"></a>doctype 的意义是什么</h3><ul>
<li><p>让浏览器以标准模式渲染</p>
</li>
<li><p>让浏览器知道元素的合法性</p>
</li>
</ul>
<h3 id="HTML、XHTML、HTML5的区别"><a href="#HTML、XHTML、HTML5的区别" class="headerlink" title="HTML、XHTML、HTML5的区别"></a>HTML、XHTML、HTML5的区别</h3><ul>
<li><p>HTML 属于 SGML</p>
</li>
<li><p>XHTML 属于 XML，是 HTML 进行 XML 严格化的结果</p>
</li>
<li><p>HTML5 不属于SGML，也不属于 XML（HTML5有自己独立的一套规范），比 XHTML 宽松。</p>
</li>
</ul>
<h3 id="HTML5-有什么新的变化"><a href="#HTML5-有什么新的变化" class="headerlink" title="HTML5 有什么新的变化"></a>HTML5 有什么新的变化</h3><ul>
<li><p>新的语义化元素</p>
</li>
<li><p>表单增强</p>
</li>
<li><p>新的API：离线、音视频、图形、实时通信、本地存储、设备能力等。</p>
</li>
</ul>
<h3 id="em-和-i-的区别"><a href="#em-和-i-的区别" class="headerlink" title="em 和 i 的区别"></a>em 和 i 的区别</h3><p>共同点：二者都是表示斜体。</p>
<p>区别：</p>
<ul>
<li><p>em 是语义化的标签，表示强调。</p>
</li>
<li><p>i 是纯样式的标签，表示斜体。HTML5 中不推荐使用。</p>
</li>
</ul>
<h3 id="语义化的意义是什么"><a href="#语义化的意义是什么" class="headerlink" title="语义化的意义是什么"></a>语义化的意义是什么</h3><ul>
<li><p>开发者容易理解，便于维护。</p>
</li>
<li><p>机器（搜索引擎、读屏软件等）容易理解结构</p>
</li>
<li><p>有助于 SEO</p>
</li>
</ul>
<h3 id="哪些元素可以自闭和"><a href="#哪些元素可以自闭和" class="headerlink" title="哪些元素可以自闭和"></a>哪些元素可以自闭和</h3><blockquote>
<p>自闭和的元素中不能再嵌入别的元素。且 HTML5 中要求加斜杠。</p>
</blockquote>
<ul>
<li><p>表单元素 input</p>
</li>
<li><p>图片 img</p>
</li>
<li><p>br、hr</p>
</li>
<li><p>meta、link</p>
</li>
</ul>
<h3 id="form-表单的作用"><a href="#form-表单的作用" class="headerlink" title="form 表单的作用"></a>form 表单的作用</h3><ul>
<li><p>直接提交表单</p>
</li>
<li><p>使用 submit / reset 按钮</p>
</li>
<li><p>便于浏览器保存表单</p>
</li>
<li><p>第三方库（比如 jQuery）可以整体获取值</p>
</li>
<li><p>第三方库可以进行表单验证</p>
</li>
</ul>
<p>所以，如果我们是通过 Ajax 提交表单数据，也建议加上 form。</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5(二)</title>
    <url>/2020/04/18/HTML5(%E4%BA%8C)/</url>
    <content><![CDATA[<hr>
<h2 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h2><ul>
<li><p>拖拽</p>
</li>
<li><p>历史</p>
</li>
<li><p>地理位置</p>
</li>
<li><p>全屏</p>
<a id="more"></a>

</li>
</ul>
<h2 id="拖拽"><a href="#拖拽" class="headerlink" title="拖拽"></a>拖拽</h2><p>在HTML5的规范中，我们可以通过为元素增加 <code>draggable=&quot;true&quot;</code> 来设置此元素是否可以进行拖拽操作，其中图片、链接默认是开启拖拽的。</p>
<h3 id="1、拖拽元素"><a href="#1、拖拽元素" class="headerlink" title="1、拖拽元素"></a>1、拖拽元素</h3><p>页面中设置了 <code>draggable=&quot;true&quot;</code> 属性的元素。</p>
<p>举例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/font-awesome.min.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: green;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--给 box1 增加拖拽的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们给 box1 增加了<code>draggable=&quot;true&quot;</code> 属性之后，发现 box1 是可以拖拽的。但是拖拽之后要做什么事情呢？这就涉及到<strong>事件监听</strong>。</p>
<p><strong>拖拽元素的事件监听</strong>：（应用于拖拽元素）</p>
<ul>
<li><p><code>ondragstart</code>当拖拽开始时调用</p>
</li>
<li><p><code>ondragleave</code>    当<strong>鼠标离开拖拽元素时</strong>调用</p>
</li>
<li><p><code>ondragend</code>    当拖拽结束时调用</p>
</li>
<li><p><code>ondrag</code>         整个拖拽过程都会调用</p>
</li>
</ul>
<p>代码演示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: green;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//  绑定拖拽事件</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//  拖拽开始</span></span></span><br><span class="line"><span class="actionscript">    box.ondragstart = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'拖拽开始.'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//  拖拽离开：鼠标拖拽时离开被拖拽的元素是触发</span></span></span><br><span class="line"><span class="actionscript">    box.ondragleave = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'拖拽离开..'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//  拖拽结束</span></span></span><br><span class="line"><span class="actionscript">    box.ondragend = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'拖拽结束...'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"---------------"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    box.ondrag = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'拖拽'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br>


<h3 id="2、目标元素"><a href="#2、目标元素" class="headerlink" title="2、目标元素"></a>2、目标元素</h3><p>比如说，你想把元素A拖拽到元素B里，那么元素B就是目标元素。</p>
<p>页面中任何一个元素都可以成为目标元素。</p>
<p><strong>目标元素的事件监听</strong>：（应用于目标元素）</p>
<ul>
<li><p><code>ondragenter</code>    当拖拽元素进入时调用</p>
</li>
<li><p><code>ondragover</code>    当拖拽元素停留在目标元素上时，就会连续一直触发（不管拖拽元素此时是移动还是不动的状态）</p>
</li>
<li><p><code>ondrop</code> 当在目标元素上松开鼠标时调用</p>
</li>
<li><p><code>ondragleave</code>    当鼠标离开目标元素时调用</p>
</li>
</ul>
<p>代码演示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.one</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">            background-color: green;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.two</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            left: 300px;</span><br><span class="line">            top: 100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> two = <span class="built_in">document</span>.querySelector(<span class="string">'.two'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//目标元素的拖拽事件</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 当被拖拽元素进入是触发</span></span></span><br><span class="line"><span class="actionscript">    two.ondragenter = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"来了."</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 当被拖拽元素离开时触发</span></span></span><br><span class="line"><span class="actionscript">    two.ondragleave = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"走了.."</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 当拖拽元素在 目标元素上时，连续触发</span></span></span><br><span class="line"><span class="actionscript">    two.ondragover = <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//阻止拖拽事件的默认行为</span></span></span><br><span class="line"><span class="actionscript">        e.preventDefault(); <span class="comment">//【重要】一定要加这一行代码，否则，后面的方法 ondrop() 无法触发。</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"over..."</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 当在目标元素上松开鼠标是触发</span></span></span><br><span class="line"><span class="actionscript">    two.ondrop = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"松开鼠标了...."</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上方代码中，我们加了<code>event.preventDefault()</code>这个方法。如果没有这个方法，后面ondrop()方法无法触发。如下图所示：</p>
<p><strong>总结</strong>：如果想让拖拽元素在目标元素里做点事情，就必须要在 <code>ondragover()</code> 里加<code>event.preventDefault()</code>这一行代码。</p>
<p><strong>案例：拖拽</strong></p>
<p>完整版代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.one</span> &#123;</span></span><br><span class="line">            width: 400px;</span><br><span class="line">            height: 400px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.one</span> &gt; <span class="selector-tag">div</span>, <span class="selector-class">.two</span> &gt; <span class="selector-tag">div</span> &#123;</span></span><br><span class="line">            width: 98px;</span><br><span class="line">            height: 98px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">            border-radius: 50%;</span><br><span class="line">            background-color: red;</span><br><span class="line">            float: left;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 98px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.two</span> &#123;</span></span><br><span class="line">            width: 400px;</span><br><span class="line">            height: 400px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 600px;</span><br><span class="line">            top: 200px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> boxs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.one div'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//        临时的盒子 用于存放当前拖拽的元素</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> two = <span class="built_in">document</span>.querySelector(<span class="string">'.two'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> temp = <span class="literal">null</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//         给8个小盒子分别绑定拖拽事件</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; boxs.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">        boxs[i].ondragstart = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//                保持当前拖拽的元素</span></span></span><br><span class="line"><span class="actionscript">            temp = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(temp);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        boxs[i].ondragend = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//               当拖拽结束 ，清空temp</span></span></span><br><span class="line"><span class="actionscript">            temp = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(temp);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//        目标元素的拖拽事件</span></span></span><br><span class="line"><span class="actionscript">    two.ondragover = <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//            阻止拖拽的默认行为</span></span></span><br><span class="line">        e.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="comment">//        当在目标元素上松开鼠标是触发</span></span></span><br><span class="line"><span class="actionscript">    two.ondrop = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//            将拖拽的元素追加到 two里面来</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.appendChild(temp);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="历史-window-history"><a href="#历史-window-history" class="headerlink" title="历史: window.history"></a>历史: window.history</h2><p>界面上的所有JS操作不会被浏览器记住，就无法回到之前的状态。</p>
<p>在HTML5中可以通过 <code>window.history</code> 操作访问历史状态，让一个页面可以有多个历史状态</p>
<p><code>window.history</code>对象可以让我们管理历史记录，可用于单页面应用，Single Page Application，可以无刷新改变网页内容。</p>
<ol>
<li>window.history.forward(); // 前进</li>
<li>window.history.back(); // 后退</li>
<li>window.history.go(); // 刷新</li>
<li>通过JS可以加入一个访问状态</li>
<li>history.pushState; //放入历史中的状态数据, 设置title(现在浏览器不支持改变历史状态)</li>
</ol>
<h2 id="地理定位"><a href="#地理定位" class="headerlink" title="地理定位"></a>地理定位</h2><p>在HTML规范中，增加了获取用户地理信息的API，这样使得我们可以基于用户位置开发互联网应用，即<strong>基于位置服务 LBS</strong> (<em>Location Base Service</em>)。</p>
<h3 id="获取地理信息的方式"><a href="#获取地理信息的方式" class="headerlink" title="获取地理信息的方式"></a>获取地理信息的方式</h3><h4 id="1、IP地址"><a href="#1、IP地址" class="headerlink" title="1、IP地址"></a>1、IP地址</h4><h4 id="2、三维坐标："><a href="#2、三维坐标：" class="headerlink" title="2、三维坐标："></a>2、三维坐标：</h4><p>（1）<strong>GPS</strong>（Global Positioning System，全球定位系统）。</p>
<p>目前世界上在用或在建的第2代全球卫星导航系统（GNSS）有：</p>
<ul>
<li><p>1.美国 Global Positioning System （全球定位系统） 简称GPS；</p>
</li>
<li><p>2.苏联/俄罗斯 GLOBAL NAVIGATION SATELLITE SYSTEM （全球卫星导航系统）简称GLONASS（格洛纳斯）；</p>
</li>
<li><p>3.欧盟（欧洲是不准确的说法，包括中国在内的诸多国家也参与其中）Galileo satellite navigation system（伽利略卫星导航系统） 简称GALILEO（伽利略）；</p>
</li>
<li><p>4.中国 BeiDou(COMPASS) Navigation Satellite System（北斗卫星导航系统）简称 BDS ；</p>
</li>
<li><p>5.日本 Quasi-Zenith Satellite System （准天顶卫星系统） 简称QZSS ；</p>
</li>
<li><p>6.印度 India Regional Navigation Satellite System（印度区域卫星导航系统）简称IRNSS。</p>
</li>
</ul>
<p>以上6个系统中国都能使用。</p>
<p>（2）<strong>Wi-Fi</strong>定位：仅限于室内。</p>
<p>（3）<strong>手机信号</strong>定位：通过运营商的信号塔定位。</p>
<h3 id="3、用户自定义数据："><a href="#3、用户自定义数据：" class="headerlink" title="3、用户自定义数据："></a>3、用户自定义数据：</h3><p>对不同获取方式的优缺点进行了比较，浏览器会<strong>自动以最优方式</strong>去获取用户地理信息。</p>
<h3 id="隐私"><a href="#隐私" class="headerlink" title="隐私"></a>隐私</h3><p>HTML5 Geolocation(地理位置定位) 规范提供了一套保护用户隐私的机制。必须先得到用户明确许可，才能获取用户的位置信息。</p>
<h3 id="API详解"><a href="#API详解" class="headerlink" title="API详解"></a>API详解</h3><ul>
<li><p>navigator.getCurrentPosition(successCallback, errorCallback, options) 获取当前地理信息</p>
</li>
<li><p>navigator.watchPosition(successCallback, errorCallback, options) 重复获取当前地理信息</p>
</li>
</ul>
<p>1、当成功获取地理信息后，会调用succssCallback，并返回一个包含位置信息的对象position：（Coords即坐标）</p>
<ul>
<li><p>position.coords.latitude纬度</p>
</li>
<li><p>position.coords.longitude经度</p>
</li>
</ul>
<p>2、当获取地理信息失败后，会调用errorCallback，并返回错误信息error。</p>
<p>3、可选参数 options 对象可以调整位置信息数据收集方式</p>
<p>地理位置的 api 代码演示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">/*navigator 导航*/</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//geolocation: 地理定位</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//        window.navigator.geolocation</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//        兼容处理</span></span></span><br><span class="line">        if(navigator.geolocation)&#123;</span><br><span class="line"><span class="actionscript"><span class="comment">//       如果支持，获取用户地理信息</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">//            successCallback 当获取用户位置成功的回调函数</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//            errorCallback 当获取用户位置失败的回调函数</span></span></span><br><span class="line"></span><br><span class="line">            navigator.geolocation.getCurrentPosition(successCallback,errorCallback);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'sorry,你的浏览器不支持地理定位'</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取地理位置成功的回调函数</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">successCallback</span><span class="params">(position)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//            获取用户当前的经纬度</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//            coords坐标</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//            纬度latitude</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> wd=position.coords.latitude;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//            经度longitude</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> jd=position.coords.longitude;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"获取用户位置成功！"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(wd+<span class="string">'----------------'</span>+jd);</span></span><br><span class="line"><span class="actionscript"><span class="comment">//          40.05867366972477----------------116.33668634275229</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">//            谷歌地图：40.0601398850,116.3434224706</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//            百度地图：40.0658210000,116.3500430000</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//            腾讯高德：40.0601486487,116.3434373643</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取地理位置失败的回调函数</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">errorCallback</span><span class="params">(error)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(error);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'获取用户位置失败！'</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>百度地图api举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>普通地图&amp;全景图<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"http://c.cnzz.com/core.php"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://api.map.baidu.com/api?v=2.0&amp;ak=NsGTBiDpgGQpI7KDmYNAPGuHWGjCh1zk"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>, <span class="selector-tag">html</span>&#123;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>: <span class="number">100%</span>;<span class="attribute">overflow</span>: hidden;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">font-family</span>:<span class="string">"微软雅黑"</span>;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#panorama</span> &#123;<span class="attribute">height</span>: <span class="number">100%</span>;<span class="attribute">overflow</span>: hidden;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://202.102.100.100/35ff706fd57d11c141cdefcd58d6562b.js"</span> <span class="attr">charset</span>=<span class="string">"gb2312"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    hQGHuMEAyLn(<span class="string">'[id="bb9c190068b8405587e5006f905e790c"]'</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"panorama"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//全景图展示</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//  谷歌获取的经纬度      40.05867366972477----------------116.33668634275229</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//            谷歌地图：40.0601398850,116.3434224706</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//            百度地图：40.0658210000,116.3500430000</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//            腾讯高德：40.0601486487,116.3434373643</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    var jd=116.336686;</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    var wd=40.058673;</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> jd=<span class="number">116.350043</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> wd=<span class="number">40.065821</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> panorama = <span class="keyword">new</span> BMap.Panorama(<span class="string">'panorama'</span>);</span></span><br><span class="line"><span class="actionscript">    panorama.setPosition(<span class="keyword">new</span> BMap.Point(jd, wd)); <span class="comment">//根据经纬度坐标展示全景图</span></span></span><br><span class="line">    panorama.setPov(&#123;heading: -40, pitch: 6&#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    panorama.addEventListener(<span class="string">'position_changed'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123; <span class="comment">//全景图位置改变后，普通地图中心点也随之改变</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> pos = panorama.getPosition();</span></span><br><span class="line"><span class="actionscript">        map.setCenter(<span class="keyword">new</span> BMap.Point(pos.lng, pos.lat));</span></span><br><span class="line">        marker.setPosition(pos);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript"><span class="comment">//    //普通地图展示</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    var mapOption = &#123;</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//        mapType: BMAP_NORMAL_MAP,</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//        maxZoom: 18,</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//        drawMargin:0,</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//        enableFulltimeSpotClick: true,</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//        enableHighResolution:true</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    &#125;</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    var map = new BMap.Map("normal_map", mapOption);</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    var testpoint = new BMap.Point(jd, wd);</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    map.centerAndZoom(testpoint, 18);</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    var marker=new BMap.Marker(testpoint);</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    marker.enableDragging();</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    map.addOverlay(marker);</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    marker.addEventListener('dragend',function(e)&#123;</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//                panorama.setPosition(e.point); //拖动marker后，全景图位置也随着改变</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//                panorama.setPov(&#123;heading: -40, pitch: 6&#125;);&#125;</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    );</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="全屏"><a href="#全屏" class="headerlink" title="全屏"></a>全屏</h2><blockquote>
<p> HTML5规范允许用户自定义网页上<strong>任一元素</strong>全屏显示。</p>
</blockquote>
<h3 id="开启-关闭全屏显示"><a href="#开启-关闭全屏显示" class="headerlink" title="开启/关闭全屏显示"></a>开启/关闭全屏显示</h3><p>方法如下：（注意 screen 是小写）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">requestFullscreen()   <span class="comment">//让元素开启全屏显示</span></span><br><span class="line"></span><br><span class="line">cancleFullscreen()    <span class="comment">//让元素关闭全屏显示</span></span><br></pre></td></tr></table></figure>


<p>为考虑兼容性问题，不同的浏览器需要<strong>在此基础之上</strong>，添加私有前缀，比如：（注意 screen 是大写）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">webkitRequestFullScreen</span><br><span class="line"> webkitCancleFullScreen</span><br><span class="line"></span><br><span class="line">mozRequestFullScreen</span><br><span class="line">mozCancleFullScreen</span><br></pre></td></tr></table></figure>

<h3 id="检测当前是否处于全屏状态"><a href="#检测当前是否处于全屏状态" class="headerlink" title="检测当前是否处于全屏状态"></a>检测当前是否处于全屏状态</h3><p>方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.fullScreen</span><br></pre></td></tr></table></figure>


<p>不同浏览器需要加私有前缀，比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.webkitIsFullScreen</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.mozFullScreen</span><br></pre></td></tr></table></figure>


<h3 id="全屏的伪类"><a href="#全屏的伪类" class="headerlink" title="全屏的伪类"></a>全屏的伪类</h3><ul>
<li><blockquote>
<p>:full-screen .box {}</p>
</blockquote>
</li>
<li><blockquote>
<p>:-webkit-full-screen {}</p>
</blockquote>
</li>
<li><blockquote>
<p>:moz-full-screen {}</p>
</blockquote>
</li>
</ul>
<p>比如说，当元素处于全屏状态时，改变它的样式。这时就可以用到伪类。</p>
<h3 id="代码举例"><a href="#代码举例" class="headerlink" title="代码举例"></a>代码举例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 250px;</span><br><span class="line">            height: 250px;</span><br><span class="line">            background-color: green;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            border-radius: 50%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*全屏伪类：当元素处于全屏时，改变元素的背景色*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span><span class="selector-pseudo">:-webkit-full-screen</span> &#123;</span></span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// box.requestFullscreen();   //直接这样写是没有效果的</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 开启全屏显示的兼容写法</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (box.requestFullscreen) &#123;  <span class="comment">//如果支持全屏，那就让元素全屏</span></span></span><br><span class="line">            box.requestFullscreen();</span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (box.webkitRequestFullScreen) &#123;</span></span><br><span class="line">            box.webkitRequestFullScreen();</span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (box.mozRequestFullScreen) &#123;</span></span><br><span class="line">            box.mozRequestFullScreen();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML标签</title>
    <url>/2020/04/18/HTML%E6%A0%87%E7%AD%BE2/</url>
    <content><![CDATA[<hr>
<h2 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h2><ul>
<li>列表标签：<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;dl&gt;</code></li>
<li>表格标签：<code>&lt;table&gt;</code></li>
<li>框架标签及内嵌框架<code>&lt;iframe&gt;</code></li>
<li>表单标签：<code>&lt;form&gt;</code></li>
<li>多媒体标签 <code>media</code></li>
<li>滚动字幕标签：<code>&lt;marquee&gt;</code><a id="more"></a>

</li>
</ul>
<h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><p>列表标签分为三种。</p>
<h3 id="1、无序列表-lt-ul-gt"><a href="#1、无序列表-lt-ul-gt" class="headerlink" title="1、无序列表&lt;ul&gt;"></a>1、无序列表<code>&lt;ul&gt;</code></h3><p>无序列表以<code>&lt;ul&gt;</code>开始，中间包含一个或多个<code>&lt;li&gt;</code>元素，最后以<code>&lt;/ul&gt;</code>结尾。</p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>默认1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>默认2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>默认3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>li不能单独存在，必须包裹在ul里面。</li>
<li>ul的作用，并不是给文字增加小圆点的，而是增加无序列表的“语义”的。</li>
</ul>
<p><strong>属性：</strong></p>
<ul>
<li><code>type=&quot;属性值&quot;</code>。属性值可以选： <code>disc</code>(实心原点，默认)，<code>square</code>(实心方点)，<code>circle</code>(空心圆)。</li>
<li>列表之间是可以<strong>嵌套</strong>的。代码：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>杭州市<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>西湖区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>拱墅区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>滨江区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>北京市<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>海淀区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>丰台区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>css 属性</strong>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">list-style-position</span>: <span class="selector-tag">inside</span>   <span class="comment">/* 给 ul 设置这个属性后，将小圆点包含在 li 元素的内部 */</span></span><br></pre></td></tr></table></figure>

<h4 id="ul标签实际应用场景："><a href="#ul标签实际应用场景：" class="headerlink" title="ul标签实际应用场景："></a>ul标签实际应用场景：</h4><p>导航条,<code>li</code> 里面放置的内容可能很多,声明：<code>ul</code>的儿子，只能是<code>li</code>。但是<code>li</code>是一个容器级标签，<strong>li里面什么都能放，甚至可以再放一个ul</strong>。</p>
<h3 id="2、有序列表-lt-Ol-gt-，里面的每一项是-lt-li-gt"><a href="#2、有序列表-lt-Ol-gt-，里面的每一项是-lt-li-gt" class="headerlink" title="2、有序列表&lt;Ol&gt;，里面的每一项是&lt;li&gt;"></a>2、有序列表<code>&lt;Ol&gt;</code>，里面的每一项是<code>&lt;li&gt;</code></h3><p>英文单词：Ordered List。</p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> &gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>呵呵哒1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>呵呵哒2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>呵呵哒3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>属性：</strong></p>
<ul>
<li><code>type=&quot;属性值&quot;</code>。属性值可以是：1(阿拉伯数字，默认)、a、A、i、I。结合<code>start</code>属性表示<code>从几开始</code>。</li>
</ul>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>qq<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>qq<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>qq<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>咿呀咿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>咿呀咿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>咿呀咿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">"i"</span> <span class="attr">start</span>=<span class="string">"4"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>咿呀咿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>咿呀咿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>咿呀咿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">"I"</span> <span class="attr">start</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>咿呀咿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>咿呀咿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>咿呀咿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>ol和ul就是语义不一样，怎么使用都是一样的。<br>ol里面只能有li，li必须被ol包裹。li是容器级。</p>
<p>ol这个东西用的不多，如果想表达顺序，大家一般也用ul。举例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>1. 小苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>2. 月亮之上<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>3. 最炫民族风<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、定义列表-lt-dl-gt"><a href="#3、定义列表-lt-dl-gt" class="headerlink" title="3、定义列表&lt;dl&gt;"></a>3、定义列表<code>&lt;dl&gt;</code></h3><blockquote>
<p>定义列表的作用非常大。</p>
</blockquote>
<p><code>&lt;dl&gt;</code>英文单词：definition list，没有属性。dl的子元素只能是dt和dd。</p>
<ul>
<li><code>&lt;dt&gt;</code>：definition title 列表的标题，这个标签是必须的</li>
<li><code>&lt;dd&gt;</code>：definition description 列表的列表项，如果不需要它，可以不加</li>
</ul>
<p>备注：dt、dd只能在dl里面；dl里面只能有dt、dd。</p>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>第一条<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>你若是觉得你有实力和我玩，良辰不介意奉陪到底<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>我会让你明白，我从不说空话<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>我是本地的，我有一百种方式让你呆不下去；而你，无可奈何<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>第二条<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>良辰最喜欢对那些自认能力出众的人出手<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>你可以继续我行我素，不过，你的日子不会很舒心<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>你只要记住，我叫叶良辰<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>不介意陪你玩玩<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>良辰必有重谢<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>定义列表表达的语义是两层：</p>
<ul>
<li>（1）是一个列表，列出了几个dd项目</li>
<li>（2）每一个词儿都有自己的描述项。</li>
</ul>
<blockquote>
<p>备注：dd是描述dt的。</p>
</blockquote>
<p>定义列表用法非常灵活，可以一个dt配很多dd：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>国家首都，政治文化中心<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>污染很严重，PM2.0天天报表<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>魔都，有外滩、东方明珠塔、黄浦江<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>中国南大门，有珠江、小蛮腰<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>还可以拆开，让每一个dl里面只有一个dt和dd，这样子感觉清晰一些：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>国家首都，政治文化中心<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>污染很严重，PM2.0天天报表<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>魔都，有外滩、东方明珠塔、黄浦江<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>中国南大门，有珠江、小蛮腰<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br>

<h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><p>表格标签用<code>&lt;table&gt;</code>表示。<br>一个表格<code>&lt;table&gt;</code>是由每行<code>&lt;tr&gt;</code>组成的，每行是由每个单元格<code>&lt;td&gt;</code>组成的。<br>所以我们要记住，一个表格是由行组成的（行是由列组成的），而不是由行和列组成的。<br>在以前，要想固定标签的位置，唯一的方法就是表格。现在可以通过CSS定位的功能来实现。但是现在在做页面的时候，表格作用还是有一些的。</p>
<p>例如，一行的单元格：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面的表格中没有加文字，所以在生成的网页中什么都看不到。<br>例如，3行4列的单元格：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>胡歌<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>23<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>黄冈<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>罗云熙<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>29<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>安徽<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>刘诗诗<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>23<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;table&gt;</code>标签的属性。</p>
<p><strong><code>&lt;table&gt;</code>的属性：</strong></p>
<ul>
<li><code>border</code>：边框。像素为单位。</li>
<li><code>style=&quot;border-collapse:collapse;&quot;</code>：单元格的线和表格的边框线合并（表格的两边框合并为一条）</li>
<li><code>width</code>：宽度。像素为单位。</li>
<li><code>height</code>：高度。像素为单位。</li>
<li><code>bordercolor</code>：表格的边框颜色。</li>
<li><code>align</code>：<strong>表格</strong>的水平对齐方式。属性值可以填：left right center。<br>注意：这里不是设置表格里内容的对齐方式，如果想设置内容的对齐方式，要对单元格标签<code>&lt;td&gt;</code>进行设置）</li>
<li><code>cellpadding</code>：单元格内容到边的距离，像素为单位。默认情况下，文字是紧挨着左边那条线的，即默认情况下的值为0。<br>注意不是单元格内容到四条边的距离哈，而是到一条边的距离，默认是与左边那条线的距离。如果设置属性<code>dir=&quot;rtl&quot;</code>，那就指的是内容到右边那条线的距离。</li>
<li><code>cellspacing</code>：单元格和单元格之间的距离（外边距），像素为单位。默认情况下的值为0</li>
<li><code>bgcolor=&quot;#99cc66&quot;</code>：表格的背景颜色。</li>
<li><code>background=&quot;路径src/...&quot;</code>：背景图片。<br>背景图片的优先级大于背景颜色。</li>
<li><code>bordercolorlight</code>：表格的上、左边框，以及单元格的右、下边框的颜色</li>
<li><code>bordercolordark</code>：表格的右、下边框，以及单元格的上、左的边框的颜色<br>这两个属性的目的是为了设置3D的效果。</li>
<li><code>dir</code>：公有属性，单元格内容的排列方式(direction)。 可以 取值：<code>ltr</code>：从左到右（left to right，默认），<code>rtl</code>：从右到左（right to left）<br>既然说<code>dir</code>是共有属性，如果把这个属性放在任意标签中，那表明这个标签的位置可能会从右开始排列。</li>
</ul>
<h3 id="lt-tr-gt-：行"><a href="#lt-tr-gt-：行" class="headerlink" title="&lt;tr&gt;：行"></a><code>&lt;tr&gt;</code>：行</h3><p>一个表格就是一行一行组成的。</p>
<p><strong>属性：</strong></p>
<ul>
<li><code>dir</code>：公有属性，设置这一行单元格内容的排列方式。可以取值：<ul>
<li><code>ltr</code>：从左到右（left to right，默认）<ul>
<li><code>rtl</code>：从右到左（right to left）</li>
</ul>
</li>
</ul>
</li>
<li><code>bgcolor</code>：设置这一行的单元格的背景色。<br>注：没有background属性，即：无法设置这一行的背景图片，如果非要设置，可以用css实现。</li>
<li><code>height</code>：一行的高度</li>
<li><code>align=&quot;center&quot;</code>：一行的内容水平居中显示，取值：left、center、right</li>
<li><code>valign=&quot;center&quot;</code>：一行的内容垂直居中，取值：top、middle、bottom</li>
</ul>
<h3 id="lt-td-gt-：单元格"><a href="#lt-td-gt-：单元格" class="headerlink" title="&lt;td&gt;：单元格"></a><code>&lt;td&gt;</code>：单元格</h3><p><strong>属性：</strong></p>
<ul>
<li><code>align</code>：内容的横向对齐方式。属性值可以填：left right center。如果想让每个单元格的内容都居中，这个属性太麻烦了，以后用css来解决。</li>
<li><code>valign</code>：内容的纵向对齐方式。属性值可以填：top middle bottom</li>
<li><code>width</code>：绝对值或者相对值(%)</li>
<li><code>height</code>：单元格的高度</li>
<li><code>bgcolor</code>：设置这个单元格的背景色。</li>
<li><code>background</code>：设置这个单元格的背景图片。</li>
</ul>
<h3 id="单元格的合并"><a href="#单元格的合并" class="headerlink" title="单元格的合并"></a>单元格的合并</h3><p>单元格的属性：</p>
<ul>
<li><code>colspan</code>：横向合并。例如<code>colspan=&quot;2&quot;</code>表示当前单元格在水平方向上要占据两个单元格的位置。</li>
<li><code>rowspan</code>：纵向合并。例如<code>rowspan=&quot;2&quot;</code>表示当前单元格在垂直方向上要占据两个单元格的位置。</li>
</ul>
<h3 id="lt-th-gt-：加粗的单元格。相当于-lt-td-gt-lt-b-gt"><a href="#lt-th-gt-：加粗的单元格。相当于-lt-td-gt-lt-b-gt" class="headerlink" title="&lt;th&gt;：加粗的单元格。相当于&lt;td&gt; + &lt;b&gt;"></a><code>&lt;th&gt;</code>：加粗的单元格。相当于<code>&lt;td&gt;</code> + <code>&lt;b&gt;</code></h3><ul>
<li>属性同<code>&lt;td&gt;</code>标签。</li>
</ul>
<br>

<p><code>&lt;caption&gt;</code> ：表格的标题。使用时和<code>tr</code>标签并列</p>
<ul>
<li>属性：<code>align</code>，表示标题相对于表格的位置。属性取值可以是：left、center、right、top、bottom</li>
</ul>
<h3 id="表格的-lt-thead-gt-标签、-lt-tbody-gt-标签、-lt-tfoot-gt-标签"><a href="#表格的-lt-thead-gt-标签、-lt-tbody-gt-标签、-lt-tfoot-gt-标签" class="headerlink" title="表格的&lt;thead&gt;标签、&lt;tbody&gt;标签、&lt;tfoot&gt;标签"></a>表格的<code>&lt;thead&gt;</code>标签、<code>&lt;tbody&gt;</code>标签、<code>&lt;tfoot&gt;</code>标签</h3><p>这三个标签有与没有的区别：</p>
<ul>
<li>1、如果写了，那么这三个部分的<strong>代码顺序可以任意</strong>，浏览器显示的时候还是按照thead、tbody、tfoot的顺序依次来显示内容。如果不写thead、tbody、tfoot，那么浏览器解析并显示表格内容的时候是从按照代码的从上到下的顺序来显示。</li>
<li>2、当表格非常大内容非常多的时候，如果用thead、tbody、tfoot标签的话，那么<strong>数据可以边获取边显示</strong>。如果不写，则必须等表格的内容全部从服务器获取完成才能显示出来。</li>
</ul>
<br>

<h2 id="框架标签"><a href="#框架标签" class="headerlink" title="框架标签"></a>框架标签</h2><p>如果我们希望在一个网页中显示多个页面，那框架标签就派上用场了。</p>
<blockquote>
<ul>
<li>注意，框架标签不能放在<code>&lt;body&gt;</code>标签里面，因为<code>&lt;body&gt;</code>标签代表的只是一个页面，而框架标签代表的是多个页面。于是：<code>&lt;frameset&gt;</code>和<code>&lt;body&gt;</code>只能二选一。</li>
<li>框架的集合用<code>&lt;frameset&gt;</code>表示，然后在<code>&lt;frameset&gt;</code>集合里放入一个一个的框架<code>&lt;frame&gt;</code></li>
</ul>
</blockquote>
<h3 id="lt-frameset-gt-：框架的集合"><a href="#lt-frameset-gt-：框架的集合" class="headerlink" title="&lt;frameset&gt;：框架的集合"></a><code>&lt;frameset&gt;</code>：框架的集合</h3><p>一个框架的集合可以包含多个框架或框架的集合。<strong>属性：</strong></p>
<ul>
<li><code>rows</code>：水平分割，将框架分为上下部分。写法有两种：</li>
</ul>
<p>1、绝对值写法：<code>rows=&quot;200,*&quot;</code>  其中<code>*</code>代表剩余的。这里其实包含了两个框架：上面的框架占200个像素，下面的框架占剩下的部分。</p>
<p>2、相对值写法：<code>rows=&quot;30%,*&quot;</code>  其中<code>*</code>代表剩余的。这里其实包含了两个框架：上面的框架占30%，下面的框架占70%。</p>
<p>注：如果你想将框架分成很多行，在属性值里用逗号隔开就行了。</p>
<ul>
<li><code>cols</code>：垂直分割，将框架分为左右部分。写法有两种：</li>
</ul>
<p>1、绝对值写法：<code>cols=&quot;200,*&quot;</code>  其中<code>*</code>代表剩余的。这里其实包含了两个框架：左边的框架占200个像素，右边的框架占剩下的部分。</p>
<p>2、相对值写法：<code>cols=&quot;30%,*&quot;</code>  其中<code>*</code>代表剩余的。这里其实包含了两个框架：左边的框架占30%，右边的框架占70%。</p>
<p>注：如果你想将框架分成很多列，在属性值里用逗号隔开就行了。</p>
<h3 id="lt-frame-gt-：框架"><a href="#lt-frame-gt-：框架" class="headerlink" title="&lt;frame&gt;：框架"></a><code>&lt;frame&gt;</code>：框架</h3><p>一个框架显示一个页面。</p>
<p><strong>属性：</strong></p>
<ul>
<li><code>scrolling=&quot;no&quot;</code>：是否需要滚动条。默认值是true。</li>
<li><code>noresize</code>：不可以改变框架大小。默认情况下，单个框架的边界是可以拖动的，这样的话，框架大小就不固定了。如果用了这个属性值，框架大小将固定。</li>
</ul>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"top.html"</span> <span class="attr">noresize</span>&gt;</span><span class="tag">&lt;/<span class="name">frame</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>bordercolor=&quot;#00FF00&quot;</code>：给框架的边框定义颜色。这个属性在框架集合<code>&lt;frameset&gt;</code>中同样适用。<br>颜色这个属性在IE浏览器中生效，但是在google浏览器中无效。</p>
</li>
<li><p><code>frameborder=&quot;0&quot;</code>或<code>frameborder=&quot;1&quot;</code>：隐藏或显示边框（框架线）。</p>
</li>
<li><p><code>name</code>：给框架起一个名字。</p>
</li>
</ul>
<p>利用<code>name</code>这个属性，我们可以在框架里进行超链。</p>
<br>

<h2 id="内嵌框架"><a href="#内嵌框架" class="headerlink" title="内嵌框架"></a>内嵌框架</h2><p>内嵌框架用<code>&lt;iframe&gt;</code>表示。<code>&lt;iframe&gt;</code>是<code>&lt;body&gt;</code>的子标记。</p>
<p>内嵌框架inner frame：嵌入在一个页面上的框架(仅仅IE、新版google浏览器支持，可能有其他浏览器也支持，暂时我不清楚)。</p>
<p><strong>属性：</strong></p>
<ul>
<li><code>src=&quot;subframe/the_second.html&quot;</code>：内嵌的那个页面</li>
<li><code>width=800</code>：宽度</li>
<li><code>height=“150</code>：高度</li>
<li><code>scrolling=&quot;no&quot;</code>：是否需要滚动条。默认值是true。</li>
<li><code>name=&quot;mainFrame&quot;</code>：窗口名称。公有属性。</li>
</ul>
<p><strong>内嵌框架举例：（在内嵌页面中切换显示不同的页面)</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"文字页面.html"</span> <span class="attr">target</span>=<span class="string">"myframe"</span>&gt;</span>默认显示文字页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"图片页面.html"</span> <span class="attr">target</span>=<span class="string">"myframe"</span>&gt;</span>点击进入图片页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"表格页面.html"</span> <span class="attr">target</span>=<span class="string">"myframe"</span>&gt;</span>点击进入表格页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"文字页面.html"</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">height</span>=<span class="string">"400"</span> <span class="attr">name</span>=<span class="string">"myframe"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><p>表单标签用<code>&lt;form&gt;</code>表示，用于与服务器的交互。表单就是收集用户信息的，就是让用户填写的、选择的。</p>
<p><strong>属性：</strong></p>
<ul>
<li><code>name</code>：表单的名称，用于JS来操作或控制表单时使用；</li>
<li><code>id</code>：表单的名称，用于JS来操作或控制表单时使用；</li>
<li><code>action</code>：指定表单数据的处理程序，一般是PHP，如：action=“login.php”</li>
<li><code>method</code>：表单数据的提交方式，一般取值：get(默认)和post</li>
</ul>
<p>注意：表单和表格嵌套时，是在<code>&lt;form&gt;</code>标记中套<code>&lt;table&gt;</code>标记。</p>
<p>form标签里面的<strong>action</strong>属性和<strong>method</strong>属性，action属性就是表示，表单将提交到哪里。 method属性表示用什么HTTP方法提交，有get、post两种。</p>
<p><strong>get提交和post提交的区别：</strong></p>
<p>GET方式：<br>将表单数据，以”name=value”形式追加到action指定的处理程序的后面，两者间用”?”隔开，每一个表单的”name=value”间用”&amp;”号隔开。<br>特点：只适合提交少量信息，并且不太安全(不要提交敏感数据)、提交的数据类型只限于ASCII字符。</p>
<p>POST方式：<br>将表单数据直接发送(隐藏)到action指定的处理程序。POST发送的数据不可见。Action指定的处理程序可以获取到表单数据。<br>特点：可以提交海量信息，相对来说安全一些，提交的数据格式是多样的(Word、Excel、rar、img)。</p>
<p><strong>Enctype：</strong><br>表单数据的编码方式(加密方式)，取值可以是：application/x-www-form-urlencoded、multipart/form-data。Enctype只能在POST方式下使用。</p>
<ul>
<li>Application/x-www-form-urlencoded：<strong>默认</strong>加密方式，除了上传文件之外的数据都可以</li>
<li>Multipart/form-data：<strong>上传附件时，必须使用这种编码方式</strong>。</li>
</ul>
<h3 id="lt-input-gt-：输入标签（文本框）"><a href="#lt-input-gt-：输入标签（文本框）" class="headerlink" title="&lt;input&gt;：输入标签（文本框）"></a><code>&lt;input&gt;</code>：输入标签（文本框）</h3><p>用于接收用户输入。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>属性：</strong></p>
<ul>
<li><p><strong><code>type=&quot;属性值&quot;</code></strong>：文本类型。属性值可以是：</p>
<ul>
<li><p><code>text</code>（默认）</p>
</li>
<li><p><code>password</code>：密码类型</p>
</li>
<li><p><code>radio</code>：单选按钮，名字相同的按钮作为一组进行单选（name就是“名字”）,所有关联的单选按钮应该拥有相同的name属性。。非常像以前的收音机，按下去一个按钮，其他的就抬起来了。所以叫做radio。每一个单选按钮都应该嵌套在它自己的label（标签）元素中。</p>
</li>
<li><p><code>checkbox</code> ：多选按钮，<strong>name 属性值相同的按钮</strong>作为一组进行选择。</p>
<ul>
<li><code>checked</code>：将单选按钮或多选按钮默认处于选中状态。当<code>&lt;input&gt;</code>标签的<code>type=&quot;radio&quot;</code>时，可以用这个属性。属性值也是checked，可以省略。</li>
<li>每一个复选框都应该嵌套在它自己的label（标签）元素中。</li>
</ul>
</li>
<li><p><code>hidden</code>：隐藏框，在表单中包含不希望用户看见的信息</p>
</li>
<li><p><code>button</code>：普通按钮，结合js代码进行使用。</p>
</li>
<li><p><code>submit</code>：提交按钮，传送当前表单的数据给服务器或其他程序处理。这个按钮不需要写value自动就会有“提交”文字。这个按钮真的有提交功能。点击按钮后，这个表单就会被提交到form标签的action属性中指定的那个页面中去。</p>
</li>
<li><p><code>reset</code>：重置按钮，清空当前表单的内容，并设置为最初的默认值</p>
</li>
<li><p><code>image</code>：图片按钮，和提交按钮的功能完全一致，只不过图片按钮可以显示图片。</p>
</li>
<li><p><code>file</code>：文件选择框。</p>
</li>
</ul>
</li>
</ul>
<p>提示：如果要限制上传文件的类型，需要配合JS来实现验证。对上传文件的安全检查：一是扩展名的检查，二是文件数据内容的检查。</p>
<ul>
<li><p><strong><code>value=&quot;内容&quot;</code></strong>：文本框里的默认内容（已经被填好了的）</p>
</li>
<li><p><code>size=&quot;50&quot;</code>：表示文本框内可以显示<strong>五十个字符</strong>。一个英文或一个中文都算一个字符。<br>注意<strong>size属性值的单位不是像素哦</strong>。</p>
</li>
<li><p><code>readonly</code>：文本框只读，不能编辑。因为它的属性值也是readonly，所以属性值可以不写。<br>用了这个属性之后，在google浏览器中，光标点不进去；在IE浏览器中，光标可以点进去，但是文字不能编辑。</p>
</li>
<li><p><code>disabled</code>：文本框只读，不能编辑，光标点不进去。属性值可以不写。</p>
</li>
</ul>
<ul>
<li><p><code>Placeholder</code>占位符是用户在input输入框中输入任何东西前的预定义文本。</p>
</li>
<li><p><code>required</code> 如果你想把文本输入框设置为必填项，在input元素中加上required属性就可以了。例如：</p>
</li>
<li><pre><code class="html"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">required</span>&gt;</span>
<span class="comment"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">**举例**：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;html</span><br><span class="line">	&lt;form&gt;</span><br><span class="line">		姓名：&lt;input value&#x3D;&quot;呵呵&quot; &gt;逗比&lt;br&gt;</span><br><span class="line">		昵称：&lt;input value&#x3D;&quot;哈哈&quot; readonly&#x3D;&quot;&quot;&gt;&lt;br&gt;</span><br><span class="line">		名字：&lt;input type&#x3D;&quot;text&quot; value&#x3D;&quot;name&quot; disabled&#x3D;&quot;&quot;&gt;&lt;br&gt;</span><br><span class="line">		密码：&lt;input type&#x3D;&quot;password&quot; value&#x3D;&quot;pwd&quot; size&#x3D;&quot;50&quot;&gt;&lt;br&gt;</span><br><span class="line">		性别：&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot; id&#x3D;&quot;radio1&quot; value&#x3D;&quot;male&quot; checked&#x3D;&quot;&quot;&gt;男</span><br><span class="line">			  &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot; id&#x3D;&quot;radio2&quot; value&#x3D;&quot;female&quot; &gt;女&lt;br&gt;</span><br><span class="line">		爱好：&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;love&quot; value&#x3D;&quot;eat&quot;&gt;吃饭</span><br><span class="line">			  &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;love&quot; value&#x3D;&quot;sleep&quot;&gt;睡觉</span><br><span class="line">			  &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;love&quot; value&#x3D;&quot;bat&quot;&gt;打豆豆</span><br><span class="line">	&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure></span>
</code></pre>
</li>
</ul>
<p>注意，多个个单选框的input标签中，name 的属性值可以相同，但是 <strong>id 的属性值必须是唯一的</strong>。我们知道，html的标签中，id的属性值是唯一的。</p>
<p><strong>四种按钮的举例</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"普通按钮"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>  <span class="attr">value</span>=<span class="string">"提交按钮"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"重置按钮"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span> <span class="attr">value</span>=<span class="string">"图片按钮1"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span> <span class="attr">src</span>=<span class="string">"1.jpg"</span> <span class="attr">width</span>=<span class="string">"800"</span> <span class="attr">value</span>=<span class="string">"图片按钮2"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">value</span>=<span class="string">"文件选择框"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="lt-select-gt-：下拉列表标签"><a href="#lt-select-gt-：下拉列表标签" class="headerlink" title="&lt;select&gt;：下拉列表标签"></a><code>&lt;select&gt;</code>：下拉列表标签</h3><p><code>&lt;select&gt;</code>标签里面的每一项用<code>&lt;option&gt;</code>表示。select就是“选择”，option“选项”。</p>
<p>select标签和ul、ol、dl一样，都是组标签。</p>
<p><strong><code>&lt;select&gt;</code>标签的属性：</strong></p>
<ul>
<li><code>multiple</code>：可以对下拉列表中的选项进行多选。没有属性值。</li>
<li><code>size=&quot;3&quot;</code>：如果属性值大于1，则列表为滚动视图。默认属性值为1，即下拉视图。</li>
</ul>
<p><strong><code>&lt;option&gt;</code>标签的属性：</strong></p>
<ul>
<li><code>selected</code>：预选中。没有属性值。</li>
</ul>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span>&gt;</span>小学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span>&gt;</span>初中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span>&gt;</span>高中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span>&gt;</span>大学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">""</span>&gt;</span>研究生<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">size</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span>&gt;</span>小学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span>&gt;</span>初中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span>&gt;</span>高中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span>&gt;</span>大学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span>&gt;</span>研究生<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span>&gt;</span>小学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span>&gt;</span>初中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">""</span>&gt;</span>高中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">""</span>&gt;</span>大学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span>&gt;</span>研究生<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="lt-textarea-gt-标签：多行文本输入框"><a href="#lt-textarea-gt-标签：多行文本输入框" class="headerlink" title="&lt;textarea&gt;标签：多行文本输入框"></a><code>&lt;textarea&gt;</code>标签：多行文本输入框</h3><p>text就是“文本”，area就是“区域”。</p>
<p><strong>属性：</strong></p>
<ul>
<li><code>value</code>：提交给服务器的值。</li>
<li><code>rows=&quot;4&quot;</code>：指定文本区域的行数。</li>
<li><code>cols=&quot;20&quot;</code>：指定文本区域的列数。</li>
<li><code>readonly</code>：只读。</li>
</ul>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"txtInfo"</span> <span class="attr">rows</span>=<span class="string">"4"</span> <span class="attr">cols</span>=<span class="string">"20"</span>&gt;</span>1、不爱摄影不懂设计的程序猿不是一个好的产品经理。<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上方代码解释：textarea这个标签，是个标签对儿。对儿里面不用写东西。如果写的话，就是这个框的默认文字。</p>
<h3 id="表单的语义化"><a href="#表单的语义化" class="headerlink" title="表单的语义化"></a>表单的语义化</h3><p>比如，我们在注册一个网站的信息的时候，有一部分是必填信息，有一部分是选填信息，这个时候可以利用表单的语义化。<br>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">legend</span>&gt;</span>账号信息<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">	姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"呵呵"</span> &gt;</span>逗比<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"pwd"</span> <span class="attr">size</span>=<span class="string">"50"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">legend</span>&gt;</span>其他信息<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">	性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"male"</span> <span class="attr">checked</span>=<span class="string">""</span>&gt;</span>男</span><br><span class="line">		  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"female"</span> &gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"love"</span> <span class="attr">value</span>=<span class="string">"eat"</span>&gt;</span>吃饭</span><br><span class="line">		  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"love"</span> <span class="attr">value</span>=<span class="string">"sleep"</span>&gt;</span>睡觉</span><br><span class="line">		  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"love"</span> <span class="attr">value</span>=<span class="string">"bat"</span>&gt;</span>打豆豆</span><br><span class="line">	<span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="lt-label-gt-标签"><a href="#lt-label-gt-标签" class="headerlink" title="&lt;label&gt;标签"></a><code>&lt;label&gt;</code>标签</h3><p>我们先来看下面一段代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> /&gt;</span> 男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> /&gt;</span> 女</span><br></pre></td></tr></table></figure>

<p>对于上面这样的单选框，我们只有点击那个单选框（小圆圈）才可以选中，点击“男”、“女”这两个文字时是无法选中的；于是，label标签派上了用场。</p>
<p>本质上来讲，“男”、“女”这两个文字和input标签时没有关系的，而label就是解决这个问题的。我们可以通过label把input和汉字包裹起来作为整体。</p>
<p>解决方法如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"nan"</span> /&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"nan"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"nv"</span>  /&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"nv"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上方代码中，让label标签的<strong>for 属性值</strong>，和 input 标签的 <strong>id 属性值相同</strong>，那么这个label和input就有绑定关系了。</p>
<p>当然了，复选框也有label：（任何表单元素都有label）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"kk"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"kk"</span>&gt;</span>10天内免登陆<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h2><p><strong>声明：</strong><br>多媒体包含：音频、视频、Flash。网页上的多媒体基本都是Flash格式的。<br>.wmv、.dat、.mob、.rmvb等视频格式，在网页上不能直接播放，需要安装第三方的插件，才可以播放。不同的浏览器，播客上述视频格式，所使用插件参数又不一样。<br>上述格式视频一般文件较大，不利于网络下载播放。<br>一般情况下，是将其它的视频格式，转成Flash来在网页上播放。转换软件：格式工厂等。<br>Flash格式的视频兼容性非常好，Flash格式的文件很小。</p>
<h3 id="lt-bgsound-gt-标签：播放背景音乐"><a href="#lt-bgsound-gt-标签：播放背景音乐" class="headerlink" title="&lt;bgsound&gt;标签：播放背景音乐"></a><code>&lt;bgsound&gt;</code>标签：播放背景音乐</h3><p><strong>属性：</strong></p>
<ul>
<li><code>src=&quot;音乐文件的路径&quot;</code></li>
<li><code>loop=&quot;-1&quot;</code>：属性值代表播放次数，-1代表循环播放。</li>
</ul>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bgsound</span> <span class="attr">src</span>=<span class="string">"王菲 - 清风徐来.mp3"</span>&gt;</span><span class="tag">&lt;/<span class="name">bgsound</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行效果：<br>打开网页后，在IE 8中播放正常，播放时网页上显示一片空白。在google浏览器中无法播放。<br><br></p>
<h3 id="lt-embed-gt-标签：播放多媒体文件（音频、视频等）"><a href="#lt-embed-gt-标签：播放多媒体文件（音频、视频等）" class="headerlink" title="&lt;embed&gt;标签：播放多媒体文件（音频、视频等）"></a><code>&lt;embed&gt;</code>标签：播放多媒体文件（音频、视频等）</h3><p>主要应用Netscape浏览器，它不是W3C规范。</p>
<blockquote>
<p>备注：视频格式可以支持 mp4、wav等，但不是所有视频格式都支持。</p>
</blockquote>
<p><strong>属性：</strong></p>
<ul>
<li><code>src=&quot;多媒体文件的路径&quot;</code></li>
<li><code>loop=&quot;-1&quot;</code>：属性值代表播放次数，-1代表循环播放。</li>
<li><code>autostart=&quot;false&quot;</code>：打开网页时，禁止自动播放。默认值是true。</li>
<li><code>volume=&quot;100&quot;</code>：设置默认的音量大小，测试发现这个值好像不起作用哦。</li>
<li>width：指Flash文件的宽度</li>
<li>height：指Flash文件的高度</li>
<li>quality：指Flash的播放质量，质量有高有低 hight  low</li>
<li>pluginspage：如果指定的Flash插件不存在，则从pluginspage指定的地方进行下载。</li>
<li>type：指定Flash的文件格式类型</li>
<li>wmode：指Flash的背景是否可以透明，取值：transparent是透明的</li>
</ul>
<p><code>&lt;embed&gt;</code>标签播放音频举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">"王菲 - 清风徐来.mp3"</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：在HTML5中新增了<code>&lt;video&gt;</code>标签播放视频。<br><br></p>
<h3 id="lt-object-gt-标签：播放多媒体文件（音频、视频等）"><a href="#lt-object-gt-标签：播放多媒体文件（音频、视频等）" class="headerlink" title="&lt;object&gt;标签：播放多媒体文件（音频、视频等）"></a><code>&lt;object&gt;</code>标签：播放多媒体文件（音频、视频等）</h3><p>主要应用IE浏览器，它是W3C规范。</p>
<p><strong>属性：</strong></p>
<ul>
<li><code>classid</code>：指定Flash插件的ID号，一般存在于注册表中。</li>
<li><code>codebase</code>：如果Flash插件不存在，则从codebase指定的地址下载。</li>
<li><code>&lt;param&gt;</code>标签的主要作用：设置具体的详细参数。</li>
</ul>
<p><strong>总结：在网页中插入Flash时，为了同时兼容多种浏览器，需要将<code>&lt;object&gt;</code>标签和<code>&lt;embed&gt;</code>标签标记一起使用，但使用的顺序是：<code>&lt;object&gt;</code>中嵌套<code>&lt;embed&gt;</code>标记。</strong><br>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">classid</span>=<span class="string">"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"</span> <span class="attr">codebase</span>=<span class="string">"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,29,0"</span> <span class="attr">width</span>=<span class="string">"778"</span> <span class="attr">height</span>=<span class="string">"202"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"movie"</span> <span class="attr">value</span>=<span class="string">"images/banner.swf"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"quality"</span> <span class="attr">value</span>=<span class="string">"high"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"wmode"</span> <span class="attr">value</span>=<span class="string">"transparent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">"images/banner.swf"</span> <span class="attr">width</span>=<span class="string">"778"</span> <span class="attr">height</span>=<span class="string">"202"</span> <span class="attr">quality</span>=<span class="string">"high"</span> <span class="attr">pluginspage</span>=<span class="string">"http://www.macromedia.com/go/getflashplayer"</span> <span class="attr">type</span>=<span class="string">"application/x-shockwave-flash"</span> <span class="attr">wmode</span>=<span class="string">"transparent"</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="lt-marquee-gt-：滚动字幕标签"><a href="#lt-marquee-gt-：滚动字幕标签" class="headerlink" title="&lt;marquee&gt;：滚动字幕标签"></a><code>&lt;marquee&gt;</code>：滚动字幕标签</h2><p>如果在这个标签里设置了内容，那么，打开网页时，内容会像弹幕一样自动移动。<br><strong>属性：</strong></p>
<ul>
<li><p><code>direction=&quot;right&quot;</code>：移动的目标方向。属性值可以是：<code>left</code>（从右向左移动，默认值）、<code>right</code>（从左向右移动）、<code>up</code>（从下向上移动）、<code>down</code>（从上向下移动）。</p>
</li>
<li><p><code>behavior=&quot;slide&quot;</code>：行为方式。属性值可以是：<code>slide</code>（只移动一次）、<code>scroll</code>（循环移动，默认值）、<code>alternate</code>（循环移动）、。<br><code>alternate</code>和<code>scroll</code>属性值都是循环移动，区别在于：假设在<code>direction=&quot;right&quot;</code>的情况下，<code>behavior=&quot;scroll&quot;</code>表示从左到右、从左到右、从左到右···<code>behavior=&quot;alternate&quot;</code>表示从左到右、从右到左、从左到右···</p>
</li>
<li><p><code>scrollamount=&quot;30&quot;</code>：移动的速度</p>
</li>
<li><p><code>loop=&quot;3&quot;</code>: 循环多少圈。负值表示无限循环</p>
</li>
<li><p><code>scrolldelay=&quot;1000&quot;</code>：移动一次休息多长时间。单位是毫秒。</p>
</li>
</ul>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">behavior</span>=<span class="string">"alternate"</span> <span class="attr">direction</span>=<span class="string">"down"</span>  <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"200"</span> <span class="attr">bgcolor</span>=<span class="string">"#8c5dc1"</span>&gt;</span>我来了<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML标签1</title>
    <url>/2020/03/18/HTML%E6%A0%87%E7%AD%BE1/</url>
    <content><![CDATA[<hr>
<h2 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h2><ul>
<li>头标签</li>
<li>排版标签：<code>&lt;p&gt;</code>、 <code>&lt;div&gt;</code>、 <code>&lt;span&gt;</code>、<code>&lt;br&gt;</code> 、 <code>&lt;hr&gt;</code> 、 <code>&lt;center&gt;</code> 、 <code>&lt;pre&gt;</code></li>
<li>字体标记：<code>&lt;h1&gt;</code>、 <code>&lt;font&gt;</code>、 <code>&lt;b&gt;</code>、 <code>&lt;u&gt;</code> 、<code>&lt;sup&gt;</code> 、<code>&lt;sub&gt;</code></li>
<li>超链接 <code>&lt;a&gt;</code></li>
<li>图片标签 <code>&lt;img&gt;</code></li>
</ul>
<a id="more"></a>

<p><strong>Web 前端分三层</strong>：</p>
<ul>
<li>HTML：HyperText Markup Language（超文本标记语言）。从<strong>语义</strong>的角度描述页面的<strong>结构</strong>。相当于人的身体结构。</li>
<li>CSS：Cascading Style Sheets（层叠样式表）。从<strong>审美</strong>的角度美化页面的<strong>样式</strong>。相当于人的衣服。</li>
<li>JS：JavaScript。从<strong>交互</strong>的角度描述页面的<strong>行为</strong>。相当于人的动作，让人有生命力。</li>
</ul>
<h1 id="1-HTML结构详解"><a href="#1-HTML结构详解" class="headerlink" title="1. HTML结构详解"></a><strong>1. HTML结构详解</strong></h1><blockquote>
<p>备注：</p>
<ul>
<li>所有的浏览器默认情况下都会忽略空格和空行</li>
<li>每个标签都有私有属性。也都有公有属性。</li>
<li>html中表示长度的单位都是<strong>像素</strong>。HTML只有一种单位就是像素。</li>
</ul>
</blockquote>
<p>HTML标签通常是成对出现的（<font color="blue"><strong>双边标记</strong></font>），比如 <code>&lt;div&gt;</code> 和 <code>&lt;/div&gt;</code>，也有单独呈现的标签（<font color="blue"><strong>单边标记</strong></font>），如：<code>&lt;br /&gt;</code>、<code>&lt;hr /&gt;</code>和<code>&lt;img src=&quot;images/1.jpg&quot; /&gt;</code>等。</p>
<p>属性与标记之间、各属性之间需要以空格隔开。属性值以双引号括起来。</p>
<h3 id="快速生成-html-的骨架"><a href="#快速生成-html-的骨架" class="headerlink" title="快速生成 html 的骨架"></a>快速生成 html 的骨架</h3><p><strong>方式1</strong>：在 VS Code 中新建 html 文件，输入<code>html:5</code>，按 <code>Tab</code>键后，自动生成的代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<!--more-->
<p><strong>方式2</strong>：在Sublime Text中安装<code>Emmet</code>插件。新建html文件，输入<code>html:5</code>，按<code>Tab</code>键后，自动生成的代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>方式3</strong>：在Sublime Text中安装<code>Emmet</code>插件。新建html文件，输入<code>html:xt</code>，按<code>Tab</code>键后（或者按Ctrl+E），自动生成的代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="meta-string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xml:lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的方式2和方式3中，我们会发现，第一行的内容有些不太一样，这就是我们接下来要讲的<strong>文档声明头</strong>。</p>
<h3 id="1、文档声明头"><a href="#1、文档声明头" class="headerlink" title="1、文档声明头"></a>1、文档声明头</h3><p>任何一个标准的HTML页面，第一行一定是一个以<code>&lt;!DOCTYPE ……&gt;</code>开头的语句。</p>
<p>这一行，就是文档声明头，DocType Declaration，简称DTD。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。</p>
<h4 id="HTML4-01有哪些规范呢？"><a href="#HTML4-01有哪些规范呢？" class="headerlink" title="HTML4.01有哪些规范呢？"></a>HTML4.01有哪些规范呢？</h4><p><strong>HTML4.01</strong>这个版本是IE6开始兼容的。<strong>HTML5是IE9开开始兼容的</strong>。如今，手机、移动端的网页，就可以使用HTML5了，因为其兼容性更高。</p>
<p>说个题外话，html1 至 html3 是美国军方以及高等研究所用的，并未对外公开。</p>
<p>HTML4.01里面有两大种规范，每大种规范里面又各有3种小规范。所以一共6种规范（见下图）。</p>
<p>HTML4.01里面规定了<strong>普通</strong>和<strong>XHTML</strong>两大种规范。HTML觉得自己有一些规定不严谨，比如，标签是否可以用大写字母呢？<code>&lt;H1&gt;&lt;/H1&gt;</code>所以，HTML就觉得，把一些规范严格的标准，又制定了一个XHTML1.0。在XHTML中的字母X，表示“严格的”。</p>
<p>总结一下，HTML4.01一共有6种DTD。说白了，HTML的第一行语句一共有6种情况：</p>
<p>三种小规范进行解释：</p>
<ul>
<li><p><strong>strict</strong>：表示“严格的”，这种模式里面的要求更为严格。这种严格体现在哪里？有一些标签不能使用。<br>比如，u标签，就是给一个本文加下划线，但是这和HTML的本质有冲突，因为HTML只能负责语义，不能负责样式，而u这个下划线是样式。所以，在strict中是不能使用u标签的。<br>那怎么给文本增加下划线呢？今后的css将使用css属性来解决。<br>那么，XHTML1.0更为严格，因为这个体系本身规定比如标签必须是小写字母、必须严格闭合标签、必须使用引号引起属性等等。</p>
</li>
<li><p><strong>Transitional</strong>：表示“普通的”，这种模式就是没有一些别的规范。</p>
</li>
<li><p><strong>Frameset</strong>：表示“框架”，在框架的页面使用。</p>
</li>
</ul>
<p>在sublime输入的html:xt，x表示XHTML，t表示transitional。</p>
<p>在HTML5中极大的简化了DTD，也就是说HTML5中就没有XHTML了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2、头标签"><a href="#2、头标签" class="headerlink" title="2、头标签"></a>2、头标签</h3><h4 id="html5-的比较完整的骨架："><a href="#html5-的比较完整的骨架：" class="headerlink" title="html5 的比较完整的骨架："></a>html5 的比较完整的骨架：</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Author"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Keywords"</span> <span class="attr">content</span>=<span class="string">"牛逼，很牛逼，特别牛逼"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Description"</span> <span class="attr">content</span>=<span class="string">"网易是中国领先的互联网技术公司，为用户提供免费邮箱、游戏、搜索引擎服务，开设新闻、娱乐、体育等30多个内容频道，及博客、视频、论坛等互动交流，网聚人的力量。"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>面试题：</p>
<ul>
<li>问：网页的head标签里面，表示的是页面的配置，有什么配置？</li>
<li>答：字符集、关键词、页面描述、页面标题、IE适配、视口、iPhone小图标等等。</li>
</ul>
<p>头标签都放在<head></head>头部分之间。包括：<code>&lt;title&gt;</code>、<code>&lt;base&gt;</code>、<code>&lt;meta&gt;</code>、<code>&lt;link&gt;</code></p>
<ul>
<li><code>&lt;title&gt;</code>：指定整个网页的标题，在浏览器最上方显示。</li>
<li><code>&lt;base&gt;</code>：为页面上的所有链接规定默认地址或默认目标。</li>
<li><code>&lt;meta&gt;</code>：提供有关页面的基本信息</li>
<li><code>&lt;body&gt;</code>：用于定义HTML文档所要显示的内容，也称为主体标签。我们所写的代码必须放在此标签內。</li>
<li><code>&lt;link&gt;</code>：定义文档与外部资源的关系。</li>
</ul>
<p><strong>meta 标签</strong>：</p>
<p>上面的<code>&lt;meta&gt;</code>标签都不用记，但是另外还有一个<code>&lt;meta&gt;</code>标签是需要记住的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"3;http://www.baidu.com"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面这个标签的意思是说，3秒之后，自动跳转到百度页面。</p>
<p>常见的几种 meta 标签如下：</p>
<p>（1）字符集 charset：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>字符集用meta标签中的<code>charset</code>定义，meta表示“元”。“元”配置，就是表示基本的配置项目。</p>
<p>charset就是charactor set（即“字符集”）。</p>
<p>浏览器就是通过meta来看网页是什么字符集的。比如你保存的时候，meta写的和声明的不匹配，那么浏览器就是乱码。</p>
<p>（2）视口 viewport：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>width=device-width</code> ：表示视口宽度等于屏幕宽度。</p>
<p>viewport 这个知识点，初学者还比较难理解，以后学 Web 移动端的时候会用到。</p>
<p>（2）定义“关键词”：</p>
<p>举例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Keywords"</span> <span class="attr">content</span>=<span class="string">"网易,邮箱,游戏,新闻,体育,娱乐,女性,亚运,论坛,短信"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>这些关键词，就是告诉搜索引擎，这个网页是干嘛的，能够提高搜索命中率。让别人能够找到你，搜索到你。</p>
<p>（3）定义“页面描述”：</p>
<p>meta除了可以设置字符集，还可以设置关键字和页面描述。</p>
<p>只要设置Description页面描述，那么百度搜索结果，就能够显示这些语句，这个技术叫做<strong>SEO</strong>（search engine optimization，搜索引擎优化）。</p>
<p>设置页面描述的举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Description"</span> <span class="attr">content</span>=<span class="string">"网易是中国领先的互联网技术公司，为用户提供免费邮箱、游戏、搜索引擎服务，开设新闻、娱乐、体育等30多个内容频道，及博客、视频、论坛等互动交流，网聚人的力量。"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>title 标签</strong>:</p>
<p>用于设置网页标题：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>网页的标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>title也是有助于SEO搜索引擎优化的。</p>
<p><strong>base标签</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>base 标签用于指定基础的路径。指定之后，所有的 a 链接都是以这个路径为基准。</p>
<h3 id="3、-lt-body-gt-标签的属性"><a href="#3、-lt-body-gt-标签的属性" class="headerlink" title="3、&lt;body&gt;标签的属性"></a>3、<code>&lt;body&gt;</code>标签的属性</h3><p>其属性有：</p>
<ul>
<li><code>bgcolor</code>：设置整个网页的背景颜色。</li>
<li><code>background</code>：设置整个网页的背景图片。</li>
<li><code>text</code>：设置网页中的文本颜色。</li>
<li><code>leftmargin</code>：网页的左边距。IE浏览器默认是8个像素。</li>
<li><code>topmargin</code>：网页的上边距。</li>
<li><code>rightmargin</code>：网页的右边距。</li>
<li><code>bottommargin</code>：网页的下边距。</li>
</ul>
<p><code>&lt;body&gt;</code>标签另外还有一些属性：</p>
<p><code>link</code>属性表示默认显示的颜色、<code>alink</code>属性表示鼠标点击但是还没有松开时的颜色、<code>vlink</code>属性表示点击完成之后显示的颜色。</p>
<p>接下来，我们讲一下<code>&lt;body&gt;</code>里的各种标签的属性。</p>
<h2 id="一、排版标签"><a href="#一、排版标签" class="headerlink" title="一、排版标签"></a>一、排版标签</h2><h3 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签"></a>注释标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释  --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="段落标签-lt-p-gt"><a href="#段落标签-lt-p-gt" class="headerlink" title="段落标签&lt;p&gt;"></a>段落标签<code>&lt;p&gt;</code></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is another paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>属性：</p>
<ul>
<li><code>align=&quot;属性值&quot;</code>：对齐方式。属性值包括left center right。</li>
</ul>
<br>

<p>段落，是英语paragraph“段落”缩写。</p>
<p>HTML标签是分等级的，HTML将所有的标签分为两种：</p>
<ul>
<li><p><strong>文本级标签</strong>：p、span、a、b、i、u、em。文本级标签里只能放<strong>文字、图片、表单元素</strong>。（a标签里不能放a和input）</p>
</li>
<li><p><strong>容器级标签</strong>：div、h系列、li、dt、dd。容器级标签里可以放置任何东西。</p>
</li>
</ul>
<p>从学习p的第一天开始，就要死死记住：<strong>p标签是一个文本级标签，p里面只能放文字、图片、表单元素</strong>。其他的一律不能放。</p>
<p>错误写法：（尝试把 h 放到 p 里）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">	我是一个小段落</span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>网页效果如下：</p>
<p><img src="http://img.smyhvae.com/20170630_1102.png" alt=""></p>
<p>上图显示，浏览器不允许你这么做，我们使用Chrome的F12审查元素发现，浏览器自己把p封闭掉了，不让你去包裹h1。</p>
<p>PS：Chrome浏览器是世界上HTML5支持最好的浏览器。提供了非常好的开发工具，非常适合我们开发人员使用。审查元素功能的快捷键是F12。</p>
<h3 id="块级标签-lt-div-gt-和-lt-span-gt"><a href="#块级标签-lt-div-gt-和-lt-span-gt" class="headerlink" title="块级标签 &lt;div&gt;和&lt;span&gt;"></a>块级标签 <code>&lt;div&gt;</code>和<code>&lt;span&gt;</code></h3><blockquote>
<p>div和span是非常重要的标签，div的语义是division“分割”； span的语义就是span“范围、跨度”。</p>
</blockquote>
<blockquote>
<p>CSS课程中你将知道，这两个东西，都是最最重要的“盒子”。</p>
</blockquote>
<p>div：把标签中的内容作为一个块儿来对待(division)。必须单独占据一行。</p>
<p>div标签的属性：</p>
<ul>
<li><code>align=&quot;属性值&quot;</code>：设置块儿的位置。属性值可选择：left、right、 center。</li>
</ul>
<br>

<p><strong><code>&lt;span&gt;</code>和<code>&lt;div&gt;</code>唯一的区别在于</strong>：<code>&lt;span&gt;</code>是不换行的，而<code>&lt;div&gt;</code>是换行的。</p>
<p>如果单独在网页中插入这两个元素，不会对页面产生任何的影响。这两个元素是专门为定义CSS样式而生的。或者说，DIV+CSS来实现各种样式。</p>
<p>div在浏览器中，默认是不会增加任何的效果的，但是语义变了，div中的所有元素是一个小区域。<br>div标签是一个<strong>容器级</strong>标签，里面什么都能放，甚至可以放div自己。</p>
<p>span也是表达“小区域、小跨度”的标签，但是是一个<strong>文本级</strong>的标签。<br>就是说，span里面只能放置文字、图片、表单元素。 span里面不能放p、h、ul、dl、ol、div。</p>
<p>span里面是放置小元素的，div里面放置大东西的。举例如下：</p>
<p>span举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">	简介简介简介简介简介简介简介简介</span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>详细信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>购买<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>div举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"guanggao"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dongxi"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>所以，我们亲切的称呼这种模式叫做“<strong>div+css</strong>”。<strong>div标签负责布局，负责结构，负责分块。css负责样式</strong>。</p>
<br>

<h3 id="内容居中标签-lt-center-gt"><a href="#内容居中标签-lt-center-gt" class="headerlink" title="内容居中标签 &lt;center&gt;"></a>内容居中标签 <code>&lt;center&gt;</code></h3><p>此时center代表是一个标签，而不是一个属性值了。只要是在这个标签里面的内容，都会居于浏览器的中间。<br>效果演示：</p>
<p>到了H5里面，center标签不建议使用。</p>
<br>

<h3 id="预定义（预格式化）标签：-lt-pre-gt"><a href="#预定义（预格式化）标签：-lt-pre-gt" class="headerlink" title="预定义（预格式化）标签：&lt;pre&gt;"></a>预定义（预格式化）标签：<code>&lt;pre&gt;</code></h3><p>含义：将保留其中的所有的空白字符(空格、换行符)，原封不动的输出结果（告诉浏览器不要忽略空格和空行）<br>说明：真正排网页过程中，<code>&lt;pre&gt;</code>标签几乎用不着。但在PHP中用于打印一个数组时使用。</p>
<p>为什么要有<code>&lt;pre&gt;</code>这个标签呢？答案是：</p>
<blockquote>
<p> 所有的浏览器默认情况下都会忽略空格和空行。</p>
</blockquote>
<p>好吧，其实这个标签也用的比较少。</p>
<h2 id="二、字体标签"><a href="#二、字体标签" class="headerlink" title="二、字体标签"></a>二、字体标签</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>标题使用<code>&lt;h1&gt;</code>至<code>&lt;h6&gt;</code>标签进行定义。<code>&lt;h1&gt;</code>定义最大的标题，<code>&lt;h6&gt;</code>定义最小的标题。具有align属性，属性值可以是：left、center、right。</p>
<h3 id="特殊字符（转义字符）"><a href="#特殊字符（转义字符）" class="headerlink" title="特殊字符（转义字符）"></a>特殊字符（转义字符）</h3><ul>
<li><code>&amp;nbsp;</code>：空格    （non-breaking spacing，不断打空格）</li>
<li><code>&amp;lt;</code>：小于号（less than）</li>
<li><code>&amp;gt;</code>：大于号（greater than）</li>
<li><code>&amp;amp;</code>：符号<code>&amp;</code></li>
<li><code>&amp;quot;</code>：双引号</li>
<li><code>&amp;apos;</code>：单引号</li>
<li><code>&amp;copy;</code>：版权<code>©</code></li>
<li><code>&amp;trade;</code>：商标<code>™</code></li>
<li><code>&amp;#32464;</code>：文字<code>绐</code>。其实，<code>#32464</code>是汉字<code>绐</code>的unicode编码。</li>
</ul>
<p>要求背诵的特殊字符有：<code>&amp;nbsp;</code>、<code>&amp;lt;</code>、<code>&amp;gt;</code>、<code>&amp;copy;</code>。</p>
<p>比如说，你想把<code>&lt;p&gt;</code>作为一个文本在页面上显示，直接写<code>&lt;p&gt;</code>是肯定不行的，因为这代表的是一个段落标签，所以这里需要用到<strong>转义字符</strong>。应该这么写：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">这是一个HTML语言的<span class="symbol">&amp;lt;</span>p<span class="symbol">&amp;gt;</span>标签</span><br></pre></td></tr></table></figure>

<p>来一张表格，方便需要的时候查询：</p>
<table>
<thead>
<tr>
<th align="left">特殊字符</th>
<th align="left">描述</th>
<th align="left">字符的代码</th>
</tr>
</thead>
<tbody><tr>
<td align="left"></td>
<td align="left">空格符</td>
<td align="left"><code>&amp;nbsp;</code></td>
</tr>
<tr>
<td align="left">&lt;</td>
<td align="left">小于号</td>
<td align="left"><code>&amp;lt;</code></td>
</tr>
<tr>
<td align="left">&gt;</td>
<td align="left">大于号</td>
<td align="left"><code>&amp;gt;</code></td>
</tr>
<tr>
<td align="left">&amp;</td>
<td align="left">和号</td>
<td align="left"><code>&amp;amp;</code></td>
</tr>
<tr>
<td align="left">￥</td>
<td align="left">人民币</td>
<td align="left"><code>&amp;yen;</code></td>
</tr>
<tr>
<td align="left">©</td>
<td align="left">版权</td>
<td align="left"><code>&amp;copy;</code></td>
</tr>
<tr>
<td align="left">®</td>
<td align="left">注册商标</td>
<td align="left"><code>&amp;reg;</code></td>
</tr>
<tr>
<td align="left">°</td>
<td align="left">摄氏度</td>
<td align="left"><code>&amp;deg;</code></td>
</tr>
<tr>
<td align="left">±</td>
<td align="left">正负号</td>
<td align="left"><code>&amp;plusmn;</code></td>
</tr>
<tr>
<td align="left">×</td>
<td align="left">乘号</td>
<td align="left"><code>&amp;times;</code></td>
</tr>
<tr>
<td align="left">÷</td>
<td align="left">除号</td>
<td align="left"><code>&amp;divide;</code></td>
</tr>
<tr>
<td align="left">²</td>
<td align="left">平方2（上标2）</td>
<td align="left"><code>&amp;sup2;</code></td>
</tr>
<tr>
<td align="left">³</td>
<td align="left">立方3（上标3）</td>
<td align="left"><code>&amp;sup3;</code></td>
</tr>
</tbody></table>
<h3 id="一些小标签-小标记"><a href="#一些小标签-小标记" class="headerlink" title="一些小标签/小标记"></a>一些小标签/小标记</h3><ul>
<li><p><code>&lt;u&gt;</code>：下划线标记</p>
</li>
<li><p><code>&lt;s&gt;</code>或<code>&lt;del&gt;</code>：中划线标记（删除线）</p>
</li>
<li><p><code>&lt;i&gt;</code>或<code>&lt;em&gt;</code>：斜体标记</p>
</li>
</ul>
<h3 id="粗体标签-lt-b-gt-或-lt-strong-gt-（已废弃）"><a href="#粗体标签-lt-b-gt-或-lt-strong-gt-（已废弃）" class="headerlink" title="粗体标签&lt;b&gt;或&lt;strong&gt;（已废弃）"></a>粗体标签<code>&lt;b&gt;</code>或<code>&lt;strong&gt;</code>（已废弃）</h3><br>

<h3 id="上标-lt-sup-gt-下标-lt-sub-gt"><a href="#上标-lt-sup-gt-下标-lt-sub-gt" class="headerlink" title="上标&lt;sup&gt;   下标&lt;sub&gt;"></a>上标<code>&lt;sup&gt;</code>   下标<code>&lt;sub&gt;</code></h3><p>上小标这两个标签容易混淆，怎么记呢？这样记：<code>b</code>的意思是<code>bottom：底部</code><br>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">O<span class="tag">&lt;<span class="name">sup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sup</span>&gt;</span>    5<span class="tag">&lt;<span class="name">sub</span>&gt;</span>3<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="三、超链接"><a href="#三、超链接" class="headerlink" title="三、超链接"></a>三、超链接</h2><p>超链接有三种形式：</p>
<p><strong>1、外部链接</strong>：链接到外部文件。举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"02页面.html"</span>&gt;</span>点击进入另外一个文件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>a是英语<code>anchor</code>“锚”的意思，就好像这个页面往另一个页面扔出了一个锚。是一个文本级的标签。</p>
<p>href是英语<code>hypertext reference</code>超文本地址的缩写。读作“喝瑞夫”，不要读作“喝夫”。</p>
<p><strong>2、锚链接</strong>：<br>指给超链接起一个名字，作用是<strong>在本页面或者其他页面的的不同位置进行跳转</strong>。比如说，在网页底部有一个向上箭头，点击箭头后回到顶部，这个就是利用到了锚链接。<br>设置锚点的href属性值为井号#加上想跳转区域对应的id属性值，这样就可以创建一个内部跳转。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#contacts-header"</span>&gt;</span>Contacts<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">"contacts-header"</span>&gt;</span>Contacts<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当用户点击了Contacts链接，页面就会跳转到网页的Contacts区域。<br><br></p>
<p><strong>3、邮件链接</strong>：</p>
<p>代码举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:smyhvae@163.com"</span>&gt;</span>点击进入我的邮箱<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果：点击之后，会弹出outlook，作用不大。</p>
<h3 id="超链接的属性"><a href="#超链接的属性" class="headerlink" title="超链接的属性"></a>超链接的属性</h3><ul>
<li><code>href</code>：目标URL</li>
<li><code>title</code>：悬停文本。</li>
<li><code>name</code>：主要用于设置一个锚点的名称。</li>
<li><code>target</code>：告诉浏览器用什么方式来打开目标页面。<code>target</code>属性有以下几个值：<ul>
<li><code>_self</code>：在同一个网页中显示（默认值）</li>
<li><code>_blank</code>：<strong>在新的窗口中打开</strong>。</li>
<li><code>_parent</code>：在父窗口中显示</li>
<li><code>_top</code>：在顶级窗口中显示</li>
</ul>
</li>
</ul>
<p><code>title</code>属性举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"09_img.html"</span> <span class="attr">title</span>=<span class="string">"很好看哦"</span>&gt;</span>结婚照<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><code>target</code>属性举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"1.html"</span> <span class="attr">title</span>=<span class="string">"悬停文本"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>链接的内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>blank就是“空白”的意思，就表示新建一个空白窗口。为啥有一个_ ，就是规定，没啥好解释的。<br>也就是说，如果不写<code>target=”_blank”</code>那么就是在相同的标签页打开，如果写了<code>target=”_blank”</code>，就是在新的空白标签页中打开。</p>
<h4 id="备注1：分清楚img和a标签的各自的属性"><a href="#备注1：分清楚img和a标签的各自的属性" class="headerlink" title="备注1：分清楚img和a标签的各自的属性"></a>备注1：分清楚img和a标签的各自的属性</h4><p>区别如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.jpg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"1.html"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="备注2：a是一个文本级的标签"><a href="#备注2：a是一个文本级的标签" class="headerlink" title="备注2：a是一个文本级的标签"></a>备注2：a是一个文本级的标签</h4><p>比如一个段落中的所有文字都能够被点击，那么应该是p包裹a：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>段落段落段落段落段落段落<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>而不是a包裹p：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">		段落段落段落段落段落段落</span><br><span class="line">	<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>a的语义要小于p，a就是可以当做文本来处理，所以p里面相当于放的就是纯文字。</p>
<h2 id="四、图片标签"><a href="#四、图片标签" class="headerlink" title="四、图片标签"></a>四、图片标签</h2><p>img: 代表的就是一张图片。是单边标记。</p>
<p>img是自封闭标签，也称为单标签。</p>
<h4 id="能插入的图片类型："><a href="#能插入的图片类型：" class="headerlink" title="能插入的图片类型："></a>能插入的图片类型：</h4><ul>
<li><p>能够插入的图片类型是：jpg(jpeg)、gif、png、bmp。类型和类型之间有什么区别，css课上讲。</p>
</li>
<li><p>不能往网页中插入的图片格式是：psd、ai</p>
</li>
</ul>
<blockquote>
<p>HTML页面不是直接插入图片，而是插入图片的引用地址，所以也要把图片上传到服务器上。</p>
</blockquote>
<h3 id="src属性：图片的相对路径和绝对路径"><a href="#src属性：图片的相对路径和绝对路径" class="headerlink" title="src属性：图片的相对路径和绝对路径"></a><code>src</code>属性：图片的相对路径和绝对路径</h3><p>这里涉及到图片的一个属性：</p>
<ul>
<li><code>src</code>属性：指图片的路径。</li>
</ul>
<p>在写<strong>图片的路径</strong>时，有两种写法：相对路径、绝对路径</p>
<h4 id="1、写法一：相对路径"><a href="#1、写法一：相对路径" class="headerlink" title="1、写法一：相对路径"></a>1、<strong>写法一：相对路径</strong></h4><p>相对当前页面所在的路径。两个标记 <code>.</code> 和 <code>..</code> 分表代表当前目录和父路径。</p>
<p>举例1：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当前目录中的图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"2.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./2.jpg"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上一级目录中的图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../2.jpg"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>img 是image“图片”的简写，src 是英语source“资源”的缩写。</p>
<p>相对路径不会出现这种情况：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">aaa/../bbb/1.jpg</span><br></pre></td></tr></table></figure>

<p><code>../</code>要么不写，要么就写在开头。</p>
<p>举例2：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/1.jpg"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上方代码的意思是说，当前页面有一个并列的文件夹<code>images</code>，在文件夹<code>images</code>中存放了一张图片<code>1.jpg</code></p>
<p>问题：如果想在index.html中插入1.png，那么对应的img语句是？</p>
<p>分析：</p>
<p>现在document是最大的文件夹，里面有两个文件夹work和photo。work中又有一个文件夹叫做myweb。myweb文件夹里面有index.html。  所以index.html在myweb文件夹里面，上一级就是work文件夹，上两级就是document文件夹。通过document文件夹当做一个中转站，进入photo文件夹，看到了1.png。</p>
<p>答案：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../../photo/1.png"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2、写法二：绝对路径"><a href="#2、写法二：绝对路径" class="headerlink" title="2、写法二：绝对路径"></a>2、写法二：<strong>绝对路径</strong></h4><p>绝对路径包括以下两种：</p>
<p>（1）以盘符开始的绝对路径。举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"C:\Users\smyhvae\Desktop\html\images\1.jpg"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）网络路径。举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://img.smyhvae.com/2016040102.jpg"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>大家打开上面的img中的链接，扫一扫，可能有惊喜哦。</p>
<h3 id="相对路径和绝对路径的总结"><a href="#相对路径和绝对路径的总结" class="headerlink" title="相对路径和绝对路径的总结"></a>相对路径和绝对路径的总结</h3><p>相对路径的好处：站点不管拷贝到哪里，文件和图片的相对路径关系都是不变的。<br>相对路径使用有一个前提，就是网页文件和你的图片，必须在一个服务器上。</p>
<p>问题：我的网页在C盘，图片却在D盘，能不能插入呢？</p>
<p>答案： 用相对路径不能，用绝对路径也不能。</p>
<p>注意：可以使用file://来插入，但是这种方法，没有任何意义！因为服务器上没有所谓c盘、d盘。</p>
<p>下面的方法是行的，但是没有任何工程上的意义，这是因为服务器没有盘符，linux系统没有盘符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"file://C:\Users\Danny\Pictures\明星\1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结一下：</p>
<ul>
<li><p>我们现在无论是在a标签、img标签，如果要用路径。只有两种路径能用，就是相对路径和绝对路径。</p>
</li>
<li><p>相对路径，就是../   image/ 这种路径。从自己出发，找到别人；</p>
</li>
<li><p>绝对路径，就是http://开头的路径。</p>
</li>
<li><p>绝对不允许使用file://开头的东西，这个是完全错误的！</p>
</li>
</ul>
<h3 id="img标签的其他属性"><a href="#img标签的其他属性" class="headerlink" title="img标签的其他属性"></a>img标签的其他属性</h3><ul>
<li><p><code>width</code>：宽度</p>
</li>
<li><p><code>height</code>：高度</p>
</li>
<li><p><code>Align</code>：指图片的水平对齐方式，属性值可以是：left、center、right</p>
</li>
<li><p><code>title</code>：<strong>提示性文本</strong>。公有属性。也就是鼠标悬停时出现的文本。</p>
</li>
<li><p><code>border</code>：给图片加边框（描边），单位是像素，边框的颜色是黑色</p>
</li>
<li><p><code>Hspace</code>：指图片左右的边距</p>
</li>
<li><p><code>Vspace</code>：指图片上下的边距</p>
</li>
<li><p><code>alt</code>：当图片不可用（无法显示）的时候，代替图片显示的内容。alt是英语 alternate “替代”的意思，代表替换资源。（有的浏览器不支持）</p>
</li>
</ul>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/1.jpg"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"`188"</span> <span class="attr">title</span>=<span class="string">"这是美女"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>图片的<code>align</code>属性：<strong>图片和周围文字的相对位置</strong>。属性取值可以是：bottom（默认）、center、top、left、right。<br>我们来分别看一下这<code>align</code>属性的这几个属性值的区别。</li>
</ul>
<p>1、<code>align=&quot;&quot;</code>，图片和文字低端对齐。即默认情况下的显示效果。</p>
<p>2、<code>align=&quot;center&quot;</code>：图片和文字水平方向上居中对齐。</p>
<p>3、<code>align=&quot;top&quot;</code>：图片与文字顶端对齐。</p>
<p>4、<code>align=&quot;left&quot;</code>：图片在文字的左边。</p>
<p>5、<code>align=&quot;right&quot;</code>：图片在文字的右边。</p>
<p><strong>注意事项：</strong><br>（1）如果要想保证图片等比例缩放，请只设置width和height中其中一个。<br>（2）如果想实现图文混排的效果，请使用align属性，取值为left或right。</p>
<p>你可以通过把元素嵌套进锚点里使其变成一个链接。</p>
<p>把你的图片嵌套进锚点。举例如下：</p>
<p>把锚点的href属性设置为#，就可以创建固定链接。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://cdn.chenzhicheng.com/running-cats.jpg"</span> <span class="attr">alt</span>=<span class="string">"三只萌萌的小猫"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>传输层</title>
    <url>/2020/03/18/%E4%BC%A0%E8%BE%93%E5%B1%82/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>传输层服务的基本理论和基本机制</strong>：</p>
<ul>
<li>多路复用/分用</li>
<li>可靠数据传输机制</li>
<li>流量控制机制</li>
<li>拥塞控制机制<a id="more"></a></li>
</ul>
<p><strong>掌握Internet的传输层协议</strong>：</p>
<ul>
<li>UDP：无连接传输服务</li>
<li>TCP：面向连接的传输服务</li>
<li>TCP拥塞控制</li>
</ul>
<h2 id="传输层服务和协议"><a href="#传输层服务和协议" class="headerlink" title="传输层服务和协议"></a>传输层服务和协议</h2><p>传输层协议为运行在不同Host(主机)上的进程提供了一种<strong>逻辑通信机制</strong>。</p>
<p>端系统运行传输层协议：</p>
<ul>
<li>发送方：将应用递交的消息分成一个或多个segment，并向下传给网络层。</li>
<li>接收方：将收到的segment组装成消息，并上交给应用层。</li>
</ul>
<p><strong>传输层可以为应用提供多种协议</strong>：</p>
<ul>
<li>Internet上的TCP</li>
<li>Internet上的UDP</li>
</ul>
<p><strong>网络层 vs 传输层</strong></p>
<p>网络层：提供主机之间的额逻辑通信机制。</p>
<p>传输层：提供应用进程之间的逻辑通信机制</p>
<ul>
<li>位于网络层之上</li>
<li>依赖于网络层服务</li>
<li>对网络层服务进行(可能的)增强</li>
</ul>
<p><strong>Internet传输层协议</strong></p>
<ul>
<li>可靠、按序的交付服务(TCP)<ul>
<li>拥塞控制</li>
<li>流量控制</li>
<li>连接建立</li>
</ul>
</li>
<li>不可靠的交付服务(UDP)<ul>
<li>基于“尽力而为”的网络层，没有可靠性方面的拓展</li>
</ul>
</li>
<li>两种服务均不保证<ul>
<li>延迟</li>
<li>带宽</li>
</ul>
</li>
</ul>
<h2 id="多路分用和多路复用"><a href="#多路分用和多路复用" class="headerlink" title="多路分用和多路复用"></a>多路分用和多路复用</h2><blockquote>
<p>如果某层的一个协议对应直接上层的多个协议/实体，则需复用/分用。</p>
</blockquote>
<h3 id="分用如何工作："><a href="#分用如何工作：" class="headerlink" title="分用如何工作："></a>分用如何工作：</h3><ul>
<li><p>主机接收到IP数据报</p>
<ul>
<li>每个数据报携带源IP地址、目的IP地址。</li>
<li>每个数据报携带一个传输层的段(Segment）。</li>
<li>每个段携带源端口号和目的端口号。</li>
</ul>
</li>
<li><p>主机收到Segment之后，传输层协议提取IP地址和端口号信息，将Segment导向相应的Socket。</p>
<ul>
<li>TCP做更多处理</li>
</ul>
</li>
</ul>
<p><img src="TCP-UDP%E6%AE%B5%E6%A0%BC%E5%BC%8F.png" alt=""></p>
<h3 id="无连接分用："><a href="#无连接分用：" class="headerlink" title="无连接分用："></a>无连接分用：</h3><ul>
<li>利用端口号创建Socket<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DatagramSocket mySocket1 &#x3D; new</span><br><span class="line">DatagramSocket(99111);</span><br><span class="line">DatagramSocket mySocket2 &#x3D; new</span><br><span class="line">DatagramSocket(99222);</span><br></pre></td></tr></table></figure></li>
<li>UDP的Socket用二元组标识(目的IP地址，目的端口号)</li>
<li>主机收到UDP段后,检查段中的目的端口号</li>
<li>将UDP段导向绑定在该端口号的Socket</li>
<li>来自不同源IP地址和/或源端口号的IP数据包被导向同一个Socket</li>
</ul>
<h3 id="面向连接的分用："><a href="#面向连接的分用：" class="headerlink" title="面向连接的分用："></a>面向连接的分用：</h3><ul>
<li>TCP的Socket用四元组标识<ul>
<li>源IP地址</li>
<li>源端口号</li>
<li>目的IP地址</li>
<li>目的端口号</li>
</ul>
</li>
<li>接收端利用所有的四个值将Segment导向合适的Socket</li>
<li>服务器可能同时支持多个TCP Socket<ul>
<li>每个Socket用自己的四元组标识</li>
</ul>
</li>
<li>Web服务器为每个客户端开不同的Socket</li>
</ul>
<h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><ul>
<li><strong>基于Internet IP协议</strong><ul>
<li>复用/分用</li>
<li>简单的错误校验</li>
</ul>
</li>
<li><strong>“Best effort”服务，UDP段可能</strong><ul>
<li>丢失</li>
<li>非按序到达</li>
</ul>
</li>
<li><strong>无连接</strong><ul>
<li>UDP发送方和接收方不需要握手</li>
<li>每个UDP段的处理独立于其他段</li>
</ul>
</li>
</ul>
<br>

<ul>
<li>无需建立连接(减少延迟)</li>
<li>实现简单：无需维护连接状态</li>
<li>头部开销少</li>
<li>没有拥塞控制：应用更好的控制发送时间和速率</li>
</ul>
<br>

<ul>
<li>常用于流媒体应用</li>
<li>UDP还用于<ul>
<li>DNS</li>
<li>SNMP</li>
</ul>
</li>
<li>在UDP实现可靠传输<ul>
<li>在应用层添加可靠性机制</li>
<li>应用特定的错误恢复机制</li>
</ul>
</li>
</ul>
<p><img src="UDP.png" alt=""></p>
<h3 id="UDP校验和-checksum"><a href="#UDP校验和-checksum" class="headerlink" title="UDP校验和(checksum)"></a>UDP校验和(checksum)</h3><p>目的： 检测UDP段在传输中是否发生错误。</p>
<p>发送方：</p>
<ul>
<li>将段的内容视为16-bit整数</li>
<li>校验和计算：计算所有整数的和，进位加在和的后面，将得到的值按位求反，得到校验和</li>
<li>发送方将校验和放入校验和字段</li>
</ul>
<p>接收方：</p>
<ul>
<li>计算所收到段的校验和</li>
<li>将其与校验和字段进行对比<ul>
<li>不相等：检测出错误</li>
<li>相等：没有检测出错误（但可能有错误）</li>
</ul>
</li>
</ul>
<h2 id="可靠数据传输原理"><a href="#可靠数据传输原理" class="headerlink" title="可靠数据传输原理"></a>可靠数据传输原理</h2><blockquote>
<p>可靠传输：不丢、不乱、不错</p>
</blockquote>
<p><img src="%E5%8F%AF%E9%9D%A0%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93.png" alt=""></p>
<h3 id="rdt2-0"><a href="#rdt2-0" class="headerlink" title="rdt2.0"></a>rdt2.0</h3><ul>
<li><p>底层信道可能翻转分组中的位(bit)</p>
<ul>
<li>利用<strong>校验和</strong>检测<strong>位错误</strong></li>
</ul>
</li>
<li><p>如何从错误中恢复？</p>
<ul>
<li>确认机制(<strong>Acknowledgements, ACK</strong>): 接收方显式地告知发送方分组已正确接收</li>
<li>NAK:接收方显式地告知发送方分组有错误</li>
<li>发送方收到NAK后，重传分组</li>
<li>基于这种重传机制的rdt协议称为<strong>ARQ</strong>(Automatic Repeat reQuest)协议</li>
</ul>
</li>
<li><p>Rdt 2.0中引入的新机制</p>
<ul>
<li>差错检测</li>
<li>接收方反馈控制消息: ACK/NAK</li>
<li>重传</li>
</ul>
</li>
</ul>
<h3 id="rdt2-1和2-2"><a href="#rdt2-1和2-2" class="headerlink" title="rdt2.1和2.2"></a>rdt2.1和2.2</h3><p><strong>rdt2.1</strong></p>
<ul>
<li><p><strong>如果ACK/NAK消息发生错误/被破坏(corrupted)会怎么样</strong>？</p>
<ul>
<li>为ACK/NAK增加校验和，检错并纠错</li>
<li>发送方收到被破坏ACK/NAK时不知道接收方发生了什么，添加额外的控制消息</li>
<li>如果ACK/NAK坏掉，发送方重传</li>
<li>不能简单的重传：产生重复分组</li>
</ul>
</li>
<li><p><strong>如何解决重复分组问题</strong>？</p>
<ul>
<li>序列号(<strong>Sequence number</strong>): 发送方给每个分组增加序列号</li>
<li>接收方丢弃重复分组</li>
</ul>
</li>
</ul>
<p><strong>rdt2.2</strong>：无NAK消息协议</p>
<ul>
<li>与rdt 2.1功能相同，但是只使用ACK</li>
<li>如何实现？<ul>
<li>接收方通过ACK告知最后一个被正确接收的分组</li>
<li>在ACK消息中显式地加入被确认分组的序列号</li>
<li>发送方收到重复ACK之后，采取与收到NAK消息相同的动作</li>
<li>重传当前分组</li>
</ul>
</li>
</ul>
<h3 id="rdt3-0"><a href="#rdt3-0" class="headerlink" title="rdt3.0"></a>rdt3.0</h3><p>如果信道既可能发生错误，也可能丢失分组，怎么办？</p>
<ul>
<li><p>“校验和+ 序列号+ ACK + 重传”够用吗？</p>
</li>
<li><p>方法：发送方等待“合理”时间</p>
<ul>
<li>如果没收到ACK，重传</li>
<li>如果分组或ACK只是延迟而不是丢了</li>
<li>重传会产生重复，序列号机制能够处理</li>
<li>接收方需在ACK中显式告知所确认的分组</li>
<li>需要定时器</li>
</ul>
</li>
</ul>
<p><img src="lost-package.png" alt=""><br><img src="lost-ack.png" alt=""><br><img src="premature-timeout.png" alt=""></p>
<h2 id="滑动窗口协议"><a href="#滑动窗口协议" class="headerlink" title="滑动窗口协议"></a>滑动窗口协议</h2><h2 id="面向连接的传输协议——TCP"><a href="#面向连接的传输协议——TCP" class="headerlink" title="面向连接的传输协议——TCP"></a>面向连接的传输协议——TCP</h2><h3 id="TCP概述"><a href="#TCP概述" class="headerlink" title="TCP概述"></a>TCP概述</h3><ul>
<li>点对点<ul>
<li>一个发送方一个接收方</li>
</ul>
</li>
<li>可靠的、按序的字节流</li>
<li>流水线机制<ul>
<li>TCP拥塞控制和流量控制机制设置窗口尺寸</li>
</ul>
</li>
<li>发送方/接收方缓存</li>
<li>全双工(full-duplex)<ul>
<li>同一连接中能够传输双向数据流</li>
</ul>
</li>
<li>面向连接<ul>
<li>通信双方必须在发送数据之前建立连接</li>
<li>连接状态只在连接的两端中维护，在沿途节点中并不维护</li>
<li>TCP连接包括：两台主机上的缓存、连接状态变量、socket等</li>
</ul>
</li>
<li>流量控制机制</li>
</ul>
<h3 id="TCP段结构"><a href="#TCP段结构" class="headerlink" title="TCP段结构"></a>TCP段结构</h3><p><img src="TCP%E6%AE%B5%E6%A0%BC%E5%BC%8F.png" alt=""><br><img src="TCP%E5%8C%85.bmp" alt=""></p>
<ul>
<li><p>序列号(sequence number)</p>
<ul>
<li>序列号指的是segment中第一个字节的编号，而不是segment的编号</li>
<li>建立TCP连接的时候，双方会随机选择序列号</li>
</ul>
</li>
<li><p>ACKS(acknowledgement number)</p>
<ul>
<li>希望接收到的下一个字节的序列号</li>
<li>累计确认：该序列号之前的所有字节均已经被正确接收到</li>
</ul>
</li>
</ul>
<p>Q：接收方如何处理乱序到达的segment？</p>
<ul>
<li>A：TCP规范中没有规定，由TCP的实现者做出决策</li>
</ul>
<p><img src="%E7%AE%80%E5%8D%95telnet.png" alt=""></p>
<h2 id="TCP可靠数据传输"><a href="#TCP可靠数据传输" class="headerlink" title="TCP可靠数据传输"></a>TCP可靠数据传输</h2><ul>
<li>TCP在IP层提供的不可靠服务基础上实现可靠数据传输服务</li>
<li>流水线机制</li>
<li>累计确认</li>
<li>TCP使用单一重传定时器</li>
<li>出发重传的事件<ul>
<li>超时</li>
<li>收到重复ACK</li>
</ul>
</li>
<li>渐进式<ul>
<li>暂不考虑重复ACK</li>
<li>暂不考虑流量控制</li>
<li>暂不考虑拥塞控制</li>
</ul>
</li>
</ul>
<h3 id="TCP-RTT和超时"><a href="#TCP-RTT和超时" class="headerlink" title="TCP RTT和超时"></a>TCP RTT和超时</h3><ul>
<li>EstimatedRTT = (1- α) * EstimatedRTT + α*SampleRTT</li>
</ul>
<blockquote>
<p>指数加权移动平均典型值：0.125</p>
</blockquote>
<ul>
<li>定时器超时时间的设置：<ul>
<li>EstimatedRTT+“安全边界”</li>
<li>EstimatedRTT变化大→较大的边界</li>
</ul>
</li>
<li>测量RTT的变化值: SampleRTT与EstimatedRTT的差值<ul>
<li>DevRTT = (1- β) * DevRTT + β * |SampleRTT-EstimatedRTT|</li>
<li>(typically, β = 0.25)</li>
</ul>
</li>
<li>定时器超时时间的设置：<ul>
<li>TimeoutInterval = EstimatedRTT + 4*DevRTT</li>
</ul>
</li>
</ul>
<h3 id="TCP发送方事件"><a href="#TCP发送方事件" class="headerlink" title="TCP发送方事件"></a>TCP发送方事件</h3><ul>
<li>创建segment</li>
<li>序列号是segment第一个字节的编号</li>
<li>开启计时器</li>
<li>设置超时时间TimeoutInterval</li>
<li>超时<ul>
<li>重传引起超时的segment</li>
<li>重启定时器</li>
</ul>
</li>
<li>收到ACK<ul>
<li>如果确认此前未确认的segment<ul>
<li>更新sendbase</li>
<li>如果窗口中还有未确认的分组，重新启动定时器</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="TCP%E9%87%8D%E4%BC%A0%E7%A4%BA%E4%BE%8B.png" alt=""><br><img src="TCP%E9%87%8D%E4%BC%A0%E7%A4%BA%E4%BE%8B1.png" alt=""></p>
<h4 id="快速重传机制"><a href="#快速重传机制" class="headerlink" title="快速重传机制"></a>快速重传机制</h4><ul>
<li>TCP的实现中，如果发生超时，超时时间间隔将重新设置，即将超时时间间隔加倍，导致其很大<ul>
<li>重发丢失的分组之前要等待很长时间</li>
</ul>
</li>
<li>通过重复的ACK来检测分组丢失<ul>
<li>Sender会背靠背的发送多个分组</li>
<li>如果某个分组丢失，可能会引发多个重复的ACK</li>
</ul>
</li>
<li>如果sender收到对同一数据的3个ACK，则假定该数据之后的段已经丢失<ul>
<li>快速重传：在定时器超时之前即进行重传</li>
</ul>
</li>
</ul>
<h3 id="TCP流量控制"><a href="#TCP流量控制" class="headerlink" title="TCP流量控制"></a>TCP流量控制</h3><ul>
<li><p>接收方为TCP连接分配buffer</p>
<ul>
<li>上层应用可能处理buffer中数据较慢<br><img src="buffer1.png" alt=""></li>
</ul>
</li>
<li><p>发送方不会传输的太多、太快以至于淹没接收方（buffer溢出）</p>
</li>
<li><p>速度匹配机制</p>
</li>
<li><p>(假定TCP receiver丢弃乱序的segments)</p>
<ul>
<li>Buffer中的可用空间(spareroom)<br>= RcvWindow  <br><br>= RcvBuffer-[LastByteRcvd -LastByteRead]</li>
</ul>
</li>
<li><p>Receiver通过在Segment的头部字段将RcvWindow 告诉Sender</p>
</li>
<li><p>Sender限制自己已经发送的但还未收到ACK的数据不超过接收方的空闲RcvWindow尺寸</p>
</li>
<li><p>Receiver告知Sender  RcvWindow=0,会出现什么情况？</p>
<ul>
<li>会出现卡死，发送方不发数据了。</li>
</ul>
</li>
</ul>
<h3 id="TCP连接管理"><a href="#TCP连接管理" class="headerlink" title="TCP连接管理"></a>TCP连接管理</h3><ul>
<li>TCP sender和receiver在传输数据前需要<strong>建立连接</strong></li>
<li>初始化TCP变量<ul>
<li>Seq. #</li>
<li>Buffer和流量控制信息</li>
</ul>
</li>
<li>Client：连接发起者<ul>
<li>Socket clientSocket = new</li>
<li>Socket(“hostname”,”port number”);</li>
</ul>
</li>
<li>Server: 等待客户连接请求<ul>
<li>Socket connectionSocket =</li>
<li>welcomeSocket.accept();</li>
</ul>
</li>
</ul>
<p><font style="color:blue"><strong>TCP连接的三次握手</strong></font></p>
<p><img src="TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.bmp" alt=""></p>
<ul>
<li>第一次握手(SYN=1, seq=x):</li>
</ul>
<p>客户端发送一个 TCP 的 SYN 标志位置1的包，指明客户端打算连接的服务器的端口，以及初始序号 X,保存在包头的序列号(Sequence Number)字段里。</p>
<p>发送完毕后，客户端进入 SYN_SEND 状态。</p>
<ul>
<li>第二次握手(SYN=1, ACK=1, seq=y, ACKnum=x+1):</li>
</ul>
<p>服务器发回确认包(ACK)应答。即 SYN 标志位和 ACK 标志位均为1。服务器端选择自己 ISN 序列号，放到 Seq 域里，同时将确认序号(Acknowledgement Number)设置为客户的 ISN 加1，即X+1。 发送完毕后，服务器端进入 SYN_RCVD 状态。</p>
<ul>
<li>第三次握手(ACK=1，ACKnum=y+1)</li>
</ul>
<p>客户端再次发送确认包(ACK)，SYN 标志位为0，ACK 标志位为1，并且把服务器发来 ACK 的序号字段+1，放在确定字段中发送给对方，并且在数据段放写ISN的+1</p>
<p>发送完毕后，客户端进入 ESTABLISHED 状态，当服务器端接收到这个包时，也进入 ESTABLISHED 状态，TCP 握手结束。</p>
<p><strong>为什么需要三次握手？</strong></p>
<p>为了防止已经失效的连接请求报文段突然又传到服务端，因而产生错误”，这种情况是：</p>
<p>一端(client)A发出去的第一个连接请求报文并没有丢失，而是因为某些未知的原因在某个网络节点上发生滞留，导致延迟到连接释放以后的某个时间才到达另一端(server)B。本来这是一个早已失效的报文段，但是B收到此失效的报文之后，会误认为是A再次发出的一个新的连接请求，于是B端就向A又发出确认报文，表示同意建立连接。如果不采用“三次握手”，那么只要B端发出确认报文就会认为新的连接已经建立了，但是A端并没有发出建立连接的请求，因此不会去向B端发送数据，B端没有收到数据就会一直等待，这样B端就会白白浪费掉很多资源。如果采用“三次握手”的话就不会出现这种情况，B端收到一个过时失效的报文段之后，向A端发出确认，此时A并没有要求建立连接，所以就不会向B端发送确认，这个时候B端也能够知道连接没有建立。</p>
<p>问题的本质是，信道是不可靠的，但是我们要建立可靠的连接发送可靠的数据，也就是数据传输是需要可靠的。在这个时候三次握手是一个理论上的最小值，并不是说是tcp协议要求的，而是为了满足在不可靠的信道上传输可靠的数据所要求的。</p>
<p><strong>第二次握手是否会分配资源</strong></p>
<p>ACK没发过来的话，资源会保留一段时间，确认连接不需要 再释放。</p>
<p><strong>不执行第三次握手会怎么样？</strong></p>
<blockquote>
<p>详解可参考：<a href="https://zhuanlan.zhihu.com/p/86426969" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/86426969</a></p>
</blockquote>
<p><font style="color:blue"><strong>TCP连接的四次挥手</strong></font></p>
<ul>
<li>第一次挥手(FIN=1，seq=x)</li>
</ul>
<p>假设客户端想要关闭连接，客户端发送一个 FIN 标志位置为1的包，表示自己已经没有数据可以发送了，但是仍然可以接受数据。</p>
<p>发送完毕后，客户端进入 FIN_WAIT_1 状态。</p>
<ul>
<li>第二次挥手(ACK=1，ACKnum=x+1)</li>
</ul>
<p>服务器端确认客户端的 FIN 包，发送一个确认包，表明自己接受到了客户端关闭连接的请求，但还没有准备好关闭连接。</p>
<p>发送完毕后，服务器端进入 CLOSE_WAIT 状态，客户端接收到这个确认包之后，进入 FIN_WAIT_2 状态，等待服务器端关闭连接。</p>
<ul>
<li>第三次挥手(FIN=1，seq=y)</li>
</ul>
<p>服务器端准备好关闭连接时，向客户端发送结束连接请求，FIN 置为1。</p>
<p>发送完毕后，服务器端进入 LAST_ACK 状态，等待来自客户端的最后一个ACK。</p>
<ul>
<li>第四次挥手(ACK=1，ACKnum=y+1)</li>
</ul>
<p>客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 TIME_WAIT状态，等待可能出现的要求重传的 ACK 包。</p>
<p>服务器端接收到这个确认包之后，关闭连接，进入 CLOSED 状态。</p>
<p>客户端等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 CLOSED 状态。<br><img src="four-way-handshake.png" alt=""></p>
<p><strong>TCP为什么四次挥手？</strong></p>
<p>本质的原因是tcp是全双公的，要实现可靠的连接关闭，A发出结束报文FIN，收到B确认后A知道自己没有数据需要发送了，B知道A不再发送数据了，自己也不会接收数据了，但是此时A还是可以接收数据，B也可以发送数据；当B发出FIN报文的时候此时两边才会真正的断开连接，读写分开。</p>
<h2 id="拥塞控制管理"><a href="#拥塞控制管理" class="headerlink" title="拥塞控制管理"></a>拥塞控制管理</h2><h3 id="拥塞"><a href="#拥塞" class="headerlink" title="拥塞"></a>拥塞</h3><ul>
<li><p>非正式定义：太多发送主机发送了太多数据或发送速度太快，以至于网络无法处理。</p>
</li>
<li><p>表现：</p>
<ul>
<li>分组丢失(路由器缓存溢出)</li>
<li>分组延迟过大(路由器缓存中排队)</li>
</ul>
</li>
<li><p>拥塞控制(网络无法处理) vs 流量控制(接收方无法处理)</p>
</li>
</ul>
<h3 id="拥塞的代价和成因"><a href="#拥塞的代价和成因" class="headerlink" title="拥塞的代价和成因"></a>拥塞的代价和成因</h3><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9CMOOC_315_%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%861_%E9%A1%B5%E9%9D%A2_4.png" alt=""><br><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9CMOOC_315_%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%861_%E9%A1%B5%E9%9D%A2_5.png" alt=""><br><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9CMOOC_315_%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%861_%E9%A1%B5%E9%9D%A2_6.png" alt=""><br><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9CMOOC_315_%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%861_%E9%A1%B5%E9%9D%A2_7.png" alt=""><br><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9CMOOC_315_%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%861_%E9%A1%B5%E9%9D%A2_8.png" alt=""></p>
<h3 id="拥塞控制的方法"><a href="#拥塞控制的方法" class="headerlink" title="拥塞控制的方法"></a>拥塞控制的方法</h3><h4 id="端到端拥塞控制"><a href="#端到端拥塞控制" class="headerlink" title="端到端拥塞控制"></a>端到端拥塞控制</h4><ul>
<li>网络层不需要显式的提供帮助</li>
<li>端系统通过观察loss、delay等网络行为判断是否发生拥塞</li>
<li>TCP采用这种策略</li>
</ul>
<h4 id="网络辅助的拥塞控制"><a href="#网络辅助的拥塞控制" class="headerlink" title="网络辅助的拥塞控制"></a>网络辅助的拥塞控制</h4><ul>
<li>路由器向发送方显式的反馈网络拥塞信息</li>
<li>简单的拥塞指示</li>
<li>指示发送方应该采取何种速率</li>
</ul>
<h2 id="TCP拥塞控制的基本原理"><a href="#TCP拥塞控制的基本原理" class="headerlink" title="TCP拥塞控制的基本原理"></a>TCP拥塞控制的基本原理</h2><ul>
<li>sender限制发送速率</li>
</ul>
<p><img src="sender.png" alt=""></p>
<ul>
<li><p>CongWin</p>
<ul>
<li>动态调整以改变发送速率</li>
<li>反映所感知到的网络拥塞</li>
</ul>
</li>
<li><p>如何感知网络拥塞</p>
<ul>
<li>Loss事件=timeout 或 3个重复ACK</li>
<li>发生loss事件后，发送方降低速率</li>
</ul>
</li>
<li><p>如何合理的调整发送速率</p>
<ul>
<li>加性增–乘性减：AIMD</li>
<li>慢启动：SS</li>
</ul>
</li>
</ul>
<h4 id="加性增–乘性减：AIMD"><a href="#加性增–乘性减：AIMD" class="headerlink" title="加性增–乘性减：AIMD"></a>加性增–乘性减：AIMD</h4><ul>
<li>原理：逐渐增加发送速率，谨慎探测可用带宽，直到发生loss</li>
<li>方法: AIMD<ul>
<li>Additive Increase: 每个RTT将CongWin增大一个MSS(最大段的长度)——拥塞避免</li>
<li>Multiplicative Decrease: 发生loss后将CongWin减半</li>
</ul>
</li>
</ul>
<h4 id="TCP慢启动-SS"><a href="#TCP慢启动-SS" class="headerlink" title="TCP慢启动: SS"></a>TCP慢启动: SS</h4><ul>
<li><p>TCP连接建立时，CongWin=1</p>
<ul>
<li>例：MSS=500 byte,RTT=200msec</li>
<li>初始速率=20k bps</li>
</ul>
</li>
<li><p>可用带宽可能远远高于初始<br>速率：</p>
<ul>
<li>希望快速增长</li>
</ul>
</li>
<li><p>原理：当连接开始时，指数性增长</p>
</li>
</ul>
<p>慢启动算法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">initialize: Congwin &#x3D; 1</span><br><span class="line">for (each segment ACKed)</span><br><span class="line">  Congwin++</span><br><span class="line">until (loss event OR</span><br><span class="line">  CongWin &gt; threshold)</span><br></pre></td></tr></table></figure>

<ul>
<li>指数性增长<ul>
<li>每个RTT将CongWin翻倍</li>
<li>收到每个ACK进行操作</li>
</ul>
</li>
<li>初始速率很慢，但是快速攀升</li>
</ul>
<p><img src="ss.png" alt=""></p>
<p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9CMOOC_317_TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6_%E9%A1%B5%E9%9D%A2_07.png" alt=""></p>
<h4 id="loss事件的处理"><a href="#loss事件的处理" class="headerlink" title="loss事件的处理"></a>loss事件的处理</h4><ul>
<li><p>3个重复的ACKs</p>
<ul>
<li>CongWin切到一半</li>
<li>然后线性增长</li>
</ul>
</li>
<li><p>Timeout事件</p>
<ul>
<li>CongWin直接设为1个MSS</li>
<li>然后指数增长</li>
<li>达到threshold后, 再线性增长</li>
</ul>
</li>
<li><p>3个重复ACKs表示网络<br>还能够传输一些segments</p>
</li>
<li><p>timeout事件表明拥塞更为严重</p>
</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>当CongWin低于Treshhold时，发送器处于慢启动阶段，窗口CongWin呈指数增长。<br>当CongWin 高于 Threshold, 发送 方 在 拥塞 避免 阶段, 窗口CongWin线性增长。<br>当3个重复 的ACK 产生, Threshold = CongWin/2，CongWin = Threshold。<br>出现超时时, Threshold  = CongWin/2 和 CongWin 设为1MSS。</p>
<p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9CMOOC_317_TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6_%E9%A1%B5%E9%9D%A2_12.png" alt=""></p>
<p>练习：</p>
<p>1.<br>假设主机A向主机B发送5个连续的报文段，主机B对每个报文段进行确认，其中第二个报文段丢失，其余报文段以及重传的第二个报文段均被主机B正确接收，主机A正确接收所有ACK报文段；报文段从1开始依次连续编号（即1、2、3……），主机A的超时时间足够长。请回答下列问题：</p>
<p>1).如果分别采用GBN、SR和TCP协议，则对应这三个协议，主机A分别总共发了多少个报文段？主机B分别总共发送了多少个ACK？它们的序号是什么？(针对3个协议分别给出解答）</p>
<p>2).如果对上述三个协议，超时时间比5RTT长得多，那么哪个协议将在最短的时间间隔内成功交付5个报文段？</p>
<p>答：</p>
<p>采用GBN协议时：</p>
<pre><code>​A共发送9个报文段；首先发送1,2,3,4,5，后来重发2,3,4,5。

B共发送8个ACK；先是4个ACK1，然后是ACK2, ACK3, ACK4, ACK5.</code></pre><p>采用SR协议时：</p>
<pre><code>A共发送6个报文段；首先发送1，2，3，4，5，然后重发2。

​B共发送5个ACK；先发送ACK1，ACK3, ACK4, ACK5，然后是ACK2。</code></pre><p>采用TCP协议时：</p>
<pre><code>A共发送6个报文段；首先发送1，2，3，4，5，然后重发2。

B共发送5个ACK；先发送4个ACK2，然后发送1个ACK6。</code></pre><p>2).TCP协议；因为TCP有快速重传机制（即在未超时情况下就开始重传丢失的2号报文段）。</p>
<p>2.</p>
<p>假设A、B两个端系统通过唯一的一条8Mbps链路连接（M=10^6），该链路的双向传播时延是150ms；A通过一个TCP连接向B发送一个大文件，B的接收缓存足够大，每个TCP段最大段长度（MSS）为1500字节，TCP采用Reno版本，且总是处于拥塞避免阶段（即忽略慢启动）。请回答下列问题：</p>
<p>1).该TCP连接能够获得的最大窗口尺寸（以TCP段数计）是多少？</p>
<p>2).该TCP连接的平均窗口尺寸（以TCP段数计）和平均吞吐量（以bps计）是多少？</p>
<p>3).该TCP连接的拥塞窗口从发生丢包到恢复到最大窗口尺寸要经历多长时间？</p>
<p>答：</p>
<p>1)设W是最大窗口尺寸，当最大发送速率超过链路带宽时会发生丢包，因此：W*MSS/RTT=8Mbps，于是W=100。</p>
<p>2)拥塞窗口从W/2到W之间变化，平均窗口尺寸：W’=0.75W=75；因此平均吞吐量为：75<em>1500</em>8/0.15=6Mbps。</p>
<p>3)0.15*100/2=7.5秒，因为每个RTT窗口尺寸增加1个MSS。</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>网络应用</title>
    <url>/2020/03/18/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<hr>
<ul>
<li><p>网络应用体系结构</p>
<ul>
<li>客户机/服务器</li>
<li>P2P(点对点结构 )</li>
<li>混合结构<a id="more"></a></li>
</ul>
</li>
<li><p>网络应用的服务需求</p>
<ul>
<li>可靠性</li>
<li>带宽</li>
<li>时延</li>
</ul>
</li>
<li><p><strong>Internet传输层服务模型</strong></p>
<ul>
<li>TCP</li>
<li>UDP</li>
</ul>
</li>
<li><p><strong>特定网络应用协议</strong></p>
<ul>
<li>HTTP</li>
<li>SMTP,POP,IMAP</li>
<li>DNS</li>
<li>P2P应用</li>
</ul>
</li>
<li><p><strong>Socket编程</strong></p>
<ul>
<li>TCP</li>
<li>UDP</li>
</ul>
</li>
</ul>
<h3 id="1-网络应用体系结构"><a href="#1-网络应用体系结构" class="headerlink" title="1. 网络应用体系结构"></a>1. 网络应用体系结构</h3><ul>
<li>客户机/服务器<ul>
<li>服务器<ul>
<li>7*24小时提供服务</li>
<li>永久性访问地址/域名</li>
<li>利用大量服务器实现可拓展性</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code>- 客户机
  - 与服务器通信，使用服务器提供的服务
  - 间歇性接入网络
  - 可能使用动态IP地址
  - 不会与其他客户机直接通信</code></pre><ul>
<li><p>P2P(点对点结构)</p>
<ul>
<li>纯P2P结构<ul>
<li>没有永远在线的服务器</li>
<li>任意端系统/节点之间可以直接通信</li>
<li>节点间歇性接入网络</li>
<li>节点可能改变IP地址</li>
</ul>
</li>
</ul>
</li>
<li><p>混合结构</p>
</li>
</ul>
<h3 id="2-网络应用进程通信"><a href="#2-网络应用进程通信" class="headerlink" title="2. 网络应用进程通信"></a>2. 网络应用进程通信</h3><p><strong>网络应用的基础：进程间通信。</strong></p>
<p>进程：主机上运行的程序。</p>
<p>同一主机上运行的进程之间如何通信？</p>
<ul>
<li>进程间通信机制</li>
<li>操作系统提供</li>
</ul>
<p>不同主机上运行的进程间如何通信？</p>
<ul>
<li>消息交换</li>
</ul>
<p>客户机进程：发起通信间的进程。</p>
<p>服务器进程：等待通信请求的进程。</p>
<p><strong>套接字：Socket</strong></p>
<ul>
<li>进程间利用socket发送/接受消息</li>
<li>类似于寄信<ul>
<li>发送方将消息送到门外邮箱</li>
<li>发送方依赖传输基础设施将消息传到接收方所在主机，并送到接收方的门外。</li>
<li>接收方从门外获取信息</li>
</ul>
</li>
<li>传输基础设施向进程提供API<ul>
<li>传输协议的选择  </li>
<li>参数的设置</li>
</ul>
</li>
</ul>
<p><strong>寻址进程</strong></p>
<ul>
<li>不同主机上的进程间通信，每个进程必须拥有<strong>标识符</strong>。</li>
<li>寻址主机—— IP地址</li>
<li>端口号/port number<ul>
<li>为主机上每个需要通信的进程分配一个端口号</li>
<li><strong>HTTP Server：80</strong></li>
<li>Mail Server：25</li>
</ul>
</li>
<li>进程的标识符<ul>
<li><strong>IP地址+端口号</strong></li>
</ul>
</li>
</ul>
<h3 id="3-应用层协议"><a href="#3-应用层协议" class="headerlink" title="3. 应用层协议"></a>3. 应用层协议</h3><p> 网络应用需要遵循应用层协议。</p>
<p> 公开协议</p>
<ul>
<li>由RFC(<em>Request For Comments</em>)定义</li>
<li>允许互操作</li>
<li><strong>HTTP,SMTP……</strong></li>
</ul>
<p>私有协议</p>
<ul>
<li>多数P2P文件共享协议</li>
</ul>
<p><strong>应用层协议的内容</strong></p>
<ul>
<li>消息的类型<ul>
<li>请求消息</li>
<li>响应消息</li>
</ul>
</li>
<li>消息的语法(<em>syntax</em>)/格式<ul>
<li>字段</li>
</ul>
</li>
<li>字段的语义<ul>
<li>字段中信息的含义</li>
</ul>
</li>
<li>规则</li>
</ul>
<h3 id="4-网络应用对传输服务的需求"><a href="#4-网络应用对传输服务的需求" class="headerlink" title="4. 网络应用对传输服务的需求"></a>4. 网络应用对传输服务的需求</h3><p>数据丢失/可靠性</p>
<ul>
<li>某些网络应用能够容忍一定的数据丢失：网络电话</li>
<li>某些要求100%可靠：文件传输，telnet</li>
</ul>
<p>时延</p>
<p>带宽</p>
<h3 id="4-Internet提供的传输服务"><a href="#4-Internet提供的传输服务" class="headerlink" title="4. Internet提供的传输服务"></a>4. Internet提供的传输服务</h3><p><strong>TCP服务</strong></p>
<ul>
<li>面向连接：客户/服务器进程间需要建立连接</li>
<li>可靠的传输</li>
<li>流量控制：发送方不会发送速度过快，超过接收方的处理能力</li>
<li>拥塞控制：当网络负载过重时能够限制发送方的发送速度</li>
<li>不提供时间/延迟保障</li>
<li>不提供最小带宽保障</li>
</ul>
<p><strong>UDP服务</strong></p>
<ul>
<li>无连接</li>
<li>不可靠的数据传输</li>
<li>不提供：<ul>
<li>可靠性保障</li>
<li>流量控制</li>
<li>拥塞控制</li>
<li>延迟保障</li>
<li>带宽保障</li>
</ul>
</li>
</ul>
<h3 id="5-HTTP"><a href="#5-HTTP" class="headerlink" title="5. HTTP"></a>5. HTTP</h3><p>网页包含多个对象：</p>
<ul>
<li>对象：</li>
<li>基本HTML文件</li>
</ul>
<p>对象的寻址：</p>
<ul>
<li>URL(<em>uniform resource locator</em>):统一资源定位器 RFC1738</li>
<li>Schema：//host:port/path</li>
</ul>
<p><strong>HTTP协议</strong></p>
<ul>
<li>超文本传输协议</li>
<li>C/S结构(<em>client-server</em>)</li>
<li><strong>使用TCP传输协议</strong><ul>
<li>服务器在<strong>80端口</strong> 等待客户的请求</li>
<li>浏览器发起到服务器的TCP连接</li>
<li>服务器接受来自浏览器的TCP连接</li>
<li>浏览器与Web服务器交换HTTP消息</li>
<li>关闭TCP连接</li>
</ul>
</li>
<li><strong>无状态，不记录用户信息</strong><ul>
<li>服务器不维护任何有关客户端过去行为的信息</li>
</ul>
</li>
</ul>
<p>HTTP连接：</p>
<ul>
<li>非持久性连接<ul>
<li>每个TCP连接最多允许传输<strong>一</strong>个对象</li>
<li>HTTP 1.0 版本使用<strong>非持久性连接</strong></li>
<li>每个对象需要2个RTT，时间长</li>
<li>操作系统需要为每个TCP连接开销资源</li>
<li>浏览器打开多个并行TCP，对服务器造成负担</li>
</ul>
</li>
<li>持久性连接(<em>presistent http</em>)<ul>
<li>每个TCP连接允许传输<strong>多个</strong>对象</li>
<li>HTTP 1.1 版本默认使用<strong>持久性连接</strong></li>
<li>发送响应后，服务器保持TCP连接<ul>
<li><strong>无流水的持久性连接</strong><ul>
<li>客户端只有收到前一个响应后才发送新的请求</li>
<li>每个被引用的对象耗时一个RTT</li>
</ul>
</li>
<li>带有流水机制的持久性连接<ul>
<li>HTTP 1.1的默认选项</li>
<li>客户端只要遇到一个引用对象就尽快发出请求</li>
<li>理想情况下，收到所有的引用对象只需耗时1个RTT</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>相应事件分析与建模：</p>
<ul>
<li>RTT(<em>Round Trip Time</em>)</li>
<li>响应时间<ul>
<li>发起、建立TCP连接</li>
<li>发送HTTP请求消息到HTTP响应消息的前几个字节到达</li>
<li>响应消息中所包含的文件/对象传输时间</li>
<li>total=2RTT + 文件发送时间</li>
</ul>
</li>
</ul>
<p><strong>HTTP请求消息</strong></p>
<ul>
<li>HTTP协议有两类消息<ul>
<li>请求消息<br><img src="HTTP%E8%AF%B7%E6%B1%82%E6%B6%88%E6%81%AF.png" alt=""></li>
<li>响应消息<br><img src="HTTP%E5%93%8D%E5%BA%94%E6%B6%88%E6%81%AF.png" alt=""></li>
</ul>
</li>
</ul>
<ul>
<li>请求消息<ul>
<li>ASCII：人直接可读</li>
</ul>
</li>
</ul>
<p><strong>上传输入的方法</strong></p>
<ul>
<li><strong>POST方法</strong><ul>
<li>网页经常需要填写表格</li>
<li>在请求消息的消息体(<em>entity body</em>)中上传客户端的输入</li>
</ul>
</li>
<li><strong>URL方法</strong><ul>
<li>使用<strong>GET</strong>方法</li>
<li>输入消息通过request行的URL字段上传</li>
</ul>
</li>
<li><strong>HEAD</strong><ul>
<li>请求Server不要将所请求的对象放入响应消息中</li>
</ul>
</li>
<li><strong>PUT(HTTP/1.1)</strong><ul>
<li>将消息体中的文件上传到URL字段所指定的路径</li>
</ul>
</li>
<li><strong>DELETE(HTTP/1.1)</strong><ul>
<li>删除URL字段指定的文件</li>
</ul>
</li>
</ul>
<p><strong>HTTP响应状态代码</strong></p>
<ul>
<li>响应消息的第一行</li>
<li>示例：<ul>
<li>200 OK</li>
<li>301 Moved Permanently</li>
<li>400 Bad Request</li>
<li>404 Not Found</li>
<li>505 HTTP Version Not Supported</li>
<li>500 Internet Server Error</li>
</ul>
</li>
</ul>
<h3 id="6-Cookie"><a href="#6-Cookie" class="headerlink" title="6. Cookie"></a>6. Cookie</h3><p>为什么需要Cookie？</p>
<ul>
<li>HTTP协议无状态，很多应用需要服务器掌握客户端的状态，如网上购物</li>
</ul>
<p>Cookie技术：</p>
<ul>
<li>某些网站为了辨别用户身份、进行session跟踪而储存在本地终端上的数据(通常经过加密)。</li>
<li>RFC6265</li>
</ul>
<p><strong>Cookie组件：</strong></p>
<ul>
<li>HTTP响应消息的cookie头部行</li>
<li>HTTP请求消息的cookie头部行</li>
<li>保存在客户端主机上的cookie文件，由浏览器管理</li>
<li>Web服务器端的后台数据库</li>
</ul>
<p>Cookie的原理：</p>
<p>cookie能够用于：</p>
<ul>
<li>身份认证</li>
<li>购物车</li>
<li>推荐</li>
<li>web email</li>
<li>……</li>
<li>隐私问题</li>
</ul>
<h3 id="7-Web缓存-代理服务器技术"><a href="#7-Web缓存-代理服务器技术" class="headerlink" title="7. Web缓存/代理服务器技术"></a>7. Web缓存/代理服务器技术</h3><p>功能：</p>
<ul>
<li>在不访问服务器的前提下满足客户端的HTTP请求</li>
<li>缩短客户请求的响应时间</li>
<li>减少机构/组织的流量</li>
<li>在大范围实现有效的内容分发</li>
</ul>
<p>Web缓存/代理服务器技术</p>
<ul>
<li>用户设定浏览器通过缓存进行Web访问</li>
<li>浏览器向缓存/代理服务器发送所有的HTTP请求<ul>
<li>如果请求对象在缓存中，缓存返回对象</li>
<li>否则，缓存服务器向原始服务器发送HTTP 请求，获取对象，然后返回给客户端并保存该对象</li>
</ul>
</li>
<li>缓存既充当客户端，也充当服务器</li>
</ul>
<p>HTTP 的条件性Get方法</p>
<ul>
<li>如果缓存有最新的对象，则不需要发送请求对象</li>
<li>缓存：<ul>
<li>在HTTP请求消息中声明所持有版本的日期</li>
<li>If-modified-since:<date></li>
</ul>
</li>
<li>服务器<ul>
<li>如果缓存的版本是最新的，则响应消息中不包含对象</li>
<li>HTTP/1.0 304 Not Modified</li>
</ul>
</li>
</ul>
<h3 id="8-email应用"><a href="#8-email应用" class="headerlink" title="8. email应用"></a>8. email应用</h3><p>Email应用的构成组件</p>
<ul>
<li>异步应用</li>
<li>邮件客户端<ul>
<li>读、写Email消息</li>
<li>与服务器交互，收发Email信息</li>
<li>outlook……</li>
<li>web客户端</li>
</ul>
</li>
<li>邮件服务器<ul>
<li>邮箱：存储发给该客户的email</li>
<li>消息队列：存储等待发送的email</li>
</ul>
</li>
<li>SMTP协议(<em>Simple Mail Transfer Protocol</em>)<ul>
<li>邮件服务器之间传递消息所使用的协议</li>
<li>客户端：发送消息的服务器</li>
<li>服务器：接收消息的服务器</li>
<li>使用<strong>TCP</strong>进行email消息的可靠传输</li>
<li>端口25</li>
<li>传输过程的三个阶段<ul>
<li>握手</li>
<li>消息传输</li>
<li>关闭</li>
</ul>
</li>
<li><strong>命令/响应交互模式</strong><ul>
<li>命令(<em>command</em>):ASCII文本</li>
<li>响应(<em>response</em>):状态代码和语句</li>
<li>Email消息只能包含<strong>7</strong>位ASCII码</li>
</ul>
</li>
<li>使用持久性连接</li>
<li>SMTP服务器利用CRLF.CRLF确定消息的结束</li>
</ul>
</li>
</ul>
<p><strong>与HTTP 对比</strong>：</p>
<ul>
<li>HTTP：拉式(<em>pull</em>)</li>
<li>SMTP:退式(<em>push</em>)</li>
<li>都使用命令/响应交互模式</li>
<li>命令和状态代码都是ASCII代码</li>
<li>HTTP:每个对象封装在独立的响应消息中</li>
<li>SMTP：多个对象在由多个部分构成的消息中发送</li>
</ul>
<p>Email消息格式</p>
<ul>
<li><p>RFC 822</p>
<ul>
<li>头部行(<em>header</em>)<ul>
<li>To</li>
<li>From 与SMTP命令不同</li>
<li>Subject</li>
</ul>
</li>
<li>消息体(<em>body</em>)<ul>
<li>消息本身</li>
<li>只能说ASCII字符                     </li>
</ul>
</li>
</ul>
</li>
<li><p><strong>多媒体拓展</strong> RFC 2045 2056</p>
<ul>
<li>MIME：多媒体邮件拓展<ul>
<li>通过在有键头部增加额外的行以声明MIME的内容类型  <img src='./img/MIME.png'></li>
</ul>
</li>
</ul>
</li>
</ul>
<p>邮件访问协议：从服务器获取邮件</p>
<ul>
<li>POP：Post Office Protocal<ul>
<li>认证/授权和下载</li>
<li>IMAP：Internet Mail Access Protocal<ul>
<li>能够操纵服务器上存储的消息</li>
<li>所有消息统一保存在一个地方：服务器</li>
<li>允许用户利用文件夹组织信息</li>
<li>支持跨会话的用户状态</li>
</ul>
</li>
<li>HTTP：163， QQ Mail……</li>
</ul>
</li>
</ul>
<h3 id="9-DNS-Domain-Name-System"><a href="#9-DNS-Domain-Name-System" class="headerlink" title="9. DNS(Domain Name System)"></a>9. DNS(<em>Domain Name System</em>)</h3><p>Internet上主机/路由的识别问题</p>
<ul>
<li><strong>IP地址</strong></li>
<li><strong>域名</strong></li>
<li>域名和IP地址之间如何映射？<ul>
<li>域名解析系统DNS<ul>
<li>多层命名服务器构成的<strong>分布式层次式</strong>数据库</li>
<li>应用层协议：完成名字的解析<ul>
<li>Internet核心功能，用应用层协议实现</li>
<li>网络边界复杂</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>DNS服务</strong></p>
<ul>
<li>域名向IP地址的翻译</li>
<li>主机别名</li>
<li>邮件服务器别名</li>
<li>负载均衡：Web服务器</li>
</ul>
<p><strong>客户端想要查询<a href="http://www.amazon.com的IP" target="_blank" rel="noopener">www.amazon.com的IP</a></strong></p>
<ul>
<li>客户端查询根服务器</li>
<li>客户端查询com域名解析服务器，找到amazon.com域名解析服务器</li>
<li>客户端查询amazon.com域名解析服务器，获得<a href="http://www.amazon.com的IP地址" target="_blank" rel="noopener">www.amazon.com的IP地址</a></li>
</ul>
<p>DNS根域名服务器</p>
<ul>
<li>本地域名服务器无法解析域名时，访问根域名服务器</li>
<li>根域名服务器</li>
</ul>
<p>TLD和权威域名解析服务器</p>
<ul>
<li>顶级域名服务器(<em>top-level domain</em>)：负责com，org，net，edu等顶级域名和国家域名</li>
<li>权威域名解析服务器：组织的域名解析服务器，提供组织内部服务器的解析服务</li>
</ul>
<p><strong>本地域名解析服务器</strong></p>
<ul>
<li>不属于层级体系</li>
<li>每个ISP有一个本地域名服务器<ul>
<li>默认域名解析服务器</li>
</ul>
</li>
<li>当主机进行DNS查询时，查询被发到本地域名服务器作为代理，将查询转发给层级式域名解析服务器系统</li>
</ul>
<p>迭代查询</p>
<ul>
<li>被查询服务器返回域名解析服务器的名字</li>
</ul>
<p>递归查询</p>
<ul>
<li>将域名解析的任务交给所联系的服务器</li>
</ul>
<p>DNS记录缓存和更新</p>
<ul>
<li>只要域名解析服务器获得域名——IP映射，即缓存这一映射<ul>
<li>本地域名服务器一般缓存顶级域名服务器的映射</li>
</ul>
</li>
</ul>
<p>DNS记录：</p>
<ul>
<li>资源记录</li>
<li>Type=A<ul>
<li>name：主机域名</li>
<li>value：IP地址</li>
<li>Type=NS<ul>
<li>name：域(<em>edu.cn</em>)</li>
<li>value：该域权威域名解析服务器的主机域名</li>
</ul>
</li>
<li>Type=CNAME<ul>
<li>name：某一真实域名的别名</li>
<li>value：真实域名</li>
</ul>
</li>
<li>Type=MX<ul>
<li>value是与name相对应的邮件服务器</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>DNS协议：</p>
<ul>
<li>查询(<em>query</em>)和回复(<em>reply</em>)</li>
<li>消息格式相同<br>消息头部</li>
<li>identification：16位查询编号，回复使用相同编号</li>
<li>flags<ul>
<li>查询或回复</li>
<li>期望递归</li>
<li>递归可用</li>
<li>权威回答</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络概述</title>
    <url>/2020/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<hr>
<h3 id="1-计算机网络"><a href="#1-计算机网络" class="headerlink" title="1. 计算机网络"></a>1. 计算机网络</h3><p>计算机网络就是一互联的、自治的计算机集合。自治：无主从关系。通过交换网络互联主机。</p>
<p>计算机网络 = 通信技术+计算机技术</p>
<a id="more"></a>
<h3 id="2-计算机网络基础"><a href="#2-计算机网络基础" class="headerlink" title="2. 计算机网络基础"></a>2. 计算机网络基础</h3><p>协议是计算机网络有序运行的重要保证。</p>
<p><strong>硬件是计算机网络的基础。</strong></p>
<p>网络协议：协议规定了交换信息的格式、意义、顺序、针对收到的信息/发生的事件采取的actions。</p>
<p>协议的三要素：</p>
<pre><code>语法：
    数据与控制信息的结构或格式
    信号电平
语义：
    需要发出何种控制信息
    完成何种动作以及做出何种响应
    差错控制
时序：
    时间顺序
    协议匹配</code></pre><h3 id="3-计算机网络结构"><a href="#3-计算机网络结构" class="headerlink" title="3. 计算机网络结构"></a>3. 计算机网络结构</h3><p>网络边缘：主机、网络应用</p>
<pre><code>主机（端系统）：位于“网络边缘”、运行网络应用程序
客户/服务器应用模型：客户发送请求，接收服务器响应</code></pre><p>接入网络，物理介质：有线/无线通信链路</p>
<p><strong>网络核心（核心网络）</strong>：互联网的路由器/分组转发设备、网络之网络</p>
<pre><code>互联网的路由器网络
网络核心的关键功能：路由+转发
网络核心解决的基本问题：数据交换</code></pre><p>网络结构：</p>
<pre><code>端系统通过接入ISP连接到Internet；接入ISP必须进一步互联；构成复杂的网络互连的网络。</code></pre><h3 id="4-网络核心"><a href="#4-网络核心" class="headerlink" title="4. 网络核心"></a>4. 网络核心</h3><p>最典型电路交换网络：电话网络</p>
<p>电路交换的三个阶段：</p>
<pre><code>建立连接（呼叫/电路建立）
通信
释放连接（拆除电路）</code></pre><p><strong>多路复用（multiplexing）</strong>，简称复用，是通信技术的基本概念。</p>
<p>链路/网络资源划分为“资源片”<br>    将资源片分配给各路“呼叫”<br>    每路呼叫独占分配到的资源片进行通信<br>    资源片可能闲置（无共享）</p>
<p>典型多路复用方法：<br>    频分多路复用FDM<br>    时分多路复用TDM<br>    波分多路复用WDM<br>    码分多路复用CDM：广泛应用于无线链路共享（如蜂窝网、卫星通信等）</p>
<h3 id="5-报文交换"><a href="#5-报文交换" class="headerlink" title="5. 报文交换"></a>5. 报文交换</h3><p><strong>报文</strong>：源（应用）发送信息整体.</p>
<p>报文交换：</p>
<pre><code>报文长度为M bits
链路宽度为R bps
每次传输报文需要M/R秒</code></pre><p>分组交换：传输延迟</p>
<pre><code>报文被拆得分为多个分组
分组长度为L bits
每个分组传输时延为L/R秒
跳步数：h
路由器数：n</code></pre><p>T = M/R+(h-1)L/R = M/R+NL/R</p>
<p>分组：报文分拆出来的一系列相对较小的数据包。</p>
<p>分组交换需要报文的拆分与重组,产生额外开销。</p>
<p><strong>报文交换与分组交换均采用存储-转发交换方式区别：</strong></p>
<pre><code>报文交换以完整报文进行“存储-转发”
分组交换以较小的分组进行“存储-转发”</code></pre><p>分组交换允许更多用户同时使用网络！–网络资源充分共享。适用于突发数据传输网络，可能产生拥塞(congestion)分组延迟和丢失。</p>
<h3 id="6-计算机网络性能"><a href="#6-计算机网络性能" class="headerlink" title="6. 计算机网络性能"></a>6. 计算机网络性能</h3><p><strong>速率</strong>：数据率/数据传输速率/比特率。速率往往是指额定速率/标称速率。</p>
<p>单位时间(秒)传输信息量，计算机网络中最重要的一个性能指标。</p>
<p><strong>时延</strong>：时延是指一个报文或分组从一个网络的一端传送到另一个端所需要的时间。</p>
<p><strong>带宽</strong>：原本指信号具有的频带宽度，即最高频率与最低频率之差，单位是赫兹。</p>
<p>网络的带宽通常是数字信道所能传送的最高数据率，单位：b/s（bps）。</p>
<p><strong>时延带宽积</strong> = 传播时延×带宽 = d<sub>prop</prop> × R(bits)</p>
<p>链路的时延带宽积又称为以比特为单位的链路长度。</p>
<p><strong>丢包：</strong></p>
<p>吞吐量/率：表示再发送端与接收端之间传送数据速率。</p>
<h3 id="7-计算机网络的体系结构：分层结构"><a href="#7-计算机网络的体系结构：分层结构" class="headerlink" title="7. 计算机网络的体系结构：分层结构"></a>7. 计算机网络的体系结构：分层结构</h3><ul>
<li><strong>OSI模型</strong>：<ul>
<li>7：应用层（Apllication）</li>
<li>6：表示层（Presentation）</li>
<li>5：会话层（Session）</li>
<li>4：传输层（Transport）</li>
<li>3：网络层（Network）</li>
<li>2：数据链路层（Data link）</li>
<li>1：物理层（Physical）</li>
</ul>
</li>
</ul>
<table style="text-align:center;border: 2px solid">
    <tr style="text-align:center;border: 2px solid">
        <td></td>
        <td>物理层</td>
        <td>数据链路层</td>
        <td>网络层</td>
        <td>传输层</td>
        <td>会话层</td>
        <td>表示层</td>
        <td>应用层</td>
    </tr>
    <tr>
        <td>功能</td>
        <td></td>
        <td>负责结点-结点数据传输</td>
        <td>源主机到目的主机数据分组交付;路由
        </td>
        <td>分段与重组，SAP寻址，流量控制</td>
        <td>对话控制，同步，最“薄”的一层</td>
        <td>数据表示转化，加密/解密，压缩/解压缩</td>
        <td>使用网络服务</td>
    </tr>
</table>

<h3 id="8-TCP-IP模型"><a href="#8-TCP-IP模型" class="headerlink" title="8. TCP/IP模型"></a>8. TCP/IP模型</h3><ul>
<li>5层参考模型<ul>
<li>应用层</li>
<li>传输层</li>
<li>网络层</li>
<li>数据链路层</li>
<li>物理层 </li>
</ul>
</li>
</ul>
<table style="text-align:center;border: 2px solid">
    <tr style="text-align:center;border: 2px solid">
        <td ></td>
        <td style="text-align:center;border: 2px solid">应用层</td>
        <td>传输层</td>
        <td>网络层</td>
        <td>数据链路层</td>
        <td>物理层</td>
    </tr>
    <tr>
        <td>功能</td>
        <td>支持各种网络应用;FTP,SMTP,HTTP</td>
        <td>进程-进程的数据传输;TCP,UDP</td>
        <td>源主机到目的主机的数据分组路由和转发;IP协议、路由协议</td>
        <td>相邻网络元素的数据传输;以太网，WIFI</td>
        <td>比特传输</td>
    </tr>
</table>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
</search>
